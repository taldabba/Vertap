
Vertap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  0800b008  0800b008  0001b008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8c0  0800b8c0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8c0  0800b8c0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8c0  0800b8c0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c0  0800b8c0  0001b8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8c4  0800b8c4  0001b8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b8c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000364  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000544  20000544  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012467  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221c  00000000  00000000  00032677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00034898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f08  00000000  00000000  00035888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d14  00000000  00000000  00036790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142c2  00000000  00000000  000584a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd3e4  00000000  00000000  0006c766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139b4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ac4  00000000  00000000  00139b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aff0 	.word	0x0800aff0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800aff0 	.word	0x0800aff0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <FIR_Filter_Init>:

#include "FIRfilter.h"

static const float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f,-0.0052635f,-0.0068811f,0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.0068811f,-0.0052635f};

void FIR_Filter_Init(FIRfilter* fir) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	// clear filter buffer
	for (uint8_t i=0; i<FIR_FILTER_LENGTH; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e009      	b.n	8000c7a <FIR_Filter_Init+0x22>
		fir->buf[i]=0.0f;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
	for (uint8_t i=0; i<FIR_FILTER_LENGTH; i++) {
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	3301      	adds	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d9f2      	bls.n	8000c66 <FIR_Filter_Init+0xe>
	}

	// reset index
	fir->bufIndex = 0;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// clear input
	fir->output = 0.0f;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <FIR_Filter_Update>:
float FIR_Filter_Update(FIRfilter* fir, float input) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	ed87 0a00 	vstr	s0, [r7]
	fir->buf[fir->bufIndex] = input;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	601a      	str	r2, [r3, #0]

	fir->bufIndex++;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (fir->bufIndex == FIR_FILTER_LENGTH) fir->bufIndex=0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cce:	2b10      	cmp	r3, #16
 8000cd0:	d103      	bne.n	8000cda <FIR_Filter_Update+0x3e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	fir->output = 0.0f;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
	uint8_t sumIndex = fir->bufIndex;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ce8:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i=0; i<FIR_FILTER_LENGTH;i++){
 8000cea:	2300      	movs	r3, #0
 8000cec:	73bb      	strb	r3, [r7, #14]
 8000cee:	e021      	b.n	8000d34 <FIR_Filter_Update+0x98>
		if(sumIndex>0) sumIndex--;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <FIR_Filter_Update+0x62>
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	e001      	b.n	8000d02 <FIR_Filter_Update+0x66>
		else sumIndex=FIR_FILTER_LENGTH-1;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	73fb      	strb	r3, [r7, #15]

		fir->output += FIR_IMPULSE_RESPONSE[i]*fir->buf[sumIndex];
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000d08:	7bbb      	ldrb	r3, [r7, #14]
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <FIR_Filter_Update+0xb4>)
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	edd3 6a00 	vldr	s13, [r3]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	for (uint8_t i=0; i<FIR_FILTER_LENGTH;i++){
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	3301      	adds	r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	2b0f      	cmp	r3, #15
 8000d38:	d9da      	bls.n	8000cf0 <FIR_Filter_Update+0x54>
	}

	return fir->output;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	ee07 3a90 	vmov	s15, r3
}
 8000d42:	eeb0 0a67 	vmov.f32	s0, s15
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	0800b04c 	.word	0x0800b04c

08000d54 <MPU6050_Init>:

// Declare user set (button) position variables
float userSetPhiPosition_deg;
float userSetThetaPosition_deg;

void MPU6050_Init(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af04      	add	r7, sp, #16
	uint8_t check=0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_WHO_AM_I, 1, &check, 1, 1000);
 8000d5e:	23d0      	movs	r3, #208	; 0xd0
 8000d60:	b299      	uxth	r1, r3
 8000d62:	2375      	movs	r3, #117	; 0x75
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	4827      	ldr	r0, [pc, #156]	; (8000e14 <MPU6050_Init+0xc0>)
 8000d78:	f001 fd1e 	bl	80027b8 <HAL_I2C_Mem_Read>

	if (check != VAL_WHO_AM_I) {
 8000d7c:	79fa      	ldrb	r2, [r7, #7]
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <MPU6050_Init+0xc4>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d003      	beq.n	8000d8e <MPU6050_Init+0x3a>
		printf("Could not find MPU6050!\r\n");
 8000d86:	4825      	ldr	r0, [pc, #148]	; (8000e1c <MPU6050_Init+0xc8>)
 8000d88:	f006 f89e 	bl	8006ec8 <puts>
 8000d8c:	e03e      	b.n	8000e0c <MPU6050_Init+0xb8>
		return;
	}

	printf("Found!\r\n");
 8000d8e:	4824      	ldr	r0, [pc, #144]	; (8000e20 <MPU6050_Init+0xcc>)
 8000d90:	f006 f89a 	bl	8006ec8 <puts>

	// Power IMU
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_PWR_MGMT_1, 1, &VAL_PWR_MGMT_1, 1, 1000);
 8000d94:	23d0      	movs	r3, #208	; 0xd0
 8000d96:	b299      	uxth	r1, r3
 8000d98:	236b      	movs	r3, #107	; 0x6b
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	2301      	movs	r3, #1
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MPU6050_Init+0xd0>)
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2301      	movs	r3, #1
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <MPU6050_Init+0xc0>)
 8000dae:	f001 fbef 	bl	8002590 <HAL_I2C_Mem_Write>

	// Set sampling rate of 1 kHz
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_SMPRT_DIV, 1, &VAL_SMPRT_DIV, 1, 1000);
 8000db2:	23d0      	movs	r3, #208	; 0xd0
 8000db4:	b299      	uxth	r1, r3
 8000db6:	2319      	movs	r3, #25
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MPU6050_Init+0xd4>)
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4812      	ldr	r0, [pc, #72]	; (8000e14 <MPU6050_Init+0xc0>)
 8000dcc:	f001 fbe0 	bl	8002590 <HAL_I2C_Mem_Write>

	// Set gyro config
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_GYRO_CONFIG, 1, &VAL_GYRO_CONFIG, 1, 1000);
 8000dd0:	23d0      	movs	r3, #208	; 0xd0
 8000dd2:	b299      	uxth	r1, r3
 8000dd4:	231b      	movs	r3, #27
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	2301      	movs	r3, #1
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MPU6050_Init+0xd8>)
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2301      	movs	r3, #1
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <MPU6050_Init+0xc0>)
 8000dea:	f001 fbd1 	bl	8002590 <HAL_I2C_Mem_Write>

	// Set accel config
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_ACCEL_CONFIG, 1, &VAL_ACCEL_CONFIG, 1, 1000);
 8000dee:	23d0      	movs	r3, #208	; 0xd0
 8000df0:	b299      	uxth	r1, r3
 8000df2:	231c      	movs	r3, #28
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MPU6050_Init+0xdc>)
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MPU6050_Init+0xc0>)
 8000e08:	f001 fbc2 	bl	8002590 <HAL_I2C_Mem_Write>

}
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001fc 	.word	0x200001fc
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	0800b008 	.word	0x0800b008
 8000e20:	0800b024 	.word	0x0800b024
 8000e24:	20000324 	.word	0x20000324
 8000e28:	20000001 	.word	0x20000001
 8000e2c:	20000325 	.word	0x20000325
 8000e30:	20000326 	.word	0x20000326

08000e34 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af04      	add	r7, sp, #16
	// Read accel values into buffer
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_ACCEL_XOUT_H, 1, Raw_Accel_Buffer, 6, 1000);
 8000e3a:	23d0      	movs	r3, #208	; 0xd0
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	233b      	movs	r3, #59	; 0x3b
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	9302      	str	r3, [sp, #8]
 8000e48:	2306      	movs	r3, #6
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	482f      	ldr	r0, [pc, #188]	; (8000f10 <MPU6050_Read_Accel+0xdc>)
 8000e54:	f001 fcb0 	bl	80027b8 <HAL_I2C_Mem_Read>

	// Seperate buffer into individual accel axis variables
	Raw_Accel_X = (int16_t)(Raw_Accel_Buffer[0]<<8 | Raw_Accel_Buffer[1]);
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MPU6050_Read_Accel+0xe0>)
 8000e6c:	801a      	strh	r2, [r3, #0]
	Raw_Accel_Y = (int16_t)(Raw_Accel_Buffer[2]<<8 | Raw_Accel_Buffer[3]);
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e70:	789b      	ldrb	r3, [r3, #2]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e78:	78db      	ldrb	r3, [r3, #3]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <MPU6050_Read_Accel+0xe4>)
 8000e82:	801a      	strh	r2, [r3, #0]
	Raw_Accel_Z = (int16_t)(Raw_Accel_Buffer[4]<<8 | Raw_Accel_Buffer[5]);
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e8e:	795b      	ldrb	r3, [r3, #5]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MPU6050_Read_Accel+0xe8>)
 8000e98:	801a      	strh	r2, [r3, #0]

	// Units converted from g to m/s^2
	Ax_raw = (Raw_Accel_X / 16384.0f)*g_TO_MPS2;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MPU6050_Read_Accel+0xe0>)
 8000e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000f20 <MPU6050_Read_Accel+0xec>
 8000eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f24 <MPU6050_Read_Accel+0xf0>
 8000eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MPU6050_Read_Accel+0xf4>)
 8000eba:	edc3 7a00 	vstr	s15, [r3]
	Ay_raw = (Raw_Accel_Y / 16384.0f)*g_TO_MPS2;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MPU6050_Read_Accel+0xe4>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ecc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000f20 <MPU6050_Read_Accel+0xec>
 8000ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000f24 <MPU6050_Read_Accel+0xf0>
 8000ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MPU6050_Read_Accel+0xf8>)
 8000ede:	edc3 7a00 	vstr	s15, [r3]
	Az_raw = (Raw_Accel_Z / 16384.0f)*g_TO_MPS2;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MPU6050_Read_Accel+0xe8>)
 8000ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f20 <MPU6050_Read_Accel+0xec>
 8000ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f24 <MPU6050_Read_Accel+0xf0>
 8000efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MPU6050_Read_Accel+0xfc>)
 8000f02:	edc3 7a00 	vstr	s15, [r3]
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000328 	.word	0x20000328
 8000f10:	200001fc 	.word	0x200001fc
 8000f14:	20000336 	.word	0x20000336
 8000f18:	20000338 	.word	0x20000338
 8000f1c:	2000033a 	.word	0x2000033a
 8000f20:	46800000 	.word	0x46800000
 8000f24:	411cf5c3 	.word	0x411cf5c3
 8000f28:	20000344 	.word	0x20000344
 8000f2c:	20000348 	.word	0x20000348
 8000f30:	2000034c 	.word	0x2000034c

08000f34 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af04      	add	r7, sp, #16
	// Read gyro values
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_GYRO_XOUT_H, 1, Raw_Gyro_Buffer, 6, 1000);
 8000f3a:	23d0      	movs	r3, #208	; 0xd0
 8000f3c:	b299      	uxth	r1, r3
 8000f3e:	2343      	movs	r3, #67	; 0x43
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2306      	movs	r3, #6
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	4829      	ldr	r0, [pc, #164]	; (8000ff8 <MPU6050_Read_Gyro+0xc4>)
 8000f54:	f001 fc30 	bl	80027b8 <HAL_I2C_Mem_Read>

	// Seperate buffer into individual gyro axis variables
	Raw_Gyro_X = (int16_t)(Raw_Gyro_Buffer[0]<<8 | Raw_Gyro_Buffer[1]);
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <MPU6050_Read_Gyro+0xc8>)
 8000f6c:	801a      	strh	r2, [r3, #0]
	Raw_Gyro_Y = (int16_t)(Raw_Gyro_Buffer[2]<<8 | Raw_Gyro_Buffer[3]);
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f70:	789b      	ldrb	r3, [r3, #2]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f78:	78db      	ldrb	r3, [r3, #3]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MPU6050_Read_Gyro+0xcc>)
 8000f82:	801a      	strh	r2, [r3, #0]
	Raw_Gyro_Z = (int16_t)(Raw_Gyro_Buffer[4]<<8 | Raw_Gyro_Buffer[5]);
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f8e:	795b      	ldrb	r3, [r3, #5]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MPU6050_Read_Gyro+0xd0>)
 8000f98:	801a      	strh	r2, [r3, #0]

	// Units in deg/s
	Gyx_raw = Raw_Gyro_X / 131.0f;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MPU6050_Read_Gyro+0xc8>)
 8000f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001008 <MPU6050_Read_Gyro+0xd4>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MPU6050_Read_Gyro+0xd8>)
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
	Gyy_raw = Raw_Gyro_Y / 131.0f;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MPU6050_Read_Gyro+0xcc>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001008 <MPU6050_Read_Gyro+0xd4>
 8000fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <MPU6050_Read_Gyro+0xdc>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]
	Gyz_raw = Raw_Gyro_Z / 131.0f;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MPU6050_Read_Gyro+0xd0>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001008 <MPU6050_Read_Gyro+0xd4>
 8000fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MPU6050_Read_Gyro+0xe0>)
 8000fea:	edc3 7a00 	vstr	s15, [r3]
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000330 	.word	0x20000330
 8000ff8:	200001fc 	.word	0x200001fc
 8000ffc:	2000033c 	.word	0x2000033c
 8001000:	2000033e 	.word	0x2000033e
 8001004:	20000340 	.word	0x20000340
 8001008:	43030000 	.word	0x43030000
 800100c:	20000350 	.word	0x20000350
 8001010:	20000354 	.word	0x20000354
 8001014:	20000358 	.word	0x20000358

08001018 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001028:	d107      	bne.n	800103a <HAL_GPIO_EXTI_Callback+0x22>
		userSetPhiPosition_deg = phiHat_deg;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_GPIO_EXTI_Callback+0x30>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_GPIO_EXTI_Callback+0x34>)
 8001030:	6013      	str	r3, [r2, #0]
		userSetThetaPosition_deg = thetaHat_deg;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_GPIO_EXTI_Callback+0x38>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001038:	6013      	str	r3, [r2, #0]
	}
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000050c 	.word	0x2000050c
 800104c:	20000524 	.word	0x20000524
 8001050:	20000510 	.word	0x20000510
 8001054:	20000528 	.word	0x20000528

08001058 <__io_putchar>:

int __io_putchar(int ch)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001060:	1d39      	adds	r1, r7, #4
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	2201      	movs	r2, #1
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <__io_putchar+0x20>)
 800106a:	f004 fd97 	bl	8005b9c <HAL_UART_Transmit>
  return ch;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000029c 	.word	0x2000029c
 800107c:	00000000 	.word	0x00000000

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001084:	ed2d 8b04 	vpush	{d8-d9}
 8001088:	b08d      	sub	sp, #52	; 0x34
 800108a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f000 fe9a 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 fa4c 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f000 fba2 	bl	80017dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001098:	f000 fb70 	bl	800177c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800109c:	f000 faaa 	bl	80015f4 <MX_I2C1_Init>
  MX_TIM4_Init();
 80010a0:	f000 fae8 	bl	8001674 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 80010a4:	f7ff fe56 	bl	8000d54 <MPU6050_Init>
  FIR_Filter_Init(&lpfAccX);
 80010a8:	48d7      	ldr	r0, [pc, #860]	; (8001408 <main+0x388>)
 80010aa:	f7ff fdd5 	bl	8000c58 <FIR_Filter_Init>
  FIR_Filter_Init(&lpfAccY);
 80010ae:	48d7      	ldr	r0, [pc, #860]	; (800140c <main+0x38c>)
 80010b0:	f7ff fdd2 	bl	8000c58 <FIR_Filter_Init>
  FIR_Filter_Init(&lpfAccZ);
 80010b4:	48d6      	ldr	r0, [pc, #856]	; (8001410 <main+0x390>)
 80010b6:	f7ff fdcf 	bl	8000c58 <FIR_Filter_Init>

  // Estimate euler angles
  phiHat_deg = 0.0f;
 80010ba:	4bd6      	ldr	r3, [pc, #856]	; (8001414 <main+0x394>)
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
  thetaHat_deg = 0.0f;
 80010c2:	4bd5      	ldr	r3, [pc, #852]	; (8001418 <main+0x398>)
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]

  // Initalize user set positions
  userSetPhiPosition_deg = 0.0f;
 80010ca:	4bd4      	ldr	r3, [pc, #848]	; (800141c <main+0x39c>)
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
  userSetThetaPosition_deg = 0.0f;
 80010d2:	4bd3      	ldr	r3, [pc, #844]	; (8001420 <main+0x3a0>)
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]

  // Initalize error and its associated variables
  scaledRoll = 0.0f;
 80010da:	4bd2      	ldr	r3, [pc, #840]	; (8001424 <main+0x3a4>)
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
  scaledPitch = 0.0f;
 80010e2:	4bd1      	ldr	r3, [pc, #836]	; (8001428 <main+0x3a8>)
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
  scaledError = 0.0f;
 80010ea:	4bd0      	ldr	r3, [pc, #832]	; (800142c <main+0x3ac>)
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]

  // Initalize green and red pulse width value
  greenPulseWidth = 255;
 80010f2:	4bcf      	ldr	r3, [pc, #828]	; (8001430 <main+0x3b0>)
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	701a      	strb	r2, [r3, #0]
  redPulseWidth = 0;
 80010f8:	4bce      	ldr	r3, [pc, #824]	; (8001434 <main+0x3b4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]

  // Start PWM output for Green and Red (RGB LED)
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80010fe:	2104      	movs	r1, #4
 8001100:	48cd      	ldr	r0, [pc, #820]	; (8001438 <main+0x3b8>)
 8001102:	f003 fd23 	bl	8004b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001106:	2108      	movs	r1, #8
 8001108:	48cb      	ldr	r0, [pc, #812]	; (8001438 <main+0x3b8>)
 800110a:	f003 fd1f 	bl	8004b4c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 800110e:	f7ff fe91 	bl	8000e34 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001112:	f7ff ff0f 	bl	8000f34 <MPU6050_Read_Gyro>

	  // Update FIR accel values
	  FIR_Filter_Update(&lpfAccX, Ax_raw);
 8001116:	4bc9      	ldr	r3, [pc, #804]	; (800143c <main+0x3bc>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb0 0a67 	vmov.f32	s0, s15
 8001120:	48b9      	ldr	r0, [pc, #740]	; (8001408 <main+0x388>)
 8001122:	f7ff fdbb 	bl	8000c9c <FIR_Filter_Update>
	  FIR_Filter_Update(&lpfAccY, Ay_raw);
 8001126:	4bc6      	ldr	r3, [pc, #792]	; (8001440 <main+0x3c0>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	eeb0 0a67 	vmov.f32	s0, s15
 8001130:	48b6      	ldr	r0, [pc, #728]	; (800140c <main+0x38c>)
 8001132:	f7ff fdb3 	bl	8000c9c <FIR_Filter_Update>
	  FIR_Filter_Update(&lpfAccZ, Az_raw);
 8001136:	4bc3      	ldr	r3, [pc, #780]	; (8001444 <main+0x3c4>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	48b3      	ldr	r0, [pc, #716]	; (8001410 <main+0x390>)
 8001142:	f7ff fdab 	bl	8000c9c <FIR_Filter_Update>

	  // Calculate phi (roll) and theta (pitch) estimate values with accel
	  float phiHat_acc_deg = atanf(lpfAccY.output / lpfAccZ.output) * RAD_TO_DEG;
 8001146:	4bb1      	ldr	r3, [pc, #708]	; (800140c <main+0x38c>)
 8001148:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800114c:	4bb0      	ldr	r3, [pc, #704]	; (8001410 <main+0x390>)
 800114e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001152:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001156:	eeb0 0a66 	vmov.f32	s0, s13
 800115a:	f007 ff67 	bl	800902c <atanf>
 800115e:	eef0 7a40 	vmov.f32	s15, s0
 8001162:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001448 <main+0x3c8>
 8001166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116a:	edc7 7a05 	vstr	s15, [r7, #20]
	  float thetaHat_acc_deg = asinf(lpfAccX.output / g_TO_MPS2) * RAD_TO_DEG;
 800116e:	4ba6      	ldr	r3, [pc, #664]	; (8001408 <main+0x388>)
 8001170:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001174:	eddf 6ab5 	vldr	s13, [pc, #724]	; 800144c <main+0x3cc>
 8001178:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800117c:	eeb0 0a47 	vmov.f32	s0, s14
 8001180:	f008 f982 	bl	8009488 <asinf>
 8001184:	eef0 7a40 	vmov.f32	s15, s0
 8001188:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8001448 <main+0x3c8>
 800118c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001190:	edc7 7a04 	vstr	s15, [r7, #16]

	  // Update FIR gyro values
	  FIR_Filter_Update(&lpfGyrX, Gyx_raw);
 8001194:	4bae      	ldr	r3, [pc, #696]	; (8001450 <main+0x3d0>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	48ad      	ldr	r0, [pc, #692]	; (8001454 <main+0x3d4>)
 80011a0:	f7ff fd7c 	bl	8000c9c <FIR_Filter_Update>
	  FIR_Filter_Update(&lpfGyrY, Gyy_raw);
 80011a4:	4bac      	ldr	r3, [pc, #688]	; (8001458 <main+0x3d8>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	48ab      	ldr	r0, [pc, #684]	; (800145c <main+0x3dc>)
 80011b0:	f7ff fd74 	bl	8000c9c <FIR_Filter_Update>
	  FIR_Filter_Update(&lpfGyrZ, Gyz_raw);
 80011b4:	4baa      	ldr	r3, [pc, #680]	; (8001460 <main+0x3e0>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	eeb0 0a67 	vmov.f32	s0, s15
 80011be:	48a9      	ldr	r0, [pc, #676]	; (8001464 <main+0x3e4>)
 80011c0:	f7ff fd6c 	bl	8000c9c <FIR_Filter_Update>

	  // Find phi (roll) and theta (pitch) rate of change
	  float phiDot_dps = lpfGyrX.output + tanf(thetaHat_deg) * (sinf(phiHat_deg)*lpfGyrY.output + cosf(phiHat_deg)*lpfGyrZ.output);
 80011c4:	4ba3      	ldr	r3, [pc, #652]	; (8001454 <main+0x3d4>)
 80011c6:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 80011ca:	4b93      	ldr	r3, [pc, #588]	; (8001418 <main+0x398>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	f008 f890 	bl	80092f8 <tanf>
 80011d8:	eeb0 9a40 	vmov.f32	s18, s0
 80011dc:	4b8d      	ldr	r3, [pc, #564]	; (8001414 <main+0x394>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	f008 f841 	bl	800926c <sinf>
 80011ea:	eeb0 7a40 	vmov.f32	s14, s0
 80011ee:	4b9b      	ldr	r3, [pc, #620]	; (800145c <main+0x3dc>)
 80011f0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80011f4:	ee67 8a27 	vmul.f32	s17, s14, s15
 80011f8:	4b86      	ldr	r3, [pc, #536]	; (8001414 <main+0x394>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001202:	f007 ffe7 	bl	80091d4 <cosf>
 8001206:	eeb0 7a40 	vmov.f32	s14, s0
 800120a:	4b96      	ldr	r3, [pc, #600]	; (8001464 <main+0x3e4>)
 800120c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001218:	ee69 7a27 	vmul.f32	s15, s18, s15
 800121c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001220:	edc7 7a03 	vstr	s15, [r7, #12]
	  float thetaDot_dps = cosf(phiHat_deg)*lpfGyrY.output - sinf(phiHat_deg)*lpfGyrZ.output;
 8001224:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <main+0x394>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	f007 ffd1 	bl	80091d4 <cosf>
 8001232:	eeb0 7a40 	vmov.f32	s14, s0
 8001236:	4b89      	ldr	r3, [pc, #548]	; (800145c <main+0x3dc>)
 8001238:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800123c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001240:	4b74      	ldr	r3, [pc, #464]	; (8001414 <main+0x394>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	eeb0 0a67 	vmov.f32	s0, s15
 800124a:	f008 f80f 	bl	800926c <sinf>
 800124e:	eeb0 7a40 	vmov.f32	s14, s0
 8001252:	4b84      	ldr	r3, [pc, #528]	; (8001464 <main+0x3e4>)
 8001254:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001260:	edc7 7a02 	vstr	s15, [r7, #8]

	  // Use comp filter to find phi (roll) and theta (pitch) angles
	  phiHat_deg = (COMP_FILT_ALPHA*phiHat_acc_deg) + ((1.0f-COMP_FILT_ALPHA)*(phiHat_deg + SAMPLE_TIME_MS * phiDot_dps));
 8001264:	edd7 7a05 	vldr	s15, [r7, #20]
 8001268:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001468 <main+0x3e8>
 800126c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800146c <main+0x3ec>
 8001278:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800127c:	4b65      	ldr	r3, [pc, #404]	; (8001414 <main+0x394>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001286:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001470 <main+0x3f0>
 800128a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <main+0x394>)
 8001294:	edc3 7a00 	vstr	s15, [r3]
	  thetaHat_deg = (COMP_FILT_ALPHA*thetaHat_acc_deg) + ((1.0f-COMP_FILT_ALPHA)*(thetaHat_deg + SAMPLE_TIME_MS * thetaDot_dps));
 8001298:	edd7 7a04 	vldr	s15, [r7, #16]
 800129c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001468 <main+0x3e8>
 80012a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a8:	eddf 6a70 	vldr	s13, [pc, #448]	; 800146c <main+0x3ec>
 80012ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <main+0x398>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012ba:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001470 <main+0x3f0>
 80012be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	4b54      	ldr	r3, [pc, #336]	; (8001418 <main+0x398>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]

	  // Calculate error
	  scaledRoll = SCALE_CONSTANT * fabs(phiHat_deg - userSetPhiPosition_deg);
 80012cc:	4b51      	ldr	r3, [pc, #324]	; (8001414 <main+0x394>)
 80012ce:	ed93 7a00 	vldr	s14, [r3]
 80012d2:	4b52      	ldr	r3, [pc, #328]	; (800141c <main+0x39c>)
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012dc:	eef0 7ae7 	vabs.f32	s15, s15
 80012e0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001474 <main+0x3f4>
 80012e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e8:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <main+0x3a4>)
 80012ea:	edc3 7a00 	vstr	s15, [r3]
	  scaledPitch = SCALE_CONSTANT * fabs(thetaHat_deg - userSetThetaPosition_deg);
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <main+0x398>)
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <main+0x3a0>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001302:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001474 <main+0x3f4>
 8001306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <main+0x3a8>)
 800130c:	edc3 7a00 	vstr	s15, [r3]
	  scaledError = sqrt( pow(scaledRoll,2) + pow(scaledPitch,2) );
 8001310:	4b44      	ldr	r3, [pc, #272]	; (8001424 <main+0x3a4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f91f 	bl	8000558 <__aeabi_f2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8001400 <main+0x380>
 8001322:	ec43 2b10 	vmov	d0, r2, r3
 8001326:	f008 f813 	bl	8009350 <pow>
 800132a:	ec55 4b10 	vmov	r4, r5, d0
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <main+0x3a8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f910 	bl	8000558 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001400 <main+0x380>
 8001340:	ec43 2b10 	vmov	d0, r2, r3
 8001344:	f008 f804 	bl	8009350 <pow>
 8001348:	ec53 2b10 	vmov	r2, r3, d0
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7fe ffa4 	bl	800029c <__adddf3>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	ec43 2b17 	vmov	d7, r2, r3
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	eef0 0a67 	vmov.f32	s1, s15
 8001364:	f008 f864 	bl	8009430 <sqrt>
 8001368:	ec53 2b10 	vmov	r2, r3, d0
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc22 	bl	8000bb8 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	4a2d      	ldr	r2, [pc, #180]	; (800142c <main+0x3ac>)
 8001378:	6013      	str	r3, [r2, #0]

	  // If error is beyond 90deg, automatically set error to 1 (assuming +-90deg is the span)
	  if(scaledRoll>1.0f || scaledPitch>1.0f) scaledError=1.0f;
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <main+0x3a4>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	dc09      	bgt.n	80013a2 <main+0x322>
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <main+0x3a8>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	dd03      	ble.n	80013aa <main+0x32a>
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <main+0x3ac>)
 80013a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013a8:	601a      	str	r2, [r3, #0]

	  // Calculate new LED colour PWM pulse widths
	  greenPulseWidth = (uint8_t)(COUNTER_PWM_LED - (scaledError * COUNTER_PWM_LED * SENSITIVITY_LED));
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <main+0x3ac>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001478 <main+0x3f8>
 80013b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001478 <main+0x3f8>
 80013c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80013d0:	793b      	ldrb	r3, [r7, #4]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <main+0x3b0>)
 80013d6:	701a      	strb	r2, [r3, #0]
	  redPulseWidth = (uint8_t)(scaledError * COUNTER_PWM_LED * SENSITIVITY_LED);
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <main+0x3ac>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001478 <main+0x3f8>
 80013e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80013f6:	793b      	ldrb	r3, [r7, #4]
 80013f8:	e040      	b.n	800147c <main+0x3fc>
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	00000000 	.word	0x00000000
 8001404:	40000000 	.word	0x40000000
 8001408:	2000035c 	.word	0x2000035c
 800140c:	200003a4 	.word	0x200003a4
 8001410:	200003ec 	.word	0x200003ec
 8001414:	2000050c 	.word	0x2000050c
 8001418:	20000510 	.word	0x20000510
 800141c:	20000524 	.word	0x20000524
 8001420:	20000528 	.word	0x20000528
 8001424:	20000518 	.word	0x20000518
 8001428:	2000051c 	.word	0x2000051c
 800142c:	20000520 	.word	0x20000520
 8001430:	20000514 	.word	0x20000514
 8001434:	20000515 	.word	0x20000515
 8001438:	20000250 	.word	0x20000250
 800143c:	20000344 	.word	0x20000344
 8001440:	20000348 	.word	0x20000348
 8001444:	2000034c 	.word	0x2000034c
 8001448:	42652ee6 	.word	0x42652ee6
 800144c:	411cf5c3 	.word	0x411cf5c3
 8001450:	20000350 	.word	0x20000350
 8001454:	20000434 	.word	0x20000434
 8001458:	20000354 	.word	0x20000354
 800145c:	2000047c 	.word	0x2000047c
 8001460:	20000358 	.word	0x20000358
 8001464:	200004c4 	.word	0x200004c4
 8001468:	3d4ccccd 	.word	0x3d4ccccd
 800146c:	3c23d70a 	.word	0x3c23d70a
 8001470:	3f733333 	.word	0x3f733333
 8001474:	3c80b990 	.word	0x3c80b990
 8001478:	437f0000 	.word	0x437f0000
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <main+0x490>)
 8001480:	701a      	strb	r2, [r3, #0]

	  // Change PWM duty cycles of green and red (change LED colour)
	  if (greenPulseWidth==0) {
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <main+0x494>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10d      	bne.n	80014a6 <main+0x426>
		  redPulseWidth=255;
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <main+0x490>)
 800148c:	22ff      	movs	r2, #255	; 0xff
 800148e:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,greenPulseWidth);
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <main+0x494>)
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <main+0x498>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,redPulseWidth);
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <main+0x490>)
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <main+0x498>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80014a4:	e009      	b.n	80014ba <main+0x43a>
	  }
	  else {
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,greenPulseWidth);
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <main+0x494>)
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <main+0x498>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	639a      	str	r2, [r3, #56]	; 0x38
	  	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,redPulseWidth);
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <main+0x490>)
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <main+0x498>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	63da      	str	r2, [r3, #60]	; 0x3c
//	  printf("%.3f,%.3f\r\n", Ax_raw, lpfAccX.output);
//	  printf("%.3f,%.3f\r\n", Ay_raw, lpfAccY.output);
//	  printf("%.3f,%.3f\r\n", Az_raw, lpfAccZ.output);
//	  printf("%.3f,%.3f,0.000\r\n",phiHat_deg,thetaHat_deg);
//	  printf("%u,%u,%.3f\r\n", greenPulseWidth, redPulseWidth, scaledError);
	  printf("%.3f,%.3f,0.000,%u,%u,%.3f\r\n",phiHat_deg,thetaHat_deg,greenPulseWidth, redPulseWidth, scaledError);
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <main+0x49c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f84a 	bl	8000558 <__aeabi_f2d>
 80014c4:	4680      	mov	r8, r0
 80014c6:	4689      	mov	r9, r1
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <main+0x4a0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f843 	bl	8000558 <__aeabi_f2d>
 80014d2:	4604      	mov	r4, r0
 80014d4:	460d      	mov	r5, r1
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <main+0x494>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461e      	mov	r6, r3
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <main+0x490>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <main+0x4a4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f836 	bl	8000558 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	9303      	str	r3, [sp, #12]
 80014f8:	9602      	str	r6, [sp, #8]
 80014fa:	e9cd 4500 	strd	r4, r5, [sp]
 80014fe:	4642      	mov	r2, r8
 8001500:	464b      	mov	r3, r9
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <main+0x4a8>)
 8001504:	f005 fc5a 	bl	8006dbc <iprintf>
	  // Delay to prevent freezing
	  HAL_Delay(1);
 8001508:	2001      	movs	r0, #1
 800150a:	f000 fcc1 	bl	8001e90 <HAL_Delay>
  {
 800150e:	e5fe      	b.n	800110e <main+0x8e>
 8001510:	20000515 	.word	0x20000515
 8001514:	20000514 	.word	0x20000514
 8001518:	20000250 	.word	0x20000250
 800151c:	2000050c 	.word	0x2000050c
 8001520:	20000510 	.word	0x20000510
 8001524:	20000520 	.word	0x20000520
 8001528:	0800b02c 	.word	0x0800b02c

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0a6      	sub	sp, #152	; 0x98
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001536:	2228      	movs	r2, #40	; 0x28
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f004 ffcc 	bl	80064d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2258      	movs	r2, #88	; 0x58
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f004 ffbe 	bl	80064d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	2302      	movs	r3, #2
 800155e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001564:	2310      	movs	r3, #16
 8001566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001578:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800157c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800158a:	4618      	mov	r0, r3
 800158c:	f001 fd7e 	bl	800308c <HAL_RCC_OscConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001596:	f000 f99d 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	230f      	movs	r3, #15
 800159c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159e:	2302      	movs	r3, #2
 80015a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b4:	2102      	movs	r1, #2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fdbc 	bl	8004134 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015c2:	f000 f987 	bl	80018d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <SystemClock_Config+0xc4>)
 80015c8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 ffe1 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80015e4:	f000 f976 	bl	80018d4 <Error_Handler>
  }
}
 80015e8:	bf00      	nop
 80015ea:	3798      	adds	r7, #152	; 0x98
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	00200022 	.word	0x00200022

080015f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_I2C1_Init+0x74>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_I2C1_Init+0x78>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_I2C1_Init+0x74>)
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <MX_I2C1_Init+0x7c>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_I2C1_Init+0x74>)
 800160c:	2201      	movs	r2, #1
 800160e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_I2C1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_I2C1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <MX_I2C1_Init+0x74>)
 8001630:	f000 ff1e 	bl	8002470 <HAL_I2C_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800163a:	f000 f94b 	bl	80018d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <MX_I2C1_Init+0x74>)
 8001642:	f001 fc8b 	bl	8002f5c <HAL_I2CEx_ConfigAnalogFilter>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800164c:	f000 f942 	bl	80018d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_I2C1_Init+0x74>)
 8001654:	f001 fccd 	bl	8002ff2 <HAL_I2CEx_ConfigDigitalFilter>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 f939 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200001fc 	.word	0x200001fc
 800166c:	40005400 	.word	0x40005400
 8001670:	2000090e 	.word	0x2000090e

08001674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	; 0x38
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a6:	4b33      	ldr	r3, [pc, #204]	; (8001774 <MX_TIM4_Init+0x100>)
 80016a8:	4a33      	ldr	r2, [pc, #204]	; (8001778 <MX_TIM4_Init+0x104>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <MX_TIM4_Init+0x100>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b30      	ldr	r3, [pc, #192]	; (8001774 <MX_TIM4_Init+0x100>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <MX_TIM4_Init+0x100>)
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <MX_TIM4_Init+0x100>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <MX_TIM4_Init+0x100>)
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016ca:	482a      	ldr	r0, [pc, #168]	; (8001774 <MX_TIM4_Init+0x100>)
 80016cc:	f003 f986 	bl	80049dc <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016d6:	f000 f8fd 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e4:	4619      	mov	r1, r3
 80016e6:	4823      	ldr	r0, [pc, #140]	; (8001774 <MX_TIM4_Init+0x100>)
 80016e8:	f003 fc50 	bl	8004f8c <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016f2:	f000 f8ef 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016f6:	481f      	ldr	r0, [pc, #124]	; (8001774 <MX_TIM4_Init+0x100>)
 80016f8:	f003 f9c7 	bl	8004a8a <HAL_TIM_PWM_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001702:	f000 f8e7 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4817      	ldr	r0, [pc, #92]	; (8001774 <MX_TIM4_Init+0x100>)
 8001716:	f004 f967 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001720:	f000 f8d8 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001724:	2360      	movs	r3, #96	; 0x60
 8001726:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 255;
 8001728:	23ff      	movs	r3, #255	; 0xff
 800172a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	2204      	movs	r2, #4
 8001738:	4619      	mov	r1, r3
 800173a:	480e      	ldr	r0, [pc, #56]	; (8001774 <MX_TIM4_Init+0x100>)
 800173c:	f003 fb12 	bl	8004d64 <HAL_TIM_PWM_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001746:	f000 f8c5 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	2208      	movs	r2, #8
 8001752:	4619      	mov	r1, r3
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <MX_TIM4_Init+0x100>)
 8001756:	f003 fb05 	bl	8004d64 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001760:	f000 f8b8 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <MX_TIM4_Init+0x100>)
 8001766:	f000 f961 	bl	8001a2c <HAL_TIM_MspPostInit>

}
 800176a:	bf00      	nop
 800176c:	3738      	adds	r7, #56	; 0x38
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000250 	.word	0x20000250
 8001778:	40000800 	.word	0x40000800

0800177c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <MX_USART2_UART_Init+0x5c>)
 8001784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 8001788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800178c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_USART2_UART_Init+0x58>)
 80017c0:	f004 f99e 	bl	8005b00 <HAL_UART_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ca:	f000 f883 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000029c 	.word	0x2000029c
 80017d8:	40004400 	.word	0x40004400

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <MX_GPIO_Init+0xf0>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a35      	ldr	r2, [pc, #212]	; (80018cc <MX_GPIO_Init+0xf0>)
 80017f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017fc:	6153      	str	r3, [r2, #20]
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <MX_GPIO_Init+0xf0>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001814:	6153      	str	r3, [r2, #20]
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a29      	ldr	r2, [pc, #164]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <MX_GPIO_Init+0xf0>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a23      	ldr	r2, [pc, #140]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_GPIO_Init+0xf0>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2120      	movs	r1, #32
 8001856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185a:	f000 fdd9 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800185e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001864:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4816      	ldr	r0, [pc, #88]	; (80018d0 <MX_GPIO_Init+0xf4>)
 8001876:	f000 fc41 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800187a:	2320      	movs	r3, #32
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f000 fc32 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800189e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <MX_GPIO_Init+0xf4>)
 80018b0:	f000 fc24 	bl	80020fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2017      	movs	r0, #23
 80018ba:	f000 fbe8 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018be:	2017      	movs	r0, #23
 80018c0:	f000 fc01 	bl	80020c6 <HAL_NVIC_EnableIRQ>

}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000800 	.word	0x48000800

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_MspInit+0x44>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_MspInit+0x44>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_MspInit+0x44>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_MspInit+0x44>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_MspInit+0x44>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_MspInit+0x44>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001916:	2007      	movs	r0, #7
 8001918:	f000 fbae 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <HAL_I2C_MspInit+0xb8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d145      	bne.n	80019d6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6153      	str	r3, [r2, #20]
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800197a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001980:	2312      	movs	r3, #18
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800198c:	2304      	movs	r3, #4
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f000 fbaf 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a2:	2312      	movs	r3, #18
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ae:	2304      	movs	r3, #4
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <HAL_I2C_MspInit+0xc0>)
 80019ba:	f000 fb9f 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 80019c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_I2C_MspInit+0xbc>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_TIM_Base_MspInit+0x38>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10b      	bne.n	8001a16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_TIM_Base_MspInit+0x3c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_TIM_Base_MspInit+0x3c>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_TIM_Base_MspInit+0x3c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40000800 	.word	0x40000800
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_TIM_MspPostInit+0xa0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d13a      	bne.n	8001ac4 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_TIM_MspPostInit+0xa4>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_TIM_MspPostInit+0xa4>)
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_TIM_MspPostInit+0xa4>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <HAL_TIM_MspPostInit+0xa4>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_TIM_MspPostInit+0xa4>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_TIM_MspPostInit+0xa4>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA12     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001a90:	230a      	movs	r3, #10
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9e:	f000 fb2d 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_TIM_MspPostInit+0xa8>)
 8001ac0:	f000 fb1c 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_UART_MspInit+0x7c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d128      	bne.n	8001b4c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_UART_MspInit+0x80>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <HAL_UART_MspInit+0x80>)
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_UART_MspInit+0x80>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_UART_MspInit+0x80>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_UART_MspInit+0x80>)
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6153      	str	r3, [r2, #20]
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_UART_MspInit+0x80>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f000 fad8 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40004400 	.word	0x40004400
 8001b58:	40021000 	.word	0x40021000

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 f952 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001bb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bb8:	f000 fc42 	bl	8002440 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
	return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_kill>:

int _kill(int pid, int sig)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bda:	f004 fc53 	bl	8006484 <__errno>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2216      	movs	r2, #22
 8001be2:	601a      	str	r2, [r3, #0]
	return -1;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_exit>:

void _exit (int status)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffe7 	bl	8001bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c02:	e7fe      	b.n	8001c02 <_exit+0x12>

08001c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e00a      	b.n	8001c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c16:	f3af 8000 	nop.w
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	b2ca      	uxtb	r2, r1
 8001c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf0      	blt.n	8001c16 <_read+0x12>
	}

return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e009      	b.n	8001c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f9fd 	bl	8001058 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbf1      	blt.n	8001c50 <_write+0x12>
	}
	return len;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_close>:

int _close(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_isatty>:

int _isatty(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f004 fbb8 	bl	8006484 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20010000 	.word	0x20010000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	2000052c 	.word	0x2000052c
 8001d48:	20000548 	.word	0x20000548

08001d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d74:	f7ff ffea 	bl	8001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	; (8001db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <LoopForever+0xe>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	; (8001dbc <LoopForever+0x16>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f004 fb77 	bl	8006490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da2:	f7ff f96d 	bl	8001080 <main>

08001da6 <LoopForever>:

LoopForever:
    b LoopForever
 8001da6:	e7fe      	b.n	8001da6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001da8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001db4:	0800b8c8 	.word	0x0800b8c8
  ldr r2, =_sbss
 8001db8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001dbc:	20000544 	.word	0x20000544

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x28>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x28>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f94f 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fd7e 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f967 	bl	80020e2 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 f92f 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000004 	.word	0x20000004
 8001e48:	2000000c 	.word	0x2000000c
 8001e4c:	20000008 	.word	0x20000008

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x20>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_IncTick+0x24>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	2000000c 	.word	0x2000000c
 8001e74:	20000530 	.word	0x20000530

08001e78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_GetTick+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000530 	.word	0x20000530

08001e90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff ffee 	bl	8001e78 <HAL_GetTick>
 8001e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d005      	beq.n	8001eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_Delay+0x44>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001eb6:	bf00      	nop
 8001eb8:	f7ff ffde 	bl	8001e78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8f7      	bhi.n	8001eb8 <HAL_Delay+0x28>
  {
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000000c 	.word	0x2000000c

08001ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0a:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	60d3      	str	r3, [r2, #12]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__NVIC_GetPriorityGrouping+0x18>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 0307 	and.w	r3, r3, #7
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db0b      	blt.n	8001f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4907      	ldr	r1, [pc, #28]	; (8001f74 <__NVIC_EnableIRQ+0x38>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ff8e 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff29 	bl	8001ed8 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff3e 	bl	8001f20 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff8e 	bl	8001fcc <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5d 	bl	8001f78 <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff31 	bl	8001f3c <__NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa2 	bl	8002034 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e160      	b.n	80023ce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8152 	beq.w	80023c8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d005      	beq.n	800213c <HAL_GPIO_Init+0x40>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d017      	beq.n	80021da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d123      	bne.n	800222e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	6939      	ldr	r1, [r7, #16]
 800222a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0203 	and.w	r2, r3, #3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80ac 	beq.w	80023c8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002270:	4b5e      	ldr	r3, [pc, #376]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a5d      	ldr	r2, [pc, #372]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002288:	4a59      	ldr	r2, [pc, #356]	; (80023f0 <HAL_GPIO_Init+0x2f4>)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b2:	d025      	beq.n	8002300 <HAL_GPIO_Init+0x204>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <HAL_GPIO_Init+0x2f8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d01f      	beq.n	80022fc <HAL_GPIO_Init+0x200>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_GPIO_Init+0x2fc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d019      	beq.n	80022f8 <HAL_GPIO_Init+0x1fc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_GPIO_Init+0x300>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_GPIO_Init+0x1f8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x304>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1f4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x308>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1f0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x30c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1ec>
 80022e4:	2306      	movs	r3, #6
 80022e6:	e00c      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022e8:	2307      	movs	r3, #7
 80022ea:	e00a      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022ec:	2305      	movs	r3, #5
 80022ee:	e008      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022f0:	2304      	movs	r3, #4
 80022f2:	e006      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022f4:	2303      	movs	r3, #3
 80022f6:	e004      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e002      	b.n	8002302 <HAL_GPIO_Init+0x206>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_GPIO_Init+0x206>
 8002300:	2300      	movs	r3, #0
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	f002 0203 	and.w	r2, r2, #3
 8002308:	0092      	lsls	r2, r2, #2
 800230a:	4093      	lsls	r3, r2
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002312:	4937      	ldr	r1, [pc, #220]	; (80023f0 <HAL_GPIO_Init+0x2f4>)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002320:	4b3a      	ldr	r3, [pc, #232]	; (800240c <HAL_GPIO_Init+0x310>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_GPIO_Init+0x310>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_GPIO_Init+0x310>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800236e:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_GPIO_Init+0x310>)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_GPIO_Init+0x310>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002398:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_GPIO_Init+0x310>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_GPIO_Init+0x310>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_GPIO_Init+0x310>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3301      	adds	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f ae97 	bne.w	800210c <HAL_GPIO_Init+0x10>
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010000 	.word	0x40010000
 80023f4:	48000400 	.word	0x48000400
 80023f8:	48000800 	.word	0x48000800
 80023fc:	48000c00 	.word	0x48000c00
 8002400:	48001000 	.word	0x48001000
 8002404:	48001400 	.word	0x48001400
 8002408:	48001800 	.word	0x48001800
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800242c:	e002      	b.n	8002434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fdda 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40010400 	.word	0x40010400

08002470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e081      	b.n	8002586 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fa46 	bl	8001928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	; 0x24
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e006      	b.n	80024f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d104      	bne.n	800250a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69d9      	ldr	r1, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	4608      	mov	r0, r1
 800259a:	4611      	mov	r1, r2
 800259c:	461a      	mov	r2, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	817b      	strh	r3, [r7, #10]
 80025a2:	460b      	mov	r3, r1
 80025a4:	813b      	strh	r3, [r7, #8]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 80f9 	bne.w	80027aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_I2C_Mem_Write+0x34>
 80025be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0ed      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Mem_Write+0x4e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e0e6      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e6:	f7ff fc47 	bl	8001e78 <HAL_GetTick>
 80025ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2319      	movs	r3, #25
 80025f2:	2201      	movs	r2, #1
 80025f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fac3 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0d1      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2221      	movs	r2, #33	; 0x21
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002630:	88f8      	ldrh	r0, [r7, #6]
 8002632:	893a      	ldrh	r2, [r7, #8]
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	4603      	mov	r3, r0
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f9d3 	bl	80029ec <I2C_RequestMemoryWrite>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0a9      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d90e      	bls.n	8002680 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	b2da      	uxtb	r2, r3
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fc3d 	bl	8002ef8 <I2C_TransferConfig>
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	2300      	movs	r3, #0
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fc2c 	bl	8002ef8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fabc 	bl	8002c22 <I2C_WaitOnTXISFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e07b      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d034      	beq.n	8002758 <HAL_I2C_Mem_Write+0x1c8>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d130      	bne.n	8002758 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fa3f 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e04d      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	2bff      	cmp	r3, #255	; 0xff
 8002718:	d90e      	bls.n	8002738 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	22ff      	movs	r2, #255	; 0xff
 800271e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	b2da      	uxtb	r2, r3
 8002726:	8979      	ldrh	r1, [r7, #10]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fbe1 	bl	8002ef8 <I2C_TransferConfig>
 8002736:	e00f      	b.n	8002758 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	b2da      	uxtb	r2, r3
 8002748:	8979      	ldrh	r1, [r7, #10]
 800274a:	2300      	movs	r3, #0
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fbd0 	bl	8002ef8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d19e      	bne.n	80026a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 faa2 	bl	8002cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e01a      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2220      	movs	r2, #32
 800277c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_I2C_Mem_Write+0x224>)
 800278a:	400b      	ands	r3, r1
 800278c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
  }
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	fe00e800 	.word	0xfe00e800

080027b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	460b      	mov	r3, r1
 80027cc:	813b      	strh	r3, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b20      	cmp	r3, #32
 80027dc:	f040 80fd 	bne.w	80029da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_I2C_Mem_Read+0x34>
 80027e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0f1      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Mem_Read+0x4e>
 8002802:	2302      	movs	r3, #2
 8002804:	e0ea      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800280e:	f7ff fb33 	bl	8001e78 <HAL_GetTick>
 8002812:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2319      	movs	r3, #25
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f9af 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d5      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2222      	movs	r2, #34	; 0x22
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a3a      	ldr	r2, [r7, #32]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002858:	88f8      	ldrh	r0, [r7, #6]
 800285a:	893a      	ldrh	r2, [r7, #8]
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4603      	mov	r3, r0
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f913 	bl	8002a94 <I2C_RequestMemoryRead>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0ad      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2bff      	cmp	r3, #255	; 0xff
 8002888:	d90e      	bls.n	80028a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	22ff      	movs	r2, #255	; 0xff
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	b2da      	uxtb	r2, r3
 8002896:	8979      	ldrh	r1, [r7, #10]
 8002898:	4b52      	ldr	r3, [pc, #328]	; (80029e4 <HAL_I2C_Mem_Read+0x22c>)
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fb29 	bl	8002ef8 <I2C_TransferConfig>
 80028a6:	e00f      	b.n	80028c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_I2C_Mem_Read+0x22c>)
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fb18 	bl	8002ef8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	2200      	movs	r2, #0
 80028d0:	2104      	movs	r1, #4
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f956 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e07c      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d034      	beq.n	8002988 <HAL_I2C_Mem_Read+0x1d0>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	2b00      	cmp	r3, #0
 8002924:	d130      	bne.n	8002988 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	2200      	movs	r2, #0
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f927 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e04d      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d90e      	bls.n	8002968 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	b2da      	uxtb	r2, r3
 8002956:	8979      	ldrh	r1, [r7, #10]
 8002958:	2300      	movs	r3, #0
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fac9 	bl	8002ef8 <I2C_TransferConfig>
 8002966:	e00f      	b.n	8002988 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	b2da      	uxtb	r2, r3
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fab8 	bl	8002ef8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d19a      	bne.n	80028c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f98a 	bl	8002cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e01a      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2220      	movs	r2, #32
 80029ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_I2C_Mem_Read+0x230>)
 80029ba:	400b      	ands	r3, r1
 80029bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	80002400 	.word	0x80002400
 80029e8:	fe00e800 	.word	0xfe00e800

080029ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	8979      	ldrh	r1, [r7, #10]
 8002a0c:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <I2C_RequestMemoryWrite+0xa4>)
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fa6f 	bl	8002ef8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	69b9      	ldr	r1, [r7, #24]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8ff 	bl	8002c22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e02c      	b.n	8002a88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a34:	893b      	ldrh	r3, [r7, #8]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a3e:	e015      	b.n	8002a6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a40:	893b      	ldrh	r3, [r7, #8]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	69b9      	ldr	r1, [r7, #24]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f8e5 	bl	8002c22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e012      	b.n	8002a88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a62:	893b      	ldrh	r3, [r7, #8]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f884 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	80002000 	.word	0x80002000

08002a94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	817b      	strh	r3, [r7, #10]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	813b      	strh	r3, [r7, #8]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <I2C_RequestMemoryRead+0xa4>)
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fa1c 	bl	8002ef8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f8ac 	bl	8002c22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e02c      	b.n	8002b2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ada:	893b      	ldrh	r3, [r7, #8]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae4:	e015      	b.n	8002b12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae6:	893b      	ldrh	r3, [r7, #8]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f892 	bl	8002c22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e012      	b.n	8002b2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b08:	893b      	ldrh	r3, [r7, #8]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f831 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	80002000 	.word	0x80002000

08002b3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d103      	bne.n	8002b5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d007      	beq.n	8002b78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	619a      	str	r2, [r3, #24]
  }
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b94:	e031      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d02d      	beq.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7ff f96b 	bl	8001e78 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d122      	bne.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d113      	bne.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f043 0220 	orr.w	r2, r3, #32
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d0be      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c2e:	e033      	b.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f87f 	bl	8002d38 <I2C_IsErrorOccurred>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e031      	b.n	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d025      	beq.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4c:	f7ff f914 	bl	8001e78 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11a      	bne.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d013      	beq.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e007      	b.n	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d1c4      	bne.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cbc:	e02f      	b.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f838 	bl	8002d38 <I2C_IsErrorOccurred>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e02d      	b.n	8002d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7ff f8d1 	bl	8001e78 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11a      	bne.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d013      	beq.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e007      	b.n	8002d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d1c8      	bne.n	8002cbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d068      	beq.n	8002e36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d6c:	e049      	b.n	8002e02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d045      	beq.n	8002e02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7ff f87f 	bl	8001e78 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_IsErrorOccurred+0x54>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d13a      	bne.n	8002e02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dae:	d121      	bne.n	8002df4 <I2C_IsErrorOccurred+0xbc>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db6:	d01d      	beq.n	8002df4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d01a      	beq.n	8002df4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dcc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dce:	f7ff f853 	bl	8001e78 <HAL_GetTick>
 8002dd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dd4:	e00e      	b.n	8002df4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002dd6:	f7ff f84f 	bl	8001e78 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b19      	cmp	r3, #25
 8002de2:	d907      	bls.n	8002df4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f043 0320 	orr.w	r3, r3, #32
 8002dea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002df2:	e006      	b.n	8002e02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d1e9      	bne.n	8002dd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d003      	beq.n	8002e18 <I2C_IsErrorOccurred+0xe0>
 8002e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0aa      	beq.n	8002d6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2220      	movs	r2, #32
 8002e26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01c      	beq.n	8002ee6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff fe45 	bl	8002b3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <I2C_IsErrorOccurred+0x1bc>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3728      	adds	r7, #40	; 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	fe00e800 	.word	0xfe00e800

08002ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	4613      	mov	r3, r2
 8002f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f10:	7a7b      	ldrb	r3, [r7, #9]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	0d5b      	lsrs	r3, r3, #21
 8002f32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <I2C_TransferConfig+0x60>)
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	ea02 0103 	and.w	r1, r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	03ff63ff 	.word	0x03ff63ff

08002f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d138      	bne.n	8002fe4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e032      	b.n	8002fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b20      	cmp	r3, #32
 8003006:	d139      	bne.n	800307c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003012:	2302      	movs	r3, #2
 8003014:	e033      	b.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2224      	movs	r2, #36	; 0x24
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003044:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003092:	af00      	add	r7, sp, #0
 8003094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003098:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800309c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800309e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f001 b83a 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 816f 	beq.w	80033a6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030c8:	4bb5      	ldr	r3, [pc, #724]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d00c      	beq.n	80030ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d4:	4bb2      	ldr	r3, [pc, #712]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d15c      	bne.n	800319a <HAL_RCC_OscConfig+0x10e>
 80030e0:	4baf      	ldr	r3, [pc, #700]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d155      	bne.n	800319a <HAL_RCC_OscConfig+0x10e>
 80030ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003102:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_RCC_OscConfig+0x94>
 800311a:	4ba1      	ldr	r3, [pc, #644]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e015      	b.n	800314c <HAL_RCC_OscConfig+0xc0>
 8003120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003124:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003138:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800313c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003148:	4b95      	ldr	r3, [pc, #596]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003150:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003154:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003158:	fa92 f2a2 	rbit	r2, r2
 800315c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003160:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f002 021f 	and.w	r2, r2, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8111 	beq.w	80033a4 <HAL_RCC_OscConfig+0x318>
 8003182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003186:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 8108 	bne.w	80033a4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f000 bfc6 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x12e>
 80031ac:	4b7c      	ldr	r3, [pc, #496]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7b      	ldr	r2, [pc, #492]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	e036      	b.n	8003228 <HAL_RCC_OscConfig+0x19c>
 80031ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x158>
 80031ca:	4b75      	ldr	r3, [pc, #468]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a74      	ldr	r2, [pc, #464]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80031d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a71      	ldr	r2, [pc, #452]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80031dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e021      	b.n	8003228 <HAL_RCC_OscConfig+0x19c>
 80031e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x184>
 80031f6:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a69      	ldr	r2, [pc, #420]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a66      	ldr	r2, [pc, #408]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0x19c>
 8003210:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a62      	ldr	r2, [pc, #392]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b60      	ldr	r3, [pc, #384]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a5f      	ldr	r2, [pc, #380]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d059      	beq.n	80032ec <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe fe1e 	bl	8001e78 <HAL_GetTick>
 800323c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003242:	f7fe fe19 	bl	8001e78 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d902      	bls.n	8003258 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	f000 bf67 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>
 8003258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800325c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800326c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HAL_RCC_OscConfig+0x1fe>
 8003284:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x22a>
 800328a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800328e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800329e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ba:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80032be:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80032c2:	fa92 f2a2 	rbit	r2, r2
 80032c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80032ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80032ce:	fab2 f282 	clz	r2, r2
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f042 0220 	orr.w	r2, r2, #32
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	f002 021f 	and.w	r2, r2, #31
 80032de:	2101      	movs	r1, #1
 80032e0:	fa01 f202 	lsl.w	r2, r1, r2
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0ab      	beq.n	8003242 <HAL_RCC_OscConfig+0x1b6>
 80032ea:	e05c      	b.n	80033a6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fdc4 	bl	8001e78 <HAL_GetTick>
 80032f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f6:	f7fe fdbf 	bl	8001e78 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d902      	bls.n	800330c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	f000 bf0d 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>
 800330c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003310:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003320:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_RCC_OscConfig+0x2b2>
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x2de>
 800333e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003342:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003356:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800335a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_RCC_OscConfig+0x314>)
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800336e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003372:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003376:	fa92 f2a2 	rbit	r2, r2
 800337a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800337e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003382:	fab2 f282 	clz	r2, r2
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f042 0220 	orr.w	r2, r2, #32
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f002 021f 	and.w	r2, r2, #31
 8003392:	2101      	movs	r1, #1
 8003394:	fa01 f202 	lsl.w	r2, r1, r2
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ab      	bne.n	80032f6 <HAL_RCC_OscConfig+0x26a>
 800339e:	e002      	b.n	80033a6 <HAL_RCC_OscConfig+0x31a>
 80033a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 817f 	beq.w	80036ba <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033bc:	4ba7      	ldr	r3, [pc, #668]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033c8:	4ba4      	ldr	r3, [pc, #656]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d173      	bne.n	80034bc <HAL_RCC_OscConfig+0x430>
 80033d4:	4ba1      	ldr	r3, [pc, #644]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80033dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e0:	d16c      	bne.n	80034bc <HAL_RCC_OscConfig+0x430>
 80033e2:	2302      	movs	r3, #2
 80033e4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80033f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d102      	bne.n	8003412 <HAL_RCC_OscConfig+0x386>
 800340c:	4b93      	ldr	r3, [pc, #588]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	e013      	b.n	800343a <HAL_RCC_OscConfig+0x3ae>
 8003412:	2302      	movs	r3, #2
 8003414:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003424:	2302      	movs	r3, #2
 8003426:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800342a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003436:	4b89      	ldr	r3, [pc, #548]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2202      	movs	r2, #2
 800343c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003440:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003444:	fa92 f2a2 	rbit	r2, r2
 8003448:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800344c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003450:	fab2 f282 	clz	r2, r2
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	f042 0220 	orr.w	r2, r2, #32
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f002 021f 	and.w	r2, r2, #31
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCC_OscConfig+0x3f6>
 800346c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003470:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d002      	beq.n	8003482 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f000 be52 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	21f8      	movs	r1, #248	; 0xf8
 8003498:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80034a0:	fa91 f1a1 	rbit	r1, r1
 80034a4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80034a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034ac:	fab1 f181 	clz	r1, r1
 80034b0:	b2c9      	uxtb	r1, r1
 80034b2:	408b      	lsls	r3, r1
 80034b4:	4969      	ldr	r1, [pc, #420]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e0fe      	b.n	80036ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8088 	beq.w	80035de <HAL_RCC_OscConfig+0x552>
 80034ce:	2301      	movs	r3, #1
 80034d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80034e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	461a      	mov	r2, r3
 80034f6:	2301      	movs	r3, #1
 80034f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe fcbd 	bl	8001e78 <HAL_GetTick>
 80034fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe fcb8 	bl	8001e78 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d902      	bls.n	800351a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	f000 be06 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>
 800351a:	2302      	movs	r3, #2
 800351c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003524:	fa93 f3a3 	rbit	r3, r3
 8003528:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800352c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d102      	bne.n	800354a <HAL_RCC_OscConfig+0x4be>
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	e013      	b.n	8003572 <HAL_RCC_OscConfig+0x4e6>
 800354a:	2302      	movs	r3, #2
 800354c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800355c:	2302      	movs	r3, #2
 800355e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003562:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2202      	movs	r2, #2
 8003574:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003578:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800357c:	fa92 f2a2 	rbit	r2, r2
 8003580:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003584:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f042 0220 	orr.w	r2, r2, #32
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f002 021f 	and.w	r2, r2, #31
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0af      	beq.n	8003504 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	21f8      	movs	r1, #248	; 0xf8
 80035ba:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80035c2:	fa91 f1a1 	rbit	r1, r1
 80035c6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80035ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80035ce:	fab1 f181 	clz	r1, r1
 80035d2:	b2c9      	uxtb	r1, r1
 80035d4:	408b      	lsls	r3, r1
 80035d6:	4921      	ldr	r1, [pc, #132]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e06d      	b.n	80036ba <HAL_RCC_OscConfig+0x62e>
 80035de:	2301      	movs	r3, #1
 80035e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80035f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	461a      	mov	r2, r3
 8003606:	2300      	movs	r3, #0
 8003608:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fc35 	bl	8001e78 <HAL_GetTick>
 800360e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	e00a      	b.n	800362a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003614:	f7fe fc30 	bl	8001e78 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d902      	bls.n	800362a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	f000 bd7e 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>
 800362a:	2302      	movs	r3, #2
 800362c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800363c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <HAL_RCC_OscConfig+0x5d4>
 8003654:	4b01      	ldr	r3, [pc, #4]	; (800365c <HAL_RCC_OscConfig+0x5d0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	e016      	b.n	8003688 <HAL_RCC_OscConfig+0x5fc>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003672:	2302      	movs	r3, #2
 8003674:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003678:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003684:	4bbf      	ldr	r3, [pc, #764]	; (8003984 <HAL_RCC_OscConfig+0x8f8>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2202      	movs	r2, #2
 800368a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800368e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003692:	fa92 f2a2 	rbit	r2, r2
 8003696:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800369a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800369e:	fab2 f282 	clz	r2, r2
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f002 021f 	and.w	r2, r2, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ac      	bne.n	8003614 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8113 	beq.w	80038f6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d07c      	beq.n	80037da <HAL_RCC_OscConfig+0x74e>
 80036e0:	2301      	movs	r3, #1
 80036e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80036f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	4ba2      	ldr	r3, [pc, #648]	; (8003988 <HAL_RCC_OscConfig+0x8fc>)
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	461a      	mov	r2, r3
 8003706:	2301      	movs	r3, #1
 8003708:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7fe fbb5 	bl	8001e78 <HAL_GetTick>
 800370e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003714:	f7fe fbb0 	bl	8001e78 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d902      	bls.n	800372a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	f000 bcfe 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>
 800372a:	2302      	movs	r3, #2
 800372c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003734:	fa93 f2a3 	rbit	r2, r3
 8003738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800374a:	2202      	movs	r2, #2
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	fa93 f2a3 	rbit	r2, r3
 800375c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800376e:	2202      	movs	r2, #2
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003776:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	fa93 f2a3 	rbit	r2, r3
 8003780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003784:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003788:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <HAL_RCC_OscConfig+0x8f8>)
 800378c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800378e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003792:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003796:	2102      	movs	r1, #2
 8003798:	6019      	str	r1, [r3, #0]
 800379a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fa93 f1a3 	rbit	r1, r3
 80037a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037b0:	6019      	str	r1, [r3, #0]
  return result;
 80037b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d09d      	beq.n	8003714 <HAL_RCC_OscConfig+0x688>
 80037d8:	e08d      	b.n	80038f6 <HAL_RCC_OscConfig+0x86a>
 80037da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	fa93 f2a3 	rbit	r2, r3
 80037f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037fc:	601a      	str	r2, [r3, #0]
  return result;
 80037fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003802:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003806:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <HAL_RCC_OscConfig+0x8fc>)
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	461a      	mov	r2, r3
 8003818:	2300      	movs	r3, #0
 800381a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381c:	f7fe fb2c 	bl	8001e78 <HAL_GetTick>
 8003820:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003826:	f7fe fb27 	bl	8001e78 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d902      	bls.n	800383c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	f000 bc75 	b.w	8004126 <HAL_RCC_OscConfig+0x109a>
 800383c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003840:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003844:	2202      	movs	r2, #2
 8003846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fa93 f2a3 	rbit	r2, r3
 8003856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003864:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003868:	2202      	movs	r2, #2
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003888:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800388c:	2202      	movs	r2, #2
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003894:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	fa93 f2a3 	rbit	r2, r3
 800389e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	4b36      	ldr	r3, [pc, #216]	; (8003984 <HAL_RCC_OscConfig+0x8f8>)
 80038aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038b4:	2102      	movs	r1, #2
 80038b6:	6019      	str	r1, [r3, #0]
 80038b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	fa93 f1a3 	rbit	r1, r3
 80038c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038ce:	6019      	str	r1, [r3, #0]
  return result;
 80038d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d197      	bne.n	8003826 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 81a5 	beq.w	8003c56 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_RCC_OscConfig+0x8f8>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_OscConfig+0x8f8>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_RCC_OscConfig+0x8f8>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	61d3      	str	r3, [r2, #28]
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_RCC_OscConfig+0x8f8>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003944:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_RCC_OscConfig+0x900>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d121      	bne.n	800399c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCC_OscConfig+0x900>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0b      	ldr	r2, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x900>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003964:	f7fe fa88 	bl	8001e78 <HAL_GetTick>
 8003968:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e010      	b.n	8003990 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fe fa83 	bl	8001e78 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d908      	bls.n	8003990 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e3d1      	b.n	8004126 <HAL_RCC_OscConfig+0x109a>
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	10908120 	.word	0x10908120
 800398c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	4b8d      	ldr	r3, [pc, #564]	; (8003bc8 <HAL_RCC_OscConfig+0xb3c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0e8      	beq.n	800396e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x92e>
 80039ac:	4b87      	ldr	r3, [pc, #540]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4a86      	ldr	r2, [pc, #536]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6213      	str	r3, [r2, #32]
 80039b8:	e035      	b.n	8003a26 <HAL_RCC_OscConfig+0x99a>
 80039ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x958>
 80039ca:	4b80      	ldr	r3, [pc, #512]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4a7f      	ldr	r2, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6213      	str	r3, [r2, #32]
 80039d6:	4b7d      	ldr	r3, [pc, #500]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4a7c      	ldr	r2, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	6213      	str	r3, [r2, #32]
 80039e2:	e020      	b.n	8003a26 <HAL_RCC_OscConfig+0x99a>
 80039e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x982>
 80039f4:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4a74      	ldr	r2, [pc, #464]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6213      	str	r3, [r2, #32]
 8003a00:	4b72      	ldr	r3, [pc, #456]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4a71      	ldr	r2, [pc, #452]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6213      	str	r3, [r2, #32]
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x99a>
 8003a0e:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a6b      	ldr	r2, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8081 	beq.w	8003b3a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fe fa1e 	bl	8001e78 <HAL_GetTick>
 8003a3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a40:	e00b      	b.n	8003a5a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a42:	f7fe fa19 	bl	8001e78 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e365      	b.n	8004126 <HAL_RCC_OscConfig+0x109a>
 8003a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a62:	2202      	movs	r2, #2
 8003a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	fa93 f2a3 	rbit	r2, r3
 8003a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a86:	2202      	movs	r2, #2
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f2a3 	rbit	r2, r3
 8003a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003aa0:	601a      	str	r2, [r3, #0]
  return result;
 8003aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003aaa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d102      	bne.n	8003ac6 <HAL_RCC_OscConfig+0xa3a>
 8003ac0:	4b42      	ldr	r3, [pc, #264]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	e013      	b.n	8003aee <HAL_RCC_OscConfig+0xa62>
 8003ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ace:	2202      	movs	r2, #2
 8003ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003af2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003af6:	2102      	movs	r1, #2
 8003af8:	6011      	str	r1, [r2, #0]
 8003afa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003afe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	fa92 f1a2 	rbit	r1, r2
 8003b08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b0c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b10:	6011      	str	r1, [r2, #0]
  return result;
 8003b12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b16:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	fab2 f282 	clz	r2, r2
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	f002 021f 	and.w	r2, r2, #31
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d084      	beq.n	8003a42 <HAL_RCC_OscConfig+0x9b6>
 8003b38:	e083      	b.n	8003c42 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fe f99d 	bl	8001e78 <HAL_GetTick>
 8003b3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fe f998 	bl	8001e78 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e2e4      	b.n	8004126 <HAL_RCC_OscConfig+0x109a>
 8003b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b64:	2202      	movs	r2, #2
 8003b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b88:	2202      	movs	r2, #2
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	fa93 f2a3 	rbit	r2, r3
 8003b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ba2:	601a      	str	r2, [r3, #0]
  return result;
 8003ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003bac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCC_OscConfig+0xb44>
 8003bc2:	4b02      	ldr	r3, [pc, #8]	; (8003bcc <HAL_RCC_OscConfig+0xb40>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	e017      	b.n	8003bf8 <HAL_RCC_OscConfig+0xb6c>
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bd8:	2202      	movs	r2, #2
 8003bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	fa93 f2a3 	rbit	r2, r3
 8003bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	4bb3      	ldr	r3, [pc, #716]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bfc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c00:	2102      	movs	r1, #2
 8003c02:	6011      	str	r1, [r2, #0]
 8003c04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c08:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	fa92 f1a2 	rbit	r1, r2
 8003c12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c16:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c1a:	6011      	str	r1, [r2, #0]
  return result;
 8003c1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c20:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	fab2 f282 	clz	r2, r2
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	f002 021f 	and.w	r2, r2, #31
 8003c36:	2101      	movs	r1, #1
 8003c38:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d180      	bne.n	8003b44 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c42:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d105      	bne.n	8003c56 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4a:	4b9e      	ldr	r3, [pc, #632]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	4a9d      	ldr	r2, [pc, #628]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c54:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 825e 	beq.w	8004124 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c68:	4b96      	ldr	r3, [pc, #600]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	f000 821f 	beq.w	80040b4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	f040 8170 	bne.w	8003f68 <HAL_RCC_OscConfig+0xedc>
 8003c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	fa93 f2a3 	rbit	r2, r3
 8003ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cac:	601a      	str	r2, [r3, #0]
  return result;
 8003cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cb6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cce:	f7fe f8d3 	bl	8001e78 <HAL_GetTick>
 8003cd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd6:	e009      	b.n	8003cec <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe f8ce 	bl	8001e78 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e21c      	b.n	8004126 <HAL_RCC_OscConfig+0x109a>
 8003cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	fa93 f2a3 	rbit	r2, r3
 8003d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d10:	601a      	str	r2, [r3, #0]
  return result;
 8003d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d16:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1c:	fab3 f383 	clz	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d102      	bne.n	8003d36 <HAL_RCC_OscConfig+0xcaa>
 8003d30:	4b64      	ldr	r3, [pc, #400]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	e027      	b.n	8003d86 <HAL_RCC_OscConfig+0xcfa>
 8003d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d48:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	fa93 f2a3 	rbit	r2, r3
 8003d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fa93 f2a3 	rbit	r2, r3
 8003d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	4b50      	ldr	r3, [pc, #320]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d92:	6011      	str	r1, [r2, #0]
 8003d94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	fa92 f1a2 	rbit	r1, r2
 8003da2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003da6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003daa:	6011      	str	r1, [r2, #0]
  return result;
 8003dac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003db0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	fab2 f282 	clz	r2, r2
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f042 0220 	orr.w	r2, r2, #32
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f002 021f 	and.w	r2, r2, #31
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d182      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd2:	4b3c      	ldr	r3, [pc, #240]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	4937      	ldr	r1, [pc, #220]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003dec:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a19      	ldr	r1, [r3, #32]
 8003e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	492d      	ldr	r1, [pc, #180]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	fa93 f2a3 	rbit	r2, r3
 8003e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e38:	601a      	str	r2, [r3, #0]
  return result;
 8003e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	461a      	mov	r2, r3
 8003e56:	2301      	movs	r3, #1
 8003e58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fe f80d 	bl	8001e78 <HAL_GetTick>
 8003e5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e62:	e009      	b.n	8003e78 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fe f808 	bl	8001e78 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e156      	b.n	8004126 <HAL_RCC_OscConfig+0x109a>
 8003e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	fa93 f2a3 	rbit	r2, r3
 8003e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e9c:	601a      	str	r2, [r3, #0]
  return result;
 8003e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ea6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea8:	fab3 f383 	clz	r3, r3
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xe3c>
 8003ebc:	4b01      	ldr	r3, [pc, #4]	; (8003ec4 <HAL_RCC_OscConfig+0xe38>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	e02a      	b.n	8003f18 <HAL_RCC_OscConfig+0xe8c>
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ecc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	fa93 f2a3 	rbit	r2, r3
 8003ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f00:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	fa93 f2a3 	rbit	r2, r3
 8003f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	4b86      	ldr	r3, [pc, #536]	; (8004130 <HAL_RCC_OscConfig+0x10a4>)
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f1c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f24:	6011      	str	r1, [r2, #0]
 8003f26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f2a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	fa92 f1a2 	rbit	r1, r2
 8003f34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f38:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f3c:	6011      	str	r1, [r2, #0]
  return result;
 8003f3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f42:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	fab2 f282 	clz	r2, r2
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f042 0220 	orr.w	r2, r2, #32
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	f002 021f 	and.w	r2, r2, #31
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f43f af7f 	beq.w	8003e64 <HAL_RCC_OscConfig+0xdd8>
 8003f66:	e0dd      	b.n	8004124 <HAL_RCC_OscConfig+0x1098>
 8003f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	fa93 f2a3 	rbit	r2, r3
 8003f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f88:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f8c:	601a      	str	r2, [r3, #0]
  return result;
 8003f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f92:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f96:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2300      	movs	r3, #0
 8003fac:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fd ff63 	bl	8001e78 <HAL_GetTick>
 8003fb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb6:	e009      	b.n	8003fcc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd ff5e 	bl	8001e78 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e0ac      	b.n	8004126 <HAL_RCC_OscConfig+0x109a>
 8003fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	fa93 f2a3 	rbit	r2, r3
 8003fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ff0:	601a      	str	r2, [r3, #0]
  return result;
 8003ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ffa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffc:	fab3 f383 	clz	r3, r3
 8004000:	b2db      	uxtb	r3, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d102      	bne.n	8004016 <HAL_RCC_OscConfig+0xf8a>
 8004010:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_RCC_OscConfig+0x10a4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	e027      	b.n	8004066 <HAL_RCC_OscConfig+0xfda>
 8004016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800401e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004028:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	fa93 f2a3 	rbit	r2, r3
 8004032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004036:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004040:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	fa93 f2a3 	rbit	r2, r3
 8004058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	4b33      	ldr	r3, [pc, #204]	; (8004130 <HAL_RCC_OscConfig+0x10a4>)
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800406a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800406e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004072:	6011      	str	r1, [r2, #0]
 8004074:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004078:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	fa92 f1a2 	rbit	r1, r2
 8004082:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004086:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800408a:	6011      	str	r1, [r2, #0]
  return result;
 800408c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004090:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	fab2 f282 	clz	r2, r2
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	f042 0220 	orr.w	r2, r2, #32
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f002 021f 	and.w	r2, r2, #31
 80040a6:	2101      	movs	r1, #1
 80040a8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d182      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xf2c>
 80040b2:	e037      	b.n	8004124 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e02e      	b.n	8004126 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c8:	4b19      	ldr	r3, [pc, #100]	; (8004130 <HAL_RCC_OscConfig+0x10a4>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <HAL_RCC_OscConfig+0x10a4>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040dc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80040e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d117      	bne.n	8004120 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040f4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004104:	429a      	cmp	r2, r3
 8004106:	d10b      	bne.n	8004120 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800410c:	f003 020f 	and.w	r2, r3, #15
 8004110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004114:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000

08004134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b09e      	sub	sp, #120	; 0x78
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e162      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b90      	ldr	r3, [pc, #576]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d910      	bls.n	800417c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b8d      	ldr	r3, [pc, #564]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 0207 	bic.w	r2, r3, #7
 8004162:	498b      	ldr	r1, [pc, #556]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b89      	ldr	r3, [pc, #548]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e14a      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004188:	4b82      	ldr	r3, [pc, #520]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	497f      	ldr	r1, [pc, #508]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80dc 	beq.w	8004360 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d13c      	bne.n	800422a <HAL_RCC_ClockConfig+0xf6>
 80041b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d102      	bne.n	80041da <HAL_RCC_ClockConfig+0xa6>
 80041d4:	4b6f      	ldr	r3, [pc, #444]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	e00f      	b.n	80041fa <HAL_RCC_ClockConfig+0xc6>
 80041da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	667b      	str	r3, [r7, #100]	; 0x64
 80041e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ec:	663b      	str	r3, [r7, #96]	; 0x60
 80041ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f6:	4b67      	ldr	r3, [pc, #412]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004202:	fa92 f2a2 	rbit	r2, r2
 8004206:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800420a:	fab2 f282 	clz	r2, r2
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	f042 0220 	orr.w	r2, r2, #32
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f002 021f 	and.w	r2, r2, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d17b      	bne.n	800431e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0f3      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d13c      	bne.n	80042ac <HAL_RCC_ClockConfig+0x178>
 8004232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004236:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_RCC_ClockConfig+0x128>
 8004256:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	e00f      	b.n	800427c <HAL_RCC_ClockConfig+0x148>
 800425c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
 800426a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426e:	643b      	str	r3, [r7, #64]	; 0x40
 8004270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004278:	4b46      	ldr	r3, [pc, #280]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004280:	63ba      	str	r2, [r7, #56]	; 0x38
 8004282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004284:	fa92 f2a2 	rbit	r2, r2
 8004288:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800428a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800428c:	fab2 f282 	clz	r2, r2
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	f042 0220 	orr.w	r2, r2, #32
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	f002 021f 	and.w	r2, r2, #31
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f202 	lsl.w	r2, r1, r2
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d13a      	bne.n	800431e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0b2      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
 80042ac:	2302      	movs	r3, #2
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x1a0>
 80042ce:	4b31      	ldr	r3, [pc, #196]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	e00d      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1bc>
 80042d4:	2302      	movs	r3, #2
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
 80042e0:	2302      	movs	r3, #2
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	4b29      	ldr	r3, [pc, #164]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2202      	movs	r2, #2
 80042f2:	61ba      	str	r2, [r7, #24]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	fa92 f2a2 	rbit	r2, r2
 80042fa:	617a      	str	r2, [r7, #20]
  return result;
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	fab2 f282 	clz	r2, r2
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	f042 0220 	orr.w	r2, r2, #32
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f002 021f 	and.w	r2, r2, #31
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f202 	lsl.w	r2, r1, r2
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e079      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	491a      	ldr	r1, [pc, #104]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004330:	f7fd fda2 	bl	8001e78 <HAL_GetTick>
 8004334:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fd fd9e 	bl	8001e78 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e061      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_RCC_ClockConfig+0x260>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 020c 	and.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	429a      	cmp	r2, r3
 800435e:	d1eb      	bne.n	8004338 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d214      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 0207 	bic.w	r2, r3, #7
 8004376:	4906      	ldr	r1, [pc, #24]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_RCC_ClockConfig+0x25c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e040      	b.n	8004412 <HAL_RCC_ClockConfig+0x2de>
 8004390:	40022000 	.word	0x40022000
 8004394:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	491a      	ldr	r1, [pc, #104]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4912      	ldr	r1, [pc, #72]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043d6:	f000 f829 	bl	800442c <HAL_RCC_GetSysClockFreq>
 80043da:	4601      	mov	r1, r0
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <HAL_RCC_ClockConfig+0x2e8>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e4:	22f0      	movs	r2, #240	; 0xf0
 80043e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	fa92 f2a2 	rbit	r2, r2
 80043ee:	60fa      	str	r2, [r7, #12]
  return result;
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	fab2 f282 	clz	r2, r2
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	40d3      	lsrs	r3, r2
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x2ec>)
 80043fc:	5cd3      	ldrb	r3, [r2, r3]
 80043fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004402:	4a08      	ldr	r2, [pc, #32]	; (8004424 <HAL_RCC_ClockConfig+0x2f0>)
 8004404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_RCC_ClockConfig+0x2f4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd fcf0 	bl	8001df0 <HAL_InitTick>
  
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3778      	adds	r7, #120	; 0x78
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000
 8004420:	0800b08c 	.word	0x0800b08c
 8004424:	20000004 	.word	0x20000004
 8004428:	20000008 	.word	0x20000008

0800442c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	b08b      	sub	sp, #44	; 0x2c
 8004430:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004446:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d002      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x30>
 8004456:	2b08      	cmp	r3, #8
 8004458:	d003      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x36>
 800445a:	e03f      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800445e:	623b      	str	r3, [r7, #32]
      break;
 8004460:	e03f      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004468:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800446c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	fa92 f2a2 	rbit	r2, r2
 8004474:	607a      	str	r2, [r7, #4]
  return result;
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	fab2 f282 	clz	r2, r2
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	40d3      	lsrs	r3, r2
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	220f      	movs	r2, #15
 8004490:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	fa92 f2a2 	rbit	r2, r2
 8004498:	60fa      	str	r2, [r7, #12]
  return result;
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	fab2 f282 	clz	r2, r2
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	40d3      	lsrs	r3, r2
 80044a4:	4a15      	ldr	r2, [pc, #84]	; (80044fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80044a6:	5cd3      	ldrb	r3, [r2, r3]
 80044a8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044b4:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	e007      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044c6:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	fb02 f303 	mul.w	r3, r2, r3
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	623b      	str	r3, [r7, #32]
      break;
 80044da:	e002      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044de:	623b      	str	r3, [r7, #32]
      break;
 80044e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e2:	6a3b      	ldr	r3, [r7, #32]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	372c      	adds	r7, #44	; 0x2c
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40021000 	.word	0x40021000
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	0800b0a4 	.word	0x0800b0a4
 80044fc:	0800b0b4 	.word	0x0800b0b4

08004500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RCC_GetHCLKFreq+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000004 	.word	0x20000004

08004518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800451e:	f7ff ffef 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004522:	4601      	mov	r1, r0
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800452c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004530:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	fa92 f2a2 	rbit	r2, r2
 8004538:	603a      	str	r2, [r7, #0]
  return result;
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	fab2 f282 	clz	r2, r2
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	40d3      	lsrs	r3, r2
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004546:	5cd3      	ldrb	r3, [r2, r3]
 8004548:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	0800b09c 	.word	0x0800b09c

0800455c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004562:	f7ff ffcd 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004566:	4601      	mov	r1, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004570:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004574:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	603a      	str	r2, [r7, #0]
  return result;
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	40d3      	lsrs	r3, r2
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_RCC_GetPCLK2Freq+0x40>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	0800b09c 	.word	0x0800b09c

080045a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b092      	sub	sp, #72	; 0x48
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80d4 	beq.w	800476c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c4:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10e      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4a4a      	ldr	r2, [pc, #296]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045da:	61d3      	str	r3, [r2, #28]
 80045dc:	4b48      	ldr	r3, [pc, #288]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ee:	4b45      	ldr	r3, [pc, #276]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fa:	4b42      	ldr	r3, [pc, #264]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a41      	ldr	r2, [pc, #260]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004606:	f7fd fc37 	bl	8001e78 <HAL_GetTick>
 800460a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fd fc33 	bl	8001e78 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b64      	cmp	r3, #100	; 0x64
 800461a:	d901      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1d6      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b38      	ldr	r3, [pc, #224]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800462c:	4b34      	ldr	r3, [pc, #208]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004634:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8084 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004648:	429a      	cmp	r2, r3
 800464a:	d07c      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800464c:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	4b26      	ldr	r3, [pc, #152]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	461a      	mov	r2, r3
 8004676:	2301      	movs	r3, #1
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	461a      	mov	r2, r3
 800469a:	2300      	movs	r3, #0
 800469c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800469e:	4a18      	ldr	r2, [pc, #96]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d04b      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ae:	f7fd fbe3 	bl	8001e78 <HAL_GetTick>
 80046b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	e00a      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fd fbdf 	bl	8001e78 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e180      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046cc:	2302      	movs	r3, #2
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
 80046d8:	2302      	movs	r3, #2
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	61fb      	str	r3, [r7, #28]
  return result;
 80046e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e6:	fab3 f383 	clz	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f043 0302 	orr.w	r3, r3, #2
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d108      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046fa:	4b01      	ldr	r3, [pc, #4]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	e00d      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004700:	40021000 	.word	0x40021000
 8004704:	40007000 	.word	0x40007000
 8004708:	10908100 	.word	0x10908100
 800470c:	2302      	movs	r3, #2
 800470e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	4b9a      	ldr	r3, [pc, #616]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	2202      	movs	r2, #2
 800471e:	613a      	str	r2, [r7, #16]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	fa92 f2a2 	rbit	r2, r2
 8004726:	60fa      	str	r2, [r7, #12]
  return result;
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	fab2 f282 	clz	r2, r2
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	f002 021f 	and.w	r2, r2, #31
 800473a:	2101      	movs	r1, #1
 800473c:	fa01 f202 	lsl.w	r2, r1, r2
 8004740:	4013      	ands	r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0b7      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004746:	4b8f      	ldr	r3, [pc, #572]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	498c      	ldr	r1, [pc, #560]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004758:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800475c:	2b01      	cmp	r3, #1
 800475e:	d105      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4a87      	ldr	r2, [pc, #540]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004778:	4b82      	ldr	r3, [pc, #520]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f023 0203 	bic.w	r2, r3, #3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	497f      	ldr	r1, [pc, #508]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004796:	4b7b      	ldr	r3, [pc, #492]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	4978      	ldr	r1, [pc, #480]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047b4:	4b73      	ldr	r3, [pc, #460]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	4970      	ldr	r1, [pc, #448]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d2:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f023 0210 	bic.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4969      	ldr	r1, [pc, #420]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	4961      	ldr	r1, [pc, #388]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800480e:	4b5d      	ldr	r3, [pc, #372]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f023 0220 	bic.w	r2, r3, #32
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	495a      	ldr	r1, [pc, #360]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800482c:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	4952      	ldr	r1, [pc, #328]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800484a:	4b4e      	ldr	r3, [pc, #312]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	494b      	ldr	r1, [pc, #300]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004868:	4b46      	ldr	r3, [pc, #280]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	4943      	ldr	r1, [pc, #268]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004886:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	493c      	ldr	r1, [pc, #240]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048a4:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	4934      	ldr	r1, [pc, #208]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048c2:	4b30      	ldr	r3, [pc, #192]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	492d      	ldr	r1, [pc, #180]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048e0:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	4925      	ldr	r1, [pc, #148]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	491e      	ldr	r1, [pc, #120]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490c:	4313      	orrs	r3, r2
 800490e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	4916      	ldr	r1, [pc, #88]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	490f      	ldr	r1, [pc, #60]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004964:	4907      	ldr	r1, [pc, #28]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00c      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004976:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	e002      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
 8004988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498a:	4913      	ldr	r1, [pc, #76]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800498c:	4313      	orrs	r3, r2
 800498e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	490b      	ldr	r1, [pc, #44]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c6:	4904      	ldr	r1, [pc, #16]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3748      	adds	r7, #72	; 0x48
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e049      	b.n	8004a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc fff2 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fb80 	bl	8005120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e049      	b.n	8004b30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f841 	bl	8004b38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f000 fb29 	bl	8005120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_TIM_PWM_Start+0x24>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e03c      	b.n	8004bea <HAL_TIM_PWM_Start+0x9e>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d109      	bne.n	8004b8a <HAL_TIM_PWM_Start+0x3e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	e02f      	b.n	8004bea <HAL_TIM_PWM_Start+0x9e>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d109      	bne.n	8004ba4 <HAL_TIM_PWM_Start+0x58>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e022      	b.n	8004bea <HAL_TIM_PWM_Start+0x9e>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d109      	bne.n	8004bbe <HAL_TIM_PWM_Start+0x72>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	e015      	b.n	8004bea <HAL_TIM_PWM_Start+0x9e>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d109      	bne.n	8004bd8 <HAL_TIM_PWM_Start+0x8c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e008      	b.n	8004bea <HAL_TIM_PWM_Start+0x9e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0a1      	b.n	8004d36 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_PWM_Start+0xb6>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c00:	e023      	b.n	8004c4a <HAL_TIM_PWM_Start+0xfe>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_PWM_Start+0xc6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c10:	e01b      	b.n	8004c4a <HAL_TIM_PWM_Start+0xfe>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_PWM_Start+0xd6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c20:	e013      	b.n	8004c4a <HAL_TIM_PWM_Start+0xfe>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0xe6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c30:	e00b      	b.n	8004c4a <HAL_TIM_PWM_Start+0xfe>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0xf6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c40:	e003      	b.n	8004c4a <HAL_TIM_PWM_Start+0xfe>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	6839      	ldr	r1, [r7, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fea2 	bl	800599c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a38      	ldr	r2, [pc, #224]	; (8004d40 <HAL_TIM_PWM_Start+0x1f4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d018      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x148>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a37      	ldr	r2, [pc, #220]	; (8004d44 <HAL_TIM_PWM_Start+0x1f8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x148>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a35      	ldr	r2, [pc, #212]	; (8004d48 <HAL_TIM_PWM_Start+0x1fc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x148>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <HAL_TIM_PWM_Start+0x200>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x148>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a32      	ldr	r2, [pc, #200]	; (8004d50 <HAL_TIM_PWM_Start+0x204>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_TIM_PWM_Start+0x148>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a31      	ldr	r2, [pc, #196]	; (8004d54 <HAL_TIM_PWM_Start+0x208>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d101      	bne.n	8004c98 <HAL_TIM_PWM_Start+0x14c>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <HAL_TIM_PWM_Start+0x14e>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <HAL_TIM_PWM_Start+0x1f4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x1a8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d018      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x1a8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <HAL_TIM_PWM_Start+0x20c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x1a8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a22      	ldr	r2, [pc, #136]	; (8004d5c <HAL_TIM_PWM_Start+0x210>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x1a8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <HAL_TIM_PWM_Start+0x1f8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x1a8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <HAL_TIM_PWM_Start+0x1fc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x1a8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_TIM_PWM_Start+0x208>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d115      	bne.n	8004d20 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_TIM_PWM_Start+0x214>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d015      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1e6>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0c:	d011      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	e008      	b.n	8004d32 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e000      	b.n	8004d34 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800
 8004d54:	40015000 	.word	0x40015000
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	00010007 	.word	0x00010007

08004d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e0ff      	b.n	8004f82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b14      	cmp	r3, #20
 8004d8e:	f200 80f0 	bhi.w	8004f72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004f73 	.word	0x08004f73
 8004da0:	08004f73 	.word	0x08004f73
 8004da4:	08004f73 	.word	0x08004f73
 8004da8:	08004e2d 	.word	0x08004e2d
 8004dac:	08004f73 	.word	0x08004f73
 8004db0:	08004f73 	.word	0x08004f73
 8004db4:	08004f73 	.word	0x08004f73
 8004db8:	08004e6f 	.word	0x08004e6f
 8004dbc:	08004f73 	.word	0x08004f73
 8004dc0:	08004f73 	.word	0x08004f73
 8004dc4:	08004f73 	.word	0x08004f73
 8004dc8:	08004eaf 	.word	0x08004eaf
 8004dcc:	08004f73 	.word	0x08004f73
 8004dd0:	08004f73 	.word	0x08004f73
 8004dd4:	08004f73 	.word	0x08004f73
 8004dd8:	08004ef1 	.word	0x08004ef1
 8004ddc:	08004f73 	.word	0x08004f73
 8004de0:	08004f73 	.word	0x08004f73
 8004de4:	08004f73 	.word	0x08004f73
 8004de8:	08004f31 	.word	0x08004f31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fa32 	bl	800525c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0204 	bic.w	r2, r2, #4
 8004e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6999      	ldr	r1, [r3, #24]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	619a      	str	r2, [r3, #24]
      break;
 8004e2a:	e0a5      	b.n	8004f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 faac 	bl	8005390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	619a      	str	r2, [r3, #24]
      break;
 8004e6c:	e084      	b.n	8004f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fb1f 	bl	80054b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0208 	orr.w	r2, r2, #8
 8004e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0204 	bic.w	r2, r2, #4
 8004e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	61da      	str	r2, [r3, #28]
      break;
 8004eac:	e064      	b.n	8004f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fb91 	bl	80055dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	021a      	lsls	r2, r3, #8
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	61da      	str	r2, [r3, #28]
      break;
 8004eee:	e043      	b.n	8004f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fbe0 	bl	80056bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0208 	orr.w	r2, r2, #8
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0204 	bic.w	r2, r2, #4
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f2e:	e023      	b.n	8004f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fc2a 	bl	8005790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	021a      	lsls	r2, r3, #8
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f70:	e002      	b.n	8004f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
      break;
 8004f76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop

08004f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0b6      	b.n	8005116 <HAL_TIM_ConfigClockSource+0x18a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe4:	d03e      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0xd8>
 8004fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fea:	f200 8087 	bhi.w	80050fc <HAL_TIM_ConfigClockSource+0x170>
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	f000 8086 	beq.w	8005102 <HAL_TIM_ConfigClockSource+0x176>
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	d87f      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x170>
 8004ffc:	2b70      	cmp	r3, #112	; 0x70
 8004ffe:	d01a      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0xaa>
 8005000:	2b70      	cmp	r3, #112	; 0x70
 8005002:	d87b      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x170>
 8005004:	2b60      	cmp	r3, #96	; 0x60
 8005006:	d050      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x11e>
 8005008:	2b60      	cmp	r3, #96	; 0x60
 800500a:	d877      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x170>
 800500c:	2b50      	cmp	r3, #80	; 0x50
 800500e:	d03c      	beq.n	800508a <HAL_TIM_ConfigClockSource+0xfe>
 8005010:	2b50      	cmp	r3, #80	; 0x50
 8005012:	d873      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x170>
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d058      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x13e>
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d86f      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x170>
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d064      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x15e>
 8005020:	2b30      	cmp	r3, #48	; 0x30
 8005022:	d86b      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x170>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d060      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x15e>
 8005028:	2b20      	cmp	r3, #32
 800502a:	d867      	bhi.n	80050fc <HAL_TIM_ConfigClockSource+0x170>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05c      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x15e>
 8005030:	2b10      	cmp	r3, #16
 8005032:	d05a      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x15e>
 8005034:	e062      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6899      	ldr	r1, [r3, #8]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f000 fc89 	bl	800595c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	609a      	str	r2, [r3, #8]
      break;
 8005062:	e04f      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6899      	ldr	r1, [r3, #8]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f000 fc72 	bl	800595c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005086:	609a      	str	r2, [r3, #8]
      break;
 8005088:	e03c      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6859      	ldr	r1, [r3, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	461a      	mov	r2, r3
 8005098:	f000 fbe6 	bl	8005868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2150      	movs	r1, #80	; 0x50
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fc3f 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80050a8:	e02c      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6859      	ldr	r1, [r3, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	461a      	mov	r2, r3
 80050b8:	f000 fc05 	bl	80058c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2160      	movs	r1, #96	; 0x60
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fc2f 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80050c8:	e01c      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6859      	ldr	r1, [r3, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f000 fbc6 	bl	8005868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2140      	movs	r1, #64	; 0x40
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fc1f 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80050e8:	e00c      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f000 fc16 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80050fa:	e003      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005100:	e000      	b.n	8005104 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005114:	7bfb      	ldrb	r3, [r7, #15]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a42      	ldr	r2, [pc, #264]	; (800523c <TIM_Base_SetConfig+0x11c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513e:	d00f      	beq.n	8005160 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3f      	ldr	r2, [pc, #252]	; (8005240 <TIM_Base_SetConfig+0x120>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00b      	beq.n	8005160 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a3e      	ldr	r2, [pc, #248]	; (8005244 <TIM_Base_SetConfig+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a3d      	ldr	r2, [pc, #244]	; (8005248 <TIM_Base_SetConfig+0x128>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3c      	ldr	r2, [pc, #240]	; (800524c <TIM_Base_SetConfig+0x12c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d108      	bne.n	8005172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a31      	ldr	r2, [pc, #196]	; (800523c <TIM_Base_SetConfig+0x11c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01f      	beq.n	80051ba <TIM_Base_SetConfig+0x9a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005180:	d01b      	beq.n	80051ba <TIM_Base_SetConfig+0x9a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2e      	ldr	r2, [pc, #184]	; (8005240 <TIM_Base_SetConfig+0x120>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d017      	beq.n	80051ba <TIM_Base_SetConfig+0x9a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <TIM_Base_SetConfig+0x124>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <TIM_Base_SetConfig+0x9a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2c      	ldr	r2, [pc, #176]	; (8005248 <TIM_Base_SetConfig+0x128>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00f      	beq.n	80051ba <TIM_Base_SetConfig+0x9a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <TIM_Base_SetConfig+0x130>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0x9a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <TIM_Base_SetConfig+0x134>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0x9a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <TIM_Base_SetConfig+0x138>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0x9a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a25      	ldr	r2, [pc, #148]	; (800524c <TIM_Base_SetConfig+0x12c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a12      	ldr	r2, [pc, #72]	; (800523c <TIM_Base_SetConfig+0x11c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x100>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a13      	ldr	r2, [pc, #76]	; (8005248 <TIM_Base_SetConfig+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x100>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a13      	ldr	r2, [pc, #76]	; (8005250 <TIM_Base_SetConfig+0x130>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x100>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a12      	ldr	r2, [pc, #72]	; (8005254 <TIM_Base_SetConfig+0x134>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x100>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a11      	ldr	r2, [pc, #68]	; (8005258 <TIM_Base_SetConfig+0x138>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x100>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a0c      	ldr	r2, [pc, #48]	; (800524c <TIM_Base_SetConfig+0x12c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d103      	bne.n	8005228 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	615a      	str	r2, [r3, #20]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40013400 	.word	0x40013400
 800524c:	40015000 	.word	0x40015000
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800

0800525c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0201 	bic.w	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a30      	ldr	r2, [pc, #192]	; (8005378 <TIM_OC1_SetConfig+0x11c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <TIM_OC1_SetConfig+0x88>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a2f      	ldr	r2, [pc, #188]	; (800537c <TIM_OC1_SetConfig+0x120>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00f      	beq.n	80052e4 <TIM_OC1_SetConfig+0x88>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a2e      	ldr	r2, [pc, #184]	; (8005380 <TIM_OC1_SetConfig+0x124>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_OC1_SetConfig+0x88>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a2d      	ldr	r2, [pc, #180]	; (8005384 <TIM_OC1_SetConfig+0x128>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_OC1_SetConfig+0x88>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <TIM_OC1_SetConfig+0x12c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_OC1_SetConfig+0x88>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a2b      	ldr	r2, [pc, #172]	; (800538c <TIM_OC1_SetConfig+0x130>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10c      	bne.n	80052fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0308 	bic.w	r3, r3, #8
 80052ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <TIM_OC1_SetConfig+0x11c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_OC1_SetConfig+0xd2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <TIM_OC1_SetConfig+0x120>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_OC1_SetConfig+0xd2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1b      	ldr	r2, [pc, #108]	; (8005380 <TIM_OC1_SetConfig+0x124>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_OC1_SetConfig+0xd2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1a      	ldr	r2, [pc, #104]	; (8005384 <TIM_OC1_SetConfig+0x128>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_OC1_SetConfig+0xd2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a19      	ldr	r2, [pc, #100]	; (8005388 <TIM_OC1_SetConfig+0x12c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_OC1_SetConfig+0xd2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a18      	ldr	r2, [pc, #96]	; (800538c <TIM_OC1_SetConfig+0x130>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d111      	bne.n	8005352 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800533c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40013400 	.word	0x40013400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800
 800538c:	40015000 	.word	0x40015000

08005390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0210 	bic.w	r2, r3, #16
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0320 	bic.w	r3, r3, #32
 80053de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a2c      	ldr	r2, [pc, #176]	; (80054a0 <TIM_OC2_SetConfig+0x110>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_OC2_SetConfig+0x74>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a2b      	ldr	r2, [pc, #172]	; (80054a4 <TIM_OC2_SetConfig+0x114>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC2_SetConfig+0x74>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <TIM_OC2_SetConfig+0x118>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10d      	bne.n	8005420 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a1f      	ldr	r2, [pc, #124]	; (80054a0 <TIM_OC2_SetConfig+0x110>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <TIM_OC2_SetConfig+0xc0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <TIM_OC2_SetConfig+0x114>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00f      	beq.n	8005450 <TIM_OC2_SetConfig+0xc0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <TIM_OC2_SetConfig+0x11c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_OC2_SetConfig+0xc0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <TIM_OC2_SetConfig+0x120>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_OC2_SetConfig+0xc0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <TIM_OC2_SetConfig+0x124>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC2_SetConfig+0xc0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <TIM_OC2_SetConfig+0x118>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d113      	bne.n	8005478 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005456:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800545e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40015000 	.word	0x40015000
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800

080054b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2b      	ldr	r2, [pc, #172]	; (80055c4 <TIM_OC3_SetConfig+0x10c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_OC3_SetConfig+0x72>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <TIM_OC3_SetConfig+0x110>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC3_SetConfig+0x72>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a29      	ldr	r2, [pc, #164]	; (80055cc <TIM_OC3_SetConfig+0x114>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d10d      	bne.n	8005546 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005544:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <TIM_OC3_SetConfig+0x10c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <TIM_OC3_SetConfig+0xbe>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <TIM_OC3_SetConfig+0x110>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00f      	beq.n	8005576 <TIM_OC3_SetConfig+0xbe>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <TIM_OC3_SetConfig+0x118>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00b      	beq.n	8005576 <TIM_OC3_SetConfig+0xbe>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <TIM_OC3_SetConfig+0x11c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d007      	beq.n	8005576 <TIM_OC3_SetConfig+0xbe>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <TIM_OC3_SetConfig+0x120>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_OC3_SetConfig+0xbe>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a16      	ldr	r2, [pc, #88]	; (80055cc <TIM_OC3_SetConfig+0x114>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d113      	bne.n	800559e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800557c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40013400 	.word	0x40013400
 80055cc:	40015000 	.word	0x40015000
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800

080055dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	031b      	lsls	r3, r3, #12
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1a      	ldr	r2, [pc, #104]	; (80056a4 <TIM_OC4_SetConfig+0xc8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <TIM_OC4_SetConfig+0x8c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <TIM_OC4_SetConfig+0xcc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00f      	beq.n	8005668 <TIM_OC4_SetConfig+0x8c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <TIM_OC4_SetConfig+0xd0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_OC4_SetConfig+0x8c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <TIM_OC4_SetConfig+0xd4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_OC4_SetConfig+0x8c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <TIM_OC4_SetConfig+0xd8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC4_SetConfig+0x8c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <TIM_OC4_SetConfig+0xdc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d109      	bne.n	800567c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800566e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800
 80056b8:	40015000 	.word	0x40015000

080056bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a19      	ldr	r2, [pc, #100]	; (8005778 <TIM_OC5_SetConfig+0xbc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <TIM_OC5_SetConfig+0x82>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <TIM_OC5_SetConfig+0xc0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00f      	beq.n	800573e <TIM_OC5_SetConfig+0x82>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <TIM_OC5_SetConfig+0xc4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_OC5_SetConfig+0x82>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a16      	ldr	r2, [pc, #88]	; (8005784 <TIM_OC5_SetConfig+0xc8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <TIM_OC5_SetConfig+0x82>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a15      	ldr	r2, [pc, #84]	; (8005788 <TIM_OC5_SetConfig+0xcc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_OC5_SetConfig+0x82>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a14      	ldr	r2, [pc, #80]	; (800578c <TIM_OC5_SetConfig+0xd0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d109      	bne.n	8005752 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40012c00 	.word	0x40012c00
 800577c:	40013400 	.word	0x40013400
 8005780:	40014000 	.word	0x40014000
 8005784:	40014400 	.word	0x40014400
 8005788:	40014800 	.word	0x40014800
 800578c:	40015000 	.word	0x40015000

08005790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	051b      	lsls	r3, r3, #20
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <TIM_OC6_SetConfig+0xc0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <TIM_OC6_SetConfig+0x84>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a19      	ldr	r2, [pc, #100]	; (8005854 <TIM_OC6_SetConfig+0xc4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00f      	beq.n	8005814 <TIM_OC6_SetConfig+0x84>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a18      	ldr	r2, [pc, #96]	; (8005858 <TIM_OC6_SetConfig+0xc8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_OC6_SetConfig+0x84>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a17      	ldr	r2, [pc, #92]	; (800585c <TIM_OC6_SetConfig+0xcc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_OC6_SetConfig+0x84>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a16      	ldr	r2, [pc, #88]	; (8005860 <TIM_OC6_SetConfig+0xd0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC6_SetConfig+0x84>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a15      	ldr	r2, [pc, #84]	; (8005864 <TIM_OC6_SetConfig+0xd4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d109      	bne.n	8005828 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40013400 	.word	0x40013400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800
 8005864:	40015000 	.word	0x40015000

08005868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f023 0201 	bic.w	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 030a 	bic.w	r3, r3, #10
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f023 0210 	bic.w	r2, r3, #16
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	031b      	lsls	r3, r3, #12
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	f043 0307 	orr.w	r3, r3, #7
 8005948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	021a      	lsls	r2, r3, #8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	431a      	orrs	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2201      	movs	r2, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1a      	ldr	r2, [r3, #32]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	43db      	mvns	r3, r3
 80059be:	401a      	ands	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1a      	ldr	r2, [r3, #32]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	fa01 f303 	lsl.w	r3, r1, r3
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e06d      	b.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a30      	ldr	r2, [pc, #192]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d01d      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7c:	d018      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00e      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a15      	ldr	r2, [pc, #84]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a16      	ldr	r2, [pc, #88]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10c      	bne.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40015000 	.word	0x40015000
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40014000 	.word	0x40014000

08005b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e040      	b.n	8005b94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb ffd8 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2224      	movs	r2, #36	; 0x24
 8005b2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8b6 	bl	8005cb0 <UART_SetConfig>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e022      	b.n	8005b94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa7e 	bl	8006058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb05 	bl	800619c <UART_CheckIdleState>
 8005b92:	4603      	mov	r3, r0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	; 0x28
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d178      	bne.n	8005ca6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_UART_Transmit+0x24>
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e071      	b.n	8005ca8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2221      	movs	r2, #33	; 0x21
 8005bd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bd2:	f7fc f951 	bl	8001e78 <HAL_GetTick>
 8005bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	88fa      	ldrh	r2, [r7, #6]
 8005be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf0:	d108      	bne.n	8005c04 <HAL_UART_Transmit+0x68>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e003      	b.n	8005c0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c0c:	e030      	b.n	8005c70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fb67 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e03c      	b.n	8005ca8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	881a      	ldrh	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c40:	b292      	uxth	r2, r2
 8005c42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	3302      	adds	r3, #2
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	e008      	b.n	8005c5e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	781a      	ldrb	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	b292      	uxth	r2, r2
 8005c56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1c8      	bne.n	8005c0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2200      	movs	r2, #0
 8005c84:	2140      	movs	r1, #64	; 0x40
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fb30 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e005      	b.n	8005ca8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e000      	b.n	8005ca8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
  }
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b92      	ldr	r3, [pc, #584]	; (8005f24 <UART_SetConfig+0x274>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	6979      	ldr	r1, [r7, #20]
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a80      	ldr	r2, [pc, #512]	; (8005f28 <UART_SetConfig+0x278>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d120      	bne.n	8005d6e <UART_SetConfig+0xbe>
 8005d2c:	4b7f      	ldr	r3, [pc, #508]	; (8005f2c <UART_SetConfig+0x27c>)
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d817      	bhi.n	8005d68 <UART_SetConfig+0xb8>
 8005d38:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0x90>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d5d 	.word	0x08005d5d
 8005d48:	08005d63 	.word	0x08005d63
 8005d4c:	08005d57 	.word	0x08005d57
 8005d50:	2301      	movs	r3, #1
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e0b5      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005d56:	2302      	movs	r3, #2
 8005d58:	77fb      	strb	r3, [r7, #31]
 8005d5a:	e0b2      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e0af      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005d62:	2308      	movs	r3, #8
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e0ac      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e0a9      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a6f      	ldr	r2, [pc, #444]	; (8005f30 <UART_SetConfig+0x280>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d124      	bne.n	8005dc2 <UART_SetConfig+0x112>
 8005d78:	4b6c      	ldr	r3, [pc, #432]	; (8005f2c <UART_SetConfig+0x27c>)
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d84:	d011      	beq.n	8005daa <UART_SetConfig+0xfa>
 8005d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d8a:	d817      	bhi.n	8005dbc <UART_SetConfig+0x10c>
 8005d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d90:	d011      	beq.n	8005db6 <UART_SetConfig+0x106>
 8005d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d96:	d811      	bhi.n	8005dbc <UART_SetConfig+0x10c>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <UART_SetConfig+0xf4>
 8005d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da0:	d006      	beq.n	8005db0 <UART_SetConfig+0x100>
 8005da2:	e00b      	b.n	8005dbc <UART_SetConfig+0x10c>
 8005da4:	2300      	movs	r3, #0
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e08b      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005daa:	2302      	movs	r3, #2
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e088      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005db0:	2304      	movs	r3, #4
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e085      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005db6:	2308      	movs	r3, #8
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e082      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e07f      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a5b      	ldr	r2, [pc, #364]	; (8005f34 <UART_SetConfig+0x284>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d124      	bne.n	8005e16 <UART_SetConfig+0x166>
 8005dcc:	4b57      	ldr	r3, [pc, #348]	; (8005f2c <UART_SetConfig+0x27c>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005dd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dd8:	d011      	beq.n	8005dfe <UART_SetConfig+0x14e>
 8005dda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dde:	d817      	bhi.n	8005e10 <UART_SetConfig+0x160>
 8005de0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005de4:	d011      	beq.n	8005e0a <UART_SetConfig+0x15a>
 8005de6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dea:	d811      	bhi.n	8005e10 <UART_SetConfig+0x160>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <UART_SetConfig+0x148>
 8005df0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005df4:	d006      	beq.n	8005e04 <UART_SetConfig+0x154>
 8005df6:	e00b      	b.n	8005e10 <UART_SetConfig+0x160>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e061      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e05e      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e04:	2304      	movs	r3, #4
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e05b      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e058      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e10:	2310      	movs	r3, #16
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e055      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a47      	ldr	r2, [pc, #284]	; (8005f38 <UART_SetConfig+0x288>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d124      	bne.n	8005e6a <UART_SetConfig+0x1ba>
 8005e20:	4b42      	ldr	r3, [pc, #264]	; (8005f2c <UART_SetConfig+0x27c>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e2c:	d011      	beq.n	8005e52 <UART_SetConfig+0x1a2>
 8005e2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e32:	d817      	bhi.n	8005e64 <UART_SetConfig+0x1b4>
 8005e34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e38:	d011      	beq.n	8005e5e <UART_SetConfig+0x1ae>
 8005e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e3e:	d811      	bhi.n	8005e64 <UART_SetConfig+0x1b4>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <UART_SetConfig+0x19c>
 8005e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e48:	d006      	beq.n	8005e58 <UART_SetConfig+0x1a8>
 8005e4a:	e00b      	b.n	8005e64 <UART_SetConfig+0x1b4>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e037      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e52:	2302      	movs	r3, #2
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e034      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e031      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e02e      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e64:	2310      	movs	r3, #16
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e02b      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a33      	ldr	r2, [pc, #204]	; (8005f3c <UART_SetConfig+0x28c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d124      	bne.n	8005ebe <UART_SetConfig+0x20e>
 8005e74:	4b2d      	ldr	r3, [pc, #180]	; (8005f2c <UART_SetConfig+0x27c>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e80:	d011      	beq.n	8005ea6 <UART_SetConfig+0x1f6>
 8005e82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e86:	d817      	bhi.n	8005eb8 <UART_SetConfig+0x208>
 8005e88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e8c:	d011      	beq.n	8005eb2 <UART_SetConfig+0x202>
 8005e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e92:	d811      	bhi.n	8005eb8 <UART_SetConfig+0x208>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <UART_SetConfig+0x1f0>
 8005e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9c:	d006      	beq.n	8005eac <UART_SetConfig+0x1fc>
 8005e9e:	e00b      	b.n	8005eb8 <UART_SetConfig+0x208>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e00d      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	77fb      	strb	r3, [r7, #31]
 8005eaa:	e00a      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005eac:	2304      	movs	r3, #4
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e007      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e004      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e001      	b.n	8005ec2 <UART_SetConfig+0x212>
 8005ebe:	2310      	movs	r3, #16
 8005ec0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eca:	d16b      	bne.n	8005fa4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d838      	bhi.n	8005f44 <UART_SetConfig+0x294>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <UART_SetConfig+0x228>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005efd 	.word	0x08005efd
 8005edc:	08005f05 	.word	0x08005f05
 8005ee0:	08005f0d 	.word	0x08005f0d
 8005ee4:	08005f45 	.word	0x08005f45
 8005ee8:	08005f13 	.word	0x08005f13
 8005eec:	08005f45 	.word	0x08005f45
 8005ef0:	08005f45 	.word	0x08005f45
 8005ef4:	08005f45 	.word	0x08005f45
 8005ef8:	08005f1b 	.word	0x08005f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005efc:	f7fe fb0c 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8005f00:	61b8      	str	r0, [r7, #24]
        break;
 8005f02:	e024      	b.n	8005f4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f04:	f7fe fb2a 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8005f08:	61b8      	str	r0, [r7, #24]
        break;
 8005f0a:	e020      	b.n	8005f4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <UART_SetConfig+0x290>)
 8005f0e:	61bb      	str	r3, [r7, #24]
        break;
 8005f10:	e01d      	b.n	8005f4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f12:	f7fe fa8b 	bl	800442c <HAL_RCC_GetSysClockFreq>
 8005f16:	61b8      	str	r0, [r7, #24]
        break;
 8005f18:	e019      	b.n	8005f4e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1e:	61bb      	str	r3, [r7, #24]
        break;
 8005f20:	e015      	b.n	8005f4e <UART_SetConfig+0x29e>
 8005f22:	bf00      	nop
 8005f24:	efff69f3 	.word	0xefff69f3
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	40004800 	.word	0x40004800
 8005f38:	40004c00 	.word	0x40004c00
 8005f3c:	40005000 	.word	0x40005000
 8005f40:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	77bb      	strb	r3, [r7, #30]
        break;
 8005f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d073      	beq.n	800603c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	005a      	lsls	r2, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	441a      	add	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b0f      	cmp	r3, #15
 8005f6e:	d916      	bls.n	8005f9e <UART_SetConfig+0x2ee>
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f76:	d212      	bcs.n	8005f9e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f023 030f 	bic.w	r3, r3, #15
 8005f80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	89fb      	ldrh	r3, [r7, #14]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	89fa      	ldrh	r2, [r7, #14]
 8005f9a:	60da      	str	r2, [r3, #12]
 8005f9c:	e04e      	b.n	800603c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	77bb      	strb	r3, [r7, #30]
 8005fa2:	e04b      	b.n	800603c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fa4:	7ffb      	ldrb	r3, [r7, #31]
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d827      	bhi.n	8005ffa <UART_SetConfig+0x34a>
 8005faa:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x300>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005ffb 	.word	0x08005ffb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005ffb 	.word	0x08005ffb
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	08005ffb 	.word	0x08005ffb
 8005fd0:	08005ff3 	.word	0x08005ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe faa0 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61b8      	str	r0, [r7, #24]
        break;
 8005fda:	e013      	b.n	8006004 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fe fabe 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8005fe0:	61b8      	str	r0, [r7, #24]
        break;
 8005fe2:	e00f      	b.n	8006004 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <UART_SetConfig+0x3a4>)
 8005fe6:	61bb      	str	r3, [r7, #24]
        break;
 8005fe8:	e00c      	b.n	8006004 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fea:	f7fe fa1f 	bl	800442c <HAL_RCC_GetSysClockFreq>
 8005fee:	61b8      	str	r0, [r7, #24]
        break;
 8005ff0:	e008      	b.n	8006004 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff6:	61bb      	str	r3, [r7, #24]
        break;
 8005ff8:	e004      	b.n	8006004 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	77bb      	strb	r3, [r7, #30]
        break;
 8006002:	bf00      	nop
    }

    if (pclk != 0U)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d018      	beq.n	800603c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	085a      	lsrs	r2, r3, #1
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	441a      	add	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b0f      	cmp	r3, #15
 8006022:	d909      	bls.n	8006038 <UART_SetConfig+0x388>
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602a:	d205      	bcs.n	8006038 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	b29a      	uxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	e001      	b.n	800603c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006048:	7fbb      	ldrb	r3, [r7, #30]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	007a1200 	.word	0x007a1200

08006058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01a      	beq.n	800616e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d10a      	bne.n	800616e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b098      	sub	sp, #96	; 0x60
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061ac:	f7fb fe64 	bl	8001e78 <HAL_GetTick>
 80061b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d12e      	bne.n	800621e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c8:	2200      	movs	r2, #0
 80061ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f88c 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d021      	beq.n	800621e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ee:	653b      	str	r3, [r7, #80]	; 0x50
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f8:	647b      	str	r3, [r7, #68]	; 0x44
 80061fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e6      	bne.n	80061da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e062      	b.n	80062e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b04      	cmp	r3, #4
 800622a:	d149      	bne.n	80062c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800622c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006234:	2200      	movs	r2, #0
 8006236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f856 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d03c      	beq.n	80062c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	623b      	str	r3, [r7, #32]
   return(result);
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	633b      	str	r3, [r7, #48]	; 0x30
 8006266:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800626a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e6      	bne.n	8006246 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	60fb      	str	r3, [r7, #12]
   return(result);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3308      	adds	r3, #8
 8006296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006298:	61fa      	str	r2, [r7, #28]
 800629a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	617b      	str	r3, [r7, #20]
   return(result);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e5      	bne.n	8006278 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e011      	b.n	80062e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3758      	adds	r7, #88	; 0x58
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fc:	e049      	b.n	8006392 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d045      	beq.n	8006392 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006306:	f7fb fdb7 	bl	8001e78 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <UART_WaitOnFlagUntilTimeout+0x30>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e048      	b.n	80063b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d031      	beq.n	8006392 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b08      	cmp	r3, #8
 800633a:	d110      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2208      	movs	r2, #8
 8006342:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f838 	bl	80063ba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2208      	movs	r2, #8
 800634e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e029      	b.n	80063b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636c:	d111      	bne.n	8006392 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f81e 	bl	80063ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e00f      	b.n	80063b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4013      	ands	r3, r2
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	bf0c      	ite	eq
 80063a2:	2301      	moveq	r3, #1
 80063a4:	2300      	movne	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d0a6      	beq.n	80062fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b095      	sub	sp, #84	; 0x54
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	643b      	str	r3, [r7, #64]	; 0x40
 80063e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	61fb      	str	r3, [r7, #28]
   return(result);
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	64bb      	str	r3, [r7, #72]	; 0x48
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800641a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642c:	2b01      	cmp	r3, #1
 800642e:	d118      	bne.n	8006462 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	60bb      	str	r3, [r7, #8]
   return(result);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 0310 	bic.w	r3, r3, #16
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6979      	ldr	r1, [r7, #20]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	613b      	str	r3, [r7, #16]
   return(result);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e6      	bne.n	8006430 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006476:	bf00      	nop
 8006478:	3754      	adds	r7, #84	; 0x54
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <__errno>:
 8006484:	4b01      	ldr	r3, [pc, #4]	; (800648c <__errno+0x8>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000010 	.word	0x20000010

08006490 <__libc_init_array>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	4d0d      	ldr	r5, [pc, #52]	; (80064c8 <__libc_init_array+0x38>)
 8006494:	4c0d      	ldr	r4, [pc, #52]	; (80064cc <__libc_init_array+0x3c>)
 8006496:	1b64      	subs	r4, r4, r5
 8006498:	10a4      	asrs	r4, r4, #2
 800649a:	2600      	movs	r6, #0
 800649c:	42a6      	cmp	r6, r4
 800649e:	d109      	bne.n	80064b4 <__libc_init_array+0x24>
 80064a0:	4d0b      	ldr	r5, [pc, #44]	; (80064d0 <__libc_init_array+0x40>)
 80064a2:	4c0c      	ldr	r4, [pc, #48]	; (80064d4 <__libc_init_array+0x44>)
 80064a4:	f004 fda4 	bl	800aff0 <_init>
 80064a8:	1b64      	subs	r4, r4, r5
 80064aa:	10a4      	asrs	r4, r4, #2
 80064ac:	2600      	movs	r6, #0
 80064ae:	42a6      	cmp	r6, r4
 80064b0:	d105      	bne.n	80064be <__libc_init_array+0x2e>
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b8:	4798      	blx	r3
 80064ba:	3601      	adds	r6, #1
 80064bc:	e7ee      	b.n	800649c <__libc_init_array+0xc>
 80064be:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c2:	4798      	blx	r3
 80064c4:	3601      	adds	r6, #1
 80064c6:	e7f2      	b.n	80064ae <__libc_init_array+0x1e>
 80064c8:	0800b8c0 	.word	0x0800b8c0
 80064cc:	0800b8c0 	.word	0x0800b8c0
 80064d0:	0800b8c0 	.word	0x0800b8c0
 80064d4:	0800b8c4 	.word	0x0800b8c4

080064d8 <memset>:
 80064d8:	4402      	add	r2, r0
 80064da:	4603      	mov	r3, r0
 80064dc:	4293      	cmp	r3, r2
 80064de:	d100      	bne.n	80064e2 <memset+0xa>
 80064e0:	4770      	bx	lr
 80064e2:	f803 1b01 	strb.w	r1, [r3], #1
 80064e6:	e7f9      	b.n	80064dc <memset+0x4>

080064e8 <__cvt>:
 80064e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	ec55 4b10 	vmov	r4, r5, d0
 80064f0:	2d00      	cmp	r5, #0
 80064f2:	460e      	mov	r6, r1
 80064f4:	4619      	mov	r1, r3
 80064f6:	462b      	mov	r3, r5
 80064f8:	bfbb      	ittet	lt
 80064fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064fe:	461d      	movlt	r5, r3
 8006500:	2300      	movge	r3, #0
 8006502:	232d      	movlt	r3, #45	; 0x2d
 8006504:	700b      	strb	r3, [r1, #0]
 8006506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800650c:	4691      	mov	r9, r2
 800650e:	f023 0820 	bic.w	r8, r3, #32
 8006512:	bfbc      	itt	lt
 8006514:	4622      	movlt	r2, r4
 8006516:	4614      	movlt	r4, r2
 8006518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800651c:	d005      	beq.n	800652a <__cvt+0x42>
 800651e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006522:	d100      	bne.n	8006526 <__cvt+0x3e>
 8006524:	3601      	adds	r6, #1
 8006526:	2102      	movs	r1, #2
 8006528:	e000      	b.n	800652c <__cvt+0x44>
 800652a:	2103      	movs	r1, #3
 800652c:	ab03      	add	r3, sp, #12
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	ab02      	add	r3, sp, #8
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	ec45 4b10 	vmov	d0, r4, r5
 8006538:	4653      	mov	r3, sl
 800653a:	4632      	mov	r2, r6
 800653c:	f000 fe18 	bl	8007170 <_dtoa_r>
 8006540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006544:	4607      	mov	r7, r0
 8006546:	d102      	bne.n	800654e <__cvt+0x66>
 8006548:	f019 0f01 	tst.w	r9, #1
 800654c:	d022      	beq.n	8006594 <__cvt+0xac>
 800654e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006552:	eb07 0906 	add.w	r9, r7, r6
 8006556:	d110      	bne.n	800657a <__cvt+0x92>
 8006558:	783b      	ldrb	r3, [r7, #0]
 800655a:	2b30      	cmp	r3, #48	; 0x30
 800655c:	d10a      	bne.n	8006574 <__cvt+0x8c>
 800655e:	2200      	movs	r2, #0
 8006560:	2300      	movs	r3, #0
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7fa fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800656a:	b918      	cbnz	r0, 8006574 <__cvt+0x8c>
 800656c:	f1c6 0601 	rsb	r6, r6, #1
 8006570:	f8ca 6000 	str.w	r6, [sl]
 8006574:	f8da 3000 	ldr.w	r3, [sl]
 8006578:	4499      	add	r9, r3
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7fa faa9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006586:	b108      	cbz	r0, 800658c <__cvt+0xa4>
 8006588:	f8cd 900c 	str.w	r9, [sp, #12]
 800658c:	2230      	movs	r2, #48	; 0x30
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	454b      	cmp	r3, r9
 8006592:	d307      	bcc.n	80065a4 <__cvt+0xbc>
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006598:	1bdb      	subs	r3, r3, r7
 800659a:	4638      	mov	r0, r7
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	b004      	add	sp, #16
 80065a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	9103      	str	r1, [sp, #12]
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e7f0      	b.n	800658e <__cvt+0xa6>

080065ac <__exponent>:
 80065ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ae:	4603      	mov	r3, r0
 80065b0:	2900      	cmp	r1, #0
 80065b2:	bfb8      	it	lt
 80065b4:	4249      	neglt	r1, r1
 80065b6:	f803 2b02 	strb.w	r2, [r3], #2
 80065ba:	bfb4      	ite	lt
 80065bc:	222d      	movlt	r2, #45	; 0x2d
 80065be:	222b      	movge	r2, #43	; 0x2b
 80065c0:	2909      	cmp	r1, #9
 80065c2:	7042      	strb	r2, [r0, #1]
 80065c4:	dd2a      	ble.n	800661c <__exponent+0x70>
 80065c6:	f10d 0407 	add.w	r4, sp, #7
 80065ca:	46a4      	mov	ip, r4
 80065cc:	270a      	movs	r7, #10
 80065ce:	46a6      	mov	lr, r4
 80065d0:	460a      	mov	r2, r1
 80065d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80065d6:	fb07 1516 	mls	r5, r7, r6, r1
 80065da:	3530      	adds	r5, #48	; 0x30
 80065dc:	2a63      	cmp	r2, #99	; 0x63
 80065de:	f104 34ff 	add.w	r4, r4, #4294967295
 80065e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065e6:	4631      	mov	r1, r6
 80065e8:	dcf1      	bgt.n	80065ce <__exponent+0x22>
 80065ea:	3130      	adds	r1, #48	; 0x30
 80065ec:	f1ae 0502 	sub.w	r5, lr, #2
 80065f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065f4:	1c44      	adds	r4, r0, #1
 80065f6:	4629      	mov	r1, r5
 80065f8:	4561      	cmp	r1, ip
 80065fa:	d30a      	bcc.n	8006612 <__exponent+0x66>
 80065fc:	f10d 0209 	add.w	r2, sp, #9
 8006600:	eba2 020e 	sub.w	r2, r2, lr
 8006604:	4565      	cmp	r5, ip
 8006606:	bf88      	it	hi
 8006608:	2200      	movhi	r2, #0
 800660a:	4413      	add	r3, r2
 800660c:	1a18      	subs	r0, r3, r0
 800660e:	b003      	add	sp, #12
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006616:	f804 2f01 	strb.w	r2, [r4, #1]!
 800661a:	e7ed      	b.n	80065f8 <__exponent+0x4c>
 800661c:	2330      	movs	r3, #48	; 0x30
 800661e:	3130      	adds	r1, #48	; 0x30
 8006620:	7083      	strb	r3, [r0, #2]
 8006622:	70c1      	strb	r1, [r0, #3]
 8006624:	1d03      	adds	r3, r0, #4
 8006626:	e7f1      	b.n	800660c <__exponent+0x60>

08006628 <_printf_float>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	ed2d 8b02 	vpush	{d8}
 8006630:	b08d      	sub	sp, #52	; 0x34
 8006632:	460c      	mov	r4, r1
 8006634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006638:	4616      	mov	r6, r2
 800663a:	461f      	mov	r7, r3
 800663c:	4605      	mov	r5, r0
 800663e:	f001 fd3d 	bl	80080bc <_localeconv_r>
 8006642:	f8d0 a000 	ldr.w	sl, [r0]
 8006646:	4650      	mov	r0, sl
 8006648:	f7f9 fdca 	bl	80001e0 <strlen>
 800664c:	2300      	movs	r3, #0
 800664e:	930a      	str	r3, [sp, #40]	; 0x28
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	9305      	str	r3, [sp, #20]
 8006654:	f8d8 3000 	ldr.w	r3, [r8]
 8006658:	f894 b018 	ldrb.w	fp, [r4, #24]
 800665c:	3307      	adds	r3, #7
 800665e:	f023 0307 	bic.w	r3, r3, #7
 8006662:	f103 0208 	add.w	r2, r3, #8
 8006666:	f8c8 2000 	str.w	r2, [r8]
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006672:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006680:	ee08 0a10 	vmov	s16, r0
 8006684:	4b9f      	ldr	r3, [pc, #636]	; (8006904 <_printf_float+0x2dc>)
 8006686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	f7fa fa55 	bl	8000b3c <__aeabi_dcmpun>
 8006692:	bb88      	cbnz	r0, 80066f8 <_printf_float+0xd0>
 8006694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006698:	4b9a      	ldr	r3, [pc, #616]	; (8006904 <_printf_float+0x2dc>)
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	f7fa fa2f 	bl	8000b00 <__aeabi_dcmple>
 80066a2:	bb48      	cbnz	r0, 80066f8 <_printf_float+0xd0>
 80066a4:	2200      	movs	r2, #0
 80066a6:	2300      	movs	r3, #0
 80066a8:	4640      	mov	r0, r8
 80066aa:	4649      	mov	r1, r9
 80066ac:	f7fa fa1e 	bl	8000aec <__aeabi_dcmplt>
 80066b0:	b110      	cbz	r0, 80066b8 <_printf_float+0x90>
 80066b2:	232d      	movs	r3, #45	; 0x2d
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	4b93      	ldr	r3, [pc, #588]	; (8006908 <_printf_float+0x2e0>)
 80066ba:	4894      	ldr	r0, [pc, #592]	; (800690c <_printf_float+0x2e4>)
 80066bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066c0:	bf94      	ite	ls
 80066c2:	4698      	movls	r8, r3
 80066c4:	4680      	movhi	r8, r0
 80066c6:	2303      	movs	r3, #3
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	9b05      	ldr	r3, [sp, #20]
 80066cc:	f023 0204 	bic.w	r2, r3, #4
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	9700      	str	r7, [sp, #0]
 80066d8:	4633      	mov	r3, r6
 80066da:	aa0b      	add	r2, sp, #44	; 0x2c
 80066dc:	4621      	mov	r1, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 f9d8 	bl	8006a94 <_printf_common>
 80066e4:	3001      	adds	r0, #1
 80066e6:	f040 8090 	bne.w	800680a <_printf_float+0x1e2>
 80066ea:	f04f 30ff 	mov.w	r0, #4294967295
 80066ee:	b00d      	add	sp, #52	; 0x34
 80066f0:	ecbd 8b02 	vpop	{d8}
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	4640      	mov	r0, r8
 80066fe:	4649      	mov	r1, r9
 8006700:	f7fa fa1c 	bl	8000b3c <__aeabi_dcmpun>
 8006704:	b140      	cbz	r0, 8006718 <_printf_float+0xf0>
 8006706:	464b      	mov	r3, r9
 8006708:	2b00      	cmp	r3, #0
 800670a:	bfbc      	itt	lt
 800670c:	232d      	movlt	r3, #45	; 0x2d
 800670e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006712:	487f      	ldr	r0, [pc, #508]	; (8006910 <_printf_float+0x2e8>)
 8006714:	4b7f      	ldr	r3, [pc, #508]	; (8006914 <_printf_float+0x2ec>)
 8006716:	e7d1      	b.n	80066bc <_printf_float+0x94>
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800671e:	9206      	str	r2, [sp, #24]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	d13f      	bne.n	80067a4 <_printf_float+0x17c>
 8006724:	2306      	movs	r3, #6
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	6861      	ldr	r1, [r4, #4]
 800672c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006730:	2300      	movs	r3, #0
 8006732:	9303      	str	r3, [sp, #12]
 8006734:	ab0a      	add	r3, sp, #40	; 0x28
 8006736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800673a:	ab09      	add	r3, sp, #36	; 0x24
 800673c:	ec49 8b10 	vmov	d0, r8, r9
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6022      	str	r2, [r4, #0]
 8006744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006748:	4628      	mov	r0, r5
 800674a:	f7ff fecd 	bl	80064e8 <__cvt>
 800674e:	9b06      	ldr	r3, [sp, #24]
 8006750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006752:	2b47      	cmp	r3, #71	; 0x47
 8006754:	4680      	mov	r8, r0
 8006756:	d108      	bne.n	800676a <_printf_float+0x142>
 8006758:	1cc8      	adds	r0, r1, #3
 800675a:	db02      	blt.n	8006762 <_printf_float+0x13a>
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	4299      	cmp	r1, r3
 8006760:	dd41      	ble.n	80067e6 <_printf_float+0x1be>
 8006762:	f1ab 0b02 	sub.w	fp, fp, #2
 8006766:	fa5f fb8b 	uxtb.w	fp, fp
 800676a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800676e:	d820      	bhi.n	80067b2 <_printf_float+0x18a>
 8006770:	3901      	subs	r1, #1
 8006772:	465a      	mov	r2, fp
 8006774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006778:	9109      	str	r1, [sp, #36]	; 0x24
 800677a:	f7ff ff17 	bl	80065ac <__exponent>
 800677e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006780:	1813      	adds	r3, r2, r0
 8006782:	2a01      	cmp	r2, #1
 8006784:	4681      	mov	r9, r0
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	dc02      	bgt.n	8006790 <_printf_float+0x168>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	07d2      	lsls	r2, r2, #31
 800678e:	d501      	bpl.n	8006794 <_printf_float+0x16c>
 8006790:	3301      	adds	r3, #1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006798:	2b00      	cmp	r3, #0
 800679a:	d09c      	beq.n	80066d6 <_printf_float+0xae>
 800679c:	232d      	movs	r3, #45	; 0x2d
 800679e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a2:	e798      	b.n	80066d6 <_printf_float+0xae>
 80067a4:	9a06      	ldr	r2, [sp, #24]
 80067a6:	2a47      	cmp	r2, #71	; 0x47
 80067a8:	d1be      	bne.n	8006728 <_printf_float+0x100>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1bc      	bne.n	8006728 <_printf_float+0x100>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e7b9      	b.n	8006726 <_printf_float+0xfe>
 80067b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067b6:	d118      	bne.n	80067ea <_printf_float+0x1c2>
 80067b8:	2900      	cmp	r1, #0
 80067ba:	6863      	ldr	r3, [r4, #4]
 80067bc:	dd0b      	ble.n	80067d6 <_printf_float+0x1ae>
 80067be:	6121      	str	r1, [r4, #16]
 80067c0:	b913      	cbnz	r3, 80067c8 <_printf_float+0x1a0>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	07d0      	lsls	r0, r2, #31
 80067c6:	d502      	bpl.n	80067ce <_printf_float+0x1a6>
 80067c8:	3301      	adds	r3, #1
 80067ca:	440b      	add	r3, r1
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80067d0:	f04f 0900 	mov.w	r9, #0
 80067d4:	e7de      	b.n	8006794 <_printf_float+0x16c>
 80067d6:	b913      	cbnz	r3, 80067de <_printf_float+0x1b6>
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	07d2      	lsls	r2, r2, #31
 80067dc:	d501      	bpl.n	80067e2 <_printf_float+0x1ba>
 80067de:	3302      	adds	r3, #2
 80067e0:	e7f4      	b.n	80067cc <_printf_float+0x1a4>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e7f2      	b.n	80067cc <_printf_float+0x1a4>
 80067e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ec:	4299      	cmp	r1, r3
 80067ee:	db05      	blt.n	80067fc <_printf_float+0x1d4>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	6121      	str	r1, [r4, #16]
 80067f4:	07d8      	lsls	r0, r3, #31
 80067f6:	d5ea      	bpl.n	80067ce <_printf_float+0x1a6>
 80067f8:	1c4b      	adds	r3, r1, #1
 80067fa:	e7e7      	b.n	80067cc <_printf_float+0x1a4>
 80067fc:	2900      	cmp	r1, #0
 80067fe:	bfd4      	ite	le
 8006800:	f1c1 0202 	rsble	r2, r1, #2
 8006804:	2201      	movgt	r2, #1
 8006806:	4413      	add	r3, r2
 8006808:	e7e0      	b.n	80067cc <_printf_float+0x1a4>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	055a      	lsls	r2, r3, #21
 800680e:	d407      	bmi.n	8006820 <_printf_float+0x1f8>
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	4642      	mov	r2, r8
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	d12c      	bne.n	8006878 <_printf_float+0x250>
 800681e:	e764      	b.n	80066ea <_printf_float+0xc2>
 8006820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006824:	f240 80e0 	bls.w	80069e8 <_printf_float+0x3c0>
 8006828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	f7fa f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8006834:	2800      	cmp	r0, #0
 8006836:	d034      	beq.n	80068a2 <_printf_float+0x27a>
 8006838:	4a37      	ldr	r2, [pc, #220]	; (8006918 <_printf_float+0x2f0>)
 800683a:	2301      	movs	r3, #1
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af51 	beq.w	80066ea <_printf_float+0xc2>
 8006848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800684c:	429a      	cmp	r2, r3
 800684e:	db02      	blt.n	8006856 <_printf_float+0x22e>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	07d8      	lsls	r0, r3, #31
 8006854:	d510      	bpl.n	8006878 <_printf_float+0x250>
 8006856:	ee18 3a10 	vmov	r3, s16
 800685a:	4652      	mov	r2, sl
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f af41 	beq.w	80066ea <_printf_float+0xc2>
 8006868:	f04f 0800 	mov.w	r8, #0
 800686c:	f104 091a 	add.w	r9, r4, #26
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	3b01      	subs	r3, #1
 8006874:	4543      	cmp	r3, r8
 8006876:	dc09      	bgt.n	800688c <_printf_float+0x264>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	079b      	lsls	r3, r3, #30
 800687c:	f100 8105 	bmi.w	8006a8a <_printf_float+0x462>
 8006880:	68e0      	ldr	r0, [r4, #12]
 8006882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006884:	4298      	cmp	r0, r3
 8006886:	bfb8      	it	lt
 8006888:	4618      	movlt	r0, r3
 800688a:	e730      	b.n	80066ee <_printf_float+0xc6>
 800688c:	2301      	movs	r3, #1
 800688e:	464a      	mov	r2, r9
 8006890:	4631      	mov	r1, r6
 8006892:	4628      	mov	r0, r5
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	f43f af27 	beq.w	80066ea <_printf_float+0xc2>
 800689c:	f108 0801 	add.w	r8, r8, #1
 80068a0:	e7e6      	b.n	8006870 <_printf_float+0x248>
 80068a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dc39      	bgt.n	800691c <_printf_float+0x2f4>
 80068a8:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <_printf_float+0x2f0>)
 80068aa:	2301      	movs	r3, #1
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f af19 	beq.w	80066ea <_printf_float+0xc2>
 80068b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068bc:	4313      	orrs	r3, r2
 80068be:	d102      	bne.n	80068c6 <_printf_float+0x29e>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07d9      	lsls	r1, r3, #31
 80068c4:	d5d8      	bpl.n	8006878 <_printf_float+0x250>
 80068c6:	ee18 3a10 	vmov	r3, s16
 80068ca:	4652      	mov	r2, sl
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af09 	beq.w	80066ea <_printf_float+0xc2>
 80068d8:	f04f 0900 	mov.w	r9, #0
 80068dc:	f104 0a1a 	add.w	sl, r4, #26
 80068e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e2:	425b      	negs	r3, r3
 80068e4:	454b      	cmp	r3, r9
 80068e6:	dc01      	bgt.n	80068ec <_printf_float+0x2c4>
 80068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ea:	e792      	b.n	8006812 <_printf_float+0x1ea>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4652      	mov	r2, sl
 80068f0:	4631      	mov	r1, r6
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f aef7 	beq.w	80066ea <_printf_float+0xc2>
 80068fc:	f109 0901 	add.w	r9, r9, #1
 8006900:	e7ee      	b.n	80068e0 <_printf_float+0x2b8>
 8006902:	bf00      	nop
 8006904:	7fefffff 	.word	0x7fefffff
 8006908:	0800b0c8 	.word	0x0800b0c8
 800690c:	0800b0cc 	.word	0x0800b0cc
 8006910:	0800b0d4 	.word	0x0800b0d4
 8006914:	0800b0d0 	.word	0x0800b0d0
 8006918:	0800b0d8 	.word	0x0800b0d8
 800691c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800691e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006920:	429a      	cmp	r2, r3
 8006922:	bfa8      	it	ge
 8006924:	461a      	movge	r2, r3
 8006926:	2a00      	cmp	r2, #0
 8006928:	4691      	mov	r9, r2
 800692a:	dc37      	bgt.n	800699c <_printf_float+0x374>
 800692c:	f04f 0b00 	mov.w	fp, #0
 8006930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006934:	f104 021a 	add.w	r2, r4, #26
 8006938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	eba3 0309 	sub.w	r3, r3, r9
 8006940:	455b      	cmp	r3, fp
 8006942:	dc33      	bgt.n	80069ac <_printf_float+0x384>
 8006944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006948:	429a      	cmp	r2, r3
 800694a:	db3b      	blt.n	80069c4 <_printf_float+0x39c>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	07da      	lsls	r2, r3, #31
 8006950:	d438      	bmi.n	80069c4 <_printf_float+0x39c>
 8006952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006954:	9a05      	ldr	r2, [sp, #20]
 8006956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006958:	1a9a      	subs	r2, r3, r2
 800695a:	eba3 0901 	sub.w	r9, r3, r1
 800695e:	4591      	cmp	r9, r2
 8006960:	bfa8      	it	ge
 8006962:	4691      	movge	r9, r2
 8006964:	f1b9 0f00 	cmp.w	r9, #0
 8006968:	dc35      	bgt.n	80069d6 <_printf_float+0x3ae>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006972:	f104 0a1a 	add.w	sl, r4, #26
 8006976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	eba3 0309 	sub.w	r3, r3, r9
 8006980:	4543      	cmp	r3, r8
 8006982:	f77f af79 	ble.w	8006878 <_printf_float+0x250>
 8006986:	2301      	movs	r3, #1
 8006988:	4652      	mov	r2, sl
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f aeaa 	beq.w	80066ea <_printf_float+0xc2>
 8006996:	f108 0801 	add.w	r8, r8, #1
 800699a:	e7ec      	b.n	8006976 <_printf_float+0x34e>
 800699c:	4613      	mov	r3, r2
 800699e:	4631      	mov	r1, r6
 80069a0:	4642      	mov	r2, r8
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	d1c0      	bne.n	800692c <_printf_float+0x304>
 80069aa:	e69e      	b.n	80066ea <_printf_float+0xc2>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	9205      	str	r2, [sp, #20]
 80069b4:	47b8      	blx	r7
 80069b6:	3001      	adds	r0, #1
 80069b8:	f43f ae97 	beq.w	80066ea <_printf_float+0xc2>
 80069bc:	9a05      	ldr	r2, [sp, #20]
 80069be:	f10b 0b01 	add.w	fp, fp, #1
 80069c2:	e7b9      	b.n	8006938 <_printf_float+0x310>
 80069c4:	ee18 3a10 	vmov	r3, s16
 80069c8:	4652      	mov	r2, sl
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1be      	bne.n	8006952 <_printf_float+0x32a>
 80069d4:	e689      	b.n	80066ea <_printf_float+0xc2>
 80069d6:	9a05      	ldr	r2, [sp, #20]
 80069d8:	464b      	mov	r3, r9
 80069da:	4442      	add	r2, r8
 80069dc:	4631      	mov	r1, r6
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	d1c1      	bne.n	800696a <_printf_float+0x342>
 80069e6:	e680      	b.n	80066ea <_printf_float+0xc2>
 80069e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ea:	2a01      	cmp	r2, #1
 80069ec:	dc01      	bgt.n	80069f2 <_printf_float+0x3ca>
 80069ee:	07db      	lsls	r3, r3, #31
 80069f0:	d538      	bpl.n	8006a64 <_printf_float+0x43c>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4642      	mov	r2, r8
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f ae74 	beq.w	80066ea <_printf_float+0xc2>
 8006a02:	ee18 3a10 	vmov	r3, s16
 8006a06:	4652      	mov	r2, sl
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f ae6b 	beq.w	80066ea <_printf_float+0xc2>
 8006a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f7fa f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a20:	b9d8      	cbnz	r0, 8006a5a <_printf_float+0x432>
 8006a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a24:	f108 0201 	add.w	r2, r8, #1
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	d10e      	bne.n	8006a52 <_printf_float+0x42a>
 8006a34:	e659      	b.n	80066ea <_printf_float+0xc2>
 8006a36:	2301      	movs	r3, #1
 8006a38:	4652      	mov	r2, sl
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	f43f ae52 	beq.w	80066ea <_printf_float+0xc2>
 8006a46:	f108 0801 	add.w	r8, r8, #1
 8006a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4543      	cmp	r3, r8
 8006a50:	dcf1      	bgt.n	8006a36 <_printf_float+0x40e>
 8006a52:	464b      	mov	r3, r9
 8006a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a58:	e6dc      	b.n	8006814 <_printf_float+0x1ec>
 8006a5a:	f04f 0800 	mov.w	r8, #0
 8006a5e:	f104 0a1a 	add.w	sl, r4, #26
 8006a62:	e7f2      	b.n	8006a4a <_printf_float+0x422>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4642      	mov	r2, r8
 8006a68:	e7df      	b.n	8006a2a <_printf_float+0x402>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	464a      	mov	r2, r9
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f ae38 	beq.w	80066ea <_printf_float+0xc2>
 8006a7a:	f108 0801 	add.w	r8, r8, #1
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	4543      	cmp	r3, r8
 8006a86:	dcf0      	bgt.n	8006a6a <_printf_float+0x442>
 8006a88:	e6fa      	b.n	8006880 <_printf_float+0x258>
 8006a8a:	f04f 0800 	mov.w	r8, #0
 8006a8e:	f104 0919 	add.w	r9, r4, #25
 8006a92:	e7f4      	b.n	8006a7e <_printf_float+0x456>

08006a94 <_printf_common>:
 8006a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	4616      	mov	r6, r2
 8006a9a:	4699      	mov	r9, r3
 8006a9c:	688a      	ldr	r2, [r1, #8]
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	bfb8      	it	lt
 8006aa8:	4613      	movlt	r3, r2
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	b10a      	cbz	r2, 8006aba <_printf_common+0x26>
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	6033      	str	r3, [r6, #0]
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	0699      	lsls	r1, r3, #26
 8006abe:	bf42      	ittt	mi
 8006ac0:	6833      	ldrmi	r3, [r6, #0]
 8006ac2:	3302      	addmi	r3, #2
 8006ac4:	6033      	strmi	r3, [r6, #0]
 8006ac6:	6825      	ldr	r5, [r4, #0]
 8006ac8:	f015 0506 	ands.w	r5, r5, #6
 8006acc:	d106      	bne.n	8006adc <_printf_common+0x48>
 8006ace:	f104 0a19 	add.w	sl, r4, #25
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	6832      	ldr	r2, [r6, #0]
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	42ab      	cmp	r3, r5
 8006ada:	dc26      	bgt.n	8006b2a <_printf_common+0x96>
 8006adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ae0:	1e13      	subs	r3, r2, #0
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	bf18      	it	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	0692      	lsls	r2, r2, #26
 8006aea:	d42b      	bmi.n	8006b44 <_printf_common+0xb0>
 8006aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d01e      	beq.n	8006b38 <_printf_common+0xa4>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	68e5      	ldr	r5, [r4, #12]
 8006afe:	6832      	ldr	r2, [r6, #0]
 8006b00:	f003 0306 	and.w	r3, r3, #6
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	bf08      	it	eq
 8006b08:	1aad      	subeq	r5, r5, r2
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	6922      	ldr	r2, [r4, #16]
 8006b0e:	bf0c      	ite	eq
 8006b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b14:	2500      	movne	r5, #0
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bfc4      	itt	gt
 8006b1a:	1a9b      	subgt	r3, r3, r2
 8006b1c:	18ed      	addgt	r5, r5, r3
 8006b1e:	2600      	movs	r6, #0
 8006b20:	341a      	adds	r4, #26
 8006b22:	42b5      	cmp	r5, r6
 8006b24:	d11a      	bne.n	8006b5c <_printf_common+0xc8>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e008      	b.n	8006b3c <_printf_common+0xa8>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4638      	mov	r0, r7
 8006b32:	47c0      	blx	r8
 8006b34:	3001      	adds	r0, #1
 8006b36:	d103      	bne.n	8006b40 <_printf_common+0xac>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	3501      	adds	r5, #1
 8006b42:	e7c6      	b.n	8006ad2 <_printf_common+0x3e>
 8006b44:	18e1      	adds	r1, r4, r3
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	2030      	movs	r0, #48	; 0x30
 8006b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b4e:	4422      	add	r2, r4
 8006b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b58:	3302      	adds	r3, #2
 8006b5a:	e7c7      	b.n	8006aec <_printf_common+0x58>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4649      	mov	r1, r9
 8006b62:	4638      	mov	r0, r7
 8006b64:	47c0      	blx	r8
 8006b66:	3001      	adds	r0, #1
 8006b68:	d0e6      	beq.n	8006b38 <_printf_common+0xa4>
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7d9      	b.n	8006b22 <_printf_common+0x8e>
	...

08006b70 <_printf_i>:
 8006b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	7e0f      	ldrb	r7, [r1, #24]
 8006b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b78:	2f78      	cmp	r7, #120	; 0x78
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	469a      	mov	sl, r3
 8006b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b86:	d807      	bhi.n	8006b98 <_printf_i+0x28>
 8006b88:	2f62      	cmp	r7, #98	; 0x62
 8006b8a:	d80a      	bhi.n	8006ba2 <_printf_i+0x32>
 8006b8c:	2f00      	cmp	r7, #0
 8006b8e:	f000 80d8 	beq.w	8006d42 <_printf_i+0x1d2>
 8006b92:	2f58      	cmp	r7, #88	; 0x58
 8006b94:	f000 80a3 	beq.w	8006cde <_printf_i+0x16e>
 8006b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ba0:	e03a      	b.n	8006c18 <_printf_i+0xa8>
 8006ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ba6:	2b15      	cmp	r3, #21
 8006ba8:	d8f6      	bhi.n	8006b98 <_printf_i+0x28>
 8006baa:	a101      	add	r1, pc, #4	; (adr r1, 8006bb0 <_printf_i+0x40>)
 8006bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bb0:	08006c09 	.word	0x08006c09
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	08006b99 	.word	0x08006b99
 8006bbc:	08006b99 	.word	0x08006b99
 8006bc0:	08006b99 	.word	0x08006b99
 8006bc4:	08006b99 	.word	0x08006b99
 8006bc8:	08006c1d 	.word	0x08006c1d
 8006bcc:	08006b99 	.word	0x08006b99
 8006bd0:	08006b99 	.word	0x08006b99
 8006bd4:	08006b99 	.word	0x08006b99
 8006bd8:	08006b99 	.word	0x08006b99
 8006bdc:	08006d29 	.word	0x08006d29
 8006be0:	08006c4d 	.word	0x08006c4d
 8006be4:	08006d0b 	.word	0x08006d0b
 8006be8:	08006b99 	.word	0x08006b99
 8006bec:	08006b99 	.word	0x08006b99
 8006bf0:	08006d4b 	.word	0x08006d4b
 8006bf4:	08006b99 	.word	0x08006b99
 8006bf8:	08006c4d 	.word	0x08006c4d
 8006bfc:	08006b99 	.word	0x08006b99
 8006c00:	08006b99 	.word	0x08006b99
 8006c04:	08006d13 	.word	0x08006d13
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	1d1a      	adds	r2, r3, #4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	602a      	str	r2, [r5, #0]
 8006c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0a3      	b.n	8006d64 <_printf_i+0x1f4>
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	6829      	ldr	r1, [r5, #0]
 8006c20:	0606      	lsls	r6, r0, #24
 8006c22:	f101 0304 	add.w	r3, r1, #4
 8006c26:	d50a      	bpl.n	8006c3e <_printf_i+0xce>
 8006c28:	680e      	ldr	r6, [r1, #0]
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	da03      	bge.n	8006c38 <_printf_i+0xc8>
 8006c30:	232d      	movs	r3, #45	; 0x2d
 8006c32:	4276      	negs	r6, r6
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c38:	485e      	ldr	r0, [pc, #376]	; (8006db4 <_printf_i+0x244>)
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	e019      	b.n	8006c72 <_printf_i+0x102>
 8006c3e:	680e      	ldr	r6, [r1, #0]
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c46:	bf18      	it	ne
 8006c48:	b236      	sxthne	r6, r6
 8006c4a:	e7ef      	b.n	8006c2c <_printf_i+0xbc>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	1d19      	adds	r1, r3, #4
 8006c52:	6029      	str	r1, [r5, #0]
 8006c54:	0601      	lsls	r1, r0, #24
 8006c56:	d501      	bpl.n	8006c5c <_printf_i+0xec>
 8006c58:	681e      	ldr	r6, [r3, #0]
 8006c5a:	e002      	b.n	8006c62 <_printf_i+0xf2>
 8006c5c:	0646      	lsls	r6, r0, #25
 8006c5e:	d5fb      	bpl.n	8006c58 <_printf_i+0xe8>
 8006c60:	881e      	ldrh	r6, [r3, #0]
 8006c62:	4854      	ldr	r0, [pc, #336]	; (8006db4 <_printf_i+0x244>)
 8006c64:	2f6f      	cmp	r7, #111	; 0x6f
 8006c66:	bf0c      	ite	eq
 8006c68:	2308      	moveq	r3, #8
 8006c6a:	230a      	movne	r3, #10
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c72:	6865      	ldr	r5, [r4, #4]
 8006c74:	60a5      	str	r5, [r4, #8]
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	bfa2      	ittt	ge
 8006c7a:	6821      	ldrge	r1, [r4, #0]
 8006c7c:	f021 0104 	bicge.w	r1, r1, #4
 8006c80:	6021      	strge	r1, [r4, #0]
 8006c82:	b90e      	cbnz	r6, 8006c88 <_printf_i+0x118>
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	d04d      	beq.n	8006d24 <_printf_i+0x1b4>
 8006c88:	4615      	mov	r5, r2
 8006c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c92:	5dc7      	ldrb	r7, [r0, r7]
 8006c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c98:	4637      	mov	r7, r6
 8006c9a:	42bb      	cmp	r3, r7
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	d9f4      	bls.n	8006c8a <_printf_i+0x11a>
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d10b      	bne.n	8006cbc <_printf_i+0x14c>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	07de      	lsls	r6, r3, #31
 8006ca8:	d508      	bpl.n	8006cbc <_printf_i+0x14c>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	6861      	ldr	r1, [r4, #4]
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	bfde      	ittt	le
 8006cb2:	2330      	movle	r3, #48	; 0x30
 8006cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cbc:	1b52      	subs	r2, r2, r5
 8006cbe:	6122      	str	r2, [r4, #16]
 8006cc0:	f8cd a000 	str.w	sl, [sp]
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	aa03      	add	r2, sp, #12
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4640      	mov	r0, r8
 8006ccc:	f7ff fee2 	bl	8006a94 <_printf_common>
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d14c      	bne.n	8006d6e <_printf_i+0x1fe>
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	b004      	add	sp, #16
 8006cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cde:	4835      	ldr	r0, [pc, #212]	; (8006db4 <_printf_i+0x244>)
 8006ce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cec:	6029      	str	r1, [r5, #0]
 8006cee:	061d      	lsls	r5, r3, #24
 8006cf0:	d514      	bpl.n	8006d1c <_printf_i+0x1ac>
 8006cf2:	07df      	lsls	r7, r3, #31
 8006cf4:	bf44      	itt	mi
 8006cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cfa:	6023      	strmi	r3, [r4, #0]
 8006cfc:	b91e      	cbnz	r6, 8006d06 <_printf_i+0x196>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	f023 0320 	bic.w	r3, r3, #32
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	2310      	movs	r3, #16
 8006d08:	e7b0      	b.n	8006c6c <_printf_i+0xfc>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	f043 0320 	orr.w	r3, r3, #32
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	2378      	movs	r3, #120	; 0x78
 8006d14:	4828      	ldr	r0, [pc, #160]	; (8006db8 <_printf_i+0x248>)
 8006d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d1a:	e7e3      	b.n	8006ce4 <_printf_i+0x174>
 8006d1c:	0659      	lsls	r1, r3, #25
 8006d1e:	bf48      	it	mi
 8006d20:	b2b6      	uxthmi	r6, r6
 8006d22:	e7e6      	b.n	8006cf2 <_printf_i+0x182>
 8006d24:	4615      	mov	r5, r2
 8006d26:	e7bb      	b.n	8006ca0 <_printf_i+0x130>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	6826      	ldr	r6, [r4, #0]
 8006d2c:	6961      	ldr	r1, [r4, #20]
 8006d2e:	1d18      	adds	r0, r3, #4
 8006d30:	6028      	str	r0, [r5, #0]
 8006d32:	0635      	lsls	r5, r6, #24
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	d501      	bpl.n	8006d3c <_printf_i+0x1cc>
 8006d38:	6019      	str	r1, [r3, #0]
 8006d3a:	e002      	b.n	8006d42 <_printf_i+0x1d2>
 8006d3c:	0670      	lsls	r0, r6, #25
 8006d3e:	d5fb      	bpl.n	8006d38 <_printf_i+0x1c8>
 8006d40:	8019      	strh	r1, [r3, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	4615      	mov	r5, r2
 8006d48:	e7ba      	b.n	8006cc0 <_printf_i+0x150>
 8006d4a:	682b      	ldr	r3, [r5, #0]
 8006d4c:	1d1a      	adds	r2, r3, #4
 8006d4e:	602a      	str	r2, [r5, #0]
 8006d50:	681d      	ldr	r5, [r3, #0]
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	2100      	movs	r1, #0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7f9 fa4a 	bl	80001f0 <memchr>
 8006d5c:	b108      	cbz	r0, 8006d62 <_printf_i+0x1f2>
 8006d5e:	1b40      	subs	r0, r0, r5
 8006d60:	6060      	str	r0, [r4, #4]
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	2300      	movs	r3, #0
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	e7a8      	b.n	8006cc0 <_printf_i+0x150>
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	462a      	mov	r2, r5
 8006d72:	4649      	mov	r1, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	47d0      	blx	sl
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d0ab      	beq.n	8006cd4 <_printf_i+0x164>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	079b      	lsls	r3, r3, #30
 8006d80:	d413      	bmi.n	8006daa <_printf_i+0x23a>
 8006d82:	68e0      	ldr	r0, [r4, #12]
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	4298      	cmp	r0, r3
 8006d88:	bfb8      	it	lt
 8006d8a:	4618      	movlt	r0, r3
 8006d8c:	e7a4      	b.n	8006cd8 <_printf_i+0x168>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4632      	mov	r2, r6
 8006d92:	4649      	mov	r1, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	47d0      	blx	sl
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d09b      	beq.n	8006cd4 <_printf_i+0x164>
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	68e3      	ldr	r3, [r4, #12]
 8006da0:	9903      	ldr	r1, [sp, #12]
 8006da2:	1a5b      	subs	r3, r3, r1
 8006da4:	42ab      	cmp	r3, r5
 8006da6:	dcf2      	bgt.n	8006d8e <_printf_i+0x21e>
 8006da8:	e7eb      	b.n	8006d82 <_printf_i+0x212>
 8006daa:	2500      	movs	r5, #0
 8006dac:	f104 0619 	add.w	r6, r4, #25
 8006db0:	e7f5      	b.n	8006d9e <_printf_i+0x22e>
 8006db2:	bf00      	nop
 8006db4:	0800b0da 	.word	0x0800b0da
 8006db8:	0800b0eb 	.word	0x0800b0eb

08006dbc <iprintf>:
 8006dbc:	b40f      	push	{r0, r1, r2, r3}
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <iprintf+0x2c>)
 8006dc0:	b513      	push	{r0, r1, r4, lr}
 8006dc2:	681c      	ldr	r4, [r3, #0]
 8006dc4:	b124      	cbz	r4, 8006dd0 <iprintf+0x14>
 8006dc6:	69a3      	ldr	r3, [r4, #24]
 8006dc8:	b913      	cbnz	r3, 8006dd0 <iprintf+0x14>
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f001 f8d8 	bl	8007f80 <__sinit>
 8006dd0:	ab05      	add	r3, sp, #20
 8006dd2:	9a04      	ldr	r2, [sp, #16]
 8006dd4:	68a1      	ldr	r1, [r4, #8]
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f001 fe95 	bl	8008b08 <_vfiprintf_r>
 8006dde:	b002      	add	sp, #8
 8006de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de4:	b004      	add	sp, #16
 8006de6:	4770      	bx	lr
 8006de8:	20000010 	.word	0x20000010

08006dec <_puts_r>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	460e      	mov	r6, r1
 8006df0:	4605      	mov	r5, r0
 8006df2:	b118      	cbz	r0, 8006dfc <_puts_r+0x10>
 8006df4:	6983      	ldr	r3, [r0, #24]
 8006df6:	b90b      	cbnz	r3, 8006dfc <_puts_r+0x10>
 8006df8:	f001 f8c2 	bl	8007f80 <__sinit>
 8006dfc:	69ab      	ldr	r3, [r5, #24]
 8006dfe:	68ac      	ldr	r4, [r5, #8]
 8006e00:	b913      	cbnz	r3, 8006e08 <_puts_r+0x1c>
 8006e02:	4628      	mov	r0, r5
 8006e04:	f001 f8bc 	bl	8007f80 <__sinit>
 8006e08:	4b2c      	ldr	r3, [pc, #176]	; (8006ebc <_puts_r+0xd0>)
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d120      	bne.n	8006e50 <_puts_r+0x64>
 8006e0e:	686c      	ldr	r4, [r5, #4]
 8006e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e12:	07db      	lsls	r3, r3, #31
 8006e14:	d405      	bmi.n	8006e22 <_puts_r+0x36>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	0598      	lsls	r0, r3, #22
 8006e1a:	d402      	bmi.n	8006e22 <_puts_r+0x36>
 8006e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e1e:	f001 f952 	bl	80080c6 <__retarget_lock_acquire_recursive>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	0719      	lsls	r1, r3, #28
 8006e26:	d51d      	bpl.n	8006e64 <_puts_r+0x78>
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	b1db      	cbz	r3, 8006e64 <_puts_r+0x78>
 8006e2c:	3e01      	subs	r6, #1
 8006e2e:	68a3      	ldr	r3, [r4, #8]
 8006e30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e34:	3b01      	subs	r3, #1
 8006e36:	60a3      	str	r3, [r4, #8]
 8006e38:	bb39      	cbnz	r1, 8006e8a <_puts_r+0x9e>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	da38      	bge.n	8006eb0 <_puts_r+0xc4>
 8006e3e:	4622      	mov	r2, r4
 8006e40:	210a      	movs	r1, #10
 8006e42:	4628      	mov	r0, r5
 8006e44:	f000 f848 	bl	8006ed8 <__swbuf_r>
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d011      	beq.n	8006e70 <_puts_r+0x84>
 8006e4c:	250a      	movs	r5, #10
 8006e4e:	e011      	b.n	8006e74 <_puts_r+0x88>
 8006e50:	4b1b      	ldr	r3, [pc, #108]	; (8006ec0 <_puts_r+0xd4>)
 8006e52:	429c      	cmp	r4, r3
 8006e54:	d101      	bne.n	8006e5a <_puts_r+0x6e>
 8006e56:	68ac      	ldr	r4, [r5, #8]
 8006e58:	e7da      	b.n	8006e10 <_puts_r+0x24>
 8006e5a:	4b1a      	ldr	r3, [pc, #104]	; (8006ec4 <_puts_r+0xd8>)
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	bf08      	it	eq
 8006e60:	68ec      	ldreq	r4, [r5, #12]
 8006e62:	e7d5      	b.n	8006e10 <_puts_r+0x24>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 f888 	bl	8006f7c <__swsetup_r>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d0dd      	beq.n	8006e2c <_puts_r+0x40>
 8006e70:	f04f 35ff 	mov.w	r5, #4294967295
 8006e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e76:	07da      	lsls	r2, r3, #31
 8006e78:	d405      	bmi.n	8006e86 <_puts_r+0x9a>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	059b      	lsls	r3, r3, #22
 8006e7e:	d402      	bmi.n	8006e86 <_puts_r+0x9a>
 8006e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e82:	f001 f921 	bl	80080c8 <__retarget_lock_release_recursive>
 8006e86:	4628      	mov	r0, r5
 8006e88:	bd70      	pop	{r4, r5, r6, pc}
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	da04      	bge.n	8006e98 <_puts_r+0xac>
 8006e8e:	69a2      	ldr	r2, [r4, #24]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	dc06      	bgt.n	8006ea2 <_puts_r+0xb6>
 8006e94:	290a      	cmp	r1, #10
 8006e96:	d004      	beq.n	8006ea2 <_puts_r+0xb6>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	7019      	strb	r1, [r3, #0]
 8006ea0:	e7c5      	b.n	8006e2e <_puts_r+0x42>
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f000 f817 	bl	8006ed8 <__swbuf_r>
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d1bf      	bne.n	8006e2e <_puts_r+0x42>
 8006eae:	e7df      	b.n	8006e70 <_puts_r+0x84>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	250a      	movs	r5, #10
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	6022      	str	r2, [r4, #0]
 8006eb8:	701d      	strb	r5, [r3, #0]
 8006eba:	e7db      	b.n	8006e74 <_puts_r+0x88>
 8006ebc:	0800b1ac 	.word	0x0800b1ac
 8006ec0:	0800b1cc 	.word	0x0800b1cc
 8006ec4:	0800b18c 	.word	0x0800b18c

08006ec8 <puts>:
 8006ec8:	4b02      	ldr	r3, [pc, #8]	; (8006ed4 <puts+0xc>)
 8006eca:	4601      	mov	r1, r0
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	f7ff bf8d 	b.w	8006dec <_puts_r>
 8006ed2:	bf00      	nop
 8006ed4:	20000010 	.word	0x20000010

08006ed8 <__swbuf_r>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	460e      	mov	r6, r1
 8006edc:	4614      	mov	r4, r2
 8006ede:	4605      	mov	r5, r0
 8006ee0:	b118      	cbz	r0, 8006eea <__swbuf_r+0x12>
 8006ee2:	6983      	ldr	r3, [r0, #24]
 8006ee4:	b90b      	cbnz	r3, 8006eea <__swbuf_r+0x12>
 8006ee6:	f001 f84b 	bl	8007f80 <__sinit>
 8006eea:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <__swbuf_r+0x98>)
 8006eec:	429c      	cmp	r4, r3
 8006eee:	d12b      	bne.n	8006f48 <__swbuf_r+0x70>
 8006ef0:	686c      	ldr	r4, [r5, #4]
 8006ef2:	69a3      	ldr	r3, [r4, #24]
 8006ef4:	60a3      	str	r3, [r4, #8]
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	071a      	lsls	r2, r3, #28
 8006efa:	d52f      	bpl.n	8006f5c <__swbuf_r+0x84>
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	b36b      	cbz	r3, 8006f5c <__swbuf_r+0x84>
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	6820      	ldr	r0, [r4, #0]
 8006f04:	1ac0      	subs	r0, r0, r3
 8006f06:	6963      	ldr	r3, [r4, #20]
 8006f08:	b2f6      	uxtb	r6, r6
 8006f0a:	4283      	cmp	r3, r0
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	dc04      	bgt.n	8006f1a <__swbuf_r+0x42>
 8006f10:	4621      	mov	r1, r4
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 ffa0 	bl	8007e58 <_fflush_r>
 8006f18:	bb30      	cbnz	r0, 8006f68 <__swbuf_r+0x90>
 8006f1a:	68a3      	ldr	r3, [r4, #8]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	60a3      	str	r3, [r4, #8]
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	701e      	strb	r6, [r3, #0]
 8006f28:	6963      	ldr	r3, [r4, #20]
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	4283      	cmp	r3, r0
 8006f2e:	d004      	beq.n	8006f3a <__swbuf_r+0x62>
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	07db      	lsls	r3, r3, #31
 8006f34:	d506      	bpl.n	8006f44 <__swbuf_r+0x6c>
 8006f36:	2e0a      	cmp	r6, #10
 8006f38:	d104      	bne.n	8006f44 <__swbuf_r+0x6c>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 ff8b 	bl	8007e58 <_fflush_r>
 8006f42:	b988      	cbnz	r0, 8006f68 <__swbuf_r+0x90>
 8006f44:	4638      	mov	r0, r7
 8006f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <__swbuf_r+0x9c>)
 8006f4a:	429c      	cmp	r4, r3
 8006f4c:	d101      	bne.n	8006f52 <__swbuf_r+0x7a>
 8006f4e:	68ac      	ldr	r4, [r5, #8]
 8006f50:	e7cf      	b.n	8006ef2 <__swbuf_r+0x1a>
 8006f52:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <__swbuf_r+0xa0>)
 8006f54:	429c      	cmp	r4, r3
 8006f56:	bf08      	it	eq
 8006f58:	68ec      	ldreq	r4, [r5, #12]
 8006f5a:	e7ca      	b.n	8006ef2 <__swbuf_r+0x1a>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f80c 	bl	8006f7c <__swsetup_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d0cb      	beq.n	8006f00 <__swbuf_r+0x28>
 8006f68:	f04f 37ff 	mov.w	r7, #4294967295
 8006f6c:	e7ea      	b.n	8006f44 <__swbuf_r+0x6c>
 8006f6e:	bf00      	nop
 8006f70:	0800b1ac 	.word	0x0800b1ac
 8006f74:	0800b1cc 	.word	0x0800b1cc
 8006f78:	0800b18c 	.word	0x0800b18c

08006f7c <__swsetup_r>:
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <__swsetup_r+0xcc>)
 8006f7e:	b570      	push	{r4, r5, r6, lr}
 8006f80:	681d      	ldr	r5, [r3, #0]
 8006f82:	4606      	mov	r6, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	b125      	cbz	r5, 8006f92 <__swsetup_r+0x16>
 8006f88:	69ab      	ldr	r3, [r5, #24]
 8006f8a:	b913      	cbnz	r3, 8006f92 <__swsetup_r+0x16>
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 fff7 	bl	8007f80 <__sinit>
 8006f92:	4b2e      	ldr	r3, [pc, #184]	; (800704c <__swsetup_r+0xd0>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	d10f      	bne.n	8006fb8 <__swsetup_r+0x3c>
 8006f98:	686c      	ldr	r4, [r5, #4]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fa0:	0719      	lsls	r1, r3, #28
 8006fa2:	d42c      	bmi.n	8006ffe <__swsetup_r+0x82>
 8006fa4:	06dd      	lsls	r5, r3, #27
 8006fa6:	d411      	bmi.n	8006fcc <__swsetup_r+0x50>
 8006fa8:	2309      	movs	r3, #9
 8006faa:	6033      	str	r3, [r6, #0]
 8006fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb6:	e03e      	b.n	8007036 <__swsetup_r+0xba>
 8006fb8:	4b25      	ldr	r3, [pc, #148]	; (8007050 <__swsetup_r+0xd4>)
 8006fba:	429c      	cmp	r4, r3
 8006fbc:	d101      	bne.n	8006fc2 <__swsetup_r+0x46>
 8006fbe:	68ac      	ldr	r4, [r5, #8]
 8006fc0:	e7eb      	b.n	8006f9a <__swsetup_r+0x1e>
 8006fc2:	4b24      	ldr	r3, [pc, #144]	; (8007054 <__swsetup_r+0xd8>)
 8006fc4:	429c      	cmp	r4, r3
 8006fc6:	bf08      	it	eq
 8006fc8:	68ec      	ldreq	r4, [r5, #12]
 8006fca:	e7e6      	b.n	8006f9a <__swsetup_r+0x1e>
 8006fcc:	0758      	lsls	r0, r3, #29
 8006fce:	d512      	bpl.n	8006ff6 <__swsetup_r+0x7a>
 8006fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fd2:	b141      	cbz	r1, 8006fe6 <__swsetup_r+0x6a>
 8006fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd8:	4299      	cmp	r1, r3
 8006fda:	d002      	beq.n	8006fe2 <__swsetup_r+0x66>
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f001 fc89 	bl	80088f4 <_free_r>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6063      	str	r3, [r4, #4]
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	f043 0308 	orr.w	r3, r3, #8
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	b94b      	cbnz	r3, 8007016 <__swsetup_r+0x9a>
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700c:	d003      	beq.n	8007016 <__swsetup_r+0x9a>
 800700e:	4621      	mov	r1, r4
 8007010:	4630      	mov	r0, r6
 8007012:	f001 f87f 	bl	8008114 <__smakebuf_r>
 8007016:	89a0      	ldrh	r0, [r4, #12]
 8007018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800701c:	f010 0301 	ands.w	r3, r0, #1
 8007020:	d00a      	beq.n	8007038 <__swsetup_r+0xbc>
 8007022:	2300      	movs	r3, #0
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	6963      	ldr	r3, [r4, #20]
 8007028:	425b      	negs	r3, r3
 800702a:	61a3      	str	r3, [r4, #24]
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	b943      	cbnz	r3, 8007042 <__swsetup_r+0xc6>
 8007030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007034:	d1ba      	bne.n	8006fac <__swsetup_r+0x30>
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	0781      	lsls	r1, r0, #30
 800703a:	bf58      	it	pl
 800703c:	6963      	ldrpl	r3, [r4, #20]
 800703e:	60a3      	str	r3, [r4, #8]
 8007040:	e7f4      	b.n	800702c <__swsetup_r+0xb0>
 8007042:	2000      	movs	r0, #0
 8007044:	e7f7      	b.n	8007036 <__swsetup_r+0xba>
 8007046:	bf00      	nop
 8007048:	20000010 	.word	0x20000010
 800704c:	0800b1ac 	.word	0x0800b1ac
 8007050:	0800b1cc 	.word	0x0800b1cc
 8007054:	0800b18c 	.word	0x0800b18c

08007058 <quorem>:
 8007058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	6903      	ldr	r3, [r0, #16]
 800705e:	690c      	ldr	r4, [r1, #16]
 8007060:	42a3      	cmp	r3, r4
 8007062:	4607      	mov	r7, r0
 8007064:	f2c0 8081 	blt.w	800716a <quorem+0x112>
 8007068:	3c01      	subs	r4, #1
 800706a:	f101 0814 	add.w	r8, r1, #20
 800706e:	f100 0514 	add.w	r5, r0, #20
 8007072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800707c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007080:	3301      	adds	r3, #1
 8007082:	429a      	cmp	r2, r3
 8007084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800708c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007090:	d331      	bcc.n	80070f6 <quorem+0x9e>
 8007092:	f04f 0e00 	mov.w	lr, #0
 8007096:	4640      	mov	r0, r8
 8007098:	46ac      	mov	ip, r5
 800709a:	46f2      	mov	sl, lr
 800709c:	f850 2b04 	ldr.w	r2, [r0], #4
 80070a0:	b293      	uxth	r3, r2
 80070a2:	fb06 e303 	mla	r3, r6, r3, lr
 80070a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	ebaa 0303 	sub.w	r3, sl, r3
 80070b0:	f8dc a000 	ldr.w	sl, [ip]
 80070b4:	0c12      	lsrs	r2, r2, #16
 80070b6:	fa13 f38a 	uxtah	r3, r3, sl
 80070ba:	fb06 e202 	mla	r2, r6, r2, lr
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	9b00      	ldr	r3, [sp, #0]
 80070c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070c6:	b292      	uxth	r2, r2
 80070c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80070d4:	4581      	cmp	r9, r0
 80070d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070da:	f84c 3b04 	str.w	r3, [ip], #4
 80070de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070e2:	d2db      	bcs.n	800709c <quorem+0x44>
 80070e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80070e8:	b92b      	cbnz	r3, 80070f6 <quorem+0x9e>
 80070ea:	9b01      	ldr	r3, [sp, #4]
 80070ec:	3b04      	subs	r3, #4
 80070ee:	429d      	cmp	r5, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	d32e      	bcc.n	8007152 <quorem+0xfa>
 80070f4:	613c      	str	r4, [r7, #16]
 80070f6:	4638      	mov	r0, r7
 80070f8:	f001 fae4 	bl	80086c4 <__mcmp>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	db24      	blt.n	800714a <quorem+0xf2>
 8007100:	3601      	adds	r6, #1
 8007102:	4628      	mov	r0, r5
 8007104:	f04f 0c00 	mov.w	ip, #0
 8007108:	f858 2b04 	ldr.w	r2, [r8], #4
 800710c:	f8d0 e000 	ldr.w	lr, [r0]
 8007110:	b293      	uxth	r3, r2
 8007112:	ebac 0303 	sub.w	r3, ip, r3
 8007116:	0c12      	lsrs	r2, r2, #16
 8007118:	fa13 f38e 	uxtah	r3, r3, lr
 800711c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007124:	b29b      	uxth	r3, r3
 8007126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800712a:	45c1      	cmp	r9, r8
 800712c:	f840 3b04 	str.w	r3, [r0], #4
 8007130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007134:	d2e8      	bcs.n	8007108 <quorem+0xb0>
 8007136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800713a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800713e:	b922      	cbnz	r2, 800714a <quorem+0xf2>
 8007140:	3b04      	subs	r3, #4
 8007142:	429d      	cmp	r5, r3
 8007144:	461a      	mov	r2, r3
 8007146:	d30a      	bcc.n	800715e <quorem+0x106>
 8007148:	613c      	str	r4, [r7, #16]
 800714a:	4630      	mov	r0, r6
 800714c:	b003      	add	sp, #12
 800714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	3b04      	subs	r3, #4
 8007156:	2a00      	cmp	r2, #0
 8007158:	d1cc      	bne.n	80070f4 <quorem+0x9c>
 800715a:	3c01      	subs	r4, #1
 800715c:	e7c7      	b.n	80070ee <quorem+0x96>
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	3b04      	subs	r3, #4
 8007162:	2a00      	cmp	r2, #0
 8007164:	d1f0      	bne.n	8007148 <quorem+0xf0>
 8007166:	3c01      	subs	r4, #1
 8007168:	e7eb      	b.n	8007142 <quorem+0xea>
 800716a:	2000      	movs	r0, #0
 800716c:	e7ee      	b.n	800714c <quorem+0xf4>
	...

08007170 <_dtoa_r>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	ed2d 8b04 	vpush	{d8-d9}
 8007178:	ec57 6b10 	vmov	r6, r7, d0
 800717c:	b093      	sub	sp, #76	; 0x4c
 800717e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007184:	9106      	str	r1, [sp, #24]
 8007186:	ee10 aa10 	vmov	sl, s0
 800718a:	4604      	mov	r4, r0
 800718c:	9209      	str	r2, [sp, #36]	; 0x24
 800718e:	930c      	str	r3, [sp, #48]	; 0x30
 8007190:	46bb      	mov	fp, r7
 8007192:	b975      	cbnz	r5, 80071b2 <_dtoa_r+0x42>
 8007194:	2010      	movs	r0, #16
 8007196:	f000 fffd 	bl	8008194 <malloc>
 800719a:	4602      	mov	r2, r0
 800719c:	6260      	str	r0, [r4, #36]	; 0x24
 800719e:	b920      	cbnz	r0, 80071aa <_dtoa_r+0x3a>
 80071a0:	4ba7      	ldr	r3, [pc, #668]	; (8007440 <_dtoa_r+0x2d0>)
 80071a2:	21ea      	movs	r1, #234	; 0xea
 80071a4:	48a7      	ldr	r0, [pc, #668]	; (8007444 <_dtoa_r+0x2d4>)
 80071a6:	f001 fe45 	bl	8008e34 <__assert_func>
 80071aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071ae:	6005      	str	r5, [r0, #0]
 80071b0:	60c5      	str	r5, [r0, #12]
 80071b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071b4:	6819      	ldr	r1, [r3, #0]
 80071b6:	b151      	cbz	r1, 80071ce <_dtoa_r+0x5e>
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	604a      	str	r2, [r1, #4]
 80071bc:	2301      	movs	r3, #1
 80071be:	4093      	lsls	r3, r2
 80071c0:	608b      	str	r3, [r1, #8]
 80071c2:	4620      	mov	r0, r4
 80071c4:	f001 f83c 	bl	8008240 <_Bfree>
 80071c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	1e3b      	subs	r3, r7, #0
 80071d0:	bfaa      	itet	ge
 80071d2:	2300      	movge	r3, #0
 80071d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80071d8:	f8c8 3000 	strge.w	r3, [r8]
 80071dc:	4b9a      	ldr	r3, [pc, #616]	; (8007448 <_dtoa_r+0x2d8>)
 80071de:	bfbc      	itt	lt
 80071e0:	2201      	movlt	r2, #1
 80071e2:	f8c8 2000 	strlt.w	r2, [r8]
 80071e6:	ea33 030b 	bics.w	r3, r3, fp
 80071ea:	d11b      	bne.n	8007224 <_dtoa_r+0xb4>
 80071ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071f8:	4333      	orrs	r3, r6
 80071fa:	f000 8592 	beq.w	8007d22 <_dtoa_r+0xbb2>
 80071fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007200:	b963      	cbnz	r3, 800721c <_dtoa_r+0xac>
 8007202:	4b92      	ldr	r3, [pc, #584]	; (800744c <_dtoa_r+0x2dc>)
 8007204:	e022      	b.n	800724c <_dtoa_r+0xdc>
 8007206:	4b92      	ldr	r3, [pc, #584]	; (8007450 <_dtoa_r+0x2e0>)
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	3308      	adds	r3, #8
 800720c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	9801      	ldr	r0, [sp, #4]
 8007212:	b013      	add	sp, #76	; 0x4c
 8007214:	ecbd 8b04 	vpop	{d8-d9}
 8007218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721c:	4b8b      	ldr	r3, [pc, #556]	; (800744c <_dtoa_r+0x2dc>)
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	3303      	adds	r3, #3
 8007222:	e7f3      	b.n	800720c <_dtoa_r+0x9c>
 8007224:	2200      	movs	r2, #0
 8007226:	2300      	movs	r3, #0
 8007228:	4650      	mov	r0, sl
 800722a:	4659      	mov	r1, fp
 800722c:	f7f9 fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007230:	ec4b ab19 	vmov	d9, sl, fp
 8007234:	4680      	mov	r8, r0
 8007236:	b158      	cbz	r0, 8007250 <_dtoa_r+0xe0>
 8007238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800723a:	2301      	movs	r3, #1
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 856b 	beq.w	8007d1c <_dtoa_r+0xbac>
 8007246:	4883      	ldr	r0, [pc, #524]	; (8007454 <_dtoa_r+0x2e4>)
 8007248:	6018      	str	r0, [r3, #0]
 800724a:	1e43      	subs	r3, r0, #1
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	e7df      	b.n	8007210 <_dtoa_r+0xa0>
 8007250:	ec4b ab10 	vmov	d0, sl, fp
 8007254:	aa10      	add	r2, sp, #64	; 0x40
 8007256:	a911      	add	r1, sp, #68	; 0x44
 8007258:	4620      	mov	r0, r4
 800725a:	f001 fad9 	bl	8008810 <__d2b>
 800725e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007262:	ee08 0a10 	vmov	s16, r0
 8007266:	2d00      	cmp	r5, #0
 8007268:	f000 8084 	beq.w	8007374 <_dtoa_r+0x204>
 800726c:	ee19 3a90 	vmov	r3, s19
 8007270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007274:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007278:	4656      	mov	r6, sl
 800727a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800727e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007282:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007286:	4b74      	ldr	r3, [pc, #464]	; (8007458 <_dtoa_r+0x2e8>)
 8007288:	2200      	movs	r2, #0
 800728a:	4630      	mov	r0, r6
 800728c:	4639      	mov	r1, r7
 800728e:	f7f9 f803 	bl	8000298 <__aeabi_dsub>
 8007292:	a365      	add	r3, pc, #404	; (adr r3, 8007428 <_dtoa_r+0x2b8>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f9 f9b6 	bl	8000608 <__aeabi_dmul>
 800729c:	a364      	add	r3, pc, #400	; (adr r3, 8007430 <_dtoa_r+0x2c0>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f8 fffb 	bl	800029c <__adddf3>
 80072a6:	4606      	mov	r6, r0
 80072a8:	4628      	mov	r0, r5
 80072aa:	460f      	mov	r7, r1
 80072ac:	f7f9 f942 	bl	8000534 <__aeabi_i2d>
 80072b0:	a361      	add	r3, pc, #388	; (adr r3, 8007438 <_dtoa_r+0x2c8>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f9 f9a7 	bl	8000608 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4630      	mov	r0, r6
 80072c0:	4639      	mov	r1, r7
 80072c2:	f7f8 ffeb 	bl	800029c <__adddf3>
 80072c6:	4606      	mov	r6, r0
 80072c8:	460f      	mov	r7, r1
 80072ca:	f7f9 fc4d 	bl	8000b68 <__aeabi_d2iz>
 80072ce:	2200      	movs	r2, #0
 80072d0:	9000      	str	r0, [sp, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f9 fc08 	bl	8000aec <__aeabi_dcmplt>
 80072dc:	b150      	cbz	r0, 80072f4 <_dtoa_r+0x184>
 80072de:	9800      	ldr	r0, [sp, #0]
 80072e0:	f7f9 f928 	bl	8000534 <__aeabi_i2d>
 80072e4:	4632      	mov	r2, r6
 80072e6:	463b      	mov	r3, r7
 80072e8:	f7f9 fbf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80072ec:	b910      	cbnz	r0, 80072f4 <_dtoa_r+0x184>
 80072ee:	9b00      	ldr	r3, [sp, #0]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	9b00      	ldr	r3, [sp, #0]
 80072f6:	2b16      	cmp	r3, #22
 80072f8:	d85a      	bhi.n	80073b0 <_dtoa_r+0x240>
 80072fa:	9a00      	ldr	r2, [sp, #0]
 80072fc:	4b57      	ldr	r3, [pc, #348]	; (800745c <_dtoa_r+0x2ec>)
 80072fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	ec51 0b19 	vmov	r0, r1, d9
 800730a:	f7f9 fbef 	bl	8000aec <__aeabi_dcmplt>
 800730e:	2800      	cmp	r0, #0
 8007310:	d050      	beq.n	80073b4 <_dtoa_r+0x244>
 8007312:	9b00      	ldr	r3, [sp, #0]
 8007314:	3b01      	subs	r3, #1
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	2300      	movs	r3, #0
 800731a:	930b      	str	r3, [sp, #44]	; 0x2c
 800731c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800731e:	1b5d      	subs	r5, r3, r5
 8007320:	1e6b      	subs	r3, r5, #1
 8007322:	9305      	str	r3, [sp, #20]
 8007324:	bf45      	ittet	mi
 8007326:	f1c5 0301 	rsbmi	r3, r5, #1
 800732a:	9304      	strmi	r3, [sp, #16]
 800732c:	2300      	movpl	r3, #0
 800732e:	2300      	movmi	r3, #0
 8007330:	bf4c      	ite	mi
 8007332:	9305      	strmi	r3, [sp, #20]
 8007334:	9304      	strpl	r3, [sp, #16]
 8007336:	9b00      	ldr	r3, [sp, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	db3d      	blt.n	80073b8 <_dtoa_r+0x248>
 800733c:	9b05      	ldr	r3, [sp, #20]
 800733e:	9a00      	ldr	r2, [sp, #0]
 8007340:	920a      	str	r2, [sp, #40]	; 0x28
 8007342:	4413      	add	r3, r2
 8007344:	9305      	str	r3, [sp, #20]
 8007346:	2300      	movs	r3, #0
 8007348:	9307      	str	r3, [sp, #28]
 800734a:	9b06      	ldr	r3, [sp, #24]
 800734c:	2b09      	cmp	r3, #9
 800734e:	f200 8089 	bhi.w	8007464 <_dtoa_r+0x2f4>
 8007352:	2b05      	cmp	r3, #5
 8007354:	bfc4      	itt	gt
 8007356:	3b04      	subgt	r3, #4
 8007358:	9306      	strgt	r3, [sp, #24]
 800735a:	9b06      	ldr	r3, [sp, #24]
 800735c:	f1a3 0302 	sub.w	r3, r3, #2
 8007360:	bfcc      	ite	gt
 8007362:	2500      	movgt	r5, #0
 8007364:	2501      	movle	r5, #1
 8007366:	2b03      	cmp	r3, #3
 8007368:	f200 8087 	bhi.w	800747a <_dtoa_r+0x30a>
 800736c:	e8df f003 	tbb	[pc, r3]
 8007370:	59383a2d 	.word	0x59383a2d
 8007374:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007378:	441d      	add	r5, r3
 800737a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800737e:	2b20      	cmp	r3, #32
 8007380:	bfc1      	itttt	gt
 8007382:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007386:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800738a:	fa0b f303 	lslgt.w	r3, fp, r3
 800738e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007392:	bfda      	itte	le
 8007394:	f1c3 0320 	rsble	r3, r3, #32
 8007398:	fa06 f003 	lslle.w	r0, r6, r3
 800739c:	4318      	orrgt	r0, r3
 800739e:	f7f9 f8b9 	bl	8000514 <__aeabi_ui2d>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4606      	mov	r6, r0
 80073a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073aa:	3d01      	subs	r5, #1
 80073ac:	930e      	str	r3, [sp, #56]	; 0x38
 80073ae:	e76a      	b.n	8007286 <_dtoa_r+0x116>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e7b2      	b.n	800731a <_dtoa_r+0x1aa>
 80073b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80073b6:	e7b1      	b.n	800731c <_dtoa_r+0x1ac>
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	9a00      	ldr	r2, [sp, #0]
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	9304      	str	r3, [sp, #16]
 80073c0:	4253      	negs	r3, r2
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	2300      	movs	r3, #0
 80073c6:	930a      	str	r3, [sp, #40]	; 0x28
 80073c8:	e7bf      	b.n	800734a <_dtoa_r+0x1da>
 80073ca:	2300      	movs	r3, #0
 80073cc:	9308      	str	r3, [sp, #32]
 80073ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dc55      	bgt.n	8007480 <_dtoa_r+0x310>
 80073d4:	2301      	movs	r3, #1
 80073d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073da:	461a      	mov	r2, r3
 80073dc:	9209      	str	r2, [sp, #36]	; 0x24
 80073de:	e00c      	b.n	80073fa <_dtoa_r+0x28a>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e7f3      	b.n	80073cc <_dtoa_r+0x25c>
 80073e4:	2300      	movs	r3, #0
 80073e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e8:	9308      	str	r3, [sp, #32]
 80073ea:	9b00      	ldr	r3, [sp, #0]
 80073ec:	4413      	add	r3, r2
 80073ee:	9302      	str	r3, [sp, #8]
 80073f0:	3301      	adds	r3, #1
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	9303      	str	r3, [sp, #12]
 80073f6:	bfb8      	it	lt
 80073f8:	2301      	movlt	r3, #1
 80073fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073fc:	2200      	movs	r2, #0
 80073fe:	6042      	str	r2, [r0, #4]
 8007400:	2204      	movs	r2, #4
 8007402:	f102 0614 	add.w	r6, r2, #20
 8007406:	429e      	cmp	r6, r3
 8007408:	6841      	ldr	r1, [r0, #4]
 800740a:	d93d      	bls.n	8007488 <_dtoa_r+0x318>
 800740c:	4620      	mov	r0, r4
 800740e:	f000 fed7 	bl	80081c0 <_Balloc>
 8007412:	9001      	str	r0, [sp, #4]
 8007414:	2800      	cmp	r0, #0
 8007416:	d13b      	bne.n	8007490 <_dtoa_r+0x320>
 8007418:	4b11      	ldr	r3, [pc, #68]	; (8007460 <_dtoa_r+0x2f0>)
 800741a:	4602      	mov	r2, r0
 800741c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007420:	e6c0      	b.n	80071a4 <_dtoa_r+0x34>
 8007422:	2301      	movs	r3, #1
 8007424:	e7df      	b.n	80073e6 <_dtoa_r+0x276>
 8007426:	bf00      	nop
 8007428:	636f4361 	.word	0x636f4361
 800742c:	3fd287a7 	.word	0x3fd287a7
 8007430:	8b60c8b3 	.word	0x8b60c8b3
 8007434:	3fc68a28 	.word	0x3fc68a28
 8007438:	509f79fb 	.word	0x509f79fb
 800743c:	3fd34413 	.word	0x3fd34413
 8007440:	0800b109 	.word	0x0800b109
 8007444:	0800b120 	.word	0x0800b120
 8007448:	7ff00000 	.word	0x7ff00000
 800744c:	0800b105 	.word	0x0800b105
 8007450:	0800b0fc 	.word	0x0800b0fc
 8007454:	0800b0d9 	.word	0x0800b0d9
 8007458:	3ff80000 	.word	0x3ff80000
 800745c:	0800b270 	.word	0x0800b270
 8007460:	0800b17b 	.word	0x0800b17b
 8007464:	2501      	movs	r5, #1
 8007466:	2300      	movs	r3, #0
 8007468:	9306      	str	r3, [sp, #24]
 800746a:	9508      	str	r5, [sp, #32]
 800746c:	f04f 33ff 	mov.w	r3, #4294967295
 8007470:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	2312      	movs	r3, #18
 8007478:	e7b0      	b.n	80073dc <_dtoa_r+0x26c>
 800747a:	2301      	movs	r3, #1
 800747c:	9308      	str	r3, [sp, #32]
 800747e:	e7f5      	b.n	800746c <_dtoa_r+0x2fc>
 8007480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007482:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007486:	e7b8      	b.n	80073fa <_dtoa_r+0x28a>
 8007488:	3101      	adds	r1, #1
 800748a:	6041      	str	r1, [r0, #4]
 800748c:	0052      	lsls	r2, r2, #1
 800748e:	e7b8      	b.n	8007402 <_dtoa_r+0x292>
 8007490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007492:	9a01      	ldr	r2, [sp, #4]
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	9b03      	ldr	r3, [sp, #12]
 8007498:	2b0e      	cmp	r3, #14
 800749a:	f200 809d 	bhi.w	80075d8 <_dtoa_r+0x468>
 800749e:	2d00      	cmp	r5, #0
 80074a0:	f000 809a 	beq.w	80075d8 <_dtoa_r+0x468>
 80074a4:	9b00      	ldr	r3, [sp, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dd32      	ble.n	8007510 <_dtoa_r+0x3a0>
 80074aa:	4ab7      	ldr	r2, [pc, #732]	; (8007788 <_dtoa_r+0x618>)
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074b8:	9b00      	ldr	r3, [sp, #0]
 80074ba:	05d8      	lsls	r0, r3, #23
 80074bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80074c0:	d516      	bpl.n	80074f0 <_dtoa_r+0x380>
 80074c2:	4bb2      	ldr	r3, [pc, #712]	; (800778c <_dtoa_r+0x61c>)
 80074c4:	ec51 0b19 	vmov	r0, r1, d9
 80074c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074cc:	f7f9 f9c6 	bl	800085c <__aeabi_ddiv>
 80074d0:	f007 070f 	and.w	r7, r7, #15
 80074d4:	4682      	mov	sl, r0
 80074d6:	468b      	mov	fp, r1
 80074d8:	2503      	movs	r5, #3
 80074da:	4eac      	ldr	r6, [pc, #688]	; (800778c <_dtoa_r+0x61c>)
 80074dc:	b957      	cbnz	r7, 80074f4 <_dtoa_r+0x384>
 80074de:	4642      	mov	r2, r8
 80074e0:	464b      	mov	r3, r9
 80074e2:	4650      	mov	r0, sl
 80074e4:	4659      	mov	r1, fp
 80074e6:	f7f9 f9b9 	bl	800085c <__aeabi_ddiv>
 80074ea:	4682      	mov	sl, r0
 80074ec:	468b      	mov	fp, r1
 80074ee:	e028      	b.n	8007542 <_dtoa_r+0x3d2>
 80074f0:	2502      	movs	r5, #2
 80074f2:	e7f2      	b.n	80074da <_dtoa_r+0x36a>
 80074f4:	07f9      	lsls	r1, r7, #31
 80074f6:	d508      	bpl.n	800750a <_dtoa_r+0x39a>
 80074f8:	4640      	mov	r0, r8
 80074fa:	4649      	mov	r1, r9
 80074fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007500:	f7f9 f882 	bl	8000608 <__aeabi_dmul>
 8007504:	3501      	adds	r5, #1
 8007506:	4680      	mov	r8, r0
 8007508:	4689      	mov	r9, r1
 800750a:	107f      	asrs	r7, r7, #1
 800750c:	3608      	adds	r6, #8
 800750e:	e7e5      	b.n	80074dc <_dtoa_r+0x36c>
 8007510:	f000 809b 	beq.w	800764a <_dtoa_r+0x4da>
 8007514:	9b00      	ldr	r3, [sp, #0]
 8007516:	4f9d      	ldr	r7, [pc, #628]	; (800778c <_dtoa_r+0x61c>)
 8007518:	425e      	negs	r6, r3
 800751a:	4b9b      	ldr	r3, [pc, #620]	; (8007788 <_dtoa_r+0x618>)
 800751c:	f006 020f 	and.w	r2, r6, #15
 8007520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	ec51 0b19 	vmov	r0, r1, d9
 800752c:	f7f9 f86c 	bl	8000608 <__aeabi_dmul>
 8007530:	1136      	asrs	r6, r6, #4
 8007532:	4682      	mov	sl, r0
 8007534:	468b      	mov	fp, r1
 8007536:	2300      	movs	r3, #0
 8007538:	2502      	movs	r5, #2
 800753a:	2e00      	cmp	r6, #0
 800753c:	d17a      	bne.n	8007634 <_dtoa_r+0x4c4>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1d3      	bne.n	80074ea <_dtoa_r+0x37a>
 8007542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 8082 	beq.w	800764e <_dtoa_r+0x4de>
 800754a:	4b91      	ldr	r3, [pc, #580]	; (8007790 <_dtoa_r+0x620>)
 800754c:	2200      	movs	r2, #0
 800754e:	4650      	mov	r0, sl
 8007550:	4659      	mov	r1, fp
 8007552:	f7f9 facb 	bl	8000aec <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	d079      	beq.n	800764e <_dtoa_r+0x4de>
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d076      	beq.n	800764e <_dtoa_r+0x4de>
 8007560:	9b02      	ldr	r3, [sp, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	dd36      	ble.n	80075d4 <_dtoa_r+0x464>
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	4650      	mov	r0, sl
 800756a:	4659      	mov	r1, fp
 800756c:	1e5f      	subs	r7, r3, #1
 800756e:	2200      	movs	r2, #0
 8007570:	4b88      	ldr	r3, [pc, #544]	; (8007794 <_dtoa_r+0x624>)
 8007572:	f7f9 f849 	bl	8000608 <__aeabi_dmul>
 8007576:	9e02      	ldr	r6, [sp, #8]
 8007578:	4682      	mov	sl, r0
 800757a:	468b      	mov	fp, r1
 800757c:	3501      	adds	r5, #1
 800757e:	4628      	mov	r0, r5
 8007580:	f7f8 ffd8 	bl	8000534 <__aeabi_i2d>
 8007584:	4652      	mov	r2, sl
 8007586:	465b      	mov	r3, fp
 8007588:	f7f9 f83e 	bl	8000608 <__aeabi_dmul>
 800758c:	4b82      	ldr	r3, [pc, #520]	; (8007798 <_dtoa_r+0x628>)
 800758e:	2200      	movs	r2, #0
 8007590:	f7f8 fe84 	bl	800029c <__adddf3>
 8007594:	46d0      	mov	r8, sl
 8007596:	46d9      	mov	r9, fp
 8007598:	4682      	mov	sl, r0
 800759a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800759e:	2e00      	cmp	r6, #0
 80075a0:	d158      	bne.n	8007654 <_dtoa_r+0x4e4>
 80075a2:	4b7e      	ldr	r3, [pc, #504]	; (800779c <_dtoa_r+0x62c>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	4640      	mov	r0, r8
 80075a8:	4649      	mov	r1, r9
 80075aa:	f7f8 fe75 	bl	8000298 <__aeabi_dsub>
 80075ae:	4652      	mov	r2, sl
 80075b0:	465b      	mov	r3, fp
 80075b2:	4680      	mov	r8, r0
 80075b4:	4689      	mov	r9, r1
 80075b6:	f7f9 fab7 	bl	8000b28 <__aeabi_dcmpgt>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	f040 8295 	bne.w	8007aea <_dtoa_r+0x97a>
 80075c0:	4652      	mov	r2, sl
 80075c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075c6:	4640      	mov	r0, r8
 80075c8:	4649      	mov	r1, r9
 80075ca:	f7f9 fa8f 	bl	8000aec <__aeabi_dcmplt>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f040 8289 	bne.w	8007ae6 <_dtoa_r+0x976>
 80075d4:	ec5b ab19 	vmov	sl, fp, d9
 80075d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f2c0 8148 	blt.w	8007870 <_dtoa_r+0x700>
 80075e0:	9a00      	ldr	r2, [sp, #0]
 80075e2:	2a0e      	cmp	r2, #14
 80075e4:	f300 8144 	bgt.w	8007870 <_dtoa_r+0x700>
 80075e8:	4b67      	ldr	r3, [pc, #412]	; (8007788 <_dtoa_r+0x618>)
 80075ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f280 80d5 	bge.w	80077a4 <_dtoa_r+0x634>
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f300 80d1 	bgt.w	80077a4 <_dtoa_r+0x634>
 8007602:	f040 826f 	bne.w	8007ae4 <_dtoa_r+0x974>
 8007606:	4b65      	ldr	r3, [pc, #404]	; (800779c <_dtoa_r+0x62c>)
 8007608:	2200      	movs	r2, #0
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	f7f8 fffb 	bl	8000608 <__aeabi_dmul>
 8007612:	4652      	mov	r2, sl
 8007614:	465b      	mov	r3, fp
 8007616:	f7f9 fa7d 	bl	8000b14 <__aeabi_dcmpge>
 800761a:	9e03      	ldr	r6, [sp, #12]
 800761c:	4637      	mov	r7, r6
 800761e:	2800      	cmp	r0, #0
 8007620:	f040 8245 	bne.w	8007aae <_dtoa_r+0x93e>
 8007624:	9d01      	ldr	r5, [sp, #4]
 8007626:	2331      	movs	r3, #49	; 0x31
 8007628:	f805 3b01 	strb.w	r3, [r5], #1
 800762c:	9b00      	ldr	r3, [sp, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	e240      	b.n	8007ab6 <_dtoa_r+0x946>
 8007634:	07f2      	lsls	r2, r6, #31
 8007636:	d505      	bpl.n	8007644 <_dtoa_r+0x4d4>
 8007638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763c:	f7f8 ffe4 	bl	8000608 <__aeabi_dmul>
 8007640:	3501      	adds	r5, #1
 8007642:	2301      	movs	r3, #1
 8007644:	1076      	asrs	r6, r6, #1
 8007646:	3708      	adds	r7, #8
 8007648:	e777      	b.n	800753a <_dtoa_r+0x3ca>
 800764a:	2502      	movs	r5, #2
 800764c:	e779      	b.n	8007542 <_dtoa_r+0x3d2>
 800764e:	9f00      	ldr	r7, [sp, #0]
 8007650:	9e03      	ldr	r6, [sp, #12]
 8007652:	e794      	b.n	800757e <_dtoa_r+0x40e>
 8007654:	9901      	ldr	r1, [sp, #4]
 8007656:	4b4c      	ldr	r3, [pc, #304]	; (8007788 <_dtoa_r+0x618>)
 8007658:	4431      	add	r1, r6
 800765a:	910d      	str	r1, [sp, #52]	; 0x34
 800765c:	9908      	ldr	r1, [sp, #32]
 800765e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007662:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007666:	2900      	cmp	r1, #0
 8007668:	d043      	beq.n	80076f2 <_dtoa_r+0x582>
 800766a:	494d      	ldr	r1, [pc, #308]	; (80077a0 <_dtoa_r+0x630>)
 800766c:	2000      	movs	r0, #0
 800766e:	f7f9 f8f5 	bl	800085c <__aeabi_ddiv>
 8007672:	4652      	mov	r2, sl
 8007674:	465b      	mov	r3, fp
 8007676:	f7f8 fe0f 	bl	8000298 <__aeabi_dsub>
 800767a:	9d01      	ldr	r5, [sp, #4]
 800767c:	4682      	mov	sl, r0
 800767e:	468b      	mov	fp, r1
 8007680:	4649      	mov	r1, r9
 8007682:	4640      	mov	r0, r8
 8007684:	f7f9 fa70 	bl	8000b68 <__aeabi_d2iz>
 8007688:	4606      	mov	r6, r0
 800768a:	f7f8 ff53 	bl	8000534 <__aeabi_i2d>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4640      	mov	r0, r8
 8007694:	4649      	mov	r1, r9
 8007696:	f7f8 fdff 	bl	8000298 <__aeabi_dsub>
 800769a:	3630      	adds	r6, #48	; 0x30
 800769c:	f805 6b01 	strb.w	r6, [r5], #1
 80076a0:	4652      	mov	r2, sl
 80076a2:	465b      	mov	r3, fp
 80076a4:	4680      	mov	r8, r0
 80076a6:	4689      	mov	r9, r1
 80076a8:	f7f9 fa20 	bl	8000aec <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d163      	bne.n	8007778 <_dtoa_r+0x608>
 80076b0:	4642      	mov	r2, r8
 80076b2:	464b      	mov	r3, r9
 80076b4:	4936      	ldr	r1, [pc, #216]	; (8007790 <_dtoa_r+0x620>)
 80076b6:	2000      	movs	r0, #0
 80076b8:	f7f8 fdee 	bl	8000298 <__aeabi_dsub>
 80076bc:	4652      	mov	r2, sl
 80076be:	465b      	mov	r3, fp
 80076c0:	f7f9 fa14 	bl	8000aec <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f040 80b5 	bne.w	8007834 <_dtoa_r+0x6c4>
 80076ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076cc:	429d      	cmp	r5, r3
 80076ce:	d081      	beq.n	80075d4 <_dtoa_r+0x464>
 80076d0:	4b30      	ldr	r3, [pc, #192]	; (8007794 <_dtoa_r+0x624>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	4650      	mov	r0, sl
 80076d6:	4659      	mov	r1, fp
 80076d8:	f7f8 ff96 	bl	8000608 <__aeabi_dmul>
 80076dc:	4b2d      	ldr	r3, [pc, #180]	; (8007794 <_dtoa_r+0x624>)
 80076de:	4682      	mov	sl, r0
 80076e0:	468b      	mov	fp, r1
 80076e2:	4640      	mov	r0, r8
 80076e4:	4649      	mov	r1, r9
 80076e6:	2200      	movs	r2, #0
 80076e8:	f7f8 ff8e 	bl	8000608 <__aeabi_dmul>
 80076ec:	4680      	mov	r8, r0
 80076ee:	4689      	mov	r9, r1
 80076f0:	e7c6      	b.n	8007680 <_dtoa_r+0x510>
 80076f2:	4650      	mov	r0, sl
 80076f4:	4659      	mov	r1, fp
 80076f6:	f7f8 ff87 	bl	8000608 <__aeabi_dmul>
 80076fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076fc:	9d01      	ldr	r5, [sp, #4]
 80076fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007700:	4682      	mov	sl, r0
 8007702:	468b      	mov	fp, r1
 8007704:	4649      	mov	r1, r9
 8007706:	4640      	mov	r0, r8
 8007708:	f7f9 fa2e 	bl	8000b68 <__aeabi_d2iz>
 800770c:	4606      	mov	r6, r0
 800770e:	f7f8 ff11 	bl	8000534 <__aeabi_i2d>
 8007712:	3630      	adds	r6, #48	; 0x30
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f8 fdbc 	bl	8000298 <__aeabi_dsub>
 8007720:	f805 6b01 	strb.w	r6, [r5], #1
 8007724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007726:	429d      	cmp	r5, r3
 8007728:	4680      	mov	r8, r0
 800772a:	4689      	mov	r9, r1
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	d124      	bne.n	800777c <_dtoa_r+0x60c>
 8007732:	4b1b      	ldr	r3, [pc, #108]	; (80077a0 <_dtoa_r+0x630>)
 8007734:	4650      	mov	r0, sl
 8007736:	4659      	mov	r1, fp
 8007738:	f7f8 fdb0 	bl	800029c <__adddf3>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4640      	mov	r0, r8
 8007742:	4649      	mov	r1, r9
 8007744:	f7f9 f9f0 	bl	8000b28 <__aeabi_dcmpgt>
 8007748:	2800      	cmp	r0, #0
 800774a:	d173      	bne.n	8007834 <_dtoa_r+0x6c4>
 800774c:	4652      	mov	r2, sl
 800774e:	465b      	mov	r3, fp
 8007750:	4913      	ldr	r1, [pc, #76]	; (80077a0 <_dtoa_r+0x630>)
 8007752:	2000      	movs	r0, #0
 8007754:	f7f8 fda0 	bl	8000298 <__aeabi_dsub>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4640      	mov	r0, r8
 800775e:	4649      	mov	r1, r9
 8007760:	f7f9 f9c4 	bl	8000aec <__aeabi_dcmplt>
 8007764:	2800      	cmp	r0, #0
 8007766:	f43f af35 	beq.w	80075d4 <_dtoa_r+0x464>
 800776a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800776c:	1e6b      	subs	r3, r5, #1
 800776e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007770:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007774:	2b30      	cmp	r3, #48	; 0x30
 8007776:	d0f8      	beq.n	800776a <_dtoa_r+0x5fa>
 8007778:	9700      	str	r7, [sp, #0]
 800777a:	e049      	b.n	8007810 <_dtoa_r+0x6a0>
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <_dtoa_r+0x624>)
 800777e:	f7f8 ff43 	bl	8000608 <__aeabi_dmul>
 8007782:	4680      	mov	r8, r0
 8007784:	4689      	mov	r9, r1
 8007786:	e7bd      	b.n	8007704 <_dtoa_r+0x594>
 8007788:	0800b270 	.word	0x0800b270
 800778c:	0800b248 	.word	0x0800b248
 8007790:	3ff00000 	.word	0x3ff00000
 8007794:	40240000 	.word	0x40240000
 8007798:	401c0000 	.word	0x401c0000
 800779c:	40140000 	.word	0x40140000
 80077a0:	3fe00000 	.word	0x3fe00000
 80077a4:	9d01      	ldr	r5, [sp, #4]
 80077a6:	4656      	mov	r6, sl
 80077a8:	465f      	mov	r7, fp
 80077aa:	4642      	mov	r2, r8
 80077ac:	464b      	mov	r3, r9
 80077ae:	4630      	mov	r0, r6
 80077b0:	4639      	mov	r1, r7
 80077b2:	f7f9 f853 	bl	800085c <__aeabi_ddiv>
 80077b6:	f7f9 f9d7 	bl	8000b68 <__aeabi_d2iz>
 80077ba:	4682      	mov	sl, r0
 80077bc:	f7f8 feba 	bl	8000534 <__aeabi_i2d>
 80077c0:	4642      	mov	r2, r8
 80077c2:	464b      	mov	r3, r9
 80077c4:	f7f8 ff20 	bl	8000608 <__aeabi_dmul>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4630      	mov	r0, r6
 80077ce:	4639      	mov	r1, r7
 80077d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80077d4:	f7f8 fd60 	bl	8000298 <__aeabi_dsub>
 80077d8:	f805 6b01 	strb.w	r6, [r5], #1
 80077dc:	9e01      	ldr	r6, [sp, #4]
 80077de:	9f03      	ldr	r7, [sp, #12]
 80077e0:	1bae      	subs	r6, r5, r6
 80077e2:	42b7      	cmp	r7, r6
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	d135      	bne.n	8007856 <_dtoa_r+0x6e6>
 80077ea:	f7f8 fd57 	bl	800029c <__adddf3>
 80077ee:	4642      	mov	r2, r8
 80077f0:	464b      	mov	r3, r9
 80077f2:	4606      	mov	r6, r0
 80077f4:	460f      	mov	r7, r1
 80077f6:	f7f9 f997 	bl	8000b28 <__aeabi_dcmpgt>
 80077fa:	b9d0      	cbnz	r0, 8007832 <_dtoa_r+0x6c2>
 80077fc:	4642      	mov	r2, r8
 80077fe:	464b      	mov	r3, r9
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f9 f968 	bl	8000ad8 <__aeabi_dcmpeq>
 8007808:	b110      	cbz	r0, 8007810 <_dtoa_r+0x6a0>
 800780a:	f01a 0f01 	tst.w	sl, #1
 800780e:	d110      	bne.n	8007832 <_dtoa_r+0x6c2>
 8007810:	4620      	mov	r0, r4
 8007812:	ee18 1a10 	vmov	r1, s16
 8007816:	f000 fd13 	bl	8008240 <_Bfree>
 800781a:	2300      	movs	r3, #0
 800781c:	9800      	ldr	r0, [sp, #0]
 800781e:	702b      	strb	r3, [r5, #0]
 8007820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007822:	3001      	adds	r0, #1
 8007824:	6018      	str	r0, [r3, #0]
 8007826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007828:	2b00      	cmp	r3, #0
 800782a:	f43f acf1 	beq.w	8007210 <_dtoa_r+0xa0>
 800782e:	601d      	str	r5, [r3, #0]
 8007830:	e4ee      	b.n	8007210 <_dtoa_r+0xa0>
 8007832:	9f00      	ldr	r7, [sp, #0]
 8007834:	462b      	mov	r3, r5
 8007836:	461d      	mov	r5, r3
 8007838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800783c:	2a39      	cmp	r2, #57	; 0x39
 800783e:	d106      	bne.n	800784e <_dtoa_r+0x6de>
 8007840:	9a01      	ldr	r2, [sp, #4]
 8007842:	429a      	cmp	r2, r3
 8007844:	d1f7      	bne.n	8007836 <_dtoa_r+0x6c6>
 8007846:	9901      	ldr	r1, [sp, #4]
 8007848:	2230      	movs	r2, #48	; 0x30
 800784a:	3701      	adds	r7, #1
 800784c:	700a      	strb	r2, [r1, #0]
 800784e:	781a      	ldrb	r2, [r3, #0]
 8007850:	3201      	adds	r2, #1
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	e790      	b.n	8007778 <_dtoa_r+0x608>
 8007856:	4ba6      	ldr	r3, [pc, #664]	; (8007af0 <_dtoa_r+0x980>)
 8007858:	2200      	movs	r2, #0
 800785a:	f7f8 fed5 	bl	8000608 <__aeabi_dmul>
 800785e:	2200      	movs	r2, #0
 8007860:	2300      	movs	r3, #0
 8007862:	4606      	mov	r6, r0
 8007864:	460f      	mov	r7, r1
 8007866:	f7f9 f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800786a:	2800      	cmp	r0, #0
 800786c:	d09d      	beq.n	80077aa <_dtoa_r+0x63a>
 800786e:	e7cf      	b.n	8007810 <_dtoa_r+0x6a0>
 8007870:	9a08      	ldr	r2, [sp, #32]
 8007872:	2a00      	cmp	r2, #0
 8007874:	f000 80d7 	beq.w	8007a26 <_dtoa_r+0x8b6>
 8007878:	9a06      	ldr	r2, [sp, #24]
 800787a:	2a01      	cmp	r2, #1
 800787c:	f300 80ba 	bgt.w	80079f4 <_dtoa_r+0x884>
 8007880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007882:	2a00      	cmp	r2, #0
 8007884:	f000 80b2 	beq.w	80079ec <_dtoa_r+0x87c>
 8007888:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800788c:	9e07      	ldr	r6, [sp, #28]
 800788e:	9d04      	ldr	r5, [sp, #16]
 8007890:	9a04      	ldr	r2, [sp, #16]
 8007892:	441a      	add	r2, r3
 8007894:	9204      	str	r2, [sp, #16]
 8007896:	9a05      	ldr	r2, [sp, #20]
 8007898:	2101      	movs	r1, #1
 800789a:	441a      	add	r2, r3
 800789c:	4620      	mov	r0, r4
 800789e:	9205      	str	r2, [sp, #20]
 80078a0:	f000 fd86 	bl	80083b0 <__i2b>
 80078a4:	4607      	mov	r7, r0
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	dd0c      	ble.n	80078c4 <_dtoa_r+0x754>
 80078aa:	9b05      	ldr	r3, [sp, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd09      	ble.n	80078c4 <_dtoa_r+0x754>
 80078b0:	42ab      	cmp	r3, r5
 80078b2:	9a04      	ldr	r2, [sp, #16]
 80078b4:	bfa8      	it	ge
 80078b6:	462b      	movge	r3, r5
 80078b8:	1ad2      	subs	r2, r2, r3
 80078ba:	9204      	str	r2, [sp, #16]
 80078bc:	9a05      	ldr	r2, [sp, #20]
 80078be:	1aed      	subs	r5, r5, r3
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	9b07      	ldr	r3, [sp, #28]
 80078c6:	b31b      	cbz	r3, 8007910 <_dtoa_r+0x7a0>
 80078c8:	9b08      	ldr	r3, [sp, #32]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80af 	beq.w	8007a2e <_dtoa_r+0x8be>
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	dd13      	ble.n	80078fc <_dtoa_r+0x78c>
 80078d4:	4639      	mov	r1, r7
 80078d6:	4632      	mov	r2, r6
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fe29 	bl	8008530 <__pow5mult>
 80078de:	ee18 2a10 	vmov	r2, s16
 80078e2:	4601      	mov	r1, r0
 80078e4:	4607      	mov	r7, r0
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 fd78 	bl	80083dc <__multiply>
 80078ec:	ee18 1a10 	vmov	r1, s16
 80078f0:	4680      	mov	r8, r0
 80078f2:	4620      	mov	r0, r4
 80078f4:	f000 fca4 	bl	8008240 <_Bfree>
 80078f8:	ee08 8a10 	vmov	s16, r8
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	1b9a      	subs	r2, r3, r6
 8007900:	d006      	beq.n	8007910 <_dtoa_r+0x7a0>
 8007902:	ee18 1a10 	vmov	r1, s16
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fe12 	bl	8008530 <__pow5mult>
 800790c:	ee08 0a10 	vmov	s16, r0
 8007910:	2101      	movs	r1, #1
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fd4c 	bl	80083b0 <__i2b>
 8007918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791a:	2b00      	cmp	r3, #0
 800791c:	4606      	mov	r6, r0
 800791e:	f340 8088 	ble.w	8007a32 <_dtoa_r+0x8c2>
 8007922:	461a      	mov	r2, r3
 8007924:	4601      	mov	r1, r0
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fe02 	bl	8008530 <__pow5mult>
 800792c:	9b06      	ldr	r3, [sp, #24]
 800792e:	2b01      	cmp	r3, #1
 8007930:	4606      	mov	r6, r0
 8007932:	f340 8081 	ble.w	8007a38 <_dtoa_r+0x8c8>
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	6933      	ldr	r3, [r6, #16]
 800793c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007940:	6918      	ldr	r0, [r3, #16]
 8007942:	f000 fce5 	bl	8008310 <__hi0bits>
 8007946:	f1c0 0020 	rsb	r0, r0, #32
 800794a:	9b05      	ldr	r3, [sp, #20]
 800794c:	4418      	add	r0, r3
 800794e:	f010 001f 	ands.w	r0, r0, #31
 8007952:	f000 8092 	beq.w	8007a7a <_dtoa_r+0x90a>
 8007956:	f1c0 0320 	rsb	r3, r0, #32
 800795a:	2b04      	cmp	r3, #4
 800795c:	f340 808a 	ble.w	8007a74 <_dtoa_r+0x904>
 8007960:	f1c0 001c 	rsb	r0, r0, #28
 8007964:	9b04      	ldr	r3, [sp, #16]
 8007966:	4403      	add	r3, r0
 8007968:	9304      	str	r3, [sp, #16]
 800796a:	9b05      	ldr	r3, [sp, #20]
 800796c:	4403      	add	r3, r0
 800796e:	4405      	add	r5, r0
 8007970:	9305      	str	r3, [sp, #20]
 8007972:	9b04      	ldr	r3, [sp, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd07      	ble.n	8007988 <_dtoa_r+0x818>
 8007978:	ee18 1a10 	vmov	r1, s16
 800797c:	461a      	mov	r2, r3
 800797e:	4620      	mov	r0, r4
 8007980:	f000 fe30 	bl	80085e4 <__lshift>
 8007984:	ee08 0a10 	vmov	s16, r0
 8007988:	9b05      	ldr	r3, [sp, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	dd05      	ble.n	800799a <_dtoa_r+0x82a>
 800798e:	4631      	mov	r1, r6
 8007990:	461a      	mov	r2, r3
 8007992:	4620      	mov	r0, r4
 8007994:	f000 fe26 	bl	80085e4 <__lshift>
 8007998:	4606      	mov	r6, r0
 800799a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d06e      	beq.n	8007a7e <_dtoa_r+0x90e>
 80079a0:	ee18 0a10 	vmov	r0, s16
 80079a4:	4631      	mov	r1, r6
 80079a6:	f000 fe8d 	bl	80086c4 <__mcmp>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	da67      	bge.n	8007a7e <_dtoa_r+0x90e>
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	ee18 1a10 	vmov	r1, s16
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	220a      	movs	r2, #10
 80079ba:	2300      	movs	r3, #0
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fc61 	bl	8008284 <__multadd>
 80079c2:	9b08      	ldr	r3, [sp, #32]
 80079c4:	ee08 0a10 	vmov	s16, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 81b1 	beq.w	8007d30 <_dtoa_r+0xbc0>
 80079ce:	2300      	movs	r3, #0
 80079d0:	4639      	mov	r1, r7
 80079d2:	220a      	movs	r2, #10
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fc55 	bl	8008284 <__multadd>
 80079da:	9b02      	ldr	r3, [sp, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	4607      	mov	r7, r0
 80079e0:	f300 808e 	bgt.w	8007b00 <_dtoa_r+0x990>
 80079e4:	9b06      	ldr	r3, [sp, #24]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	dc51      	bgt.n	8007a8e <_dtoa_r+0x91e>
 80079ea:	e089      	b.n	8007b00 <_dtoa_r+0x990>
 80079ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079f2:	e74b      	b.n	800788c <_dtoa_r+0x71c>
 80079f4:	9b03      	ldr	r3, [sp, #12]
 80079f6:	1e5e      	subs	r6, r3, #1
 80079f8:	9b07      	ldr	r3, [sp, #28]
 80079fa:	42b3      	cmp	r3, r6
 80079fc:	bfbf      	itttt	lt
 80079fe:	9b07      	ldrlt	r3, [sp, #28]
 8007a00:	9607      	strlt	r6, [sp, #28]
 8007a02:	1af2      	sublt	r2, r6, r3
 8007a04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a06:	bfb6      	itet	lt
 8007a08:	189b      	addlt	r3, r3, r2
 8007a0a:	1b9e      	subge	r6, r3, r6
 8007a0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	bfb8      	it	lt
 8007a12:	2600      	movlt	r6, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfb7      	itett	lt
 8007a18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007a1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007a20:	1a9d      	sublt	r5, r3, r2
 8007a22:	2300      	movlt	r3, #0
 8007a24:	e734      	b.n	8007890 <_dtoa_r+0x720>
 8007a26:	9e07      	ldr	r6, [sp, #28]
 8007a28:	9d04      	ldr	r5, [sp, #16]
 8007a2a:	9f08      	ldr	r7, [sp, #32]
 8007a2c:	e73b      	b.n	80078a6 <_dtoa_r+0x736>
 8007a2e:	9a07      	ldr	r2, [sp, #28]
 8007a30:	e767      	b.n	8007902 <_dtoa_r+0x792>
 8007a32:	9b06      	ldr	r3, [sp, #24]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	dc18      	bgt.n	8007a6a <_dtoa_r+0x8fa>
 8007a38:	f1ba 0f00 	cmp.w	sl, #0
 8007a3c:	d115      	bne.n	8007a6a <_dtoa_r+0x8fa>
 8007a3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a42:	b993      	cbnz	r3, 8007a6a <_dtoa_r+0x8fa>
 8007a44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a48:	0d1b      	lsrs	r3, r3, #20
 8007a4a:	051b      	lsls	r3, r3, #20
 8007a4c:	b183      	cbz	r3, 8007a70 <_dtoa_r+0x900>
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	3301      	adds	r3, #1
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	9b05      	ldr	r3, [sp, #20]
 8007a56:	3301      	adds	r3, #1
 8007a58:	9305      	str	r3, [sp, #20]
 8007a5a:	f04f 0801 	mov.w	r8, #1
 8007a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f47f af6a 	bne.w	800793a <_dtoa_r+0x7ca>
 8007a66:	2001      	movs	r0, #1
 8007a68:	e76f      	b.n	800794a <_dtoa_r+0x7da>
 8007a6a:	f04f 0800 	mov.w	r8, #0
 8007a6e:	e7f6      	b.n	8007a5e <_dtoa_r+0x8ee>
 8007a70:	4698      	mov	r8, r3
 8007a72:	e7f4      	b.n	8007a5e <_dtoa_r+0x8ee>
 8007a74:	f43f af7d 	beq.w	8007972 <_dtoa_r+0x802>
 8007a78:	4618      	mov	r0, r3
 8007a7a:	301c      	adds	r0, #28
 8007a7c:	e772      	b.n	8007964 <_dtoa_r+0x7f4>
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dc37      	bgt.n	8007af4 <_dtoa_r+0x984>
 8007a84:	9b06      	ldr	r3, [sp, #24]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	dd34      	ble.n	8007af4 <_dtoa_r+0x984>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	9302      	str	r3, [sp, #8]
 8007a8e:	9b02      	ldr	r3, [sp, #8]
 8007a90:	b96b      	cbnz	r3, 8007aae <_dtoa_r+0x93e>
 8007a92:	4631      	mov	r1, r6
 8007a94:	2205      	movs	r2, #5
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 fbf4 	bl	8008284 <__multadd>
 8007a9c:	4601      	mov	r1, r0
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	ee18 0a10 	vmov	r0, s16
 8007aa4:	f000 fe0e 	bl	80086c4 <__mcmp>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	f73f adbb 	bgt.w	8007624 <_dtoa_r+0x4b4>
 8007aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab0:	9d01      	ldr	r5, [sp, #4]
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	f04f 0800 	mov.w	r8, #0
 8007aba:	4631      	mov	r1, r6
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 fbbf 	bl	8008240 <_Bfree>
 8007ac2:	2f00      	cmp	r7, #0
 8007ac4:	f43f aea4 	beq.w	8007810 <_dtoa_r+0x6a0>
 8007ac8:	f1b8 0f00 	cmp.w	r8, #0
 8007acc:	d005      	beq.n	8007ada <_dtoa_r+0x96a>
 8007ace:	45b8      	cmp	r8, r7
 8007ad0:	d003      	beq.n	8007ada <_dtoa_r+0x96a>
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fbb3 	bl	8008240 <_Bfree>
 8007ada:	4639      	mov	r1, r7
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 fbaf 	bl	8008240 <_Bfree>
 8007ae2:	e695      	b.n	8007810 <_dtoa_r+0x6a0>
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	4637      	mov	r7, r6
 8007ae8:	e7e1      	b.n	8007aae <_dtoa_r+0x93e>
 8007aea:	9700      	str	r7, [sp, #0]
 8007aec:	4637      	mov	r7, r6
 8007aee:	e599      	b.n	8007624 <_dtoa_r+0x4b4>
 8007af0:	40240000 	.word	0x40240000
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80ca 	beq.w	8007c90 <_dtoa_r+0xb20>
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	9302      	str	r3, [sp, #8]
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	dd05      	ble.n	8007b10 <_dtoa_r+0x9a0>
 8007b04:	4639      	mov	r1, r7
 8007b06:	462a      	mov	r2, r5
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fd6b 	bl	80085e4 <__lshift>
 8007b0e:	4607      	mov	r7, r0
 8007b10:	f1b8 0f00 	cmp.w	r8, #0
 8007b14:	d05b      	beq.n	8007bce <_dtoa_r+0xa5e>
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 fb51 	bl	80081c0 <_Balloc>
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b928      	cbnz	r0, 8007b2e <_dtoa_r+0x9be>
 8007b22:	4b87      	ldr	r3, [pc, #540]	; (8007d40 <_dtoa_r+0xbd0>)
 8007b24:	4602      	mov	r2, r0
 8007b26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b2a:	f7ff bb3b 	b.w	80071a4 <_dtoa_r+0x34>
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	3202      	adds	r2, #2
 8007b32:	0092      	lsls	r2, r2, #2
 8007b34:	f107 010c 	add.w	r1, r7, #12
 8007b38:	300c      	adds	r0, #12
 8007b3a:	f000 fb33 	bl	80081a4 <memcpy>
 8007b3e:	2201      	movs	r2, #1
 8007b40:	4629      	mov	r1, r5
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 fd4e 	bl	80085e4 <__lshift>
 8007b48:	9b01      	ldr	r3, [sp, #4]
 8007b4a:	f103 0901 	add.w	r9, r3, #1
 8007b4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	9305      	str	r3, [sp, #20]
 8007b56:	f00a 0301 	and.w	r3, sl, #1
 8007b5a:	46b8      	mov	r8, r7
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	4607      	mov	r7, r0
 8007b60:	4631      	mov	r1, r6
 8007b62:	ee18 0a10 	vmov	r0, s16
 8007b66:	f7ff fa77 	bl	8007058 <quorem>
 8007b6a:	4641      	mov	r1, r8
 8007b6c:	9002      	str	r0, [sp, #8]
 8007b6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b72:	ee18 0a10 	vmov	r0, s16
 8007b76:	f000 fda5 	bl	80086c4 <__mcmp>
 8007b7a:	463a      	mov	r2, r7
 8007b7c:	9003      	str	r0, [sp, #12]
 8007b7e:	4631      	mov	r1, r6
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fdbb 	bl	80086fc <__mdiff>
 8007b86:	68c2      	ldr	r2, [r0, #12]
 8007b88:	f109 3bff 	add.w	fp, r9, #4294967295
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	bb02      	cbnz	r2, 8007bd2 <_dtoa_r+0xa62>
 8007b90:	4601      	mov	r1, r0
 8007b92:	ee18 0a10 	vmov	r0, s16
 8007b96:	f000 fd95 	bl	80086c4 <__mcmp>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	9207      	str	r2, [sp, #28]
 8007ba2:	f000 fb4d 	bl	8008240 <_Bfree>
 8007ba6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007baa:	ea43 0102 	orr.w	r1, r3, r2
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	464d      	mov	r5, r9
 8007bb4:	d10f      	bne.n	8007bd6 <_dtoa_r+0xa66>
 8007bb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bba:	d02a      	beq.n	8007c12 <_dtoa_r+0xaa2>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dd02      	ble.n	8007bc8 <_dtoa_r+0xa58>
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007bc8:	f88b a000 	strb.w	sl, [fp]
 8007bcc:	e775      	b.n	8007aba <_dtoa_r+0x94a>
 8007bce:	4638      	mov	r0, r7
 8007bd0:	e7ba      	b.n	8007b48 <_dtoa_r+0x9d8>
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	e7e2      	b.n	8007b9c <_dtoa_r+0xa2c>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	db04      	blt.n	8007be6 <_dtoa_r+0xa76>
 8007bdc:	9906      	ldr	r1, [sp, #24]
 8007bde:	430b      	orrs	r3, r1
 8007be0:	9904      	ldr	r1, [sp, #16]
 8007be2:	430b      	orrs	r3, r1
 8007be4:	d122      	bne.n	8007c2c <_dtoa_r+0xabc>
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	ddee      	ble.n	8007bc8 <_dtoa_r+0xa58>
 8007bea:	ee18 1a10 	vmov	r1, s16
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fcf7 	bl	80085e4 <__lshift>
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	ee08 0a10 	vmov	s16, r0
 8007bfc:	f000 fd62 	bl	80086c4 <__mcmp>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	dc03      	bgt.n	8007c0c <_dtoa_r+0xa9c>
 8007c04:	d1e0      	bne.n	8007bc8 <_dtoa_r+0xa58>
 8007c06:	f01a 0f01 	tst.w	sl, #1
 8007c0a:	d0dd      	beq.n	8007bc8 <_dtoa_r+0xa58>
 8007c0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c10:	d1d7      	bne.n	8007bc2 <_dtoa_r+0xa52>
 8007c12:	2339      	movs	r3, #57	; 0x39
 8007c14:	f88b 3000 	strb.w	r3, [fp]
 8007c18:	462b      	mov	r3, r5
 8007c1a:	461d      	mov	r5, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c22:	2a39      	cmp	r2, #57	; 0x39
 8007c24:	d071      	beq.n	8007d0a <_dtoa_r+0xb9a>
 8007c26:	3201      	adds	r2, #1
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	e746      	b.n	8007aba <_dtoa_r+0x94a>
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	dd07      	ble.n	8007c40 <_dtoa_r+0xad0>
 8007c30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c34:	d0ed      	beq.n	8007c12 <_dtoa_r+0xaa2>
 8007c36:	f10a 0301 	add.w	r3, sl, #1
 8007c3a:	f88b 3000 	strb.w	r3, [fp]
 8007c3e:	e73c      	b.n	8007aba <_dtoa_r+0x94a>
 8007c40:	9b05      	ldr	r3, [sp, #20]
 8007c42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007c46:	4599      	cmp	r9, r3
 8007c48:	d047      	beq.n	8007cda <_dtoa_r+0xb6a>
 8007c4a:	ee18 1a10 	vmov	r1, s16
 8007c4e:	2300      	movs	r3, #0
 8007c50:	220a      	movs	r2, #10
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fb16 	bl	8008284 <__multadd>
 8007c58:	45b8      	cmp	r8, r7
 8007c5a:	ee08 0a10 	vmov	s16, r0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	f04f 020a 	mov.w	r2, #10
 8007c66:	4641      	mov	r1, r8
 8007c68:	4620      	mov	r0, r4
 8007c6a:	d106      	bne.n	8007c7a <_dtoa_r+0xb0a>
 8007c6c:	f000 fb0a 	bl	8008284 <__multadd>
 8007c70:	4680      	mov	r8, r0
 8007c72:	4607      	mov	r7, r0
 8007c74:	f109 0901 	add.w	r9, r9, #1
 8007c78:	e772      	b.n	8007b60 <_dtoa_r+0x9f0>
 8007c7a:	f000 fb03 	bl	8008284 <__multadd>
 8007c7e:	4639      	mov	r1, r7
 8007c80:	4680      	mov	r8, r0
 8007c82:	2300      	movs	r3, #0
 8007c84:	220a      	movs	r2, #10
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 fafc 	bl	8008284 <__multadd>
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	e7f1      	b.n	8007c74 <_dtoa_r+0xb04>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	9302      	str	r3, [sp, #8]
 8007c94:	9d01      	ldr	r5, [sp, #4]
 8007c96:	ee18 0a10 	vmov	r0, s16
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	f7ff f9dc 	bl	8007058 <quorem>
 8007ca0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ca4:	9b01      	ldr	r3, [sp, #4]
 8007ca6:	f805 ab01 	strb.w	sl, [r5], #1
 8007caa:	1aea      	subs	r2, r5, r3
 8007cac:	9b02      	ldr	r3, [sp, #8]
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	dd09      	ble.n	8007cc6 <_dtoa_r+0xb56>
 8007cb2:	ee18 1a10 	vmov	r1, s16
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	220a      	movs	r2, #10
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f000 fae2 	bl	8008284 <__multadd>
 8007cc0:	ee08 0a10 	vmov	s16, r0
 8007cc4:	e7e7      	b.n	8007c96 <_dtoa_r+0xb26>
 8007cc6:	9b02      	ldr	r3, [sp, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfc8      	it	gt
 8007ccc:	461d      	movgt	r5, r3
 8007cce:	9b01      	ldr	r3, [sp, #4]
 8007cd0:	bfd8      	it	le
 8007cd2:	2501      	movle	r5, #1
 8007cd4:	441d      	add	r5, r3
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	ee18 1a10 	vmov	r1, s16
 8007cde:	2201      	movs	r2, #1
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 fc7f 	bl	80085e4 <__lshift>
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	ee08 0a10 	vmov	s16, r0
 8007cec:	f000 fcea 	bl	80086c4 <__mcmp>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dc91      	bgt.n	8007c18 <_dtoa_r+0xaa8>
 8007cf4:	d102      	bne.n	8007cfc <_dtoa_r+0xb8c>
 8007cf6:	f01a 0f01 	tst.w	sl, #1
 8007cfa:	d18d      	bne.n	8007c18 <_dtoa_r+0xaa8>
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	461d      	mov	r5, r3
 8007d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d04:	2a30      	cmp	r2, #48	; 0x30
 8007d06:	d0fa      	beq.n	8007cfe <_dtoa_r+0xb8e>
 8007d08:	e6d7      	b.n	8007aba <_dtoa_r+0x94a>
 8007d0a:	9a01      	ldr	r2, [sp, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d184      	bne.n	8007c1a <_dtoa_r+0xaaa>
 8007d10:	9b00      	ldr	r3, [sp, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	2331      	movs	r3, #49	; 0x31
 8007d18:	7013      	strb	r3, [r2, #0]
 8007d1a:	e6ce      	b.n	8007aba <_dtoa_r+0x94a>
 8007d1c:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <_dtoa_r+0xbd4>)
 8007d1e:	f7ff ba95 	b.w	800724c <_dtoa_r+0xdc>
 8007d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f47f aa6e 	bne.w	8007206 <_dtoa_r+0x96>
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <_dtoa_r+0xbd8>)
 8007d2c:	f7ff ba8e 	b.w	800724c <_dtoa_r+0xdc>
 8007d30:	9b02      	ldr	r3, [sp, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	dcae      	bgt.n	8007c94 <_dtoa_r+0xb24>
 8007d36:	9b06      	ldr	r3, [sp, #24]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	f73f aea8 	bgt.w	8007a8e <_dtoa_r+0x91e>
 8007d3e:	e7a9      	b.n	8007c94 <_dtoa_r+0xb24>
 8007d40:	0800b17b 	.word	0x0800b17b
 8007d44:	0800b0d8 	.word	0x0800b0d8
 8007d48:	0800b0fc 	.word	0x0800b0fc

08007d4c <__sflush_r>:
 8007d4c:	898a      	ldrh	r2, [r1, #12]
 8007d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d52:	4605      	mov	r5, r0
 8007d54:	0710      	lsls	r0, r2, #28
 8007d56:	460c      	mov	r4, r1
 8007d58:	d458      	bmi.n	8007e0c <__sflush_r+0xc0>
 8007d5a:	684b      	ldr	r3, [r1, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dc05      	bgt.n	8007d6c <__sflush_r+0x20>
 8007d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dc02      	bgt.n	8007d6c <__sflush_r+0x20>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6e:	2e00      	cmp	r6, #0
 8007d70:	d0f9      	beq.n	8007d66 <__sflush_r+0x1a>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d78:	682f      	ldr	r7, [r5, #0]
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	d032      	beq.n	8007de4 <__sflush_r+0x98>
 8007d7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	075a      	lsls	r2, r3, #29
 8007d84:	d505      	bpl.n	8007d92 <__sflush_r+0x46>
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	1ac0      	subs	r0, r0, r3
 8007d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d8c:	b10b      	cbz	r3, 8007d92 <__sflush_r+0x46>
 8007d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d90:	1ac0      	subs	r0, r0, r3
 8007d92:	2300      	movs	r3, #0
 8007d94:	4602      	mov	r2, r0
 8007d96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d98:	6a21      	ldr	r1, [r4, #32]
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b0      	blx	r6
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	d106      	bne.n	8007db2 <__sflush_r+0x66>
 8007da4:	6829      	ldr	r1, [r5, #0]
 8007da6:	291d      	cmp	r1, #29
 8007da8:	d82c      	bhi.n	8007e04 <__sflush_r+0xb8>
 8007daa:	4a2a      	ldr	r2, [pc, #168]	; (8007e54 <__sflush_r+0x108>)
 8007dac:	40ca      	lsrs	r2, r1
 8007dae:	07d6      	lsls	r6, r2, #31
 8007db0:	d528      	bpl.n	8007e04 <__sflush_r+0xb8>
 8007db2:	2200      	movs	r2, #0
 8007db4:	6062      	str	r2, [r4, #4]
 8007db6:	04d9      	lsls	r1, r3, #19
 8007db8:	6922      	ldr	r2, [r4, #16]
 8007dba:	6022      	str	r2, [r4, #0]
 8007dbc:	d504      	bpl.n	8007dc8 <__sflush_r+0x7c>
 8007dbe:	1c42      	adds	r2, r0, #1
 8007dc0:	d101      	bne.n	8007dc6 <__sflush_r+0x7a>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	b903      	cbnz	r3, 8007dc8 <__sflush_r+0x7c>
 8007dc6:	6560      	str	r0, [r4, #84]	; 0x54
 8007dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dca:	602f      	str	r7, [r5, #0]
 8007dcc:	2900      	cmp	r1, #0
 8007dce:	d0ca      	beq.n	8007d66 <__sflush_r+0x1a>
 8007dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	d002      	beq.n	8007dde <__sflush_r+0x92>
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 fd8b 	bl	80088f4 <_free_r>
 8007dde:	2000      	movs	r0, #0
 8007de0:	6360      	str	r0, [r4, #52]	; 0x34
 8007de2:	e7c1      	b.n	8007d68 <__sflush_r+0x1c>
 8007de4:	6a21      	ldr	r1, [r4, #32]
 8007de6:	2301      	movs	r3, #1
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b0      	blx	r6
 8007dec:	1c41      	adds	r1, r0, #1
 8007dee:	d1c7      	bne.n	8007d80 <__sflush_r+0x34>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0c4      	beq.n	8007d80 <__sflush_r+0x34>
 8007df6:	2b1d      	cmp	r3, #29
 8007df8:	d001      	beq.n	8007dfe <__sflush_r+0xb2>
 8007dfa:	2b16      	cmp	r3, #22
 8007dfc:	d101      	bne.n	8007e02 <__sflush_r+0xb6>
 8007dfe:	602f      	str	r7, [r5, #0]
 8007e00:	e7b1      	b.n	8007d66 <__sflush_r+0x1a>
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e08:	81a3      	strh	r3, [r4, #12]
 8007e0a:	e7ad      	b.n	8007d68 <__sflush_r+0x1c>
 8007e0c:	690f      	ldr	r7, [r1, #16]
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	d0a9      	beq.n	8007d66 <__sflush_r+0x1a>
 8007e12:	0793      	lsls	r3, r2, #30
 8007e14:	680e      	ldr	r6, [r1, #0]
 8007e16:	bf08      	it	eq
 8007e18:	694b      	ldreq	r3, [r1, #20]
 8007e1a:	600f      	str	r7, [r1, #0]
 8007e1c:	bf18      	it	ne
 8007e1e:	2300      	movne	r3, #0
 8007e20:	eba6 0807 	sub.w	r8, r6, r7
 8007e24:	608b      	str	r3, [r1, #8]
 8007e26:	f1b8 0f00 	cmp.w	r8, #0
 8007e2a:	dd9c      	ble.n	8007d66 <__sflush_r+0x1a>
 8007e2c:	6a21      	ldr	r1, [r4, #32]
 8007e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e30:	4643      	mov	r3, r8
 8007e32:	463a      	mov	r2, r7
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b0      	blx	r6
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dc06      	bgt.n	8007e4a <__sflush_r+0xfe>
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	e78e      	b.n	8007d68 <__sflush_r+0x1c>
 8007e4a:	4407      	add	r7, r0
 8007e4c:	eba8 0800 	sub.w	r8, r8, r0
 8007e50:	e7e9      	b.n	8007e26 <__sflush_r+0xda>
 8007e52:	bf00      	nop
 8007e54:	20400001 	.word	0x20400001

08007e58 <_fflush_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	b913      	cbnz	r3, 8007e68 <_fflush_r+0x10>
 8007e62:	2500      	movs	r5, #0
 8007e64:	4628      	mov	r0, r5
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	b118      	cbz	r0, 8007e72 <_fflush_r+0x1a>
 8007e6a:	6983      	ldr	r3, [r0, #24]
 8007e6c:	b90b      	cbnz	r3, 8007e72 <_fflush_r+0x1a>
 8007e6e:	f000 f887 	bl	8007f80 <__sinit>
 8007e72:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <_fflush_r+0x6c>)
 8007e74:	429c      	cmp	r4, r3
 8007e76:	d11b      	bne.n	8007eb0 <_fflush_r+0x58>
 8007e78:	686c      	ldr	r4, [r5, #4]
 8007e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0ef      	beq.n	8007e62 <_fflush_r+0xa>
 8007e82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e84:	07d0      	lsls	r0, r2, #31
 8007e86:	d404      	bmi.n	8007e92 <_fflush_r+0x3a>
 8007e88:	0599      	lsls	r1, r3, #22
 8007e8a:	d402      	bmi.n	8007e92 <_fflush_r+0x3a>
 8007e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e8e:	f000 f91a 	bl	80080c6 <__retarget_lock_acquire_recursive>
 8007e92:	4628      	mov	r0, r5
 8007e94:	4621      	mov	r1, r4
 8007e96:	f7ff ff59 	bl	8007d4c <__sflush_r>
 8007e9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e9c:	07da      	lsls	r2, r3, #31
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	d4e0      	bmi.n	8007e64 <_fflush_r+0xc>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	059b      	lsls	r3, r3, #22
 8007ea6:	d4dd      	bmi.n	8007e64 <_fflush_r+0xc>
 8007ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eaa:	f000 f90d 	bl	80080c8 <__retarget_lock_release_recursive>
 8007eae:	e7d9      	b.n	8007e64 <_fflush_r+0xc>
 8007eb0:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <_fflush_r+0x70>)
 8007eb2:	429c      	cmp	r4, r3
 8007eb4:	d101      	bne.n	8007eba <_fflush_r+0x62>
 8007eb6:	68ac      	ldr	r4, [r5, #8]
 8007eb8:	e7df      	b.n	8007e7a <_fflush_r+0x22>
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <_fflush_r+0x74>)
 8007ebc:	429c      	cmp	r4, r3
 8007ebe:	bf08      	it	eq
 8007ec0:	68ec      	ldreq	r4, [r5, #12]
 8007ec2:	e7da      	b.n	8007e7a <_fflush_r+0x22>
 8007ec4:	0800b1ac 	.word	0x0800b1ac
 8007ec8:	0800b1cc 	.word	0x0800b1cc
 8007ecc:	0800b18c 	.word	0x0800b18c

08007ed0 <std>:
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8007eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ede:	6083      	str	r3, [r0, #8]
 8007ee0:	8181      	strh	r1, [r0, #12]
 8007ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ee4:	81c2      	strh	r2, [r0, #14]
 8007ee6:	6183      	str	r3, [r0, #24]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	2208      	movs	r2, #8
 8007eec:	305c      	adds	r0, #92	; 0x5c
 8007eee:	f7fe faf3 	bl	80064d8 <memset>
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <std+0x38>)
 8007ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ef6:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <std+0x3c>)
 8007ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007efa:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <std+0x40>)
 8007efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <std+0x44>)
 8007f00:	6224      	str	r4, [r4, #32]
 8007f02:	6323      	str	r3, [r4, #48]	; 0x30
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	bf00      	nop
 8007f08:	08008d89 	.word	0x08008d89
 8007f0c:	08008dab 	.word	0x08008dab
 8007f10:	08008de3 	.word	0x08008de3
 8007f14:	08008e07 	.word	0x08008e07

08007f18 <_cleanup_r>:
 8007f18:	4901      	ldr	r1, [pc, #4]	; (8007f20 <_cleanup_r+0x8>)
 8007f1a:	f000 b8af 	b.w	800807c <_fwalk_reent>
 8007f1e:	bf00      	nop
 8007f20:	08007e59 	.word	0x08007e59

08007f24 <__sfmoreglue>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	2268      	movs	r2, #104	; 0x68
 8007f28:	1e4d      	subs	r5, r1, #1
 8007f2a:	4355      	muls	r5, r2
 8007f2c:	460e      	mov	r6, r1
 8007f2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f32:	f000 fd4b 	bl	80089cc <_malloc_r>
 8007f36:	4604      	mov	r4, r0
 8007f38:	b140      	cbz	r0, 8007f4c <__sfmoreglue+0x28>
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	e9c0 1600 	strd	r1, r6, [r0]
 8007f40:	300c      	adds	r0, #12
 8007f42:	60a0      	str	r0, [r4, #8]
 8007f44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f48:	f7fe fac6 	bl	80064d8 <memset>
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}

08007f50 <__sfp_lock_acquire>:
 8007f50:	4801      	ldr	r0, [pc, #4]	; (8007f58 <__sfp_lock_acquire+0x8>)
 8007f52:	f000 b8b8 	b.w	80080c6 <__retarget_lock_acquire_recursive>
 8007f56:	bf00      	nop
 8007f58:	20000535 	.word	0x20000535

08007f5c <__sfp_lock_release>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	; (8007f64 <__sfp_lock_release+0x8>)
 8007f5e:	f000 b8b3 	b.w	80080c8 <__retarget_lock_release_recursive>
 8007f62:	bf00      	nop
 8007f64:	20000535 	.word	0x20000535

08007f68 <__sinit_lock_acquire>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__sinit_lock_acquire+0x8>)
 8007f6a:	f000 b8ac 	b.w	80080c6 <__retarget_lock_acquire_recursive>
 8007f6e:	bf00      	nop
 8007f70:	20000536 	.word	0x20000536

08007f74 <__sinit_lock_release>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__sinit_lock_release+0x8>)
 8007f76:	f000 b8a7 	b.w	80080c8 <__retarget_lock_release_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	20000536 	.word	0x20000536

08007f80 <__sinit>:
 8007f80:	b510      	push	{r4, lr}
 8007f82:	4604      	mov	r4, r0
 8007f84:	f7ff fff0 	bl	8007f68 <__sinit_lock_acquire>
 8007f88:	69a3      	ldr	r3, [r4, #24]
 8007f8a:	b11b      	cbz	r3, 8007f94 <__sinit+0x14>
 8007f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f90:	f7ff bff0 	b.w	8007f74 <__sinit_lock_release>
 8007f94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f98:	6523      	str	r3, [r4, #80]	; 0x50
 8007f9a:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <__sinit+0x68>)
 8007f9c:	4a13      	ldr	r2, [pc, #76]	; (8007fec <__sinit+0x6c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	bf04      	itt	eq
 8007fa6:	2301      	moveq	r3, #1
 8007fa8:	61a3      	streq	r3, [r4, #24]
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f820 	bl	8007ff0 <__sfp>
 8007fb0:	6060      	str	r0, [r4, #4]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 f81c 	bl	8007ff0 <__sfp>
 8007fb8:	60a0      	str	r0, [r4, #8]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 f818 	bl	8007ff0 <__sfp>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	60e0      	str	r0, [r4, #12]
 8007fc4:	2104      	movs	r1, #4
 8007fc6:	6860      	ldr	r0, [r4, #4]
 8007fc8:	f7ff ff82 	bl	8007ed0 <std>
 8007fcc:	68a0      	ldr	r0, [r4, #8]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	2109      	movs	r1, #9
 8007fd2:	f7ff ff7d 	bl	8007ed0 <std>
 8007fd6:	68e0      	ldr	r0, [r4, #12]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	2112      	movs	r1, #18
 8007fdc:	f7ff ff78 	bl	8007ed0 <std>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	61a3      	str	r3, [r4, #24]
 8007fe4:	e7d2      	b.n	8007f8c <__sinit+0xc>
 8007fe6:	bf00      	nop
 8007fe8:	0800b0c4 	.word	0x0800b0c4
 8007fec:	08007f19 	.word	0x08007f19

08007ff0 <__sfp>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	f7ff ffac 	bl	8007f50 <__sfp_lock_acquire>
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <__sfp+0x84>)
 8007ffa:	681e      	ldr	r6, [r3, #0]
 8007ffc:	69b3      	ldr	r3, [r6, #24]
 8007ffe:	b913      	cbnz	r3, 8008006 <__sfp+0x16>
 8008000:	4630      	mov	r0, r6
 8008002:	f7ff ffbd 	bl	8007f80 <__sinit>
 8008006:	3648      	adds	r6, #72	; 0x48
 8008008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800800c:	3b01      	subs	r3, #1
 800800e:	d503      	bpl.n	8008018 <__sfp+0x28>
 8008010:	6833      	ldr	r3, [r6, #0]
 8008012:	b30b      	cbz	r3, 8008058 <__sfp+0x68>
 8008014:	6836      	ldr	r6, [r6, #0]
 8008016:	e7f7      	b.n	8008008 <__sfp+0x18>
 8008018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800801c:	b9d5      	cbnz	r5, 8008054 <__sfp+0x64>
 800801e:	4b16      	ldr	r3, [pc, #88]	; (8008078 <__sfp+0x88>)
 8008020:	60e3      	str	r3, [r4, #12]
 8008022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008026:	6665      	str	r5, [r4, #100]	; 0x64
 8008028:	f000 f84c 	bl	80080c4 <__retarget_lock_init_recursive>
 800802c:	f7ff ff96 	bl	8007f5c <__sfp_lock_release>
 8008030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008038:	6025      	str	r5, [r4, #0]
 800803a:	61a5      	str	r5, [r4, #24]
 800803c:	2208      	movs	r2, #8
 800803e:	4629      	mov	r1, r5
 8008040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008044:	f7fe fa48 	bl	80064d8 <memset>
 8008048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800804c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008050:	4620      	mov	r0, r4
 8008052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008054:	3468      	adds	r4, #104	; 0x68
 8008056:	e7d9      	b.n	800800c <__sfp+0x1c>
 8008058:	2104      	movs	r1, #4
 800805a:	4638      	mov	r0, r7
 800805c:	f7ff ff62 	bl	8007f24 <__sfmoreglue>
 8008060:	4604      	mov	r4, r0
 8008062:	6030      	str	r0, [r6, #0]
 8008064:	2800      	cmp	r0, #0
 8008066:	d1d5      	bne.n	8008014 <__sfp+0x24>
 8008068:	f7ff ff78 	bl	8007f5c <__sfp_lock_release>
 800806c:	230c      	movs	r3, #12
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	e7ee      	b.n	8008050 <__sfp+0x60>
 8008072:	bf00      	nop
 8008074:	0800b0c4 	.word	0x0800b0c4
 8008078:	ffff0001 	.word	0xffff0001

0800807c <_fwalk_reent>:
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	4606      	mov	r6, r0
 8008082:	4688      	mov	r8, r1
 8008084:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008088:	2700      	movs	r7, #0
 800808a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800808e:	f1b9 0901 	subs.w	r9, r9, #1
 8008092:	d505      	bpl.n	80080a0 <_fwalk_reent+0x24>
 8008094:	6824      	ldr	r4, [r4, #0]
 8008096:	2c00      	cmp	r4, #0
 8008098:	d1f7      	bne.n	800808a <_fwalk_reent+0xe>
 800809a:	4638      	mov	r0, r7
 800809c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a0:	89ab      	ldrh	r3, [r5, #12]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d907      	bls.n	80080b6 <_fwalk_reent+0x3a>
 80080a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080aa:	3301      	adds	r3, #1
 80080ac:	d003      	beq.n	80080b6 <_fwalk_reent+0x3a>
 80080ae:	4629      	mov	r1, r5
 80080b0:	4630      	mov	r0, r6
 80080b2:	47c0      	blx	r8
 80080b4:	4307      	orrs	r7, r0
 80080b6:	3568      	adds	r5, #104	; 0x68
 80080b8:	e7e9      	b.n	800808e <_fwalk_reent+0x12>
	...

080080bc <_localeconv_r>:
 80080bc:	4800      	ldr	r0, [pc, #0]	; (80080c0 <_localeconv_r+0x4>)
 80080be:	4770      	bx	lr
 80080c0:	20000164 	.word	0x20000164

080080c4 <__retarget_lock_init_recursive>:
 80080c4:	4770      	bx	lr

080080c6 <__retarget_lock_acquire_recursive>:
 80080c6:	4770      	bx	lr

080080c8 <__retarget_lock_release_recursive>:
 80080c8:	4770      	bx	lr

080080ca <__swhatbuf_r>:
 80080ca:	b570      	push	{r4, r5, r6, lr}
 80080cc:	460e      	mov	r6, r1
 80080ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d2:	2900      	cmp	r1, #0
 80080d4:	b096      	sub	sp, #88	; 0x58
 80080d6:	4614      	mov	r4, r2
 80080d8:	461d      	mov	r5, r3
 80080da:	da08      	bge.n	80080ee <__swhatbuf_r+0x24>
 80080dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	602a      	str	r2, [r5, #0]
 80080e4:	061a      	lsls	r2, r3, #24
 80080e6:	d410      	bmi.n	800810a <__swhatbuf_r+0x40>
 80080e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ec:	e00e      	b.n	800810c <__swhatbuf_r+0x42>
 80080ee:	466a      	mov	r2, sp
 80080f0:	f000 fee0 	bl	8008eb4 <_fstat_r>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	dbf1      	blt.n	80080dc <__swhatbuf_r+0x12>
 80080f8:	9a01      	ldr	r2, [sp, #4]
 80080fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008102:	425a      	negs	r2, r3
 8008104:	415a      	adcs	r2, r3
 8008106:	602a      	str	r2, [r5, #0]
 8008108:	e7ee      	b.n	80080e8 <__swhatbuf_r+0x1e>
 800810a:	2340      	movs	r3, #64	; 0x40
 800810c:	2000      	movs	r0, #0
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	b016      	add	sp, #88	; 0x58
 8008112:	bd70      	pop	{r4, r5, r6, pc}

08008114 <__smakebuf_r>:
 8008114:	898b      	ldrh	r3, [r1, #12]
 8008116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008118:	079d      	lsls	r5, r3, #30
 800811a:	4606      	mov	r6, r0
 800811c:	460c      	mov	r4, r1
 800811e:	d507      	bpl.n	8008130 <__smakebuf_r+0x1c>
 8008120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	2301      	movs	r3, #1
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	b002      	add	sp, #8
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	ab01      	add	r3, sp, #4
 8008132:	466a      	mov	r2, sp
 8008134:	f7ff ffc9 	bl	80080ca <__swhatbuf_r>
 8008138:	9900      	ldr	r1, [sp, #0]
 800813a:	4605      	mov	r5, r0
 800813c:	4630      	mov	r0, r6
 800813e:	f000 fc45 	bl	80089cc <_malloc_r>
 8008142:	b948      	cbnz	r0, 8008158 <__smakebuf_r+0x44>
 8008144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008148:	059a      	lsls	r2, r3, #22
 800814a:	d4ef      	bmi.n	800812c <__smakebuf_r+0x18>
 800814c:	f023 0303 	bic.w	r3, r3, #3
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	e7e3      	b.n	8008120 <__smakebuf_r+0xc>
 8008158:	4b0d      	ldr	r3, [pc, #52]	; (8008190 <__smakebuf_r+0x7c>)
 800815a:	62b3      	str	r3, [r6, #40]	; 0x28
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	6163      	str	r3, [r4, #20]
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	6120      	str	r0, [r4, #16]
 800816e:	b15b      	cbz	r3, 8008188 <__smakebuf_r+0x74>
 8008170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008174:	4630      	mov	r0, r6
 8008176:	f000 feaf 	bl	8008ed8 <_isatty_r>
 800817a:	b128      	cbz	r0, 8008188 <__smakebuf_r+0x74>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f023 0303 	bic.w	r3, r3, #3
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	89a0      	ldrh	r0, [r4, #12]
 800818a:	4305      	orrs	r5, r0
 800818c:	81a5      	strh	r5, [r4, #12]
 800818e:	e7cd      	b.n	800812c <__smakebuf_r+0x18>
 8008190:	08007f19 	.word	0x08007f19

08008194 <malloc>:
 8008194:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <malloc+0xc>)
 8008196:	4601      	mov	r1, r0
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	f000 bc17 	b.w	80089cc <_malloc_r>
 800819e:	bf00      	nop
 80081a0:	20000010 	.word	0x20000010

080081a4 <memcpy>:
 80081a4:	440a      	add	r2, r1
 80081a6:	4291      	cmp	r1, r2
 80081a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081ac:	d100      	bne.n	80081b0 <memcpy+0xc>
 80081ae:	4770      	bx	lr
 80081b0:	b510      	push	{r4, lr}
 80081b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ba:	4291      	cmp	r1, r2
 80081bc:	d1f9      	bne.n	80081b2 <memcpy+0xe>
 80081be:	bd10      	pop	{r4, pc}

080081c0 <_Balloc>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081c4:	4604      	mov	r4, r0
 80081c6:	460d      	mov	r5, r1
 80081c8:	b976      	cbnz	r6, 80081e8 <_Balloc+0x28>
 80081ca:	2010      	movs	r0, #16
 80081cc:	f7ff ffe2 	bl	8008194 <malloc>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6260      	str	r0, [r4, #36]	; 0x24
 80081d4:	b920      	cbnz	r0, 80081e0 <_Balloc+0x20>
 80081d6:	4b18      	ldr	r3, [pc, #96]	; (8008238 <_Balloc+0x78>)
 80081d8:	4818      	ldr	r0, [pc, #96]	; (800823c <_Balloc+0x7c>)
 80081da:	2166      	movs	r1, #102	; 0x66
 80081dc:	f000 fe2a 	bl	8008e34 <__assert_func>
 80081e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081e4:	6006      	str	r6, [r0, #0]
 80081e6:	60c6      	str	r6, [r0, #12]
 80081e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081ea:	68f3      	ldr	r3, [r6, #12]
 80081ec:	b183      	cbz	r3, 8008210 <_Balloc+0x50>
 80081ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081f6:	b9b8      	cbnz	r0, 8008228 <_Balloc+0x68>
 80081f8:	2101      	movs	r1, #1
 80081fa:	fa01 f605 	lsl.w	r6, r1, r5
 80081fe:	1d72      	adds	r2, r6, #5
 8008200:	0092      	lsls	r2, r2, #2
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fb60 	bl	80088c8 <_calloc_r>
 8008208:	b160      	cbz	r0, 8008224 <_Balloc+0x64>
 800820a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800820e:	e00e      	b.n	800822e <_Balloc+0x6e>
 8008210:	2221      	movs	r2, #33	; 0x21
 8008212:	2104      	movs	r1, #4
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fb57 	bl	80088c8 <_calloc_r>
 800821a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800821c:	60f0      	str	r0, [r6, #12]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e4      	bne.n	80081ee <_Balloc+0x2e>
 8008224:	2000      	movs	r0, #0
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	6802      	ldr	r2, [r0, #0]
 800822a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800822e:	2300      	movs	r3, #0
 8008230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008234:	e7f7      	b.n	8008226 <_Balloc+0x66>
 8008236:	bf00      	nop
 8008238:	0800b109 	.word	0x0800b109
 800823c:	0800b1ec 	.word	0x0800b1ec

08008240 <_Bfree>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008244:	4605      	mov	r5, r0
 8008246:	460c      	mov	r4, r1
 8008248:	b976      	cbnz	r6, 8008268 <_Bfree+0x28>
 800824a:	2010      	movs	r0, #16
 800824c:	f7ff ffa2 	bl	8008194 <malloc>
 8008250:	4602      	mov	r2, r0
 8008252:	6268      	str	r0, [r5, #36]	; 0x24
 8008254:	b920      	cbnz	r0, 8008260 <_Bfree+0x20>
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <_Bfree+0x3c>)
 8008258:	4809      	ldr	r0, [pc, #36]	; (8008280 <_Bfree+0x40>)
 800825a:	218a      	movs	r1, #138	; 0x8a
 800825c:	f000 fdea 	bl	8008e34 <__assert_func>
 8008260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008264:	6006      	str	r6, [r0, #0]
 8008266:	60c6      	str	r6, [r0, #12]
 8008268:	b13c      	cbz	r4, 800827a <_Bfree+0x3a>
 800826a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008274:	6021      	str	r1, [r4, #0]
 8008276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	0800b109 	.word	0x0800b109
 8008280:	0800b1ec 	.word	0x0800b1ec

08008284 <__multadd>:
 8008284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008288:	690d      	ldr	r5, [r1, #16]
 800828a:	4607      	mov	r7, r0
 800828c:	460c      	mov	r4, r1
 800828e:	461e      	mov	r6, r3
 8008290:	f101 0c14 	add.w	ip, r1, #20
 8008294:	2000      	movs	r0, #0
 8008296:	f8dc 3000 	ldr.w	r3, [ip]
 800829a:	b299      	uxth	r1, r3
 800829c:	fb02 6101 	mla	r1, r2, r1, r6
 80082a0:	0c1e      	lsrs	r6, r3, #16
 80082a2:	0c0b      	lsrs	r3, r1, #16
 80082a4:	fb02 3306 	mla	r3, r2, r6, r3
 80082a8:	b289      	uxth	r1, r1
 80082aa:	3001      	adds	r0, #1
 80082ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082b0:	4285      	cmp	r5, r0
 80082b2:	f84c 1b04 	str.w	r1, [ip], #4
 80082b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082ba:	dcec      	bgt.n	8008296 <__multadd+0x12>
 80082bc:	b30e      	cbz	r6, 8008302 <__multadd+0x7e>
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	dc19      	bgt.n	80082f8 <__multadd+0x74>
 80082c4:	6861      	ldr	r1, [r4, #4]
 80082c6:	4638      	mov	r0, r7
 80082c8:	3101      	adds	r1, #1
 80082ca:	f7ff ff79 	bl	80081c0 <_Balloc>
 80082ce:	4680      	mov	r8, r0
 80082d0:	b928      	cbnz	r0, 80082de <__multadd+0x5a>
 80082d2:	4602      	mov	r2, r0
 80082d4:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <__multadd+0x84>)
 80082d6:	480d      	ldr	r0, [pc, #52]	; (800830c <__multadd+0x88>)
 80082d8:	21b5      	movs	r1, #181	; 0xb5
 80082da:	f000 fdab 	bl	8008e34 <__assert_func>
 80082de:	6922      	ldr	r2, [r4, #16]
 80082e0:	3202      	adds	r2, #2
 80082e2:	f104 010c 	add.w	r1, r4, #12
 80082e6:	0092      	lsls	r2, r2, #2
 80082e8:	300c      	adds	r0, #12
 80082ea:	f7ff ff5b 	bl	80081a4 <memcpy>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff ffa5 	bl	8008240 <_Bfree>
 80082f6:	4644      	mov	r4, r8
 80082f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082fc:	3501      	adds	r5, #1
 80082fe:	615e      	str	r6, [r3, #20]
 8008300:	6125      	str	r5, [r4, #16]
 8008302:	4620      	mov	r0, r4
 8008304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008308:	0800b17b 	.word	0x0800b17b
 800830c:	0800b1ec 	.word	0x0800b1ec

08008310 <__hi0bits>:
 8008310:	0c03      	lsrs	r3, r0, #16
 8008312:	041b      	lsls	r3, r3, #16
 8008314:	b9d3      	cbnz	r3, 800834c <__hi0bits+0x3c>
 8008316:	0400      	lsls	r0, r0, #16
 8008318:	2310      	movs	r3, #16
 800831a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800831e:	bf04      	itt	eq
 8008320:	0200      	lsleq	r0, r0, #8
 8008322:	3308      	addeq	r3, #8
 8008324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008328:	bf04      	itt	eq
 800832a:	0100      	lsleq	r0, r0, #4
 800832c:	3304      	addeq	r3, #4
 800832e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008332:	bf04      	itt	eq
 8008334:	0080      	lsleq	r0, r0, #2
 8008336:	3302      	addeq	r3, #2
 8008338:	2800      	cmp	r0, #0
 800833a:	db05      	blt.n	8008348 <__hi0bits+0x38>
 800833c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008340:	f103 0301 	add.w	r3, r3, #1
 8008344:	bf08      	it	eq
 8008346:	2320      	moveq	r3, #32
 8008348:	4618      	mov	r0, r3
 800834a:	4770      	bx	lr
 800834c:	2300      	movs	r3, #0
 800834e:	e7e4      	b.n	800831a <__hi0bits+0xa>

08008350 <__lo0bits>:
 8008350:	6803      	ldr	r3, [r0, #0]
 8008352:	f013 0207 	ands.w	r2, r3, #7
 8008356:	4601      	mov	r1, r0
 8008358:	d00b      	beq.n	8008372 <__lo0bits+0x22>
 800835a:	07da      	lsls	r2, r3, #31
 800835c:	d423      	bmi.n	80083a6 <__lo0bits+0x56>
 800835e:	0798      	lsls	r0, r3, #30
 8008360:	bf49      	itett	mi
 8008362:	085b      	lsrmi	r3, r3, #1
 8008364:	089b      	lsrpl	r3, r3, #2
 8008366:	2001      	movmi	r0, #1
 8008368:	600b      	strmi	r3, [r1, #0]
 800836a:	bf5c      	itt	pl
 800836c:	600b      	strpl	r3, [r1, #0]
 800836e:	2002      	movpl	r0, #2
 8008370:	4770      	bx	lr
 8008372:	b298      	uxth	r0, r3
 8008374:	b9a8      	cbnz	r0, 80083a2 <__lo0bits+0x52>
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	2010      	movs	r0, #16
 800837a:	b2da      	uxtb	r2, r3
 800837c:	b90a      	cbnz	r2, 8008382 <__lo0bits+0x32>
 800837e:	3008      	adds	r0, #8
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	071a      	lsls	r2, r3, #28
 8008384:	bf04      	itt	eq
 8008386:	091b      	lsreq	r3, r3, #4
 8008388:	3004      	addeq	r0, #4
 800838a:	079a      	lsls	r2, r3, #30
 800838c:	bf04      	itt	eq
 800838e:	089b      	lsreq	r3, r3, #2
 8008390:	3002      	addeq	r0, #2
 8008392:	07da      	lsls	r2, r3, #31
 8008394:	d403      	bmi.n	800839e <__lo0bits+0x4e>
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	f100 0001 	add.w	r0, r0, #1
 800839c:	d005      	beq.n	80083aa <__lo0bits+0x5a>
 800839e:	600b      	str	r3, [r1, #0]
 80083a0:	4770      	bx	lr
 80083a2:	4610      	mov	r0, r2
 80083a4:	e7e9      	b.n	800837a <__lo0bits+0x2a>
 80083a6:	2000      	movs	r0, #0
 80083a8:	4770      	bx	lr
 80083aa:	2020      	movs	r0, #32
 80083ac:	4770      	bx	lr
	...

080083b0 <__i2b>:
 80083b0:	b510      	push	{r4, lr}
 80083b2:	460c      	mov	r4, r1
 80083b4:	2101      	movs	r1, #1
 80083b6:	f7ff ff03 	bl	80081c0 <_Balloc>
 80083ba:	4602      	mov	r2, r0
 80083bc:	b928      	cbnz	r0, 80083ca <__i2b+0x1a>
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <__i2b+0x24>)
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <__i2b+0x28>)
 80083c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083c6:	f000 fd35 	bl	8008e34 <__assert_func>
 80083ca:	2301      	movs	r3, #1
 80083cc:	6144      	str	r4, [r0, #20]
 80083ce:	6103      	str	r3, [r0, #16]
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	bf00      	nop
 80083d4:	0800b17b 	.word	0x0800b17b
 80083d8:	0800b1ec 	.word	0x0800b1ec

080083dc <__multiply>:
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	4691      	mov	r9, r2
 80083e2:	690a      	ldr	r2, [r1, #16]
 80083e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	bfb8      	it	lt
 80083ec:	460b      	movlt	r3, r1
 80083ee:	460c      	mov	r4, r1
 80083f0:	bfbc      	itt	lt
 80083f2:	464c      	movlt	r4, r9
 80083f4:	4699      	movlt	r9, r3
 80083f6:	6927      	ldr	r7, [r4, #16]
 80083f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	6861      	ldr	r1, [r4, #4]
 8008400:	eb07 060a 	add.w	r6, r7, sl
 8008404:	42b3      	cmp	r3, r6
 8008406:	b085      	sub	sp, #20
 8008408:	bfb8      	it	lt
 800840a:	3101      	addlt	r1, #1
 800840c:	f7ff fed8 	bl	80081c0 <_Balloc>
 8008410:	b930      	cbnz	r0, 8008420 <__multiply+0x44>
 8008412:	4602      	mov	r2, r0
 8008414:	4b44      	ldr	r3, [pc, #272]	; (8008528 <__multiply+0x14c>)
 8008416:	4845      	ldr	r0, [pc, #276]	; (800852c <__multiply+0x150>)
 8008418:	f240 115d 	movw	r1, #349	; 0x15d
 800841c:	f000 fd0a 	bl	8008e34 <__assert_func>
 8008420:	f100 0514 	add.w	r5, r0, #20
 8008424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008428:	462b      	mov	r3, r5
 800842a:	2200      	movs	r2, #0
 800842c:	4543      	cmp	r3, r8
 800842e:	d321      	bcc.n	8008474 <__multiply+0x98>
 8008430:	f104 0314 	add.w	r3, r4, #20
 8008434:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008438:	f109 0314 	add.w	r3, r9, #20
 800843c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008440:	9202      	str	r2, [sp, #8]
 8008442:	1b3a      	subs	r2, r7, r4
 8008444:	3a15      	subs	r2, #21
 8008446:	f022 0203 	bic.w	r2, r2, #3
 800844a:	3204      	adds	r2, #4
 800844c:	f104 0115 	add.w	r1, r4, #21
 8008450:	428f      	cmp	r7, r1
 8008452:	bf38      	it	cc
 8008454:	2204      	movcc	r2, #4
 8008456:	9201      	str	r2, [sp, #4]
 8008458:	9a02      	ldr	r2, [sp, #8]
 800845a:	9303      	str	r3, [sp, #12]
 800845c:	429a      	cmp	r2, r3
 800845e:	d80c      	bhi.n	800847a <__multiply+0x9e>
 8008460:	2e00      	cmp	r6, #0
 8008462:	dd03      	ble.n	800846c <__multiply+0x90>
 8008464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008468:	2b00      	cmp	r3, #0
 800846a:	d05a      	beq.n	8008522 <__multiply+0x146>
 800846c:	6106      	str	r6, [r0, #16]
 800846e:	b005      	add	sp, #20
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	f843 2b04 	str.w	r2, [r3], #4
 8008478:	e7d8      	b.n	800842c <__multiply+0x50>
 800847a:	f8b3 a000 	ldrh.w	sl, [r3]
 800847e:	f1ba 0f00 	cmp.w	sl, #0
 8008482:	d024      	beq.n	80084ce <__multiply+0xf2>
 8008484:	f104 0e14 	add.w	lr, r4, #20
 8008488:	46a9      	mov	r9, r5
 800848a:	f04f 0c00 	mov.w	ip, #0
 800848e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008492:	f8d9 1000 	ldr.w	r1, [r9]
 8008496:	fa1f fb82 	uxth.w	fp, r2
 800849a:	b289      	uxth	r1, r1
 800849c:	fb0a 110b 	mla	r1, sl, fp, r1
 80084a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084a4:	f8d9 2000 	ldr.w	r2, [r9]
 80084a8:	4461      	add	r1, ip
 80084aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80084b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084b6:	b289      	uxth	r1, r1
 80084b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084bc:	4577      	cmp	r7, lr
 80084be:	f849 1b04 	str.w	r1, [r9], #4
 80084c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084c6:	d8e2      	bhi.n	800848e <__multiply+0xb2>
 80084c8:	9a01      	ldr	r2, [sp, #4]
 80084ca:	f845 c002 	str.w	ip, [r5, r2]
 80084ce:	9a03      	ldr	r2, [sp, #12]
 80084d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084d4:	3304      	adds	r3, #4
 80084d6:	f1b9 0f00 	cmp.w	r9, #0
 80084da:	d020      	beq.n	800851e <__multiply+0x142>
 80084dc:	6829      	ldr	r1, [r5, #0]
 80084de:	f104 0c14 	add.w	ip, r4, #20
 80084e2:	46ae      	mov	lr, r5
 80084e4:	f04f 0a00 	mov.w	sl, #0
 80084e8:	f8bc b000 	ldrh.w	fp, [ip]
 80084ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084f0:	fb09 220b 	mla	r2, r9, fp, r2
 80084f4:	4492      	add	sl, r2
 80084f6:	b289      	uxth	r1, r1
 80084f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084fc:	f84e 1b04 	str.w	r1, [lr], #4
 8008500:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008504:	f8be 1000 	ldrh.w	r1, [lr]
 8008508:	0c12      	lsrs	r2, r2, #16
 800850a:	fb09 1102 	mla	r1, r9, r2, r1
 800850e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008512:	4567      	cmp	r7, ip
 8008514:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008518:	d8e6      	bhi.n	80084e8 <__multiply+0x10c>
 800851a:	9a01      	ldr	r2, [sp, #4]
 800851c:	50a9      	str	r1, [r5, r2]
 800851e:	3504      	adds	r5, #4
 8008520:	e79a      	b.n	8008458 <__multiply+0x7c>
 8008522:	3e01      	subs	r6, #1
 8008524:	e79c      	b.n	8008460 <__multiply+0x84>
 8008526:	bf00      	nop
 8008528:	0800b17b 	.word	0x0800b17b
 800852c:	0800b1ec 	.word	0x0800b1ec

08008530 <__pow5mult>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4615      	mov	r5, r2
 8008536:	f012 0203 	ands.w	r2, r2, #3
 800853a:	4606      	mov	r6, r0
 800853c:	460f      	mov	r7, r1
 800853e:	d007      	beq.n	8008550 <__pow5mult+0x20>
 8008540:	4c25      	ldr	r4, [pc, #148]	; (80085d8 <__pow5mult+0xa8>)
 8008542:	3a01      	subs	r2, #1
 8008544:	2300      	movs	r3, #0
 8008546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800854a:	f7ff fe9b 	bl	8008284 <__multadd>
 800854e:	4607      	mov	r7, r0
 8008550:	10ad      	asrs	r5, r5, #2
 8008552:	d03d      	beq.n	80085d0 <__pow5mult+0xa0>
 8008554:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008556:	b97c      	cbnz	r4, 8008578 <__pow5mult+0x48>
 8008558:	2010      	movs	r0, #16
 800855a:	f7ff fe1b 	bl	8008194 <malloc>
 800855e:	4602      	mov	r2, r0
 8008560:	6270      	str	r0, [r6, #36]	; 0x24
 8008562:	b928      	cbnz	r0, 8008570 <__pow5mult+0x40>
 8008564:	4b1d      	ldr	r3, [pc, #116]	; (80085dc <__pow5mult+0xac>)
 8008566:	481e      	ldr	r0, [pc, #120]	; (80085e0 <__pow5mult+0xb0>)
 8008568:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800856c:	f000 fc62 	bl	8008e34 <__assert_func>
 8008570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008574:	6004      	str	r4, [r0, #0]
 8008576:	60c4      	str	r4, [r0, #12]
 8008578:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800857c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008580:	b94c      	cbnz	r4, 8008596 <__pow5mult+0x66>
 8008582:	f240 2171 	movw	r1, #625	; 0x271
 8008586:	4630      	mov	r0, r6
 8008588:	f7ff ff12 	bl	80083b0 <__i2b>
 800858c:	2300      	movs	r3, #0
 800858e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008592:	4604      	mov	r4, r0
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	f04f 0900 	mov.w	r9, #0
 800859a:	07eb      	lsls	r3, r5, #31
 800859c:	d50a      	bpl.n	80085b4 <__pow5mult+0x84>
 800859e:	4639      	mov	r1, r7
 80085a0:	4622      	mov	r2, r4
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ff1a 	bl	80083dc <__multiply>
 80085a8:	4639      	mov	r1, r7
 80085aa:	4680      	mov	r8, r0
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff fe47 	bl	8008240 <_Bfree>
 80085b2:	4647      	mov	r7, r8
 80085b4:	106d      	asrs	r5, r5, #1
 80085b6:	d00b      	beq.n	80085d0 <__pow5mult+0xa0>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	b938      	cbnz	r0, 80085cc <__pow5mult+0x9c>
 80085bc:	4622      	mov	r2, r4
 80085be:	4621      	mov	r1, r4
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff ff0b 	bl	80083dc <__multiply>
 80085c6:	6020      	str	r0, [r4, #0]
 80085c8:	f8c0 9000 	str.w	r9, [r0]
 80085cc:	4604      	mov	r4, r0
 80085ce:	e7e4      	b.n	800859a <__pow5mult+0x6a>
 80085d0:	4638      	mov	r0, r7
 80085d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d6:	bf00      	nop
 80085d8:	0800b338 	.word	0x0800b338
 80085dc:	0800b109 	.word	0x0800b109
 80085e0:	0800b1ec 	.word	0x0800b1ec

080085e4 <__lshift>:
 80085e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e8:	460c      	mov	r4, r1
 80085ea:	6849      	ldr	r1, [r1, #4]
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	4607      	mov	r7, r0
 80085f6:	4691      	mov	r9, r2
 80085f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085fc:	f108 0601 	add.w	r6, r8, #1
 8008600:	42b3      	cmp	r3, r6
 8008602:	db0b      	blt.n	800861c <__lshift+0x38>
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff fddb 	bl	80081c0 <_Balloc>
 800860a:	4605      	mov	r5, r0
 800860c:	b948      	cbnz	r0, 8008622 <__lshift+0x3e>
 800860e:	4602      	mov	r2, r0
 8008610:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <__lshift+0xd8>)
 8008612:	482b      	ldr	r0, [pc, #172]	; (80086c0 <__lshift+0xdc>)
 8008614:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008618:	f000 fc0c 	bl	8008e34 <__assert_func>
 800861c:	3101      	adds	r1, #1
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	e7ee      	b.n	8008600 <__lshift+0x1c>
 8008622:	2300      	movs	r3, #0
 8008624:	f100 0114 	add.w	r1, r0, #20
 8008628:	f100 0210 	add.w	r2, r0, #16
 800862c:	4618      	mov	r0, r3
 800862e:	4553      	cmp	r3, sl
 8008630:	db37      	blt.n	80086a2 <__lshift+0xbe>
 8008632:	6920      	ldr	r0, [r4, #16]
 8008634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008638:	f104 0314 	add.w	r3, r4, #20
 800863c:	f019 091f 	ands.w	r9, r9, #31
 8008640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008644:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008648:	d02f      	beq.n	80086aa <__lshift+0xc6>
 800864a:	f1c9 0e20 	rsb	lr, r9, #32
 800864e:	468a      	mov	sl, r1
 8008650:	f04f 0c00 	mov.w	ip, #0
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	fa02 f209 	lsl.w	r2, r2, r9
 800865a:	ea42 020c 	orr.w	r2, r2, ip
 800865e:	f84a 2b04 	str.w	r2, [sl], #4
 8008662:	f853 2b04 	ldr.w	r2, [r3], #4
 8008666:	4298      	cmp	r0, r3
 8008668:	fa22 fc0e 	lsr.w	ip, r2, lr
 800866c:	d8f2      	bhi.n	8008654 <__lshift+0x70>
 800866e:	1b03      	subs	r3, r0, r4
 8008670:	3b15      	subs	r3, #21
 8008672:	f023 0303 	bic.w	r3, r3, #3
 8008676:	3304      	adds	r3, #4
 8008678:	f104 0215 	add.w	r2, r4, #21
 800867c:	4290      	cmp	r0, r2
 800867e:	bf38      	it	cc
 8008680:	2304      	movcc	r3, #4
 8008682:	f841 c003 	str.w	ip, [r1, r3]
 8008686:	f1bc 0f00 	cmp.w	ip, #0
 800868a:	d001      	beq.n	8008690 <__lshift+0xac>
 800868c:	f108 0602 	add.w	r6, r8, #2
 8008690:	3e01      	subs	r6, #1
 8008692:	4638      	mov	r0, r7
 8008694:	612e      	str	r6, [r5, #16]
 8008696:	4621      	mov	r1, r4
 8008698:	f7ff fdd2 	bl	8008240 <_Bfree>
 800869c:	4628      	mov	r0, r5
 800869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80086a6:	3301      	adds	r3, #1
 80086a8:	e7c1      	b.n	800862e <__lshift+0x4a>
 80086aa:	3904      	subs	r1, #4
 80086ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80086b4:	4298      	cmp	r0, r3
 80086b6:	d8f9      	bhi.n	80086ac <__lshift+0xc8>
 80086b8:	e7ea      	b.n	8008690 <__lshift+0xac>
 80086ba:	bf00      	nop
 80086bc:	0800b17b 	.word	0x0800b17b
 80086c0:	0800b1ec 	.word	0x0800b1ec

080086c4 <__mcmp>:
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	6902      	ldr	r2, [r0, #16]
 80086c8:	690c      	ldr	r4, [r1, #16]
 80086ca:	1b12      	subs	r2, r2, r4
 80086cc:	d10e      	bne.n	80086ec <__mcmp+0x28>
 80086ce:	f100 0314 	add.w	r3, r0, #20
 80086d2:	3114      	adds	r1, #20
 80086d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086e4:	42a5      	cmp	r5, r4
 80086e6:	d003      	beq.n	80086f0 <__mcmp+0x2c>
 80086e8:	d305      	bcc.n	80086f6 <__mcmp+0x32>
 80086ea:	2201      	movs	r2, #1
 80086ec:	4610      	mov	r0, r2
 80086ee:	bd30      	pop	{r4, r5, pc}
 80086f0:	4283      	cmp	r3, r0
 80086f2:	d3f3      	bcc.n	80086dc <__mcmp+0x18>
 80086f4:	e7fa      	b.n	80086ec <__mcmp+0x28>
 80086f6:	f04f 32ff 	mov.w	r2, #4294967295
 80086fa:	e7f7      	b.n	80086ec <__mcmp+0x28>

080086fc <__mdiff>:
 80086fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	4606      	mov	r6, r0
 8008704:	4611      	mov	r1, r2
 8008706:	4620      	mov	r0, r4
 8008708:	4690      	mov	r8, r2
 800870a:	f7ff ffdb 	bl	80086c4 <__mcmp>
 800870e:	1e05      	subs	r5, r0, #0
 8008710:	d110      	bne.n	8008734 <__mdiff+0x38>
 8008712:	4629      	mov	r1, r5
 8008714:	4630      	mov	r0, r6
 8008716:	f7ff fd53 	bl	80081c0 <_Balloc>
 800871a:	b930      	cbnz	r0, 800872a <__mdiff+0x2e>
 800871c:	4b3a      	ldr	r3, [pc, #232]	; (8008808 <__mdiff+0x10c>)
 800871e:	4602      	mov	r2, r0
 8008720:	f240 2132 	movw	r1, #562	; 0x232
 8008724:	4839      	ldr	r0, [pc, #228]	; (800880c <__mdiff+0x110>)
 8008726:	f000 fb85 	bl	8008e34 <__assert_func>
 800872a:	2301      	movs	r3, #1
 800872c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008734:	bfa4      	itt	ge
 8008736:	4643      	movge	r3, r8
 8008738:	46a0      	movge	r8, r4
 800873a:	4630      	mov	r0, r6
 800873c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008740:	bfa6      	itte	ge
 8008742:	461c      	movge	r4, r3
 8008744:	2500      	movge	r5, #0
 8008746:	2501      	movlt	r5, #1
 8008748:	f7ff fd3a 	bl	80081c0 <_Balloc>
 800874c:	b920      	cbnz	r0, 8008758 <__mdiff+0x5c>
 800874e:	4b2e      	ldr	r3, [pc, #184]	; (8008808 <__mdiff+0x10c>)
 8008750:	4602      	mov	r2, r0
 8008752:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008756:	e7e5      	b.n	8008724 <__mdiff+0x28>
 8008758:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800875c:	6926      	ldr	r6, [r4, #16]
 800875e:	60c5      	str	r5, [r0, #12]
 8008760:	f104 0914 	add.w	r9, r4, #20
 8008764:	f108 0514 	add.w	r5, r8, #20
 8008768:	f100 0e14 	add.w	lr, r0, #20
 800876c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008770:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008774:	f108 0210 	add.w	r2, r8, #16
 8008778:	46f2      	mov	sl, lr
 800877a:	2100      	movs	r1, #0
 800877c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008780:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008784:	fa1f f883 	uxth.w	r8, r3
 8008788:	fa11 f18b 	uxtah	r1, r1, fp
 800878c:	0c1b      	lsrs	r3, r3, #16
 800878e:	eba1 0808 	sub.w	r8, r1, r8
 8008792:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008796:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800879a:	fa1f f888 	uxth.w	r8, r8
 800879e:	1419      	asrs	r1, r3, #16
 80087a0:	454e      	cmp	r6, r9
 80087a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087a6:	f84a 3b04 	str.w	r3, [sl], #4
 80087aa:	d8e7      	bhi.n	800877c <__mdiff+0x80>
 80087ac:	1b33      	subs	r3, r6, r4
 80087ae:	3b15      	subs	r3, #21
 80087b0:	f023 0303 	bic.w	r3, r3, #3
 80087b4:	3304      	adds	r3, #4
 80087b6:	3415      	adds	r4, #21
 80087b8:	42a6      	cmp	r6, r4
 80087ba:	bf38      	it	cc
 80087bc:	2304      	movcc	r3, #4
 80087be:	441d      	add	r5, r3
 80087c0:	4473      	add	r3, lr
 80087c2:	469e      	mov	lr, r3
 80087c4:	462e      	mov	r6, r5
 80087c6:	4566      	cmp	r6, ip
 80087c8:	d30e      	bcc.n	80087e8 <__mdiff+0xec>
 80087ca:	f10c 0203 	add.w	r2, ip, #3
 80087ce:	1b52      	subs	r2, r2, r5
 80087d0:	f022 0203 	bic.w	r2, r2, #3
 80087d4:	3d03      	subs	r5, #3
 80087d6:	45ac      	cmp	ip, r5
 80087d8:	bf38      	it	cc
 80087da:	2200      	movcc	r2, #0
 80087dc:	441a      	add	r2, r3
 80087de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087e2:	b17b      	cbz	r3, 8008804 <__mdiff+0x108>
 80087e4:	6107      	str	r7, [r0, #16]
 80087e6:	e7a3      	b.n	8008730 <__mdiff+0x34>
 80087e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80087ec:	fa11 f288 	uxtah	r2, r1, r8
 80087f0:	1414      	asrs	r4, r2, #16
 80087f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087f6:	b292      	uxth	r2, r2
 80087f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087fc:	f84e 2b04 	str.w	r2, [lr], #4
 8008800:	1421      	asrs	r1, r4, #16
 8008802:	e7e0      	b.n	80087c6 <__mdiff+0xca>
 8008804:	3f01      	subs	r7, #1
 8008806:	e7ea      	b.n	80087de <__mdiff+0xe2>
 8008808:	0800b17b 	.word	0x0800b17b
 800880c:	0800b1ec 	.word	0x0800b1ec

08008810 <__d2b>:
 8008810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008814:	4689      	mov	r9, r1
 8008816:	2101      	movs	r1, #1
 8008818:	ec57 6b10 	vmov	r6, r7, d0
 800881c:	4690      	mov	r8, r2
 800881e:	f7ff fccf 	bl	80081c0 <_Balloc>
 8008822:	4604      	mov	r4, r0
 8008824:	b930      	cbnz	r0, 8008834 <__d2b+0x24>
 8008826:	4602      	mov	r2, r0
 8008828:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <__d2b+0xb0>)
 800882a:	4826      	ldr	r0, [pc, #152]	; (80088c4 <__d2b+0xb4>)
 800882c:	f240 310a 	movw	r1, #778	; 0x30a
 8008830:	f000 fb00 	bl	8008e34 <__assert_func>
 8008834:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008838:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800883c:	bb35      	cbnz	r5, 800888c <__d2b+0x7c>
 800883e:	2e00      	cmp	r6, #0
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	d028      	beq.n	8008896 <__d2b+0x86>
 8008844:	4668      	mov	r0, sp
 8008846:	9600      	str	r6, [sp, #0]
 8008848:	f7ff fd82 	bl	8008350 <__lo0bits>
 800884c:	9900      	ldr	r1, [sp, #0]
 800884e:	b300      	cbz	r0, 8008892 <__d2b+0x82>
 8008850:	9a01      	ldr	r2, [sp, #4]
 8008852:	f1c0 0320 	rsb	r3, r0, #32
 8008856:	fa02 f303 	lsl.w	r3, r2, r3
 800885a:	430b      	orrs	r3, r1
 800885c:	40c2      	lsrs	r2, r0
 800885e:	6163      	str	r3, [r4, #20]
 8008860:	9201      	str	r2, [sp, #4]
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	61a3      	str	r3, [r4, #24]
 8008866:	2b00      	cmp	r3, #0
 8008868:	bf14      	ite	ne
 800886a:	2202      	movne	r2, #2
 800886c:	2201      	moveq	r2, #1
 800886e:	6122      	str	r2, [r4, #16]
 8008870:	b1d5      	cbz	r5, 80088a8 <__d2b+0x98>
 8008872:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008876:	4405      	add	r5, r0
 8008878:	f8c9 5000 	str.w	r5, [r9]
 800887c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008880:	f8c8 0000 	str.w	r0, [r8]
 8008884:	4620      	mov	r0, r4
 8008886:	b003      	add	sp, #12
 8008888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800888c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008890:	e7d5      	b.n	800883e <__d2b+0x2e>
 8008892:	6161      	str	r1, [r4, #20]
 8008894:	e7e5      	b.n	8008862 <__d2b+0x52>
 8008896:	a801      	add	r0, sp, #4
 8008898:	f7ff fd5a 	bl	8008350 <__lo0bits>
 800889c:	9b01      	ldr	r3, [sp, #4]
 800889e:	6163      	str	r3, [r4, #20]
 80088a0:	2201      	movs	r2, #1
 80088a2:	6122      	str	r2, [r4, #16]
 80088a4:	3020      	adds	r0, #32
 80088a6:	e7e3      	b.n	8008870 <__d2b+0x60>
 80088a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088b0:	f8c9 0000 	str.w	r0, [r9]
 80088b4:	6918      	ldr	r0, [r3, #16]
 80088b6:	f7ff fd2b 	bl	8008310 <__hi0bits>
 80088ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088be:	e7df      	b.n	8008880 <__d2b+0x70>
 80088c0:	0800b17b 	.word	0x0800b17b
 80088c4:	0800b1ec 	.word	0x0800b1ec

080088c8 <_calloc_r>:
 80088c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ca:	fba1 2402 	umull	r2, r4, r1, r2
 80088ce:	b94c      	cbnz	r4, 80088e4 <_calloc_r+0x1c>
 80088d0:	4611      	mov	r1, r2
 80088d2:	9201      	str	r2, [sp, #4]
 80088d4:	f000 f87a 	bl	80089cc <_malloc_r>
 80088d8:	9a01      	ldr	r2, [sp, #4]
 80088da:	4605      	mov	r5, r0
 80088dc:	b930      	cbnz	r0, 80088ec <_calloc_r+0x24>
 80088de:	4628      	mov	r0, r5
 80088e0:	b003      	add	sp, #12
 80088e2:	bd30      	pop	{r4, r5, pc}
 80088e4:	220c      	movs	r2, #12
 80088e6:	6002      	str	r2, [r0, #0]
 80088e8:	2500      	movs	r5, #0
 80088ea:	e7f8      	b.n	80088de <_calloc_r+0x16>
 80088ec:	4621      	mov	r1, r4
 80088ee:	f7fd fdf3 	bl	80064d8 <memset>
 80088f2:	e7f4      	b.n	80088de <_calloc_r+0x16>

080088f4 <_free_r>:
 80088f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088f6:	2900      	cmp	r1, #0
 80088f8:	d044      	beq.n	8008984 <_free_r+0x90>
 80088fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088fe:	9001      	str	r0, [sp, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f1a1 0404 	sub.w	r4, r1, #4
 8008906:	bfb8      	it	lt
 8008908:	18e4      	addlt	r4, r4, r3
 800890a:	f000 fb19 	bl	8008f40 <__malloc_lock>
 800890e:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <_free_r+0x94>)
 8008910:	9801      	ldr	r0, [sp, #4]
 8008912:	6813      	ldr	r3, [r2, #0]
 8008914:	b933      	cbnz	r3, 8008924 <_free_r+0x30>
 8008916:	6063      	str	r3, [r4, #4]
 8008918:	6014      	str	r4, [r2, #0]
 800891a:	b003      	add	sp, #12
 800891c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008920:	f000 bb14 	b.w	8008f4c <__malloc_unlock>
 8008924:	42a3      	cmp	r3, r4
 8008926:	d908      	bls.n	800893a <_free_r+0x46>
 8008928:	6825      	ldr	r5, [r4, #0]
 800892a:	1961      	adds	r1, r4, r5
 800892c:	428b      	cmp	r3, r1
 800892e:	bf01      	itttt	eq
 8008930:	6819      	ldreq	r1, [r3, #0]
 8008932:	685b      	ldreq	r3, [r3, #4]
 8008934:	1949      	addeq	r1, r1, r5
 8008936:	6021      	streq	r1, [r4, #0]
 8008938:	e7ed      	b.n	8008916 <_free_r+0x22>
 800893a:	461a      	mov	r2, r3
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	b10b      	cbz	r3, 8008944 <_free_r+0x50>
 8008940:	42a3      	cmp	r3, r4
 8008942:	d9fa      	bls.n	800893a <_free_r+0x46>
 8008944:	6811      	ldr	r1, [r2, #0]
 8008946:	1855      	adds	r5, r2, r1
 8008948:	42a5      	cmp	r5, r4
 800894a:	d10b      	bne.n	8008964 <_free_r+0x70>
 800894c:	6824      	ldr	r4, [r4, #0]
 800894e:	4421      	add	r1, r4
 8008950:	1854      	adds	r4, r2, r1
 8008952:	42a3      	cmp	r3, r4
 8008954:	6011      	str	r1, [r2, #0]
 8008956:	d1e0      	bne.n	800891a <_free_r+0x26>
 8008958:	681c      	ldr	r4, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	6053      	str	r3, [r2, #4]
 800895e:	4421      	add	r1, r4
 8008960:	6011      	str	r1, [r2, #0]
 8008962:	e7da      	b.n	800891a <_free_r+0x26>
 8008964:	d902      	bls.n	800896c <_free_r+0x78>
 8008966:	230c      	movs	r3, #12
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	e7d6      	b.n	800891a <_free_r+0x26>
 800896c:	6825      	ldr	r5, [r4, #0]
 800896e:	1961      	adds	r1, r4, r5
 8008970:	428b      	cmp	r3, r1
 8008972:	bf04      	itt	eq
 8008974:	6819      	ldreq	r1, [r3, #0]
 8008976:	685b      	ldreq	r3, [r3, #4]
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	bf04      	itt	eq
 800897c:	1949      	addeq	r1, r1, r5
 800897e:	6021      	streq	r1, [r4, #0]
 8008980:	6054      	str	r4, [r2, #4]
 8008982:	e7ca      	b.n	800891a <_free_r+0x26>
 8008984:	b003      	add	sp, #12
 8008986:	bd30      	pop	{r4, r5, pc}
 8008988:	20000538 	.word	0x20000538

0800898c <sbrk_aligned>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4e0e      	ldr	r6, [pc, #56]	; (80089c8 <sbrk_aligned+0x3c>)
 8008990:	460c      	mov	r4, r1
 8008992:	6831      	ldr	r1, [r6, #0]
 8008994:	4605      	mov	r5, r0
 8008996:	b911      	cbnz	r1, 800899e <sbrk_aligned+0x12>
 8008998:	f000 f9e6 	bl	8008d68 <_sbrk_r>
 800899c:	6030      	str	r0, [r6, #0]
 800899e:	4621      	mov	r1, r4
 80089a0:	4628      	mov	r0, r5
 80089a2:	f000 f9e1 	bl	8008d68 <_sbrk_r>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d00a      	beq.n	80089c0 <sbrk_aligned+0x34>
 80089aa:	1cc4      	adds	r4, r0, #3
 80089ac:	f024 0403 	bic.w	r4, r4, #3
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d007      	beq.n	80089c4 <sbrk_aligned+0x38>
 80089b4:	1a21      	subs	r1, r4, r0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 f9d6 	bl	8008d68 <_sbrk_r>
 80089bc:	3001      	adds	r0, #1
 80089be:	d101      	bne.n	80089c4 <sbrk_aligned+0x38>
 80089c0:	f04f 34ff 	mov.w	r4, #4294967295
 80089c4:	4620      	mov	r0, r4
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	2000053c 	.word	0x2000053c

080089cc <_malloc_r>:
 80089cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d0:	1ccd      	adds	r5, r1, #3
 80089d2:	f025 0503 	bic.w	r5, r5, #3
 80089d6:	3508      	adds	r5, #8
 80089d8:	2d0c      	cmp	r5, #12
 80089da:	bf38      	it	cc
 80089dc:	250c      	movcc	r5, #12
 80089de:	2d00      	cmp	r5, #0
 80089e0:	4607      	mov	r7, r0
 80089e2:	db01      	blt.n	80089e8 <_malloc_r+0x1c>
 80089e4:	42a9      	cmp	r1, r5
 80089e6:	d905      	bls.n	80089f4 <_malloc_r+0x28>
 80089e8:	230c      	movs	r3, #12
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	2600      	movs	r6, #0
 80089ee:	4630      	mov	r0, r6
 80089f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f4:	4e2e      	ldr	r6, [pc, #184]	; (8008ab0 <_malloc_r+0xe4>)
 80089f6:	f000 faa3 	bl	8008f40 <__malloc_lock>
 80089fa:	6833      	ldr	r3, [r6, #0]
 80089fc:	461c      	mov	r4, r3
 80089fe:	bb34      	cbnz	r4, 8008a4e <_malloc_r+0x82>
 8008a00:	4629      	mov	r1, r5
 8008a02:	4638      	mov	r0, r7
 8008a04:	f7ff ffc2 	bl	800898c <sbrk_aligned>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	d14d      	bne.n	8008aaa <_malloc_r+0xde>
 8008a0e:	6834      	ldr	r4, [r6, #0]
 8008a10:	4626      	mov	r6, r4
 8008a12:	2e00      	cmp	r6, #0
 8008a14:	d140      	bne.n	8008a98 <_malloc_r+0xcc>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	eb04 0803 	add.w	r8, r4, r3
 8008a20:	f000 f9a2 	bl	8008d68 <_sbrk_r>
 8008a24:	4580      	cmp	r8, r0
 8008a26:	d13a      	bne.n	8008a9e <_malloc_r+0xd2>
 8008a28:	6821      	ldr	r1, [r4, #0]
 8008a2a:	3503      	adds	r5, #3
 8008a2c:	1a6d      	subs	r5, r5, r1
 8008a2e:	f025 0503 	bic.w	r5, r5, #3
 8008a32:	3508      	adds	r5, #8
 8008a34:	2d0c      	cmp	r5, #12
 8008a36:	bf38      	it	cc
 8008a38:	250c      	movcc	r5, #12
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ffa5 	bl	800898c <sbrk_aligned>
 8008a42:	3001      	adds	r0, #1
 8008a44:	d02b      	beq.n	8008a9e <_malloc_r+0xd2>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	442b      	add	r3, r5
 8008a4a:	6023      	str	r3, [r4, #0]
 8008a4c:	e00e      	b.n	8008a6c <_malloc_r+0xa0>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	1b52      	subs	r2, r2, r5
 8008a52:	d41e      	bmi.n	8008a92 <_malloc_r+0xc6>
 8008a54:	2a0b      	cmp	r2, #11
 8008a56:	d916      	bls.n	8008a86 <_malloc_r+0xba>
 8008a58:	1961      	adds	r1, r4, r5
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	6025      	str	r5, [r4, #0]
 8008a5e:	bf18      	it	ne
 8008a60:	6059      	strne	r1, [r3, #4]
 8008a62:	6863      	ldr	r3, [r4, #4]
 8008a64:	bf08      	it	eq
 8008a66:	6031      	streq	r1, [r6, #0]
 8008a68:	5162      	str	r2, [r4, r5]
 8008a6a:	604b      	str	r3, [r1, #4]
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f104 060b 	add.w	r6, r4, #11
 8008a72:	f000 fa6b 	bl	8008f4c <__malloc_unlock>
 8008a76:	f026 0607 	bic.w	r6, r6, #7
 8008a7a:	1d23      	adds	r3, r4, #4
 8008a7c:	1af2      	subs	r2, r6, r3
 8008a7e:	d0b6      	beq.n	80089ee <_malloc_r+0x22>
 8008a80:	1b9b      	subs	r3, r3, r6
 8008a82:	50a3      	str	r3, [r4, r2]
 8008a84:	e7b3      	b.n	80089ee <_malloc_r+0x22>
 8008a86:	6862      	ldr	r2, [r4, #4]
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	bf0c      	ite	eq
 8008a8c:	6032      	streq	r2, [r6, #0]
 8008a8e:	605a      	strne	r2, [r3, #4]
 8008a90:	e7ec      	b.n	8008a6c <_malloc_r+0xa0>
 8008a92:	4623      	mov	r3, r4
 8008a94:	6864      	ldr	r4, [r4, #4]
 8008a96:	e7b2      	b.n	80089fe <_malloc_r+0x32>
 8008a98:	4634      	mov	r4, r6
 8008a9a:	6876      	ldr	r6, [r6, #4]
 8008a9c:	e7b9      	b.n	8008a12 <_malloc_r+0x46>
 8008a9e:	230c      	movs	r3, #12
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f000 fa52 	bl	8008f4c <__malloc_unlock>
 8008aa8:	e7a1      	b.n	80089ee <_malloc_r+0x22>
 8008aaa:	6025      	str	r5, [r4, #0]
 8008aac:	e7de      	b.n	8008a6c <_malloc_r+0xa0>
 8008aae:	bf00      	nop
 8008ab0:	20000538 	.word	0x20000538

08008ab4 <__sfputc_r>:
 8008ab4:	6893      	ldr	r3, [r2, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	b410      	push	{r4}
 8008abc:	6093      	str	r3, [r2, #8]
 8008abe:	da08      	bge.n	8008ad2 <__sfputc_r+0x1e>
 8008ac0:	6994      	ldr	r4, [r2, #24]
 8008ac2:	42a3      	cmp	r3, r4
 8008ac4:	db01      	blt.n	8008aca <__sfputc_r+0x16>
 8008ac6:	290a      	cmp	r1, #10
 8008ac8:	d103      	bne.n	8008ad2 <__sfputc_r+0x1e>
 8008aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ace:	f7fe ba03 	b.w	8006ed8 <__swbuf_r>
 8008ad2:	6813      	ldr	r3, [r2, #0]
 8008ad4:	1c58      	adds	r0, r3, #1
 8008ad6:	6010      	str	r0, [r2, #0]
 8008ad8:	7019      	strb	r1, [r3, #0]
 8008ada:	4608      	mov	r0, r1
 8008adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <__sfputs_r>:
 8008ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4614      	mov	r4, r2
 8008aea:	18d5      	adds	r5, r2, r3
 8008aec:	42ac      	cmp	r4, r5
 8008aee:	d101      	bne.n	8008af4 <__sfputs_r+0x12>
 8008af0:	2000      	movs	r0, #0
 8008af2:	e007      	b.n	8008b04 <__sfputs_r+0x22>
 8008af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af8:	463a      	mov	r2, r7
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ffda 	bl	8008ab4 <__sfputc_r>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d1f3      	bne.n	8008aec <__sfputs_r+0xa>
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b08 <_vfiprintf_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	b09d      	sub	sp, #116	; 0x74
 8008b10:	4614      	mov	r4, r2
 8008b12:	4698      	mov	r8, r3
 8008b14:	4606      	mov	r6, r0
 8008b16:	b118      	cbz	r0, 8008b20 <_vfiprintf_r+0x18>
 8008b18:	6983      	ldr	r3, [r0, #24]
 8008b1a:	b90b      	cbnz	r3, 8008b20 <_vfiprintf_r+0x18>
 8008b1c:	f7ff fa30 	bl	8007f80 <__sinit>
 8008b20:	4b89      	ldr	r3, [pc, #548]	; (8008d48 <_vfiprintf_r+0x240>)
 8008b22:	429d      	cmp	r5, r3
 8008b24:	d11b      	bne.n	8008b5e <_vfiprintf_r+0x56>
 8008b26:	6875      	ldr	r5, [r6, #4]
 8008b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b2a:	07d9      	lsls	r1, r3, #31
 8008b2c:	d405      	bmi.n	8008b3a <_vfiprintf_r+0x32>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	059a      	lsls	r2, r3, #22
 8008b32:	d402      	bmi.n	8008b3a <_vfiprintf_r+0x32>
 8008b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b36:	f7ff fac6 	bl	80080c6 <__retarget_lock_acquire_recursive>
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	071b      	lsls	r3, r3, #28
 8008b3e:	d501      	bpl.n	8008b44 <_vfiprintf_r+0x3c>
 8008b40:	692b      	ldr	r3, [r5, #16]
 8008b42:	b9eb      	cbnz	r3, 8008b80 <_vfiprintf_r+0x78>
 8008b44:	4629      	mov	r1, r5
 8008b46:	4630      	mov	r0, r6
 8008b48:	f7fe fa18 	bl	8006f7c <__swsetup_r>
 8008b4c:	b1c0      	cbz	r0, 8008b80 <_vfiprintf_r+0x78>
 8008b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b50:	07dc      	lsls	r4, r3, #31
 8008b52:	d50e      	bpl.n	8008b72 <_vfiprintf_r+0x6a>
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295
 8008b58:	b01d      	add	sp, #116	; 0x74
 8008b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5e:	4b7b      	ldr	r3, [pc, #492]	; (8008d4c <_vfiprintf_r+0x244>)
 8008b60:	429d      	cmp	r5, r3
 8008b62:	d101      	bne.n	8008b68 <_vfiprintf_r+0x60>
 8008b64:	68b5      	ldr	r5, [r6, #8]
 8008b66:	e7df      	b.n	8008b28 <_vfiprintf_r+0x20>
 8008b68:	4b79      	ldr	r3, [pc, #484]	; (8008d50 <_vfiprintf_r+0x248>)
 8008b6a:	429d      	cmp	r5, r3
 8008b6c:	bf08      	it	eq
 8008b6e:	68f5      	ldreq	r5, [r6, #12]
 8008b70:	e7da      	b.n	8008b28 <_vfiprintf_r+0x20>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	0598      	lsls	r0, r3, #22
 8008b76:	d4ed      	bmi.n	8008b54 <_vfiprintf_r+0x4c>
 8008b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b7a:	f7ff faa5 	bl	80080c8 <__retarget_lock_release_recursive>
 8008b7e:	e7e9      	b.n	8008b54 <_vfiprintf_r+0x4c>
 8008b80:	2300      	movs	r3, #0
 8008b82:	9309      	str	r3, [sp, #36]	; 0x24
 8008b84:	2320      	movs	r3, #32
 8008b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b8e:	2330      	movs	r3, #48	; 0x30
 8008b90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d54 <_vfiprintf_r+0x24c>
 8008b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b98:	f04f 0901 	mov.w	r9, #1
 8008b9c:	4623      	mov	r3, r4
 8008b9e:	469a      	mov	sl, r3
 8008ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba4:	b10a      	cbz	r2, 8008baa <_vfiprintf_r+0xa2>
 8008ba6:	2a25      	cmp	r2, #37	; 0x25
 8008ba8:	d1f9      	bne.n	8008b9e <_vfiprintf_r+0x96>
 8008baa:	ebba 0b04 	subs.w	fp, sl, r4
 8008bae:	d00b      	beq.n	8008bc8 <_vfiprintf_r+0xc0>
 8008bb0:	465b      	mov	r3, fp
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7ff ff93 	bl	8008ae2 <__sfputs_r>
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f000 80aa 	beq.w	8008d16 <_vfiprintf_r+0x20e>
 8008bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc4:	445a      	add	r2, fp
 8008bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80a2 	beq.w	8008d16 <_vfiprintf_r+0x20e>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bdc:	f10a 0a01 	add.w	sl, sl, #1
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	9307      	str	r3, [sp, #28]
 8008be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008be8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bea:	4654      	mov	r4, sl
 8008bec:	2205      	movs	r2, #5
 8008bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf2:	4858      	ldr	r0, [pc, #352]	; (8008d54 <_vfiprintf_r+0x24c>)
 8008bf4:	f7f7 fafc 	bl	80001f0 <memchr>
 8008bf8:	9a04      	ldr	r2, [sp, #16]
 8008bfa:	b9d8      	cbnz	r0, 8008c34 <_vfiprintf_r+0x12c>
 8008bfc:	06d1      	lsls	r1, r2, #27
 8008bfe:	bf44      	itt	mi
 8008c00:	2320      	movmi	r3, #32
 8008c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c06:	0713      	lsls	r3, r2, #28
 8008c08:	bf44      	itt	mi
 8008c0a:	232b      	movmi	r3, #43	; 0x2b
 8008c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c10:	f89a 3000 	ldrb.w	r3, [sl]
 8008c14:	2b2a      	cmp	r3, #42	; 0x2a
 8008c16:	d015      	beq.n	8008c44 <_vfiprintf_r+0x13c>
 8008c18:	9a07      	ldr	r2, [sp, #28]
 8008c1a:	4654      	mov	r4, sl
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f04f 0c0a 	mov.w	ip, #10
 8008c22:	4621      	mov	r1, r4
 8008c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c28:	3b30      	subs	r3, #48	; 0x30
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d94e      	bls.n	8008ccc <_vfiprintf_r+0x1c4>
 8008c2e:	b1b0      	cbz	r0, 8008c5e <_vfiprintf_r+0x156>
 8008c30:	9207      	str	r2, [sp, #28]
 8008c32:	e014      	b.n	8008c5e <_vfiprintf_r+0x156>
 8008c34:	eba0 0308 	sub.w	r3, r0, r8
 8008c38:	fa09 f303 	lsl.w	r3, r9, r3
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	46a2      	mov	sl, r4
 8008c42:	e7d2      	b.n	8008bea <_vfiprintf_r+0xe2>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	1d19      	adds	r1, r3, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	9103      	str	r1, [sp, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfbb      	ittet	lt
 8008c50:	425b      	neglt	r3, r3
 8008c52:	f042 0202 	orrlt.w	r2, r2, #2
 8008c56:	9307      	strge	r3, [sp, #28]
 8008c58:	9307      	strlt	r3, [sp, #28]
 8008c5a:	bfb8      	it	lt
 8008c5c:	9204      	strlt	r2, [sp, #16]
 8008c5e:	7823      	ldrb	r3, [r4, #0]
 8008c60:	2b2e      	cmp	r3, #46	; 0x2e
 8008c62:	d10c      	bne.n	8008c7e <_vfiprintf_r+0x176>
 8008c64:	7863      	ldrb	r3, [r4, #1]
 8008c66:	2b2a      	cmp	r3, #42	; 0x2a
 8008c68:	d135      	bne.n	8008cd6 <_vfiprintf_r+0x1ce>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d1a      	adds	r2, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9203      	str	r2, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfb8      	it	lt
 8008c76:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c7a:	3402      	adds	r4, #2
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d64 <_vfiprintf_r+0x25c>
 8008c82:	7821      	ldrb	r1, [r4, #0]
 8008c84:	2203      	movs	r2, #3
 8008c86:	4650      	mov	r0, sl
 8008c88:	f7f7 fab2 	bl	80001f0 <memchr>
 8008c8c:	b140      	cbz	r0, 8008ca0 <_vfiprintf_r+0x198>
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	eba0 000a 	sub.w	r0, r0, sl
 8008c94:	fa03 f000 	lsl.w	r0, r3, r0
 8008c98:	9b04      	ldr	r3, [sp, #16]
 8008c9a:	4303      	orrs	r3, r0
 8008c9c:	3401      	adds	r4, #1
 8008c9e:	9304      	str	r3, [sp, #16]
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	482c      	ldr	r0, [pc, #176]	; (8008d58 <_vfiprintf_r+0x250>)
 8008ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008caa:	2206      	movs	r2, #6
 8008cac:	f7f7 faa0 	bl	80001f0 <memchr>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d03f      	beq.n	8008d34 <_vfiprintf_r+0x22c>
 8008cb4:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <_vfiprintf_r+0x254>)
 8008cb6:	bb1b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x1f8>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	3307      	adds	r3, #7
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	443b      	add	r3, r7
 8008cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cca:	e767      	b.n	8008b9c <_vfiprintf_r+0x94>
 8008ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	e7a5      	b.n	8008c22 <_vfiprintf_r+0x11a>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	3401      	adds	r4, #1
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f04f 0c0a 	mov.w	ip, #10
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce8:	3a30      	subs	r2, #48	; 0x30
 8008cea:	2a09      	cmp	r2, #9
 8008cec:	d903      	bls.n	8008cf6 <_vfiprintf_r+0x1ee>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0c5      	beq.n	8008c7e <_vfiprintf_r+0x176>
 8008cf2:	9105      	str	r1, [sp, #20]
 8008cf4:	e7c3      	b.n	8008c7e <_vfiprintf_r+0x176>
 8008cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e7f0      	b.n	8008ce2 <_vfiprintf_r+0x1da>
 8008d00:	ab03      	add	r3, sp, #12
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	462a      	mov	r2, r5
 8008d06:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <_vfiprintf_r+0x258>)
 8008d08:	a904      	add	r1, sp, #16
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7fd fc8c 	bl	8006628 <_printf_float>
 8008d10:	4607      	mov	r7, r0
 8008d12:	1c78      	adds	r0, r7, #1
 8008d14:	d1d6      	bne.n	8008cc4 <_vfiprintf_r+0x1bc>
 8008d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d18:	07d9      	lsls	r1, r3, #31
 8008d1a:	d405      	bmi.n	8008d28 <_vfiprintf_r+0x220>
 8008d1c:	89ab      	ldrh	r3, [r5, #12]
 8008d1e:	059a      	lsls	r2, r3, #22
 8008d20:	d402      	bmi.n	8008d28 <_vfiprintf_r+0x220>
 8008d22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d24:	f7ff f9d0 	bl	80080c8 <__retarget_lock_release_recursive>
 8008d28:	89ab      	ldrh	r3, [r5, #12]
 8008d2a:	065b      	lsls	r3, r3, #25
 8008d2c:	f53f af12 	bmi.w	8008b54 <_vfiprintf_r+0x4c>
 8008d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d32:	e711      	b.n	8008b58 <_vfiprintf_r+0x50>
 8008d34:	ab03      	add	r3, sp, #12
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	462a      	mov	r2, r5
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <_vfiprintf_r+0x258>)
 8008d3c:	a904      	add	r1, sp, #16
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7fd ff16 	bl	8006b70 <_printf_i>
 8008d44:	e7e4      	b.n	8008d10 <_vfiprintf_r+0x208>
 8008d46:	bf00      	nop
 8008d48:	0800b1ac 	.word	0x0800b1ac
 8008d4c:	0800b1cc 	.word	0x0800b1cc
 8008d50:	0800b18c 	.word	0x0800b18c
 8008d54:	0800b344 	.word	0x0800b344
 8008d58:	0800b34e 	.word	0x0800b34e
 8008d5c:	08006629 	.word	0x08006629
 8008d60:	08008ae3 	.word	0x08008ae3
 8008d64:	0800b34a 	.word	0x0800b34a

08008d68 <_sbrk_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_sbrk_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f8 ffb4 	bl	8001ce0 <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_sbrk_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_sbrk_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20000540 	.word	0x20000540

08008d88 <__sread>:
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d90:	f000 f8e2 	bl	8008f58 <_read_r>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	bfab      	itete	ge
 8008d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d9c:	181b      	addge	r3, r3, r0
 8008d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008da2:	bfac      	ite	ge
 8008da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008da6:	81a3      	strhlt	r3, [r4, #12]
 8008da8:	bd10      	pop	{r4, pc}

08008daa <__swrite>:
 8008daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dae:	461f      	mov	r7, r3
 8008db0:	898b      	ldrh	r3, [r1, #12]
 8008db2:	05db      	lsls	r3, r3, #23
 8008db4:	4605      	mov	r5, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	4616      	mov	r6, r2
 8008dba:	d505      	bpl.n	8008dc8 <__swrite+0x1e>
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f000 f898 	bl	8008ef8 <_lseek_r>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	4628      	mov	r0, r5
 8008dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dde:	f000 b817 	b.w	8008e10 <_write_r>

08008de2 <__sseek>:
 8008de2:	b510      	push	{r4, lr}
 8008de4:	460c      	mov	r4, r1
 8008de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dea:	f000 f885 	bl	8008ef8 <_lseek_r>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	bf15      	itete	ne
 8008df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dfe:	81a3      	strheq	r3, [r4, #12]
 8008e00:	bf18      	it	ne
 8008e02:	81a3      	strhne	r3, [r4, #12]
 8008e04:	bd10      	pop	{r4, pc}

08008e06 <__sclose>:
 8008e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0a:	f000 b831 	b.w	8008e70 <_close_r>
	...

08008e10 <_write_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d07      	ldr	r5, [pc, #28]	; (8008e30 <_write_r+0x20>)
 8008e14:	4604      	mov	r4, r0
 8008e16:	4608      	mov	r0, r1
 8008e18:	4611      	mov	r1, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	602a      	str	r2, [r5, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f7f8 ff0d 	bl	8001c3e <_write>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_write_r+0x1e>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_write_r+0x1e>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	20000540 	.word	0x20000540

08008e34 <__assert_func>:
 8008e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e36:	4614      	mov	r4, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <__assert_func+0x2c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4605      	mov	r5, r0
 8008e40:	68d8      	ldr	r0, [r3, #12]
 8008e42:	b14c      	cbz	r4, 8008e58 <__assert_func+0x24>
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <__assert_func+0x30>)
 8008e46:	9100      	str	r1, [sp, #0]
 8008e48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e4c:	4906      	ldr	r1, [pc, #24]	; (8008e68 <__assert_func+0x34>)
 8008e4e:	462b      	mov	r3, r5
 8008e50:	f000 f81e 	bl	8008e90 <fiprintf>
 8008e54:	f000 f89f 	bl	8008f96 <abort>
 8008e58:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <__assert_func+0x38>)
 8008e5a:	461c      	mov	r4, r3
 8008e5c:	e7f3      	b.n	8008e46 <__assert_func+0x12>
 8008e5e:	bf00      	nop
 8008e60:	20000010 	.word	0x20000010
 8008e64:	0800b355 	.word	0x0800b355
 8008e68:	0800b362 	.word	0x0800b362
 8008e6c:	0800b390 	.word	0x0800b390

08008e70 <_close_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d06      	ldr	r5, [pc, #24]	; (8008e8c <_close_r+0x1c>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4604      	mov	r4, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	602b      	str	r3, [r5, #0]
 8008e7c:	f7f8 fefb 	bl	8001c76 <_close>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_close_r+0x1a>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_close_r+0x1a>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	20000540 	.word	0x20000540

08008e90 <fiprintf>:
 8008e90:	b40e      	push	{r1, r2, r3}
 8008e92:	b503      	push	{r0, r1, lr}
 8008e94:	4601      	mov	r1, r0
 8008e96:	ab03      	add	r3, sp, #12
 8008e98:	4805      	ldr	r0, [pc, #20]	; (8008eb0 <fiprintf+0x20>)
 8008e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9e:	6800      	ldr	r0, [r0, #0]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	f7ff fe31 	bl	8008b08 <_vfiprintf_r>
 8008ea6:	b002      	add	sp, #8
 8008ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eac:	b003      	add	sp, #12
 8008eae:	4770      	bx	lr
 8008eb0:	20000010 	.word	0x20000010

08008eb4 <_fstat_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	; (8008ed4 <_fstat_r+0x20>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	f7f8 fee4 	bl	8001c8e <_fstat>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	d102      	bne.n	8008ed0 <_fstat_r+0x1c>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b103      	cbz	r3, 8008ed0 <_fstat_r+0x1c>
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000540 	.word	0x20000540

08008ed8 <_isatty_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	; (8008ef4 <_isatty_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f8 fee3 	bl	8001cae <_isatty>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_isatty_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_isatty_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	20000540 	.word	0x20000540

08008ef8 <_lseek_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d07      	ldr	r5, [pc, #28]	; (8008f18 <_lseek_r+0x20>)
 8008efc:	4604      	mov	r4, r0
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	2200      	movs	r2, #0
 8008f04:	602a      	str	r2, [r5, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f7f8 fedc 	bl	8001cc4 <_lseek>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_lseek_r+0x1e>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_lseek_r+0x1e>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	20000540 	.word	0x20000540

08008f1c <__ascii_mbtowc>:
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	b901      	cbnz	r1, 8008f22 <__ascii_mbtowc+0x6>
 8008f20:	a901      	add	r1, sp, #4
 8008f22:	b142      	cbz	r2, 8008f36 <__ascii_mbtowc+0x1a>
 8008f24:	b14b      	cbz	r3, 8008f3a <__ascii_mbtowc+0x1e>
 8008f26:	7813      	ldrb	r3, [r2, #0]
 8008f28:	600b      	str	r3, [r1, #0]
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	1e10      	subs	r0, r2, #0
 8008f2e:	bf18      	it	ne
 8008f30:	2001      	movne	r0, #1
 8008f32:	b002      	add	sp, #8
 8008f34:	4770      	bx	lr
 8008f36:	4610      	mov	r0, r2
 8008f38:	e7fb      	b.n	8008f32 <__ascii_mbtowc+0x16>
 8008f3a:	f06f 0001 	mvn.w	r0, #1
 8008f3e:	e7f8      	b.n	8008f32 <__ascii_mbtowc+0x16>

08008f40 <__malloc_lock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__malloc_lock+0x8>)
 8008f42:	f7ff b8c0 	b.w	80080c6 <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	20000534 	.word	0x20000534

08008f4c <__malloc_unlock>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__malloc_unlock+0x8>)
 8008f4e:	f7ff b8bb 	b.w	80080c8 <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	20000534 	.word	0x20000534

08008f58 <_read_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4d07      	ldr	r5, [pc, #28]	; (8008f78 <_read_r+0x20>)
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	4608      	mov	r0, r1
 8008f60:	4611      	mov	r1, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	602a      	str	r2, [r5, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f7f8 fe4c 	bl	8001c04 <_read>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_read_r+0x1e>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_read_r+0x1e>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	20000540 	.word	0x20000540

08008f7c <__ascii_wctomb>:
 8008f7c:	b149      	cbz	r1, 8008f92 <__ascii_wctomb+0x16>
 8008f7e:	2aff      	cmp	r2, #255	; 0xff
 8008f80:	bf85      	ittet	hi
 8008f82:	238a      	movhi	r3, #138	; 0x8a
 8008f84:	6003      	strhi	r3, [r0, #0]
 8008f86:	700a      	strbls	r2, [r1, #0]
 8008f88:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f8c:	bf98      	it	ls
 8008f8e:	2001      	movls	r0, #1
 8008f90:	4770      	bx	lr
 8008f92:	4608      	mov	r0, r1
 8008f94:	4770      	bx	lr

08008f96 <abort>:
 8008f96:	b508      	push	{r3, lr}
 8008f98:	2006      	movs	r0, #6
 8008f9a:	f000 f82b 	bl	8008ff4 <raise>
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	f7f8 fe26 	bl	8001bf0 <_exit>

08008fa4 <_raise_r>:
 8008fa4:	291f      	cmp	r1, #31
 8008fa6:	b538      	push	{r3, r4, r5, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	d904      	bls.n	8008fb8 <_raise_r+0x14>
 8008fae:	2316      	movs	r3, #22
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fba:	b112      	cbz	r2, 8008fc2 <_raise_r+0x1e>
 8008fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc0:	b94b      	cbnz	r3, 8008fd6 <_raise_r+0x32>
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f830 	bl	8009028 <_getpid_r>
 8008fc8:	462a      	mov	r2, r5
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd2:	f000 b817 	b.w	8009004 <_kill_r>
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d00a      	beq.n	8008ff0 <_raise_r+0x4c>
 8008fda:	1c59      	adds	r1, r3, #1
 8008fdc:	d103      	bne.n	8008fe6 <_raise_r+0x42>
 8008fde:	2316      	movs	r3, #22
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	e7e7      	b.n	8008fb6 <_raise_r+0x12>
 8008fe6:	2400      	movs	r4, #0
 8008fe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fec:	4628      	mov	r0, r5
 8008fee:	4798      	blx	r3
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7e0      	b.n	8008fb6 <_raise_r+0x12>

08008ff4 <raise>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <raise+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7ff bfd3 	b.w	8008fa4 <_raise_r>
 8008ffe:	bf00      	nop
 8009000:	20000010 	.word	0x20000010

08009004 <_kill_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4d07      	ldr	r5, [pc, #28]	; (8009024 <_kill_r+0x20>)
 8009008:	2300      	movs	r3, #0
 800900a:	4604      	mov	r4, r0
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	f7f8 fddd 	bl	8001bd0 <_kill>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d102      	bne.n	8009020 <_kill_r+0x1c>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b103      	cbz	r3, 8009020 <_kill_r+0x1c>
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	bd38      	pop	{r3, r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	20000540 	.word	0x20000540

08009028 <_getpid_r>:
 8009028:	f7f8 bdca 	b.w	8001bc0 <_getpid>

0800902c <atanf>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	ee10 5a10 	vmov	r5, s0
 8009032:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009036:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800903a:	eef0 7a40 	vmov.f32	s15, s0
 800903e:	db10      	blt.n	8009062 <atanf+0x36>
 8009040:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009044:	dd04      	ble.n	8009050 <atanf+0x24>
 8009046:	ee70 7a00 	vadd.f32	s15, s0, s0
 800904a:	eeb0 0a67 	vmov.f32	s0, s15
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009188 <atanf+0x15c>
 8009054:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800918c <atanf+0x160>
 8009058:	2d00      	cmp	r5, #0
 800905a:	bfd8      	it	le
 800905c:	eef0 7a40 	vmovle.f32	s15, s0
 8009060:	e7f3      	b.n	800904a <atanf+0x1e>
 8009062:	4b4b      	ldr	r3, [pc, #300]	; (8009190 <atanf+0x164>)
 8009064:	429c      	cmp	r4, r3
 8009066:	dc10      	bgt.n	800908a <atanf+0x5e>
 8009068:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800906c:	da0a      	bge.n	8009084 <atanf+0x58>
 800906e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009194 <atanf+0x168>
 8009072:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800907a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	dce2      	bgt.n	800904a <atanf+0x1e>
 8009084:	f04f 33ff 	mov.w	r3, #4294967295
 8009088:	e013      	b.n	80090b2 <atanf+0x86>
 800908a:	f000 f8e7 	bl	800925c <fabsf>
 800908e:	4b42      	ldr	r3, [pc, #264]	; (8009198 <atanf+0x16c>)
 8009090:	429c      	cmp	r4, r3
 8009092:	dc4f      	bgt.n	8009134 <atanf+0x108>
 8009094:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009098:	429c      	cmp	r4, r3
 800909a:	dc41      	bgt.n	8009120 <atanf+0xf4>
 800909c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80090a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80090a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80090a8:	2300      	movs	r3, #0
 80090aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80090b8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800919c <atanf+0x170>
 80090bc:	eddf 5a38 	vldr	s11, [pc, #224]	; 80091a0 <atanf+0x174>
 80090c0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80091a4 <atanf+0x178>
 80090c4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80090c8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80090cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80091a8 <atanf+0x17c>
 80090d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80090d4:	eddf 5a35 	vldr	s11, [pc, #212]	; 80091ac <atanf+0x180>
 80090d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80090dc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80091b0 <atanf+0x184>
 80090e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80090e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80091b4 <atanf+0x188>
 80090e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80090ec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80091b8 <atanf+0x18c>
 80090f0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80090f4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80091bc <atanf+0x190>
 80090f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80090fc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80091c0 <atanf+0x194>
 8009100:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009104:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80091c4 <atanf+0x198>
 8009108:	eea5 7a26 	vfma.f32	s14, s10, s13
 800910c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009110:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009114:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009118:	d121      	bne.n	800915e <atanf+0x132>
 800911a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800911e:	e794      	b.n	800904a <atanf+0x1e>
 8009120:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009124:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009128:	ee30 0a27 	vadd.f32	s0, s0, s15
 800912c:	2301      	movs	r3, #1
 800912e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009132:	e7be      	b.n	80090b2 <atanf+0x86>
 8009134:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <atanf+0x19c>)
 8009136:	429c      	cmp	r4, r3
 8009138:	dc0b      	bgt.n	8009152 <atanf+0x126>
 800913a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800913e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009142:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009146:	2302      	movs	r3, #2
 8009148:	ee70 6a67 	vsub.f32	s13, s0, s15
 800914c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009150:	e7af      	b.n	80090b2 <atanf+0x86>
 8009152:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009156:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800915a:	2303      	movs	r3, #3
 800915c:	e7a9      	b.n	80090b2 <atanf+0x86>
 800915e:	4a1b      	ldr	r2, [pc, #108]	; (80091cc <atanf+0x1a0>)
 8009160:	491b      	ldr	r1, [pc, #108]	; (80091d0 <atanf+0x1a4>)
 8009162:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009166:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800916a:	ed93 0a00 	vldr	s0, [r3]
 800916e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009172:	ed92 0a00 	vldr	s0, [r2]
 8009176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800917a:	2d00      	cmp	r5, #0
 800917c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009180:	bfb8      	it	lt
 8009182:	eef1 7a67 	vneglt.f32	s15, s15
 8009186:	e760      	b.n	800904a <atanf+0x1e>
 8009188:	3fc90fdb 	.word	0x3fc90fdb
 800918c:	bfc90fdb 	.word	0xbfc90fdb
 8009190:	3edfffff 	.word	0x3edfffff
 8009194:	7149f2ca 	.word	0x7149f2ca
 8009198:	3f97ffff 	.word	0x3f97ffff
 800919c:	3c8569d7 	.word	0x3c8569d7
 80091a0:	3d4bda59 	.word	0x3d4bda59
 80091a4:	bd6ef16b 	.word	0xbd6ef16b
 80091a8:	3d886b35 	.word	0x3d886b35
 80091ac:	3dba2e6e 	.word	0x3dba2e6e
 80091b0:	3e124925 	.word	0x3e124925
 80091b4:	3eaaaaab 	.word	0x3eaaaaab
 80091b8:	bd15a221 	.word	0xbd15a221
 80091bc:	bd9d8795 	.word	0xbd9d8795
 80091c0:	bde38e38 	.word	0xbde38e38
 80091c4:	be4ccccd 	.word	0xbe4ccccd
 80091c8:	401bffff 	.word	0x401bffff
 80091cc:	0800b49c 	.word	0x0800b49c
 80091d0:	0800b4ac 	.word	0x0800b4ac

080091d4 <cosf>:
 80091d4:	ee10 3a10 	vmov	r3, s0
 80091d8:	b507      	push	{r0, r1, r2, lr}
 80091da:	4a1e      	ldr	r2, [pc, #120]	; (8009254 <cosf+0x80>)
 80091dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e0:	4293      	cmp	r3, r2
 80091e2:	dc06      	bgt.n	80091f2 <cosf+0x1e>
 80091e4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009258 <cosf+0x84>
 80091e8:	b003      	add	sp, #12
 80091ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ee:	f001 b97d 	b.w	800a4ec <__kernel_cosf>
 80091f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80091f6:	db04      	blt.n	8009202 <cosf+0x2e>
 80091f8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80091fc:	b003      	add	sp, #12
 80091fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009202:	4668      	mov	r0, sp
 8009204:	f001 f832 	bl	800a26c <__ieee754_rem_pio2f>
 8009208:	f000 0003 	and.w	r0, r0, #3
 800920c:	2801      	cmp	r0, #1
 800920e:	d009      	beq.n	8009224 <cosf+0x50>
 8009210:	2802      	cmp	r0, #2
 8009212:	d010      	beq.n	8009236 <cosf+0x62>
 8009214:	b9b0      	cbnz	r0, 8009244 <cosf+0x70>
 8009216:	eddd 0a01 	vldr	s1, [sp, #4]
 800921a:	ed9d 0a00 	vldr	s0, [sp]
 800921e:	f001 f965 	bl	800a4ec <__kernel_cosf>
 8009222:	e7eb      	b.n	80091fc <cosf+0x28>
 8009224:	eddd 0a01 	vldr	s1, [sp, #4]
 8009228:	ed9d 0a00 	vldr	s0, [sp]
 800922c:	f001 fc34 	bl	800aa98 <__kernel_sinf>
 8009230:	eeb1 0a40 	vneg.f32	s0, s0
 8009234:	e7e2      	b.n	80091fc <cosf+0x28>
 8009236:	eddd 0a01 	vldr	s1, [sp, #4]
 800923a:	ed9d 0a00 	vldr	s0, [sp]
 800923e:	f001 f955 	bl	800a4ec <__kernel_cosf>
 8009242:	e7f5      	b.n	8009230 <cosf+0x5c>
 8009244:	eddd 0a01 	vldr	s1, [sp, #4]
 8009248:	ed9d 0a00 	vldr	s0, [sp]
 800924c:	2001      	movs	r0, #1
 800924e:	f001 fc23 	bl	800aa98 <__kernel_sinf>
 8009252:	e7d3      	b.n	80091fc <cosf+0x28>
 8009254:	3f490fd8 	.word	0x3f490fd8
 8009258:	00000000 	.word	0x00000000

0800925c <fabsf>:
 800925c:	ee10 3a10 	vmov	r3, s0
 8009260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009264:	ee00 3a10 	vmov	s0, r3
 8009268:	4770      	bx	lr
	...

0800926c <sinf>:
 800926c:	ee10 3a10 	vmov	r3, s0
 8009270:	b507      	push	{r0, r1, r2, lr}
 8009272:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <sinf+0x84>)
 8009274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009278:	4293      	cmp	r3, r2
 800927a:	dc07      	bgt.n	800928c <sinf+0x20>
 800927c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80092f4 <sinf+0x88>
 8009280:	2000      	movs	r0, #0
 8009282:	b003      	add	sp, #12
 8009284:	f85d eb04 	ldr.w	lr, [sp], #4
 8009288:	f001 bc06 	b.w	800aa98 <__kernel_sinf>
 800928c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009290:	db04      	blt.n	800929c <sinf+0x30>
 8009292:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009296:	b003      	add	sp, #12
 8009298:	f85d fb04 	ldr.w	pc, [sp], #4
 800929c:	4668      	mov	r0, sp
 800929e:	f000 ffe5 	bl	800a26c <__ieee754_rem_pio2f>
 80092a2:	f000 0003 	and.w	r0, r0, #3
 80092a6:	2801      	cmp	r0, #1
 80092a8:	d00a      	beq.n	80092c0 <sinf+0x54>
 80092aa:	2802      	cmp	r0, #2
 80092ac:	d00f      	beq.n	80092ce <sinf+0x62>
 80092ae:	b9c0      	cbnz	r0, 80092e2 <sinf+0x76>
 80092b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80092b4:	ed9d 0a00 	vldr	s0, [sp]
 80092b8:	2001      	movs	r0, #1
 80092ba:	f001 fbed 	bl	800aa98 <__kernel_sinf>
 80092be:	e7ea      	b.n	8009296 <sinf+0x2a>
 80092c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80092c4:	ed9d 0a00 	vldr	s0, [sp]
 80092c8:	f001 f910 	bl	800a4ec <__kernel_cosf>
 80092cc:	e7e3      	b.n	8009296 <sinf+0x2a>
 80092ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80092d2:	ed9d 0a00 	vldr	s0, [sp]
 80092d6:	2001      	movs	r0, #1
 80092d8:	f001 fbde 	bl	800aa98 <__kernel_sinf>
 80092dc:	eeb1 0a40 	vneg.f32	s0, s0
 80092e0:	e7d9      	b.n	8009296 <sinf+0x2a>
 80092e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80092e6:	ed9d 0a00 	vldr	s0, [sp]
 80092ea:	f001 f8ff 	bl	800a4ec <__kernel_cosf>
 80092ee:	e7f5      	b.n	80092dc <sinf+0x70>
 80092f0:	3f490fd8 	.word	0x3f490fd8
 80092f4:	00000000 	.word	0x00000000

080092f8 <tanf>:
 80092f8:	ee10 3a10 	vmov	r3, s0
 80092fc:	b507      	push	{r0, r1, r2, lr}
 80092fe:	4a12      	ldr	r2, [pc, #72]	; (8009348 <tanf+0x50>)
 8009300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009304:	4293      	cmp	r3, r2
 8009306:	dc07      	bgt.n	8009318 <tanf+0x20>
 8009308:	eddf 0a10 	vldr	s1, [pc, #64]	; 800934c <tanf+0x54>
 800930c:	2001      	movs	r0, #1
 800930e:	b003      	add	sp, #12
 8009310:	f85d eb04 	ldr.w	lr, [sp], #4
 8009314:	f001 bc08 	b.w	800ab28 <__kernel_tanf>
 8009318:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800931c:	db04      	blt.n	8009328 <tanf+0x30>
 800931e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009322:	b003      	add	sp, #12
 8009324:	f85d fb04 	ldr.w	pc, [sp], #4
 8009328:	4668      	mov	r0, sp
 800932a:	f000 ff9f 	bl	800a26c <__ieee754_rem_pio2f>
 800932e:	0040      	lsls	r0, r0, #1
 8009330:	f000 0002 	and.w	r0, r0, #2
 8009334:	eddd 0a01 	vldr	s1, [sp, #4]
 8009338:	ed9d 0a00 	vldr	s0, [sp]
 800933c:	f1c0 0001 	rsb	r0, r0, #1
 8009340:	f001 fbf2 	bl	800ab28 <__kernel_tanf>
 8009344:	e7ed      	b.n	8009322 <tanf+0x2a>
 8009346:	bf00      	nop
 8009348:	3f490fda 	.word	0x3f490fda
 800934c:	00000000 	.word	0x00000000

08009350 <pow>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	ed2d 8b02 	vpush	{d8}
 8009356:	eeb0 8a40 	vmov.f32	s16, s0
 800935a:	eef0 8a60 	vmov.f32	s17, s1
 800935e:	ec55 4b11 	vmov	r4, r5, d1
 8009362:	f000 f8bd 	bl	80094e0 <__ieee754_pow>
 8009366:	4622      	mov	r2, r4
 8009368:	462b      	mov	r3, r5
 800936a:	4620      	mov	r0, r4
 800936c:	4629      	mov	r1, r5
 800936e:	ec57 6b10 	vmov	r6, r7, d0
 8009372:	f7f7 fbe3 	bl	8000b3c <__aeabi_dcmpun>
 8009376:	2800      	cmp	r0, #0
 8009378:	d13b      	bne.n	80093f2 <pow+0xa2>
 800937a:	ec51 0b18 	vmov	r0, r1, d8
 800937e:	2200      	movs	r2, #0
 8009380:	2300      	movs	r3, #0
 8009382:	f7f7 fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009386:	b1b8      	cbz	r0, 80093b8 <pow+0x68>
 8009388:	2200      	movs	r2, #0
 800938a:	2300      	movs	r3, #0
 800938c:	4620      	mov	r0, r4
 800938e:	4629      	mov	r1, r5
 8009390:	f7f7 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009394:	2800      	cmp	r0, #0
 8009396:	d146      	bne.n	8009426 <pow+0xd6>
 8009398:	ec45 4b10 	vmov	d0, r4, r5
 800939c:	f001 fcdd 	bl	800ad5a <finite>
 80093a0:	b338      	cbz	r0, 80093f2 <pow+0xa2>
 80093a2:	2200      	movs	r2, #0
 80093a4:	2300      	movs	r3, #0
 80093a6:	4620      	mov	r0, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	f7f7 fb9f 	bl	8000aec <__aeabi_dcmplt>
 80093ae:	b300      	cbz	r0, 80093f2 <pow+0xa2>
 80093b0:	f7fd f868 	bl	8006484 <__errno>
 80093b4:	2322      	movs	r3, #34	; 0x22
 80093b6:	e01b      	b.n	80093f0 <pow+0xa0>
 80093b8:	ec47 6b10 	vmov	d0, r6, r7
 80093bc:	f001 fccd 	bl	800ad5a <finite>
 80093c0:	b9e0      	cbnz	r0, 80093fc <pow+0xac>
 80093c2:	eeb0 0a48 	vmov.f32	s0, s16
 80093c6:	eef0 0a68 	vmov.f32	s1, s17
 80093ca:	f001 fcc6 	bl	800ad5a <finite>
 80093ce:	b1a8      	cbz	r0, 80093fc <pow+0xac>
 80093d0:	ec45 4b10 	vmov	d0, r4, r5
 80093d4:	f001 fcc1 	bl	800ad5a <finite>
 80093d8:	b180      	cbz	r0, 80093fc <pow+0xac>
 80093da:	4632      	mov	r2, r6
 80093dc:	463b      	mov	r3, r7
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f7 fbab 	bl	8000b3c <__aeabi_dcmpun>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0e2      	beq.n	80093b0 <pow+0x60>
 80093ea:	f7fd f84b 	bl	8006484 <__errno>
 80093ee:	2321      	movs	r3, #33	; 0x21
 80093f0:	6003      	str	r3, [r0, #0]
 80093f2:	ecbd 8b02 	vpop	{d8}
 80093f6:	ec47 6b10 	vmov	d0, r6, r7
 80093fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093fc:	2200      	movs	r2, #0
 80093fe:	2300      	movs	r3, #0
 8009400:	4630      	mov	r0, r6
 8009402:	4639      	mov	r1, r7
 8009404:	f7f7 fb68 	bl	8000ad8 <__aeabi_dcmpeq>
 8009408:	2800      	cmp	r0, #0
 800940a:	d0f2      	beq.n	80093f2 <pow+0xa2>
 800940c:	eeb0 0a48 	vmov.f32	s0, s16
 8009410:	eef0 0a68 	vmov.f32	s1, s17
 8009414:	f001 fca1 	bl	800ad5a <finite>
 8009418:	2800      	cmp	r0, #0
 800941a:	d0ea      	beq.n	80093f2 <pow+0xa2>
 800941c:	ec45 4b10 	vmov	d0, r4, r5
 8009420:	f001 fc9b 	bl	800ad5a <finite>
 8009424:	e7c3      	b.n	80093ae <pow+0x5e>
 8009426:	4f01      	ldr	r7, [pc, #4]	; (800942c <pow+0xdc>)
 8009428:	2600      	movs	r6, #0
 800942a:	e7e2      	b.n	80093f2 <pow+0xa2>
 800942c:	3ff00000 	.word	0x3ff00000

08009430 <sqrt>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	ed2d 8b02 	vpush	{d8}
 8009436:	ec55 4b10 	vmov	r4, r5, d0
 800943a:	f000 fd7f 	bl	8009f3c <__ieee754_sqrt>
 800943e:	4622      	mov	r2, r4
 8009440:	462b      	mov	r3, r5
 8009442:	4620      	mov	r0, r4
 8009444:	4629      	mov	r1, r5
 8009446:	eeb0 8a40 	vmov.f32	s16, s0
 800944a:	eef0 8a60 	vmov.f32	s17, s1
 800944e:	f7f7 fb75 	bl	8000b3c <__aeabi_dcmpun>
 8009452:	b990      	cbnz	r0, 800947a <sqrt+0x4a>
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	4620      	mov	r0, r4
 800945a:	4629      	mov	r1, r5
 800945c:	f7f7 fb46 	bl	8000aec <__aeabi_dcmplt>
 8009460:	b158      	cbz	r0, 800947a <sqrt+0x4a>
 8009462:	f7fd f80f 	bl	8006484 <__errno>
 8009466:	2321      	movs	r3, #33	; 0x21
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	2200      	movs	r2, #0
 800946c:	2300      	movs	r3, #0
 800946e:	4610      	mov	r0, r2
 8009470:	4619      	mov	r1, r3
 8009472:	f7f7 f9f3 	bl	800085c <__aeabi_ddiv>
 8009476:	ec41 0b18 	vmov	d8, r0, r1
 800947a:	eeb0 0a48 	vmov.f32	s0, s16
 800947e:	eef0 0a68 	vmov.f32	s1, s17
 8009482:	ecbd 8b02 	vpop	{d8}
 8009486:	bd38      	pop	{r3, r4, r5, pc}

08009488 <asinf>:
 8009488:	b508      	push	{r3, lr}
 800948a:	ed2d 8b02 	vpush	{d8}
 800948e:	eeb0 8a40 	vmov.f32	s16, s0
 8009492:	f000 fe05 	bl	800a0a0 <__ieee754_asinf>
 8009496:	eeb4 8a48 	vcmp.f32	s16, s16
 800949a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800949e:	eef0 8a40 	vmov.f32	s17, s0
 80094a2:	d615      	bvs.n	80094d0 <asinf+0x48>
 80094a4:	eeb0 0a48 	vmov.f32	s0, s16
 80094a8:	f7ff fed8 	bl	800925c <fabsf>
 80094ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80094b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80094b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b8:	dd0a      	ble.n	80094d0 <asinf+0x48>
 80094ba:	f7fc ffe3 	bl	8006484 <__errno>
 80094be:	ecbd 8b02 	vpop	{d8}
 80094c2:	2321      	movs	r3, #33	; 0x21
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094ca:	4804      	ldr	r0, [pc, #16]	; (80094dc <asinf+0x54>)
 80094cc:	f001 bd18 	b.w	800af00 <nanf>
 80094d0:	eeb0 0a68 	vmov.f32	s0, s17
 80094d4:	ecbd 8b02 	vpop	{d8}
 80094d8:	bd08      	pop	{r3, pc}
 80094da:	bf00      	nop
 80094dc:	0800b390 	.word	0x0800b390

080094e0 <__ieee754_pow>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	ed2d 8b06 	vpush	{d8-d10}
 80094e8:	b089      	sub	sp, #36	; 0x24
 80094ea:	ed8d 1b00 	vstr	d1, [sp]
 80094ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80094f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80094f6:	ea58 0102 	orrs.w	r1, r8, r2
 80094fa:	ec57 6b10 	vmov	r6, r7, d0
 80094fe:	d115      	bne.n	800952c <__ieee754_pow+0x4c>
 8009500:	19b3      	adds	r3, r6, r6
 8009502:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009506:	4152      	adcs	r2, r2
 8009508:	4299      	cmp	r1, r3
 800950a:	4b89      	ldr	r3, [pc, #548]	; (8009730 <__ieee754_pow+0x250>)
 800950c:	4193      	sbcs	r3, r2
 800950e:	f080 84d2 	bcs.w	8009eb6 <__ieee754_pow+0x9d6>
 8009512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009516:	4630      	mov	r0, r6
 8009518:	4639      	mov	r1, r7
 800951a:	f7f6 febf 	bl	800029c <__adddf3>
 800951e:	ec41 0b10 	vmov	d0, r0, r1
 8009522:	b009      	add	sp, #36	; 0x24
 8009524:	ecbd 8b06 	vpop	{d8-d10}
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	4b81      	ldr	r3, [pc, #516]	; (8009734 <__ieee754_pow+0x254>)
 800952e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009532:	429c      	cmp	r4, r3
 8009534:	ee10 aa10 	vmov	sl, s0
 8009538:	463d      	mov	r5, r7
 800953a:	dc06      	bgt.n	800954a <__ieee754_pow+0x6a>
 800953c:	d101      	bne.n	8009542 <__ieee754_pow+0x62>
 800953e:	2e00      	cmp	r6, #0
 8009540:	d1e7      	bne.n	8009512 <__ieee754_pow+0x32>
 8009542:	4598      	cmp	r8, r3
 8009544:	dc01      	bgt.n	800954a <__ieee754_pow+0x6a>
 8009546:	d10f      	bne.n	8009568 <__ieee754_pow+0x88>
 8009548:	b172      	cbz	r2, 8009568 <__ieee754_pow+0x88>
 800954a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800954e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009552:	ea55 050a 	orrs.w	r5, r5, sl
 8009556:	d1dc      	bne.n	8009512 <__ieee754_pow+0x32>
 8009558:	e9dd 3200 	ldrd	r3, r2, [sp]
 800955c:	18db      	adds	r3, r3, r3
 800955e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009562:	4152      	adcs	r2, r2
 8009564:	429d      	cmp	r5, r3
 8009566:	e7d0      	b.n	800950a <__ieee754_pow+0x2a>
 8009568:	2d00      	cmp	r5, #0
 800956a:	da3b      	bge.n	80095e4 <__ieee754_pow+0x104>
 800956c:	4b72      	ldr	r3, [pc, #456]	; (8009738 <__ieee754_pow+0x258>)
 800956e:	4598      	cmp	r8, r3
 8009570:	dc51      	bgt.n	8009616 <__ieee754_pow+0x136>
 8009572:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009576:	4598      	cmp	r8, r3
 8009578:	f340 84ac 	ble.w	8009ed4 <__ieee754_pow+0x9f4>
 800957c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009580:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009584:	2b14      	cmp	r3, #20
 8009586:	dd0f      	ble.n	80095a8 <__ieee754_pow+0xc8>
 8009588:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800958c:	fa22 f103 	lsr.w	r1, r2, r3
 8009590:	fa01 f303 	lsl.w	r3, r1, r3
 8009594:	4293      	cmp	r3, r2
 8009596:	f040 849d 	bne.w	8009ed4 <__ieee754_pow+0x9f4>
 800959a:	f001 0101 	and.w	r1, r1, #1
 800959e:	f1c1 0302 	rsb	r3, r1, #2
 80095a2:	9304      	str	r3, [sp, #16]
 80095a4:	b182      	cbz	r2, 80095c8 <__ieee754_pow+0xe8>
 80095a6:	e05f      	b.n	8009668 <__ieee754_pow+0x188>
 80095a8:	2a00      	cmp	r2, #0
 80095aa:	d15b      	bne.n	8009664 <__ieee754_pow+0x184>
 80095ac:	f1c3 0314 	rsb	r3, r3, #20
 80095b0:	fa48 f103 	asr.w	r1, r8, r3
 80095b4:	fa01 f303 	lsl.w	r3, r1, r3
 80095b8:	4543      	cmp	r3, r8
 80095ba:	f040 8488 	bne.w	8009ece <__ieee754_pow+0x9ee>
 80095be:	f001 0101 	and.w	r1, r1, #1
 80095c2:	f1c1 0302 	rsb	r3, r1, #2
 80095c6:	9304      	str	r3, [sp, #16]
 80095c8:	4b5c      	ldr	r3, [pc, #368]	; (800973c <__ieee754_pow+0x25c>)
 80095ca:	4598      	cmp	r8, r3
 80095cc:	d132      	bne.n	8009634 <__ieee754_pow+0x154>
 80095ce:	f1b9 0f00 	cmp.w	r9, #0
 80095d2:	f280 8478 	bge.w	8009ec6 <__ieee754_pow+0x9e6>
 80095d6:	4959      	ldr	r1, [pc, #356]	; (800973c <__ieee754_pow+0x25c>)
 80095d8:	4632      	mov	r2, r6
 80095da:	463b      	mov	r3, r7
 80095dc:	2000      	movs	r0, #0
 80095de:	f7f7 f93d 	bl	800085c <__aeabi_ddiv>
 80095e2:	e79c      	b.n	800951e <__ieee754_pow+0x3e>
 80095e4:	2300      	movs	r3, #0
 80095e6:	9304      	str	r3, [sp, #16]
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	d13d      	bne.n	8009668 <__ieee754_pow+0x188>
 80095ec:	4b51      	ldr	r3, [pc, #324]	; (8009734 <__ieee754_pow+0x254>)
 80095ee:	4598      	cmp	r8, r3
 80095f0:	d1ea      	bne.n	80095c8 <__ieee754_pow+0xe8>
 80095f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80095f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80095fa:	ea53 030a 	orrs.w	r3, r3, sl
 80095fe:	f000 845a 	beq.w	8009eb6 <__ieee754_pow+0x9d6>
 8009602:	4b4f      	ldr	r3, [pc, #316]	; (8009740 <__ieee754_pow+0x260>)
 8009604:	429c      	cmp	r4, r3
 8009606:	dd08      	ble.n	800961a <__ieee754_pow+0x13a>
 8009608:	f1b9 0f00 	cmp.w	r9, #0
 800960c:	f2c0 8457 	blt.w	8009ebe <__ieee754_pow+0x9de>
 8009610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009614:	e783      	b.n	800951e <__ieee754_pow+0x3e>
 8009616:	2302      	movs	r3, #2
 8009618:	e7e5      	b.n	80095e6 <__ieee754_pow+0x106>
 800961a:	f1b9 0f00 	cmp.w	r9, #0
 800961e:	f04f 0000 	mov.w	r0, #0
 8009622:	f04f 0100 	mov.w	r1, #0
 8009626:	f6bf af7a 	bge.w	800951e <__ieee754_pow+0x3e>
 800962a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800962e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009632:	e774      	b.n	800951e <__ieee754_pow+0x3e>
 8009634:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009638:	d106      	bne.n	8009648 <__ieee754_pow+0x168>
 800963a:	4632      	mov	r2, r6
 800963c:	463b      	mov	r3, r7
 800963e:	4630      	mov	r0, r6
 8009640:	4639      	mov	r1, r7
 8009642:	f7f6 ffe1 	bl	8000608 <__aeabi_dmul>
 8009646:	e76a      	b.n	800951e <__ieee754_pow+0x3e>
 8009648:	4b3e      	ldr	r3, [pc, #248]	; (8009744 <__ieee754_pow+0x264>)
 800964a:	4599      	cmp	r9, r3
 800964c:	d10c      	bne.n	8009668 <__ieee754_pow+0x188>
 800964e:	2d00      	cmp	r5, #0
 8009650:	db0a      	blt.n	8009668 <__ieee754_pow+0x188>
 8009652:	ec47 6b10 	vmov	d0, r6, r7
 8009656:	b009      	add	sp, #36	; 0x24
 8009658:	ecbd 8b06 	vpop	{d8-d10}
 800965c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	f000 bc6c 	b.w	8009f3c <__ieee754_sqrt>
 8009664:	2300      	movs	r3, #0
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	ec47 6b10 	vmov	d0, r6, r7
 800966c:	f001 fb6c 	bl	800ad48 <fabs>
 8009670:	ec51 0b10 	vmov	r0, r1, d0
 8009674:	f1ba 0f00 	cmp.w	sl, #0
 8009678:	d129      	bne.n	80096ce <__ieee754_pow+0x1ee>
 800967a:	b124      	cbz	r4, 8009686 <__ieee754_pow+0x1a6>
 800967c:	4b2f      	ldr	r3, [pc, #188]	; (800973c <__ieee754_pow+0x25c>)
 800967e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009682:	429a      	cmp	r2, r3
 8009684:	d123      	bne.n	80096ce <__ieee754_pow+0x1ee>
 8009686:	f1b9 0f00 	cmp.w	r9, #0
 800968a:	da05      	bge.n	8009698 <__ieee754_pow+0x1b8>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	2000      	movs	r0, #0
 8009692:	492a      	ldr	r1, [pc, #168]	; (800973c <__ieee754_pow+0x25c>)
 8009694:	f7f7 f8e2 	bl	800085c <__aeabi_ddiv>
 8009698:	2d00      	cmp	r5, #0
 800969a:	f6bf af40 	bge.w	800951e <__ieee754_pow+0x3e>
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80096a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80096a8:	4323      	orrs	r3, r4
 80096aa:	d108      	bne.n	80096be <__ieee754_pow+0x1de>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4610      	mov	r0, r2
 80096b2:	4619      	mov	r1, r3
 80096b4:	f7f6 fdf0 	bl	8000298 <__aeabi_dsub>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	e78f      	b.n	80095de <__ieee754_pow+0xfe>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	f47f af2c 	bne.w	800951e <__ieee754_pow+0x3e>
 80096c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ca:	4619      	mov	r1, r3
 80096cc:	e727      	b.n	800951e <__ieee754_pow+0x3e>
 80096ce:	0feb      	lsrs	r3, r5, #31
 80096d0:	3b01      	subs	r3, #1
 80096d2:	9306      	str	r3, [sp, #24]
 80096d4:	9a06      	ldr	r2, [sp, #24]
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	d102      	bne.n	80096e2 <__ieee754_pow+0x202>
 80096dc:	4632      	mov	r2, r6
 80096de:	463b      	mov	r3, r7
 80096e0:	e7e6      	b.n	80096b0 <__ieee754_pow+0x1d0>
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <__ieee754_pow+0x268>)
 80096e4:	4598      	cmp	r8, r3
 80096e6:	f340 80fb 	ble.w	80098e0 <__ieee754_pow+0x400>
 80096ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80096ee:	4598      	cmp	r8, r3
 80096f0:	4b13      	ldr	r3, [pc, #76]	; (8009740 <__ieee754_pow+0x260>)
 80096f2:	dd0c      	ble.n	800970e <__ieee754_pow+0x22e>
 80096f4:	429c      	cmp	r4, r3
 80096f6:	dc0f      	bgt.n	8009718 <__ieee754_pow+0x238>
 80096f8:	f1b9 0f00 	cmp.w	r9, #0
 80096fc:	da0f      	bge.n	800971e <__ieee754_pow+0x23e>
 80096fe:	2000      	movs	r0, #0
 8009700:	b009      	add	sp, #36	; 0x24
 8009702:	ecbd 8b06 	vpop	{d8-d10}
 8009706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	f001 bb14 	b.w	800ad36 <__math_oflow>
 800970e:	429c      	cmp	r4, r3
 8009710:	dbf2      	blt.n	80096f8 <__ieee754_pow+0x218>
 8009712:	4b0a      	ldr	r3, [pc, #40]	; (800973c <__ieee754_pow+0x25c>)
 8009714:	429c      	cmp	r4, r3
 8009716:	dd19      	ble.n	800974c <__ieee754_pow+0x26c>
 8009718:	f1b9 0f00 	cmp.w	r9, #0
 800971c:	dcef      	bgt.n	80096fe <__ieee754_pow+0x21e>
 800971e:	2000      	movs	r0, #0
 8009720:	b009      	add	sp, #36	; 0x24
 8009722:	ecbd 8b06 	vpop	{d8-d10}
 8009726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f001 bafb 	b.w	800ad24 <__math_uflow>
 800972e:	bf00      	nop
 8009730:	fff00000 	.word	0xfff00000
 8009734:	7ff00000 	.word	0x7ff00000
 8009738:	433fffff 	.word	0x433fffff
 800973c:	3ff00000 	.word	0x3ff00000
 8009740:	3fefffff 	.word	0x3fefffff
 8009744:	3fe00000 	.word	0x3fe00000
 8009748:	41e00000 	.word	0x41e00000
 800974c:	4b60      	ldr	r3, [pc, #384]	; (80098d0 <__ieee754_pow+0x3f0>)
 800974e:	2200      	movs	r2, #0
 8009750:	f7f6 fda2 	bl	8000298 <__aeabi_dsub>
 8009754:	a354      	add	r3, pc, #336	; (adr r3, 80098a8 <__ieee754_pow+0x3c8>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	4604      	mov	r4, r0
 800975c:	460d      	mov	r5, r1
 800975e:	f7f6 ff53 	bl	8000608 <__aeabi_dmul>
 8009762:	a353      	add	r3, pc, #332	; (adr r3, 80098b0 <__ieee754_pow+0x3d0>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	4606      	mov	r6, r0
 800976a:	460f      	mov	r7, r1
 800976c:	4620      	mov	r0, r4
 800976e:	4629      	mov	r1, r5
 8009770:	f7f6 ff4a 	bl	8000608 <__aeabi_dmul>
 8009774:	4b57      	ldr	r3, [pc, #348]	; (80098d4 <__ieee754_pow+0x3f4>)
 8009776:	4682      	mov	sl, r0
 8009778:	468b      	mov	fp, r1
 800977a:	2200      	movs	r2, #0
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f6 ff42 	bl	8000608 <__aeabi_dmul>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	a14b      	add	r1, pc, #300	; (adr r1, 80098b8 <__ieee754_pow+0x3d8>)
 800978a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800978e:	f7f6 fd83 	bl	8000298 <__aeabi_dsub>
 8009792:	4622      	mov	r2, r4
 8009794:	462b      	mov	r3, r5
 8009796:	f7f6 ff37 	bl	8000608 <__aeabi_dmul>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	2000      	movs	r0, #0
 80097a0:	494d      	ldr	r1, [pc, #308]	; (80098d8 <__ieee754_pow+0x3f8>)
 80097a2:	f7f6 fd79 	bl	8000298 <__aeabi_dsub>
 80097a6:	4622      	mov	r2, r4
 80097a8:	4680      	mov	r8, r0
 80097aa:	4689      	mov	r9, r1
 80097ac:	462b      	mov	r3, r5
 80097ae:	4620      	mov	r0, r4
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7f6 ff29 	bl	8000608 <__aeabi_dmul>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4640      	mov	r0, r8
 80097bc:	4649      	mov	r1, r9
 80097be:	f7f6 ff23 	bl	8000608 <__aeabi_dmul>
 80097c2:	a33f      	add	r3, pc, #252	; (adr r3, 80098c0 <__ieee754_pow+0x3e0>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	f7f6 ff1e 	bl	8000608 <__aeabi_dmul>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4650      	mov	r0, sl
 80097d2:	4659      	mov	r1, fp
 80097d4:	f7f6 fd60 	bl	8000298 <__aeabi_dsub>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4680      	mov	r8, r0
 80097de:	4689      	mov	r9, r1
 80097e0:	4630      	mov	r0, r6
 80097e2:	4639      	mov	r1, r7
 80097e4:	f7f6 fd5a 	bl	800029c <__adddf3>
 80097e8:	2000      	movs	r0, #0
 80097ea:	4632      	mov	r2, r6
 80097ec:	463b      	mov	r3, r7
 80097ee:	4604      	mov	r4, r0
 80097f0:	460d      	mov	r5, r1
 80097f2:	f7f6 fd51 	bl	8000298 <__aeabi_dsub>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4640      	mov	r0, r8
 80097fc:	4649      	mov	r1, r9
 80097fe:	f7f6 fd4b 	bl	8000298 <__aeabi_dsub>
 8009802:	9b04      	ldr	r3, [sp, #16]
 8009804:	9a06      	ldr	r2, [sp, #24]
 8009806:	3b01      	subs	r3, #1
 8009808:	4313      	orrs	r3, r2
 800980a:	4682      	mov	sl, r0
 800980c:	468b      	mov	fp, r1
 800980e:	f040 81e7 	bne.w	8009be0 <__ieee754_pow+0x700>
 8009812:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80098c8 <__ieee754_pow+0x3e8>
 8009816:	eeb0 8a47 	vmov.f32	s16, s14
 800981a:	eef0 8a67 	vmov.f32	s17, s15
 800981e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009822:	2600      	movs	r6, #0
 8009824:	4632      	mov	r2, r6
 8009826:	463b      	mov	r3, r7
 8009828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800982c:	f7f6 fd34 	bl	8000298 <__aeabi_dsub>
 8009830:	4622      	mov	r2, r4
 8009832:	462b      	mov	r3, r5
 8009834:	f7f6 fee8 	bl	8000608 <__aeabi_dmul>
 8009838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800983c:	4680      	mov	r8, r0
 800983e:	4689      	mov	r9, r1
 8009840:	4650      	mov	r0, sl
 8009842:	4659      	mov	r1, fp
 8009844:	f7f6 fee0 	bl	8000608 <__aeabi_dmul>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4640      	mov	r0, r8
 800984e:	4649      	mov	r1, r9
 8009850:	f7f6 fd24 	bl	800029c <__adddf3>
 8009854:	4632      	mov	r2, r6
 8009856:	463b      	mov	r3, r7
 8009858:	4680      	mov	r8, r0
 800985a:	4689      	mov	r9, r1
 800985c:	4620      	mov	r0, r4
 800985e:	4629      	mov	r1, r5
 8009860:	f7f6 fed2 	bl	8000608 <__aeabi_dmul>
 8009864:	460b      	mov	r3, r1
 8009866:	4604      	mov	r4, r0
 8009868:	460d      	mov	r5, r1
 800986a:	4602      	mov	r2, r0
 800986c:	4649      	mov	r1, r9
 800986e:	4640      	mov	r0, r8
 8009870:	f7f6 fd14 	bl	800029c <__adddf3>
 8009874:	4b19      	ldr	r3, [pc, #100]	; (80098dc <__ieee754_pow+0x3fc>)
 8009876:	4299      	cmp	r1, r3
 8009878:	ec45 4b19 	vmov	d9, r4, r5
 800987c:	4606      	mov	r6, r0
 800987e:	460f      	mov	r7, r1
 8009880:	468b      	mov	fp, r1
 8009882:	f340 82f1 	ble.w	8009e68 <__ieee754_pow+0x988>
 8009886:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800988a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800988e:	4303      	orrs	r3, r0
 8009890:	f000 81e4 	beq.w	8009c5c <__ieee754_pow+0x77c>
 8009894:	ec51 0b18 	vmov	r0, r1, d8
 8009898:	2200      	movs	r2, #0
 800989a:	2300      	movs	r3, #0
 800989c:	f7f7 f926 	bl	8000aec <__aeabi_dcmplt>
 80098a0:	3800      	subs	r0, #0
 80098a2:	bf18      	it	ne
 80098a4:	2001      	movne	r0, #1
 80098a6:	e72b      	b.n	8009700 <__ieee754_pow+0x220>
 80098a8:	60000000 	.word	0x60000000
 80098ac:	3ff71547 	.word	0x3ff71547
 80098b0:	f85ddf44 	.word	0xf85ddf44
 80098b4:	3e54ae0b 	.word	0x3e54ae0b
 80098b8:	55555555 	.word	0x55555555
 80098bc:	3fd55555 	.word	0x3fd55555
 80098c0:	652b82fe 	.word	0x652b82fe
 80098c4:	3ff71547 	.word	0x3ff71547
 80098c8:	00000000 	.word	0x00000000
 80098cc:	bff00000 	.word	0xbff00000
 80098d0:	3ff00000 	.word	0x3ff00000
 80098d4:	3fd00000 	.word	0x3fd00000
 80098d8:	3fe00000 	.word	0x3fe00000
 80098dc:	408fffff 	.word	0x408fffff
 80098e0:	4bd5      	ldr	r3, [pc, #852]	; (8009c38 <__ieee754_pow+0x758>)
 80098e2:	402b      	ands	r3, r5
 80098e4:	2200      	movs	r2, #0
 80098e6:	b92b      	cbnz	r3, 80098f4 <__ieee754_pow+0x414>
 80098e8:	4bd4      	ldr	r3, [pc, #848]	; (8009c3c <__ieee754_pow+0x75c>)
 80098ea:	f7f6 fe8d 	bl	8000608 <__aeabi_dmul>
 80098ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80098f2:	460c      	mov	r4, r1
 80098f4:	1523      	asrs	r3, r4, #20
 80098f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098fa:	4413      	add	r3, r2
 80098fc:	9305      	str	r3, [sp, #20]
 80098fe:	4bd0      	ldr	r3, [pc, #832]	; (8009c40 <__ieee754_pow+0x760>)
 8009900:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009904:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009908:	429c      	cmp	r4, r3
 800990a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800990e:	dd08      	ble.n	8009922 <__ieee754_pow+0x442>
 8009910:	4bcc      	ldr	r3, [pc, #816]	; (8009c44 <__ieee754_pow+0x764>)
 8009912:	429c      	cmp	r4, r3
 8009914:	f340 8162 	ble.w	8009bdc <__ieee754_pow+0x6fc>
 8009918:	9b05      	ldr	r3, [sp, #20]
 800991a:	3301      	adds	r3, #1
 800991c:	9305      	str	r3, [sp, #20]
 800991e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009922:	2400      	movs	r4, #0
 8009924:	00e3      	lsls	r3, r4, #3
 8009926:	9307      	str	r3, [sp, #28]
 8009928:	4bc7      	ldr	r3, [pc, #796]	; (8009c48 <__ieee754_pow+0x768>)
 800992a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800992e:	ed93 7b00 	vldr	d7, [r3]
 8009932:	4629      	mov	r1, r5
 8009934:	ec53 2b17 	vmov	r2, r3, d7
 8009938:	eeb0 9a47 	vmov.f32	s18, s14
 800993c:	eef0 9a67 	vmov.f32	s19, s15
 8009940:	4682      	mov	sl, r0
 8009942:	f7f6 fca9 	bl	8000298 <__aeabi_dsub>
 8009946:	4652      	mov	r2, sl
 8009948:	4606      	mov	r6, r0
 800994a:	460f      	mov	r7, r1
 800994c:	462b      	mov	r3, r5
 800994e:	ec51 0b19 	vmov	r0, r1, d9
 8009952:	f7f6 fca3 	bl	800029c <__adddf3>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	2000      	movs	r0, #0
 800995c:	49bb      	ldr	r1, [pc, #748]	; (8009c4c <__ieee754_pow+0x76c>)
 800995e:	f7f6 ff7d 	bl	800085c <__aeabi_ddiv>
 8009962:	ec41 0b1a 	vmov	d10, r0, r1
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	4630      	mov	r0, r6
 800996c:	4639      	mov	r1, r7
 800996e:	f7f6 fe4b 	bl	8000608 <__aeabi_dmul>
 8009972:	2300      	movs	r3, #0
 8009974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009978:	9302      	str	r3, [sp, #8]
 800997a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800997e:	46ab      	mov	fp, r5
 8009980:	106d      	asrs	r5, r5, #1
 8009982:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009986:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800998a:	ec41 0b18 	vmov	d8, r0, r1
 800998e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009992:	2200      	movs	r2, #0
 8009994:	4640      	mov	r0, r8
 8009996:	4649      	mov	r1, r9
 8009998:	4614      	mov	r4, r2
 800999a:	461d      	mov	r5, r3
 800999c:	f7f6 fe34 	bl	8000608 <__aeabi_dmul>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	f7f6 fc76 	bl	8000298 <__aeabi_dsub>
 80099ac:	ec53 2b19 	vmov	r2, r3, d9
 80099b0:	4606      	mov	r6, r0
 80099b2:	460f      	mov	r7, r1
 80099b4:	4620      	mov	r0, r4
 80099b6:	4629      	mov	r1, r5
 80099b8:	f7f6 fc6e 	bl	8000298 <__aeabi_dsub>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4650      	mov	r0, sl
 80099c2:	4659      	mov	r1, fp
 80099c4:	f7f6 fc68 	bl	8000298 <__aeabi_dsub>
 80099c8:	4642      	mov	r2, r8
 80099ca:	464b      	mov	r3, r9
 80099cc:	f7f6 fe1c 	bl	8000608 <__aeabi_dmul>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4630      	mov	r0, r6
 80099d6:	4639      	mov	r1, r7
 80099d8:	f7f6 fc5e 	bl	8000298 <__aeabi_dsub>
 80099dc:	ec53 2b1a 	vmov	r2, r3, d10
 80099e0:	f7f6 fe12 	bl	8000608 <__aeabi_dmul>
 80099e4:	ec53 2b18 	vmov	r2, r3, d8
 80099e8:	ec41 0b19 	vmov	d9, r0, r1
 80099ec:	ec51 0b18 	vmov	r0, r1, d8
 80099f0:	f7f6 fe0a 	bl	8000608 <__aeabi_dmul>
 80099f4:	a37c      	add	r3, pc, #496	; (adr r3, 8009be8 <__ieee754_pow+0x708>)
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	4604      	mov	r4, r0
 80099fc:	460d      	mov	r5, r1
 80099fe:	f7f6 fe03 	bl	8000608 <__aeabi_dmul>
 8009a02:	a37b      	add	r3, pc, #492	; (adr r3, 8009bf0 <__ieee754_pow+0x710>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f7f6 fc48 	bl	800029c <__adddf3>
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	462b      	mov	r3, r5
 8009a10:	f7f6 fdfa 	bl	8000608 <__aeabi_dmul>
 8009a14:	a378      	add	r3, pc, #480	; (adr r3, 8009bf8 <__ieee754_pow+0x718>)
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f7f6 fc3f 	bl	800029c <__adddf3>
 8009a1e:	4622      	mov	r2, r4
 8009a20:	462b      	mov	r3, r5
 8009a22:	f7f6 fdf1 	bl	8000608 <__aeabi_dmul>
 8009a26:	a376      	add	r3, pc, #472	; (adr r3, 8009c00 <__ieee754_pow+0x720>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f6 fc36 	bl	800029c <__adddf3>
 8009a30:	4622      	mov	r2, r4
 8009a32:	462b      	mov	r3, r5
 8009a34:	f7f6 fde8 	bl	8000608 <__aeabi_dmul>
 8009a38:	a373      	add	r3, pc, #460	; (adr r3, 8009c08 <__ieee754_pow+0x728>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f7f6 fc2d 	bl	800029c <__adddf3>
 8009a42:	4622      	mov	r2, r4
 8009a44:	462b      	mov	r3, r5
 8009a46:	f7f6 fddf 	bl	8000608 <__aeabi_dmul>
 8009a4a:	a371      	add	r3, pc, #452	; (adr r3, 8009c10 <__ieee754_pow+0x730>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fc24 	bl	800029c <__adddf3>
 8009a54:	4622      	mov	r2, r4
 8009a56:	4606      	mov	r6, r0
 8009a58:	460f      	mov	r7, r1
 8009a5a:	462b      	mov	r3, r5
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fdd2 	bl	8000608 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4630      	mov	r0, r6
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	f7f6 fdcc 	bl	8000608 <__aeabi_dmul>
 8009a70:	4642      	mov	r2, r8
 8009a72:	4604      	mov	r4, r0
 8009a74:	460d      	mov	r5, r1
 8009a76:	464b      	mov	r3, r9
 8009a78:	ec51 0b18 	vmov	r0, r1, d8
 8009a7c:	f7f6 fc0e 	bl	800029c <__adddf3>
 8009a80:	ec53 2b19 	vmov	r2, r3, d9
 8009a84:	f7f6 fdc0 	bl	8000608 <__aeabi_dmul>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	f7f6 fc06 	bl	800029c <__adddf3>
 8009a90:	4642      	mov	r2, r8
 8009a92:	4682      	mov	sl, r0
 8009a94:	468b      	mov	fp, r1
 8009a96:	464b      	mov	r3, r9
 8009a98:	4640      	mov	r0, r8
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	f7f6 fdb4 	bl	8000608 <__aeabi_dmul>
 8009aa0:	4b6b      	ldr	r3, [pc, #428]	; (8009c50 <__ieee754_pow+0x770>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	460f      	mov	r7, r1
 8009aa8:	f7f6 fbf8 	bl	800029c <__adddf3>
 8009aac:	4652      	mov	r2, sl
 8009aae:	465b      	mov	r3, fp
 8009ab0:	f7f6 fbf4 	bl	800029c <__adddf3>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	460d      	mov	r5, r1
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4640      	mov	r0, r8
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	f7f6 fda1 	bl	8000608 <__aeabi_dmul>
 8009ac6:	4b62      	ldr	r3, [pc, #392]	; (8009c50 <__ieee754_pow+0x770>)
 8009ac8:	4680      	mov	r8, r0
 8009aca:	4689      	mov	r9, r1
 8009acc:	2200      	movs	r2, #0
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	f7f6 fbe1 	bl	8000298 <__aeabi_dsub>
 8009ad6:	4632      	mov	r2, r6
 8009ad8:	463b      	mov	r3, r7
 8009ada:	f7f6 fbdd 	bl	8000298 <__aeabi_dsub>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4650      	mov	r0, sl
 8009ae4:	4659      	mov	r1, fp
 8009ae6:	f7f6 fbd7 	bl	8000298 <__aeabi_dsub>
 8009aea:	ec53 2b18 	vmov	r2, r3, d8
 8009aee:	f7f6 fd8b 	bl	8000608 <__aeabi_dmul>
 8009af2:	4622      	mov	r2, r4
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	462b      	mov	r3, r5
 8009afa:	ec51 0b19 	vmov	r0, r1, d9
 8009afe:	f7f6 fd83 	bl	8000608 <__aeabi_dmul>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4630      	mov	r0, r6
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7f6 fbc7 	bl	800029c <__adddf3>
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460f      	mov	r7, r1
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4640      	mov	r0, r8
 8009b18:	4649      	mov	r1, r9
 8009b1a:	f7f6 fbbf 	bl	800029c <__adddf3>
 8009b1e:	a33e      	add	r3, pc, #248	; (adr r3, 8009c18 <__ieee754_pow+0x738>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	2000      	movs	r0, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	460d      	mov	r5, r1
 8009b2a:	f7f6 fd6d 	bl	8000608 <__aeabi_dmul>
 8009b2e:	4642      	mov	r2, r8
 8009b30:	ec41 0b18 	vmov	d8, r0, r1
 8009b34:	464b      	mov	r3, r9
 8009b36:	4620      	mov	r0, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	f7f6 fbad 	bl	8000298 <__aeabi_dsub>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4630      	mov	r0, r6
 8009b44:	4639      	mov	r1, r7
 8009b46:	f7f6 fba7 	bl	8000298 <__aeabi_dsub>
 8009b4a:	a335      	add	r3, pc, #212	; (adr r3, 8009c20 <__ieee754_pow+0x740>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f7f6 fd5a 	bl	8000608 <__aeabi_dmul>
 8009b54:	a334      	add	r3, pc, #208	; (adr r3, 8009c28 <__ieee754_pow+0x748>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 fd51 	bl	8000608 <__aeabi_dmul>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	f7f6 fb95 	bl	800029c <__adddf3>
 8009b72:	9a07      	ldr	r2, [sp, #28]
 8009b74:	4b37      	ldr	r3, [pc, #220]	; (8009c54 <__ieee754_pow+0x774>)
 8009b76:	4413      	add	r3, r2
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 fb8e 	bl	800029c <__adddf3>
 8009b80:	4682      	mov	sl, r0
 8009b82:	9805      	ldr	r0, [sp, #20]
 8009b84:	468b      	mov	fp, r1
 8009b86:	f7f6 fcd5 	bl	8000534 <__aeabi_i2d>
 8009b8a:	9a07      	ldr	r2, [sp, #28]
 8009b8c:	4b32      	ldr	r3, [pc, #200]	; (8009c58 <__ieee754_pow+0x778>)
 8009b8e:	4413      	add	r3, r2
 8009b90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b94:	4606      	mov	r6, r0
 8009b96:	460f      	mov	r7, r1
 8009b98:	4652      	mov	r2, sl
 8009b9a:	465b      	mov	r3, fp
 8009b9c:	ec51 0b18 	vmov	r0, r1, d8
 8009ba0:	f7f6 fb7c 	bl	800029c <__adddf3>
 8009ba4:	4642      	mov	r2, r8
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	f7f6 fb78 	bl	800029c <__adddf3>
 8009bac:	4632      	mov	r2, r6
 8009bae:	463b      	mov	r3, r7
 8009bb0:	f7f6 fb74 	bl	800029c <__adddf3>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	463b      	mov	r3, r7
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	f7f6 fb6b 	bl	8000298 <__aeabi_dsub>
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	f7f6 fb67 	bl	8000298 <__aeabi_dsub>
 8009bca:	ec53 2b18 	vmov	r2, r3, d8
 8009bce:	f7f6 fb63 	bl	8000298 <__aeabi_dsub>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4659      	mov	r1, fp
 8009bda:	e610      	b.n	80097fe <__ieee754_pow+0x31e>
 8009bdc:	2401      	movs	r4, #1
 8009bde:	e6a1      	b.n	8009924 <__ieee754_pow+0x444>
 8009be0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009c30 <__ieee754_pow+0x750>
 8009be4:	e617      	b.n	8009816 <__ieee754_pow+0x336>
 8009be6:	bf00      	nop
 8009be8:	4a454eef 	.word	0x4a454eef
 8009bec:	3fca7e28 	.word	0x3fca7e28
 8009bf0:	93c9db65 	.word	0x93c9db65
 8009bf4:	3fcd864a 	.word	0x3fcd864a
 8009bf8:	a91d4101 	.word	0xa91d4101
 8009bfc:	3fd17460 	.word	0x3fd17460
 8009c00:	518f264d 	.word	0x518f264d
 8009c04:	3fd55555 	.word	0x3fd55555
 8009c08:	db6fabff 	.word	0xdb6fabff
 8009c0c:	3fdb6db6 	.word	0x3fdb6db6
 8009c10:	33333303 	.word	0x33333303
 8009c14:	3fe33333 	.word	0x3fe33333
 8009c18:	e0000000 	.word	0xe0000000
 8009c1c:	3feec709 	.word	0x3feec709
 8009c20:	dc3a03fd 	.word	0xdc3a03fd
 8009c24:	3feec709 	.word	0x3feec709
 8009c28:	145b01f5 	.word	0x145b01f5
 8009c2c:	be3e2fe0 	.word	0xbe3e2fe0
 8009c30:	00000000 	.word	0x00000000
 8009c34:	3ff00000 	.word	0x3ff00000
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	43400000 	.word	0x43400000
 8009c40:	0003988e 	.word	0x0003988e
 8009c44:	000bb679 	.word	0x000bb679
 8009c48:	0800b4c0 	.word	0x0800b4c0
 8009c4c:	3ff00000 	.word	0x3ff00000
 8009c50:	40080000 	.word	0x40080000
 8009c54:	0800b4e0 	.word	0x0800b4e0
 8009c58:	0800b4d0 	.word	0x0800b4d0
 8009c5c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009f34 <__ieee754_pow+0xa54>)
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	4640      	mov	r0, r8
 8009c64:	4649      	mov	r1, r9
 8009c66:	f7f6 fb19 	bl	800029c <__adddf3>
 8009c6a:	4622      	mov	r2, r4
 8009c6c:	ec41 0b1a 	vmov	d10, r0, r1
 8009c70:	462b      	mov	r3, r5
 8009c72:	4630      	mov	r0, r6
 8009c74:	4639      	mov	r1, r7
 8009c76:	f7f6 fb0f 	bl	8000298 <__aeabi_dsub>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	ec51 0b1a 	vmov	r0, r1, d10
 8009c82:	f7f6 ff51 	bl	8000b28 <__aeabi_dcmpgt>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f47f ae04 	bne.w	8009894 <__ieee754_pow+0x3b4>
 8009c8c:	4aa4      	ldr	r2, [pc, #656]	; (8009f20 <__ieee754_pow+0xa40>)
 8009c8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c92:	4293      	cmp	r3, r2
 8009c94:	f340 8108 	ble.w	8009ea8 <__ieee754_pow+0x9c8>
 8009c98:	151b      	asrs	r3, r3, #20
 8009c9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ca2:	fa4a f303 	asr.w	r3, sl, r3
 8009ca6:	445b      	add	r3, fp
 8009ca8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009cac:	4e9d      	ldr	r6, [pc, #628]	; (8009f24 <__ieee754_pow+0xa44>)
 8009cae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009cb2:	4116      	asrs	r6, r2
 8009cb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009cb8:	2000      	movs	r0, #0
 8009cba:	ea23 0106 	bic.w	r1, r3, r6
 8009cbe:	f1c2 0214 	rsb	r2, r2, #20
 8009cc2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009cc6:	fa4a fa02 	asr.w	sl, sl, r2
 8009cca:	f1bb 0f00 	cmp.w	fp, #0
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	bfb8      	it	lt
 8009cd8:	f1ca 0a00 	rsblt	sl, sl, #0
 8009cdc:	f7f6 fadc 	bl	8000298 <__aeabi_dsub>
 8009ce0:	ec41 0b19 	vmov	d9, r0, r1
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	ec51 0b19 	vmov	r0, r1, d9
 8009cec:	f7f6 fad6 	bl	800029c <__adddf3>
 8009cf0:	a37b      	add	r3, pc, #492	; (adr r3, 8009ee0 <__ieee754_pow+0xa00>)
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	f7f6 fc84 	bl	8000608 <__aeabi_dmul>
 8009d00:	ec53 2b19 	vmov	r2, r3, d9
 8009d04:	4606      	mov	r6, r0
 8009d06:	460f      	mov	r7, r1
 8009d08:	4620      	mov	r0, r4
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f7f6 fac4 	bl	8000298 <__aeabi_dsub>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4640      	mov	r0, r8
 8009d16:	4649      	mov	r1, r9
 8009d18:	f7f6 fabe 	bl	8000298 <__aeabi_dsub>
 8009d1c:	a372      	add	r3, pc, #456	; (adr r3, 8009ee8 <__ieee754_pow+0xa08>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fc71 	bl	8000608 <__aeabi_dmul>
 8009d26:	a372      	add	r3, pc, #456	; (adr r3, 8009ef0 <__ieee754_pow+0xa10>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	4620      	mov	r0, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	f7f6 fc68 	bl	8000608 <__aeabi_dmul>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	4649      	mov	r1, r9
 8009d40:	f7f6 faac 	bl	800029c <__adddf3>
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	f7f6 faa4 	bl	800029c <__adddf3>
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	4680      	mov	r8, r0
 8009d5a:	4689      	mov	r9, r1
 8009d5c:	f7f6 fa9c 	bl	8000298 <__aeabi_dsub>
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4620      	mov	r0, r4
 8009d66:	4629      	mov	r1, r5
 8009d68:	f7f6 fa96 	bl	8000298 <__aeabi_dsub>
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460f      	mov	r7, r1
 8009d72:	464b      	mov	r3, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	4649      	mov	r1, r9
 8009d78:	f7f6 fc46 	bl	8000608 <__aeabi_dmul>
 8009d7c:	a35e      	add	r3, pc, #376	; (adr r3, 8009ef8 <__ieee754_pow+0xa18>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	4604      	mov	r4, r0
 8009d84:	460d      	mov	r5, r1
 8009d86:	f7f6 fc3f 	bl	8000608 <__aeabi_dmul>
 8009d8a:	a35d      	add	r3, pc, #372	; (adr r3, 8009f00 <__ieee754_pow+0xa20>)
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	f7f6 fa82 	bl	8000298 <__aeabi_dsub>
 8009d94:	4622      	mov	r2, r4
 8009d96:	462b      	mov	r3, r5
 8009d98:	f7f6 fc36 	bl	8000608 <__aeabi_dmul>
 8009d9c:	a35a      	add	r3, pc, #360	; (adr r3, 8009f08 <__ieee754_pow+0xa28>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 fa7b 	bl	800029c <__adddf3>
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	f7f6 fc2d 	bl	8000608 <__aeabi_dmul>
 8009dae:	a358      	add	r3, pc, #352	; (adr r3, 8009f10 <__ieee754_pow+0xa30>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f7f6 fa70 	bl	8000298 <__aeabi_dsub>
 8009db8:	4622      	mov	r2, r4
 8009dba:	462b      	mov	r3, r5
 8009dbc:	f7f6 fc24 	bl	8000608 <__aeabi_dmul>
 8009dc0:	a355      	add	r3, pc, #340	; (adr r3, 8009f18 <__ieee754_pow+0xa38>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fa69 	bl	800029c <__adddf3>
 8009dca:	4622      	mov	r2, r4
 8009dcc:	462b      	mov	r3, r5
 8009dce:	f7f6 fc1b 	bl	8000608 <__aeabi_dmul>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fa5d 	bl	8000298 <__aeabi_dsub>
 8009dde:	4604      	mov	r4, r0
 8009de0:	460d      	mov	r5, r1
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	4640      	mov	r0, r8
 8009de8:	4649      	mov	r1, r9
 8009dea:	f7f6 fc0d 	bl	8000608 <__aeabi_dmul>
 8009dee:	2200      	movs	r2, #0
 8009df0:	ec41 0b19 	vmov	d9, r0, r1
 8009df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 fa4c 	bl	8000298 <__aeabi_dsub>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	ec51 0b19 	vmov	r0, r1, d9
 8009e08:	f7f6 fd28 	bl	800085c <__aeabi_ddiv>
 8009e0c:	4632      	mov	r2, r6
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	463b      	mov	r3, r7
 8009e14:	4640      	mov	r0, r8
 8009e16:	4649      	mov	r1, r9
 8009e18:	f7f6 fbf6 	bl	8000608 <__aeabi_dmul>
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	463b      	mov	r3, r7
 8009e20:	f7f6 fa3c 	bl	800029c <__adddf3>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 fa34 	bl	8000298 <__aeabi_dsub>
 8009e30:	4642      	mov	r2, r8
 8009e32:	464b      	mov	r3, r9
 8009e34:	f7f6 fa30 	bl	8000298 <__aeabi_dsub>
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	493a      	ldr	r1, [pc, #232]	; (8009f28 <__ieee754_pow+0xa48>)
 8009e3e:	2000      	movs	r0, #0
 8009e40:	f7f6 fa2a 	bl	8000298 <__aeabi_dsub>
 8009e44:	ec41 0b10 	vmov	d0, r0, r1
 8009e48:	ee10 3a90 	vmov	r3, s1
 8009e4c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e54:	da2b      	bge.n	8009eae <__ieee754_pow+0x9ce>
 8009e56:	4650      	mov	r0, sl
 8009e58:	f000 ff8a 	bl	800ad70 <scalbn>
 8009e5c:	ec51 0b10 	vmov	r0, r1, d0
 8009e60:	ec53 2b18 	vmov	r2, r3, d8
 8009e64:	f7ff bbed 	b.w	8009642 <__ieee754_pow+0x162>
 8009e68:	4b30      	ldr	r3, [pc, #192]	; (8009f2c <__ieee754_pow+0xa4c>)
 8009e6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e6e:	429e      	cmp	r6, r3
 8009e70:	f77f af0c 	ble.w	8009c8c <__ieee754_pow+0x7ac>
 8009e74:	4b2e      	ldr	r3, [pc, #184]	; (8009f30 <__ieee754_pow+0xa50>)
 8009e76:	440b      	add	r3, r1
 8009e78:	4303      	orrs	r3, r0
 8009e7a:	d009      	beq.n	8009e90 <__ieee754_pow+0x9b0>
 8009e7c:	ec51 0b18 	vmov	r0, r1, d8
 8009e80:	2200      	movs	r2, #0
 8009e82:	2300      	movs	r3, #0
 8009e84:	f7f6 fe32 	bl	8000aec <__aeabi_dcmplt>
 8009e88:	3800      	subs	r0, #0
 8009e8a:	bf18      	it	ne
 8009e8c:	2001      	movne	r0, #1
 8009e8e:	e447      	b.n	8009720 <__ieee754_pow+0x240>
 8009e90:	4622      	mov	r2, r4
 8009e92:	462b      	mov	r3, r5
 8009e94:	f7f6 fa00 	bl	8000298 <__aeabi_dsub>
 8009e98:	4642      	mov	r2, r8
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	f7f6 fe3a 	bl	8000b14 <__aeabi_dcmpge>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f43f aef3 	beq.w	8009c8c <__ieee754_pow+0x7ac>
 8009ea6:	e7e9      	b.n	8009e7c <__ieee754_pow+0x99c>
 8009ea8:	f04f 0a00 	mov.w	sl, #0
 8009eac:	e71a      	b.n	8009ce4 <__ieee754_pow+0x804>
 8009eae:	ec51 0b10 	vmov	r0, r1, d0
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	e7d4      	b.n	8009e60 <__ieee754_pow+0x980>
 8009eb6:	491c      	ldr	r1, [pc, #112]	; (8009f28 <__ieee754_pow+0xa48>)
 8009eb8:	2000      	movs	r0, #0
 8009eba:	f7ff bb30 	b.w	800951e <__ieee754_pow+0x3e>
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	f7ff bb2c 	b.w	800951e <__ieee754_pow+0x3e>
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	4639      	mov	r1, r7
 8009eca:	f7ff bb28 	b.w	800951e <__ieee754_pow+0x3e>
 8009ece:	9204      	str	r2, [sp, #16]
 8009ed0:	f7ff bb7a 	b.w	80095c8 <__ieee754_pow+0xe8>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f7ff bb64 	b.w	80095a2 <__ieee754_pow+0xc2>
 8009eda:	bf00      	nop
 8009edc:	f3af 8000 	nop.w
 8009ee0:	00000000 	.word	0x00000000
 8009ee4:	3fe62e43 	.word	0x3fe62e43
 8009ee8:	fefa39ef 	.word	0xfefa39ef
 8009eec:	3fe62e42 	.word	0x3fe62e42
 8009ef0:	0ca86c39 	.word	0x0ca86c39
 8009ef4:	be205c61 	.word	0xbe205c61
 8009ef8:	72bea4d0 	.word	0x72bea4d0
 8009efc:	3e663769 	.word	0x3e663769
 8009f00:	c5d26bf1 	.word	0xc5d26bf1
 8009f04:	3ebbbd41 	.word	0x3ebbbd41
 8009f08:	af25de2c 	.word	0xaf25de2c
 8009f0c:	3f11566a 	.word	0x3f11566a
 8009f10:	16bebd93 	.word	0x16bebd93
 8009f14:	3f66c16c 	.word	0x3f66c16c
 8009f18:	5555553e 	.word	0x5555553e
 8009f1c:	3fc55555 	.word	0x3fc55555
 8009f20:	3fe00000 	.word	0x3fe00000
 8009f24:	000fffff 	.word	0x000fffff
 8009f28:	3ff00000 	.word	0x3ff00000
 8009f2c:	4090cbff 	.word	0x4090cbff
 8009f30:	3f6f3400 	.word	0x3f6f3400
 8009f34:	652b82fe 	.word	0x652b82fe
 8009f38:	3c971547 	.word	0x3c971547

08009f3c <__ieee754_sqrt>:
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	ec55 4b10 	vmov	r4, r5, d0
 8009f44:	4e55      	ldr	r6, [pc, #340]	; (800a09c <__ieee754_sqrt+0x160>)
 8009f46:	43ae      	bics	r6, r5
 8009f48:	ee10 0a10 	vmov	r0, s0
 8009f4c:	ee10 3a10 	vmov	r3, s0
 8009f50:	462a      	mov	r2, r5
 8009f52:	4629      	mov	r1, r5
 8009f54:	d110      	bne.n	8009f78 <__ieee754_sqrt+0x3c>
 8009f56:	ee10 2a10 	vmov	r2, s0
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	f7f6 fb54 	bl	8000608 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7f6 f998 	bl	800029c <__adddf3>
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	ec45 4b10 	vmov	d0, r4, r5
 8009f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f78:	2d00      	cmp	r5, #0
 8009f7a:	dc10      	bgt.n	8009f9e <__ieee754_sqrt+0x62>
 8009f7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f80:	4330      	orrs	r0, r6
 8009f82:	d0f5      	beq.n	8009f70 <__ieee754_sqrt+0x34>
 8009f84:	b15d      	cbz	r5, 8009f9e <__ieee754_sqrt+0x62>
 8009f86:	ee10 2a10 	vmov	r2, s0
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	ee10 0a10 	vmov	r0, s0
 8009f90:	f7f6 f982 	bl	8000298 <__aeabi_dsub>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	f7f6 fc60 	bl	800085c <__aeabi_ddiv>
 8009f9c:	e7e6      	b.n	8009f6c <__ieee754_sqrt+0x30>
 8009f9e:	1512      	asrs	r2, r2, #20
 8009fa0:	d074      	beq.n	800a08c <__ieee754_sqrt+0x150>
 8009fa2:	07d4      	lsls	r4, r2, #31
 8009fa4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009fa8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009fac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009fb0:	bf5e      	ittt	pl
 8009fb2:	0fda      	lsrpl	r2, r3, #31
 8009fb4:	005b      	lslpl	r3, r3, #1
 8009fb6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009fba:	2400      	movs	r4, #0
 8009fbc:	0fda      	lsrs	r2, r3, #31
 8009fbe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009fc2:	107f      	asrs	r7, r7, #1
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	2516      	movs	r5, #22
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009fce:	1886      	adds	r6, r0, r2
 8009fd0:	428e      	cmp	r6, r1
 8009fd2:	bfde      	ittt	le
 8009fd4:	1b89      	suble	r1, r1, r6
 8009fd6:	18b0      	addle	r0, r6, r2
 8009fd8:	18a4      	addle	r4, r4, r2
 8009fda:	0049      	lsls	r1, r1, #1
 8009fdc:	3d01      	subs	r5, #1
 8009fde:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009fe2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009fe6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fea:	d1f0      	bne.n	8009fce <__ieee754_sqrt+0x92>
 8009fec:	462a      	mov	r2, r5
 8009fee:	f04f 0e20 	mov.w	lr, #32
 8009ff2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009ff6:	4281      	cmp	r1, r0
 8009ff8:	eb06 0c05 	add.w	ip, r6, r5
 8009ffc:	dc02      	bgt.n	800a004 <__ieee754_sqrt+0xc8>
 8009ffe:	d113      	bne.n	800a028 <__ieee754_sqrt+0xec>
 800a000:	459c      	cmp	ip, r3
 800a002:	d811      	bhi.n	800a028 <__ieee754_sqrt+0xec>
 800a004:	f1bc 0f00 	cmp.w	ip, #0
 800a008:	eb0c 0506 	add.w	r5, ip, r6
 800a00c:	da43      	bge.n	800a096 <__ieee754_sqrt+0x15a>
 800a00e:	2d00      	cmp	r5, #0
 800a010:	db41      	blt.n	800a096 <__ieee754_sqrt+0x15a>
 800a012:	f100 0801 	add.w	r8, r0, #1
 800a016:	1a09      	subs	r1, r1, r0
 800a018:	459c      	cmp	ip, r3
 800a01a:	bf88      	it	hi
 800a01c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a020:	eba3 030c 	sub.w	r3, r3, ip
 800a024:	4432      	add	r2, r6
 800a026:	4640      	mov	r0, r8
 800a028:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a02c:	f1be 0e01 	subs.w	lr, lr, #1
 800a030:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a034:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a038:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a03c:	d1db      	bne.n	8009ff6 <__ieee754_sqrt+0xba>
 800a03e:	430b      	orrs	r3, r1
 800a040:	d006      	beq.n	800a050 <__ieee754_sqrt+0x114>
 800a042:	1c50      	adds	r0, r2, #1
 800a044:	bf13      	iteet	ne
 800a046:	3201      	addne	r2, #1
 800a048:	3401      	addeq	r4, #1
 800a04a:	4672      	moveq	r2, lr
 800a04c:	f022 0201 	bicne.w	r2, r2, #1
 800a050:	1063      	asrs	r3, r4, #1
 800a052:	0852      	lsrs	r2, r2, #1
 800a054:	07e1      	lsls	r1, r4, #31
 800a056:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a05a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a05e:	bf48      	it	mi
 800a060:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a064:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a068:	4614      	mov	r4, r2
 800a06a:	e781      	b.n	8009f70 <__ieee754_sqrt+0x34>
 800a06c:	0ad9      	lsrs	r1, r3, #11
 800a06e:	3815      	subs	r0, #21
 800a070:	055b      	lsls	r3, r3, #21
 800a072:	2900      	cmp	r1, #0
 800a074:	d0fa      	beq.n	800a06c <__ieee754_sqrt+0x130>
 800a076:	02cd      	lsls	r5, r1, #11
 800a078:	d50a      	bpl.n	800a090 <__ieee754_sqrt+0x154>
 800a07a:	f1c2 0420 	rsb	r4, r2, #32
 800a07e:	fa23 f404 	lsr.w	r4, r3, r4
 800a082:	1e55      	subs	r5, r2, #1
 800a084:	4093      	lsls	r3, r2
 800a086:	4321      	orrs	r1, r4
 800a088:	1b42      	subs	r2, r0, r5
 800a08a:	e78a      	b.n	8009fa2 <__ieee754_sqrt+0x66>
 800a08c:	4610      	mov	r0, r2
 800a08e:	e7f0      	b.n	800a072 <__ieee754_sqrt+0x136>
 800a090:	0049      	lsls	r1, r1, #1
 800a092:	3201      	adds	r2, #1
 800a094:	e7ef      	b.n	800a076 <__ieee754_sqrt+0x13a>
 800a096:	4680      	mov	r8, r0
 800a098:	e7bd      	b.n	800a016 <__ieee754_sqrt+0xda>
 800a09a:	bf00      	nop
 800a09c:	7ff00000 	.word	0x7ff00000

0800a0a0 <__ieee754_asinf>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	ee10 5a10 	vmov	r5, s0
 800a0a6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a0aa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a0ae:	ed2d 8b04 	vpush	{d8-d9}
 800a0b2:	d10c      	bne.n	800a0ce <__ieee754_asinf+0x2e>
 800a0b4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a22c <__ieee754_asinf+0x18c>
 800a0b8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a230 <__ieee754_asinf+0x190>
 800a0bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a0c0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a0c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0c8:	ecbd 8b04 	vpop	{d8-d9}
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	dd04      	ble.n	800a0da <__ieee754_asinf+0x3a>
 800a0d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a0d4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a0d8:	e7f6      	b.n	800a0c8 <__ieee754_asinf+0x28>
 800a0da:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a0de:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a0e2:	da0b      	bge.n	800a0fc <__ieee754_asinf+0x5c>
 800a0e4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a0e8:	da52      	bge.n	800a190 <__ieee754_asinf+0xf0>
 800a0ea:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a234 <__ieee754_asinf+0x194>
 800a0ee:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a0f2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fa:	dce5      	bgt.n	800a0c8 <__ieee754_asinf+0x28>
 800a0fc:	f7ff f8ae 	bl	800925c <fabsf>
 800a100:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a104:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a108:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a10c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a238 <__ieee754_asinf+0x198>
 800a110:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a23c <__ieee754_asinf+0x19c>
 800a114:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a240 <__ieee754_asinf+0x1a0>
 800a118:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a11c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a244 <__ieee754_asinf+0x1a4>
 800a120:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a124:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a248 <__ieee754_asinf+0x1a8>
 800a128:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a12c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a24c <__ieee754_asinf+0x1ac>
 800a130:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a134:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a250 <__ieee754_asinf+0x1b0>
 800a138:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a13c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a254 <__ieee754_asinf+0x1b4>
 800a140:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a144:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a258 <__ieee754_asinf+0x1b8>
 800a148:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a14c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a25c <__ieee754_asinf+0x1bc>
 800a150:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a154:	eeb0 0a48 	vmov.f32	s0, s16
 800a158:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a15c:	f000 f9c2 	bl	800a4e4 <__ieee754_sqrtf>
 800a160:	4b3f      	ldr	r3, [pc, #252]	; (800a260 <__ieee754_asinf+0x1c0>)
 800a162:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a166:	429c      	cmp	r4, r3
 800a168:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a16c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a170:	dd3d      	ble.n	800a1ee <__ieee754_asinf+0x14e>
 800a172:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a176:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a264 <__ieee754_asinf+0x1c4>
 800a17a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a17e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a230 <__ieee754_asinf+0x190>
 800a182:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a186:	2d00      	cmp	r5, #0
 800a188:	bfd8      	it	le
 800a18a:	eeb1 0a40 	vnegle.f32	s0, s0
 800a18e:	e79b      	b.n	800a0c8 <__ieee754_asinf+0x28>
 800a190:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a194:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a238 <__ieee754_asinf+0x198>
 800a198:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a23c <__ieee754_asinf+0x19c>
 800a19c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a250 <__ieee754_asinf+0x1b0>
 800a1a0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a1a4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a244 <__ieee754_asinf+0x1a4>
 800a1a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a1ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a248 <__ieee754_asinf+0x1a8>
 800a1b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a1b4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a24c <__ieee754_asinf+0x1ac>
 800a1b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a1bc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a240 <__ieee754_asinf+0x1a0>
 800a1c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a1c4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a254 <__ieee754_asinf+0x1b4>
 800a1c8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a1cc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a258 <__ieee754_asinf+0x1b8>
 800a1d0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a1d4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a25c <__ieee754_asinf+0x1bc>
 800a1d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1e0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a1e4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a1e8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a1ec:	e76c      	b.n	800a0c8 <__ieee754_asinf+0x28>
 800a1ee:	ee10 3a10 	vmov	r3, s0
 800a1f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a1f6:	f023 030f 	bic.w	r3, r3, #15
 800a1fa:	ee07 3a10 	vmov	s14, r3
 800a1fe:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a202:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a206:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a20a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a20e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a22c <__ieee754_asinf+0x18c>
 800a212:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a216:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a21a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a268 <__ieee754_asinf+0x1c8>
 800a21e:	eeb0 6a40 	vmov.f32	s12, s0
 800a222:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a226:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a22a:	e7aa      	b.n	800a182 <__ieee754_asinf+0xe2>
 800a22c:	b33bbd2e 	.word	0xb33bbd2e
 800a230:	3fc90fdb 	.word	0x3fc90fdb
 800a234:	7149f2ca 	.word	0x7149f2ca
 800a238:	3811ef08 	.word	0x3811ef08
 800a23c:	3a4f7f04 	.word	0x3a4f7f04
 800a240:	3e2aaaab 	.word	0x3e2aaaab
 800a244:	bd241146 	.word	0xbd241146
 800a248:	3e4e0aa8 	.word	0x3e4e0aa8
 800a24c:	bea6b090 	.word	0xbea6b090
 800a250:	3d9dc62e 	.word	0x3d9dc62e
 800a254:	bf303361 	.word	0xbf303361
 800a258:	4001572d 	.word	0x4001572d
 800a25c:	c019d139 	.word	0xc019d139
 800a260:	3f799999 	.word	0x3f799999
 800a264:	333bbd2e 	.word	0x333bbd2e
 800a268:	3f490fdb 	.word	0x3f490fdb

0800a26c <__ieee754_rem_pio2f>:
 800a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a26e:	ee10 6a10 	vmov	r6, s0
 800a272:	4b8e      	ldr	r3, [pc, #568]	; (800a4ac <__ieee754_rem_pio2f+0x240>)
 800a274:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a278:	429d      	cmp	r5, r3
 800a27a:	b087      	sub	sp, #28
 800a27c:	eef0 7a40 	vmov.f32	s15, s0
 800a280:	4604      	mov	r4, r0
 800a282:	dc05      	bgt.n	800a290 <__ieee754_rem_pio2f+0x24>
 800a284:	2300      	movs	r3, #0
 800a286:	ed80 0a00 	vstr	s0, [r0]
 800a28a:	6043      	str	r3, [r0, #4]
 800a28c:	2000      	movs	r0, #0
 800a28e:	e01a      	b.n	800a2c6 <__ieee754_rem_pio2f+0x5a>
 800a290:	4b87      	ldr	r3, [pc, #540]	; (800a4b0 <__ieee754_rem_pio2f+0x244>)
 800a292:	429d      	cmp	r5, r3
 800a294:	dc46      	bgt.n	800a324 <__ieee754_rem_pio2f+0xb8>
 800a296:	2e00      	cmp	r6, #0
 800a298:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a4b4 <__ieee754_rem_pio2f+0x248>
 800a29c:	4b86      	ldr	r3, [pc, #536]	; (800a4b8 <__ieee754_rem_pio2f+0x24c>)
 800a29e:	f025 050f 	bic.w	r5, r5, #15
 800a2a2:	dd1f      	ble.n	800a2e4 <__ieee754_rem_pio2f+0x78>
 800a2a4:	429d      	cmp	r5, r3
 800a2a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2aa:	d00e      	beq.n	800a2ca <__ieee754_rem_pio2f+0x5e>
 800a2ac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a4bc <__ieee754_rem_pio2f+0x250>
 800a2b0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a2b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2b8:	ed80 0a00 	vstr	s0, [r0]
 800a2bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	edc4 7a01 	vstr	s15, [r4, #4]
 800a2c6:	b007      	add	sp, #28
 800a2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ca:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a4c0 <__ieee754_rem_pio2f+0x254>
 800a2ce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a4c4 <__ieee754_rem_pio2f+0x258>
 800a2d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2d6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a2da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a2de:	edc0 6a00 	vstr	s13, [r0]
 800a2e2:	e7eb      	b.n	800a2bc <__ieee754_rem_pio2f+0x50>
 800a2e4:	429d      	cmp	r5, r3
 800a2e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2ea:	d00e      	beq.n	800a30a <__ieee754_rem_pio2f+0x9e>
 800a2ec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a4bc <__ieee754_rem_pio2f+0x250>
 800a2f0:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a2f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2f8:	ed80 0a00 	vstr	s0, [r0]
 800a2fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	edc4 7a01 	vstr	s15, [r4, #4]
 800a308:	e7dd      	b.n	800a2c6 <__ieee754_rem_pio2f+0x5a>
 800a30a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a4c0 <__ieee754_rem_pio2f+0x254>
 800a30e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a4c4 <__ieee754_rem_pio2f+0x258>
 800a312:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a316:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a31a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a31e:	edc0 6a00 	vstr	s13, [r0]
 800a322:	e7eb      	b.n	800a2fc <__ieee754_rem_pio2f+0x90>
 800a324:	4b68      	ldr	r3, [pc, #416]	; (800a4c8 <__ieee754_rem_pio2f+0x25c>)
 800a326:	429d      	cmp	r5, r3
 800a328:	dc72      	bgt.n	800a410 <__ieee754_rem_pio2f+0x1a4>
 800a32a:	f7fe ff97 	bl	800925c <fabsf>
 800a32e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a4cc <__ieee754_rem_pio2f+0x260>
 800a332:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a336:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a33a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a33e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a342:	ee17 0a90 	vmov	r0, s15
 800a346:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a4b4 <__ieee754_rem_pio2f+0x248>
 800a34a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a34e:	281f      	cmp	r0, #31
 800a350:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a4bc <__ieee754_rem_pio2f+0x250>
 800a354:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a358:	eeb1 6a47 	vneg.f32	s12, s14
 800a35c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a360:	ee16 2a90 	vmov	r2, s13
 800a364:	dc1c      	bgt.n	800a3a0 <__ieee754_rem_pio2f+0x134>
 800a366:	495a      	ldr	r1, [pc, #360]	; (800a4d0 <__ieee754_rem_pio2f+0x264>)
 800a368:	1e47      	subs	r7, r0, #1
 800a36a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a36e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a372:	428b      	cmp	r3, r1
 800a374:	d014      	beq.n	800a3a0 <__ieee754_rem_pio2f+0x134>
 800a376:	6022      	str	r2, [r4, #0]
 800a378:	ed94 7a00 	vldr	s14, [r4]
 800a37c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a380:	2e00      	cmp	r6, #0
 800a382:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a386:	ed84 0a01 	vstr	s0, [r4, #4]
 800a38a:	da9c      	bge.n	800a2c6 <__ieee754_rem_pio2f+0x5a>
 800a38c:	eeb1 7a47 	vneg.f32	s14, s14
 800a390:	eeb1 0a40 	vneg.f32	s0, s0
 800a394:	ed84 7a00 	vstr	s14, [r4]
 800a398:	ed84 0a01 	vstr	s0, [r4, #4]
 800a39c:	4240      	negs	r0, r0
 800a39e:	e792      	b.n	800a2c6 <__ieee754_rem_pio2f+0x5a>
 800a3a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a3a4:	15eb      	asrs	r3, r5, #23
 800a3a6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a3aa:	2d08      	cmp	r5, #8
 800a3ac:	dde3      	ble.n	800a376 <__ieee754_rem_pio2f+0x10a>
 800a3ae:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a4c0 <__ieee754_rem_pio2f+0x254>
 800a3b2:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a4c4 <__ieee754_rem_pio2f+0x258>
 800a3b6:	eef0 6a40 	vmov.f32	s13, s0
 800a3ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a3be:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a3c2:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a3c6:	eef0 7a40 	vmov.f32	s15, s0
 800a3ca:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a3ce:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a3d2:	ee15 2a90 	vmov	r2, s11
 800a3d6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a3da:	1a5b      	subs	r3, r3, r1
 800a3dc:	2b19      	cmp	r3, #25
 800a3de:	dc04      	bgt.n	800a3ea <__ieee754_rem_pio2f+0x17e>
 800a3e0:	edc4 5a00 	vstr	s11, [r4]
 800a3e4:	eeb0 0a66 	vmov.f32	s0, s13
 800a3e8:	e7c6      	b.n	800a378 <__ieee754_rem_pio2f+0x10c>
 800a3ea:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a4d4 <__ieee754_rem_pio2f+0x268>
 800a3ee:	eeb0 0a66 	vmov.f32	s0, s13
 800a3f2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a3f6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a3fa:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a4d8 <__ieee754_rem_pio2f+0x26c>
 800a3fe:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a402:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a406:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a40a:	ed84 7a00 	vstr	s14, [r4]
 800a40e:	e7b3      	b.n	800a378 <__ieee754_rem_pio2f+0x10c>
 800a410:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a414:	db06      	blt.n	800a424 <__ieee754_rem_pio2f+0x1b8>
 800a416:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a41a:	edc0 7a01 	vstr	s15, [r0, #4]
 800a41e:	edc0 7a00 	vstr	s15, [r0]
 800a422:	e733      	b.n	800a28c <__ieee754_rem_pio2f+0x20>
 800a424:	15ea      	asrs	r2, r5, #23
 800a426:	3a86      	subs	r2, #134	; 0x86
 800a428:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a42c:	ee07 3a90 	vmov	s15, r3
 800a430:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a434:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a4dc <__ieee754_rem_pio2f+0x270>
 800a438:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a43c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a440:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a444:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a448:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a44c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a454:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a458:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a45c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a464:	edcd 7a05 	vstr	s15, [sp, #20]
 800a468:	d11e      	bne.n	800a4a8 <__ieee754_rem_pio2f+0x23c>
 800a46a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a472:	bf14      	ite	ne
 800a474:	2302      	movne	r3, #2
 800a476:	2301      	moveq	r3, #1
 800a478:	4919      	ldr	r1, [pc, #100]	; (800a4e0 <__ieee754_rem_pio2f+0x274>)
 800a47a:	9101      	str	r1, [sp, #4]
 800a47c:	2102      	movs	r1, #2
 800a47e:	9100      	str	r1, [sp, #0]
 800a480:	a803      	add	r0, sp, #12
 800a482:	4621      	mov	r1, r4
 800a484:	f000 f892 	bl	800a5ac <__kernel_rem_pio2f>
 800a488:	2e00      	cmp	r6, #0
 800a48a:	f6bf af1c 	bge.w	800a2c6 <__ieee754_rem_pio2f+0x5a>
 800a48e:	edd4 7a00 	vldr	s15, [r4]
 800a492:	eef1 7a67 	vneg.f32	s15, s15
 800a496:	edc4 7a00 	vstr	s15, [r4]
 800a49a:	edd4 7a01 	vldr	s15, [r4, #4]
 800a49e:	eef1 7a67 	vneg.f32	s15, s15
 800a4a2:	edc4 7a01 	vstr	s15, [r4, #4]
 800a4a6:	e779      	b.n	800a39c <__ieee754_rem_pio2f+0x130>
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e7e5      	b.n	800a478 <__ieee754_rem_pio2f+0x20c>
 800a4ac:	3f490fd8 	.word	0x3f490fd8
 800a4b0:	4016cbe3 	.word	0x4016cbe3
 800a4b4:	3fc90f80 	.word	0x3fc90f80
 800a4b8:	3fc90fd0 	.word	0x3fc90fd0
 800a4bc:	37354443 	.word	0x37354443
 800a4c0:	37354400 	.word	0x37354400
 800a4c4:	2e85a308 	.word	0x2e85a308
 800a4c8:	43490f80 	.word	0x43490f80
 800a4cc:	3f22f984 	.word	0x3f22f984
 800a4d0:	0800b4f0 	.word	0x0800b4f0
 800a4d4:	2e85a300 	.word	0x2e85a300
 800a4d8:	248d3132 	.word	0x248d3132
 800a4dc:	43800000 	.word	0x43800000
 800a4e0:	0800b570 	.word	0x0800b570

0800a4e4 <__ieee754_sqrtf>:
 800a4e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a4e8:	4770      	bx	lr
	...

0800a4ec <__kernel_cosf>:
 800a4ec:	ee10 3a10 	vmov	r3, s0
 800a4f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a4f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4fc:	da05      	bge.n	800a50a <__kernel_cosf+0x1e>
 800a4fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a502:	ee17 2a90 	vmov	r2, s15
 800a506:	2a00      	cmp	r2, #0
 800a508:	d03d      	beq.n	800a586 <__kernel_cosf+0x9a>
 800a50a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a50e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a58c <__kernel_cosf+0xa0>
 800a512:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a590 <__kernel_cosf+0xa4>
 800a516:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a594 <__kernel_cosf+0xa8>
 800a51a:	4a1f      	ldr	r2, [pc, #124]	; (800a598 <__kernel_cosf+0xac>)
 800a51c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a520:	4293      	cmp	r3, r2
 800a522:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a59c <__kernel_cosf+0xb0>
 800a526:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a52a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a5a0 <__kernel_cosf+0xb4>
 800a52e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a532:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a5a4 <__kernel_cosf+0xb8>
 800a536:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a53a:	eeb0 7a66 	vmov.f32	s14, s13
 800a53e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a542:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a546:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a54a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a54e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a552:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a556:	dc04      	bgt.n	800a562 <__kernel_cosf+0x76>
 800a558:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a55c:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a560:	4770      	bx	lr
 800a562:	4a11      	ldr	r2, [pc, #68]	; (800a5a8 <__kernel_cosf+0xbc>)
 800a564:	4293      	cmp	r3, r2
 800a566:	bfda      	itte	le
 800a568:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a56c:	ee06 3a90 	vmovle	s13, r3
 800a570:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a574:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a578:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a57c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a580:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a584:	4770      	bx	lr
 800a586:	eeb0 0a46 	vmov.f32	s0, s12
 800a58a:	4770      	bx	lr
 800a58c:	ad47d74e 	.word	0xad47d74e
 800a590:	310f74f6 	.word	0x310f74f6
 800a594:	3d2aaaab 	.word	0x3d2aaaab
 800a598:	3e999999 	.word	0x3e999999
 800a59c:	b493f27c 	.word	0xb493f27c
 800a5a0:	37d00d01 	.word	0x37d00d01
 800a5a4:	bab60b61 	.word	0xbab60b61
 800a5a8:	3f480000 	.word	0x3f480000

0800a5ac <__kernel_rem_pio2f>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	ed2d 8b04 	vpush	{d8-d9}
 800a5b4:	b0d9      	sub	sp, #356	; 0x164
 800a5b6:	4688      	mov	r8, r1
 800a5b8:	9002      	str	r0, [sp, #8]
 800a5ba:	49bb      	ldr	r1, [pc, #748]	; (800a8a8 <__kernel_rem_pio2f+0x2fc>)
 800a5bc:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a5be:	9301      	str	r3, [sp, #4]
 800a5c0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a5c4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a5c8:	1e59      	subs	r1, r3, #1
 800a5ca:	1d13      	adds	r3, r2, #4
 800a5cc:	db27      	blt.n	800a61e <__kernel_rem_pio2f+0x72>
 800a5ce:	f1b2 0b03 	subs.w	fp, r2, #3
 800a5d2:	bf48      	it	mi
 800a5d4:	f102 0b04 	addmi.w	fp, r2, #4
 800a5d8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a5dc:	1c45      	adds	r5, r0, #1
 800a5de:	00ec      	lsls	r4, r5, #3
 800a5e0:	1a47      	subs	r7, r0, r1
 800a5e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a8b8 <__kernel_rem_pio2f+0x30c>
 800a5e6:	9403      	str	r4, [sp, #12]
 800a5e8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a5ec:	eb0a 0c01 	add.w	ip, sl, r1
 800a5f0:	ae1c      	add	r6, sp, #112	; 0x70
 800a5f2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a5f6:	2400      	movs	r4, #0
 800a5f8:	4564      	cmp	r4, ip
 800a5fa:	dd12      	ble.n	800a622 <__kernel_rem_pio2f+0x76>
 800a5fc:	9b01      	ldr	r3, [sp, #4]
 800a5fe:	ac1c      	add	r4, sp, #112	; 0x70
 800a600:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a604:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a608:	f04f 0c00 	mov.w	ip, #0
 800a60c:	45d4      	cmp	ip, sl
 800a60e:	dc27      	bgt.n	800a660 <__kernel_rem_pio2f+0xb4>
 800a610:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a614:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a8b8 <__kernel_rem_pio2f+0x30c>
 800a618:	4627      	mov	r7, r4
 800a61a:	2600      	movs	r6, #0
 800a61c:	e016      	b.n	800a64c <__kernel_rem_pio2f+0xa0>
 800a61e:	2000      	movs	r0, #0
 800a620:	e7dc      	b.n	800a5dc <__kernel_rem_pio2f+0x30>
 800a622:	42e7      	cmn	r7, r4
 800a624:	bf5d      	ittte	pl
 800a626:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a62a:	ee07 3a90 	vmovpl	s15, r3
 800a62e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a632:	eef0 7a47 	vmovmi.f32	s15, s14
 800a636:	ece6 7a01 	vstmia	r6!, {s15}
 800a63a:	3401      	adds	r4, #1
 800a63c:	e7dc      	b.n	800a5f8 <__kernel_rem_pio2f+0x4c>
 800a63e:	ecf9 6a01 	vldmia	r9!, {s13}
 800a642:	ed97 7a00 	vldr	s14, [r7]
 800a646:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a64a:	3601      	adds	r6, #1
 800a64c:	428e      	cmp	r6, r1
 800a64e:	f1a7 0704 	sub.w	r7, r7, #4
 800a652:	ddf4      	ble.n	800a63e <__kernel_rem_pio2f+0x92>
 800a654:	eceb 7a01 	vstmia	fp!, {s15}
 800a658:	f10c 0c01 	add.w	ip, ip, #1
 800a65c:	3404      	adds	r4, #4
 800a65e:	e7d5      	b.n	800a60c <__kernel_rem_pio2f+0x60>
 800a660:	ab08      	add	r3, sp, #32
 800a662:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a666:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a8b4 <__kernel_rem_pio2f+0x308>
 800a66a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a8b0 <__kernel_rem_pio2f+0x304>
 800a66e:	9304      	str	r3, [sp, #16]
 800a670:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a674:	4656      	mov	r6, sl
 800a676:	00b3      	lsls	r3, r6, #2
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	ab58      	add	r3, sp, #352	; 0x160
 800a67c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a680:	ac08      	add	r4, sp, #32
 800a682:	ab44      	add	r3, sp, #272	; 0x110
 800a684:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a688:	46a4      	mov	ip, r4
 800a68a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a68e:	4637      	mov	r7, r6
 800a690:	2f00      	cmp	r7, #0
 800a692:	f1a0 0004 	sub.w	r0, r0, #4
 800a696:	dc4f      	bgt.n	800a738 <__kernel_rem_pio2f+0x18c>
 800a698:	4628      	mov	r0, r5
 800a69a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a69e:	f000 fc35 	bl	800af0c <scalbnf>
 800a6a2:	eeb0 8a40 	vmov.f32	s16, s0
 800a6a6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a6aa:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a6ae:	f000 fbe5 	bl	800ae7c <floorf>
 800a6b2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a6b6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a6ba:	2d00      	cmp	r5, #0
 800a6bc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a6c0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a6c4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a6c8:	ee17 9a90 	vmov	r9, s15
 800a6cc:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a6d0:	dd44      	ble.n	800a75c <__kernel_rem_pio2f+0x1b0>
 800a6d2:	f106 3cff 	add.w	ip, r6, #4294967295
 800a6d6:	ab08      	add	r3, sp, #32
 800a6d8:	f1c5 0e08 	rsb	lr, r5, #8
 800a6dc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a6e0:	fa47 f00e 	asr.w	r0, r7, lr
 800a6e4:	4481      	add	r9, r0
 800a6e6:	fa00 f00e 	lsl.w	r0, r0, lr
 800a6ea:	1a3f      	subs	r7, r7, r0
 800a6ec:	f1c5 0007 	rsb	r0, r5, #7
 800a6f0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a6f4:	4107      	asrs	r7, r0
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	dd3f      	ble.n	800a77a <__kernel_rem_pio2f+0x1ce>
 800a6fa:	f04f 0e00 	mov.w	lr, #0
 800a6fe:	f109 0901 	add.w	r9, r9, #1
 800a702:	4673      	mov	r3, lr
 800a704:	4576      	cmp	r6, lr
 800a706:	dc6b      	bgt.n	800a7e0 <__kernel_rem_pio2f+0x234>
 800a708:	2d00      	cmp	r5, #0
 800a70a:	dd04      	ble.n	800a716 <__kernel_rem_pio2f+0x16a>
 800a70c:	2d01      	cmp	r5, #1
 800a70e:	d078      	beq.n	800a802 <__kernel_rem_pio2f+0x256>
 800a710:	2d02      	cmp	r5, #2
 800a712:	f000 8081 	beq.w	800a818 <__kernel_rem_pio2f+0x26c>
 800a716:	2f02      	cmp	r7, #2
 800a718:	d12f      	bne.n	800a77a <__kernel_rem_pio2f+0x1ce>
 800a71a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a71e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a722:	b353      	cbz	r3, 800a77a <__kernel_rem_pio2f+0x1ce>
 800a724:	4628      	mov	r0, r5
 800a726:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a72a:	f000 fbef 	bl	800af0c <scalbnf>
 800a72e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a732:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a736:	e020      	b.n	800a77a <__kernel_rem_pio2f+0x1ce>
 800a738:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a73c:	3f01      	subs	r7, #1
 800a73e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a746:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a74a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a74e:	ecac 0a01 	vstmia	ip!, {s0}
 800a752:	ed90 0a00 	vldr	s0, [r0]
 800a756:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a75a:	e799      	b.n	800a690 <__kernel_rem_pio2f+0xe4>
 800a75c:	d105      	bne.n	800a76a <__kernel_rem_pio2f+0x1be>
 800a75e:	1e70      	subs	r0, r6, #1
 800a760:	ab08      	add	r3, sp, #32
 800a762:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a766:	11ff      	asrs	r7, r7, #7
 800a768:	e7c5      	b.n	800a6f6 <__kernel_rem_pio2f+0x14a>
 800a76a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a76e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a776:	da31      	bge.n	800a7dc <__kernel_rem_pio2f+0x230>
 800a778:	2700      	movs	r7, #0
 800a77a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a782:	f040 809b 	bne.w	800a8bc <__kernel_rem_pio2f+0x310>
 800a786:	1e74      	subs	r4, r6, #1
 800a788:	46a4      	mov	ip, r4
 800a78a:	2000      	movs	r0, #0
 800a78c:	45d4      	cmp	ip, sl
 800a78e:	da4a      	bge.n	800a826 <__kernel_rem_pio2f+0x27a>
 800a790:	2800      	cmp	r0, #0
 800a792:	d07a      	beq.n	800a88a <__kernel_rem_pio2f+0x2de>
 800a794:	ab08      	add	r3, sp, #32
 800a796:	3d08      	subs	r5, #8
 800a798:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 8081 	beq.w	800a8a4 <__kernel_rem_pio2f+0x2f8>
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a7a8:	00a5      	lsls	r5, r4, #2
 800a7aa:	f000 fbaf 	bl	800af0c <scalbnf>
 800a7ae:	aa44      	add	r2, sp, #272	; 0x110
 800a7b0:	1d2b      	adds	r3, r5, #4
 800a7b2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a8b4 <__kernel_rem_pio2f+0x308>
 800a7b6:	18d1      	adds	r1, r2, r3
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	f280 80ae 	bge.w	800a91c <__kernel_rem_pio2f+0x370>
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	f2c0 80cc 	blt.w	800a960 <__kernel_rem_pio2f+0x3b4>
 800a7c8:	a944      	add	r1, sp, #272	; 0x110
 800a7ca:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a7ce:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a8ac <__kernel_rem_pio2f+0x300>
 800a7d2:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a8b8 <__kernel_rem_pio2f+0x30c>
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	1aa1      	subs	r1, r4, r2
 800a7da:	e0b6      	b.n	800a94a <__kernel_rem_pio2f+0x39e>
 800a7dc:	2702      	movs	r7, #2
 800a7de:	e78c      	b.n	800a6fa <__kernel_rem_pio2f+0x14e>
 800a7e0:	6820      	ldr	r0, [r4, #0]
 800a7e2:	b94b      	cbnz	r3, 800a7f8 <__kernel_rem_pio2f+0x24c>
 800a7e4:	b118      	cbz	r0, 800a7ee <__kernel_rem_pio2f+0x242>
 800a7e6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a7ea:	6020      	str	r0, [r4, #0]
 800a7ec:	2001      	movs	r0, #1
 800a7ee:	f10e 0e01 	add.w	lr, lr, #1
 800a7f2:	3404      	adds	r4, #4
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	e785      	b.n	800a704 <__kernel_rem_pio2f+0x158>
 800a7f8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a7fc:	6020      	str	r0, [r4, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	e7f5      	b.n	800a7ee <__kernel_rem_pio2f+0x242>
 800a802:	1e74      	subs	r4, r6, #1
 800a804:	a808      	add	r0, sp, #32
 800a806:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a80a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a80e:	f10d 0c20 	add.w	ip, sp, #32
 800a812:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a816:	e77e      	b.n	800a716 <__kernel_rem_pio2f+0x16a>
 800a818:	1e74      	subs	r4, r6, #1
 800a81a:	a808      	add	r0, sp, #32
 800a81c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a820:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a824:	e7f3      	b.n	800a80e <__kernel_rem_pio2f+0x262>
 800a826:	ab08      	add	r3, sp, #32
 800a828:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a82c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a830:	4318      	orrs	r0, r3
 800a832:	e7ab      	b.n	800a78c <__kernel_rem_pio2f+0x1e0>
 800a834:	f10c 0c01 	add.w	ip, ip, #1
 800a838:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a83c:	2c00      	cmp	r4, #0
 800a83e:	d0f9      	beq.n	800a834 <__kernel_rem_pio2f+0x288>
 800a840:	9b05      	ldr	r3, [sp, #20]
 800a842:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a846:	eb0d 0003 	add.w	r0, sp, r3
 800a84a:	9b01      	ldr	r3, [sp, #4]
 800a84c:	18f4      	adds	r4, r6, r3
 800a84e:	ab1c      	add	r3, sp, #112	; 0x70
 800a850:	1c77      	adds	r7, r6, #1
 800a852:	384c      	subs	r0, #76	; 0x4c
 800a854:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a858:	4466      	add	r6, ip
 800a85a:	42be      	cmp	r6, r7
 800a85c:	f6ff af0b 	blt.w	800a676 <__kernel_rem_pio2f+0xca>
 800a860:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a864:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a868:	ee07 3a90 	vmov	s15, r3
 800a86c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a870:	f04f 0c00 	mov.w	ip, #0
 800a874:	ece4 7a01 	vstmia	r4!, {s15}
 800a878:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a8b8 <__kernel_rem_pio2f+0x30c>
 800a87c:	46a1      	mov	r9, r4
 800a87e:	458c      	cmp	ip, r1
 800a880:	dd07      	ble.n	800a892 <__kernel_rem_pio2f+0x2e6>
 800a882:	ece0 7a01 	vstmia	r0!, {s15}
 800a886:	3701      	adds	r7, #1
 800a888:	e7e7      	b.n	800a85a <__kernel_rem_pio2f+0x2ae>
 800a88a:	9804      	ldr	r0, [sp, #16]
 800a88c:	f04f 0c01 	mov.w	ip, #1
 800a890:	e7d2      	b.n	800a838 <__kernel_rem_pio2f+0x28c>
 800a892:	ecfe 6a01 	vldmia	lr!, {s13}
 800a896:	ed39 7a01 	vldmdb	r9!, {s14}
 800a89a:	f10c 0c01 	add.w	ip, ip, #1
 800a89e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a8a2:	e7ec      	b.n	800a87e <__kernel_rem_pio2f+0x2d2>
 800a8a4:	3c01      	subs	r4, #1
 800a8a6:	e775      	b.n	800a794 <__kernel_rem_pio2f+0x1e8>
 800a8a8:	0800b8b4 	.word	0x0800b8b4
 800a8ac:	0800b888 	.word	0x0800b888
 800a8b0:	43800000 	.word	0x43800000
 800a8b4:	3b800000 	.word	0x3b800000
 800a8b8:	00000000 	.word	0x00000000
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	eeb0 0a48 	vmov.f32	s0, s16
 800a8c2:	1a98      	subs	r0, r3, r2
 800a8c4:	f000 fb22 	bl	800af0c <scalbnf>
 800a8c8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a8b0 <__kernel_rem_pio2f+0x304>
 800a8cc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d4:	db19      	blt.n	800a90a <__kernel_rem_pio2f+0x35e>
 800a8d6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a8b4 <__kernel_rem_pio2f+0x308>
 800a8da:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a8de:	aa08      	add	r2, sp, #32
 800a8e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8e4:	1c74      	adds	r4, r6, #1
 800a8e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8ea:	3508      	adds	r5, #8
 800a8ec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a8f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a8f8:	ee10 3a10 	vmov	r3, s0
 800a8fc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a900:	ee17 3a90 	vmov	r3, s15
 800a904:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a908:	e74b      	b.n	800a7a2 <__kernel_rem_pio2f+0x1f6>
 800a90a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a90e:	aa08      	add	r2, sp, #32
 800a910:	ee10 3a10 	vmov	r3, s0
 800a914:	4634      	mov	r4, r6
 800a916:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a91a:	e742      	b.n	800a7a2 <__kernel_rem_pio2f+0x1f6>
 800a91c:	a808      	add	r0, sp, #32
 800a91e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a922:	9001      	str	r0, [sp, #4]
 800a924:	ee07 0a90 	vmov	s15, r0
 800a928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a92c:	3a01      	subs	r2, #1
 800a92e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a932:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a936:	ed61 7a01 	vstmdb	r1!, {s15}
 800a93a:	e73e      	b.n	800a7ba <__kernel_rem_pio2f+0x20e>
 800a93c:	ecfc 6a01 	vldmia	ip!, {s13}
 800a940:	ecb6 7a01 	vldmia	r6!, {s14}
 800a944:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a948:	3001      	adds	r0, #1
 800a94a:	4550      	cmp	r0, sl
 800a94c:	dc01      	bgt.n	800a952 <__kernel_rem_pio2f+0x3a6>
 800a94e:	4288      	cmp	r0, r1
 800a950:	ddf4      	ble.n	800a93c <__kernel_rem_pio2f+0x390>
 800a952:	a858      	add	r0, sp, #352	; 0x160
 800a954:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a958:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a95c:	3a01      	subs	r2, #1
 800a95e:	e730      	b.n	800a7c2 <__kernel_rem_pio2f+0x216>
 800a960:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800a962:	2a02      	cmp	r2, #2
 800a964:	dc09      	bgt.n	800a97a <__kernel_rem_pio2f+0x3ce>
 800a966:	2a00      	cmp	r2, #0
 800a968:	dc2a      	bgt.n	800a9c0 <__kernel_rem_pio2f+0x414>
 800a96a:	d043      	beq.n	800a9f4 <__kernel_rem_pio2f+0x448>
 800a96c:	f009 0007 	and.w	r0, r9, #7
 800a970:	b059      	add	sp, #356	; 0x164
 800a972:	ecbd 8b04 	vpop	{d8-d9}
 800a976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	d1f5      	bne.n	800a96c <__kernel_rem_pio2f+0x3c0>
 800a980:	ab30      	add	r3, sp, #192	; 0xc0
 800a982:	442b      	add	r3, r5
 800a984:	461a      	mov	r2, r3
 800a986:	4619      	mov	r1, r3
 800a988:	4620      	mov	r0, r4
 800a98a:	2800      	cmp	r0, #0
 800a98c:	f1a1 0104 	sub.w	r1, r1, #4
 800a990:	dc51      	bgt.n	800aa36 <__kernel_rem_pio2f+0x48a>
 800a992:	4621      	mov	r1, r4
 800a994:	2901      	cmp	r1, #1
 800a996:	f1a2 0204 	sub.w	r2, r2, #4
 800a99a:	dc5c      	bgt.n	800aa56 <__kernel_rem_pio2f+0x4aa>
 800a99c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a8b8 <__kernel_rem_pio2f+0x30c>
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	2c01      	cmp	r4, #1
 800a9a4:	dc67      	bgt.n	800aa76 <__kernel_rem_pio2f+0x4ca>
 800a9a6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800a9aa:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800a9ae:	2f00      	cmp	r7, #0
 800a9b0:	d167      	bne.n	800aa82 <__kernel_rem_pio2f+0x4d6>
 800a9b2:	edc8 6a00 	vstr	s13, [r8]
 800a9b6:	ed88 7a01 	vstr	s14, [r8, #4]
 800a9ba:	edc8 7a02 	vstr	s15, [r8, #8]
 800a9be:	e7d5      	b.n	800a96c <__kernel_rem_pio2f+0x3c0>
 800a9c0:	aa30      	add	r2, sp, #192	; 0xc0
 800a9c2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a8b8 <__kernel_rem_pio2f+0x30c>
 800a9c6:	4413      	add	r3, r2
 800a9c8:	4622      	mov	r2, r4
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	da24      	bge.n	800aa18 <__kernel_rem_pio2f+0x46c>
 800a9ce:	b34f      	cbz	r7, 800aa24 <__kernel_rem_pio2f+0x478>
 800a9d0:	eef1 7a47 	vneg.f32	s15, s14
 800a9d4:	edc8 7a00 	vstr	s15, [r8]
 800a9d8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800a9dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9e0:	aa31      	add	r2, sp, #196	; 0xc4
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	da20      	bge.n	800aa2a <__kernel_rem_pio2f+0x47e>
 800a9e8:	b10f      	cbz	r7, 800a9ee <__kernel_rem_pio2f+0x442>
 800a9ea:	eef1 7a67 	vneg.f32	s15, s15
 800a9ee:	edc8 7a01 	vstr	s15, [r8, #4]
 800a9f2:	e7bb      	b.n	800a96c <__kernel_rem_pio2f+0x3c0>
 800a9f4:	aa30      	add	r2, sp, #192	; 0xc0
 800a9f6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a8b8 <__kernel_rem_pio2f+0x30c>
 800a9fa:	4413      	add	r3, r2
 800a9fc:	2c00      	cmp	r4, #0
 800a9fe:	da05      	bge.n	800aa0c <__kernel_rem_pio2f+0x460>
 800aa00:	b10f      	cbz	r7, 800aa06 <__kernel_rem_pio2f+0x45a>
 800aa02:	eef1 7a67 	vneg.f32	s15, s15
 800aa06:	edc8 7a00 	vstr	s15, [r8]
 800aa0a:	e7af      	b.n	800a96c <__kernel_rem_pio2f+0x3c0>
 800aa0c:	ed33 7a01 	vldmdb	r3!, {s14}
 800aa10:	3c01      	subs	r4, #1
 800aa12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa16:	e7f1      	b.n	800a9fc <__kernel_rem_pio2f+0x450>
 800aa18:	ed73 7a01 	vldmdb	r3!, {s15}
 800aa1c:	3a01      	subs	r2, #1
 800aa1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa22:	e7d2      	b.n	800a9ca <__kernel_rem_pio2f+0x41e>
 800aa24:	eef0 7a47 	vmov.f32	s15, s14
 800aa28:	e7d4      	b.n	800a9d4 <__kernel_rem_pio2f+0x428>
 800aa2a:	ecb2 7a01 	vldmia	r2!, {s14}
 800aa2e:	3301      	adds	r3, #1
 800aa30:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa34:	e7d6      	b.n	800a9e4 <__kernel_rem_pio2f+0x438>
 800aa36:	edd1 7a00 	vldr	s15, [r1]
 800aa3a:	edd1 6a01 	vldr	s13, [r1, #4]
 800aa3e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800aa42:	3801      	subs	r0, #1
 800aa44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa48:	ed81 7a00 	vstr	s14, [r1]
 800aa4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa50:	edc1 7a01 	vstr	s15, [r1, #4]
 800aa54:	e799      	b.n	800a98a <__kernel_rem_pio2f+0x3de>
 800aa56:	edd2 7a00 	vldr	s15, [r2]
 800aa5a:	edd2 6a01 	vldr	s13, [r2, #4]
 800aa5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800aa62:	3901      	subs	r1, #1
 800aa64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa68:	ed82 7a00 	vstr	s14, [r2]
 800aa6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa70:	edc2 7a01 	vstr	s15, [r2, #4]
 800aa74:	e78e      	b.n	800a994 <__kernel_rem_pio2f+0x3e8>
 800aa76:	ed33 7a01 	vldmdb	r3!, {s14}
 800aa7a:	3c01      	subs	r4, #1
 800aa7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa80:	e78f      	b.n	800a9a2 <__kernel_rem_pio2f+0x3f6>
 800aa82:	eef1 6a66 	vneg.f32	s13, s13
 800aa86:	eeb1 7a47 	vneg.f32	s14, s14
 800aa8a:	edc8 6a00 	vstr	s13, [r8]
 800aa8e:	ed88 7a01 	vstr	s14, [r8, #4]
 800aa92:	eef1 7a67 	vneg.f32	s15, s15
 800aa96:	e790      	b.n	800a9ba <__kernel_rem_pio2f+0x40e>

0800aa98 <__kernel_sinf>:
 800aa98:	ee10 3a10 	vmov	r3, s0
 800aa9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaa0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800aaa4:	da04      	bge.n	800aab0 <__kernel_sinf+0x18>
 800aaa6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aaaa:	ee17 3a90 	vmov	r3, s15
 800aaae:	b35b      	cbz	r3, 800ab08 <__kernel_sinf+0x70>
 800aab0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aab4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ab0c <__kernel_sinf+0x74>
 800aab8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ab10 <__kernel_sinf+0x78>
 800aabc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aac0:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ab14 <__kernel_sinf+0x7c>
 800aac4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aac8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ab18 <__kernel_sinf+0x80>
 800aacc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aad0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ab1c <__kernel_sinf+0x84>
 800aad4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800aad8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aadc:	b930      	cbnz	r0, 800aaec <__kernel_sinf+0x54>
 800aade:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ab20 <__kernel_sinf+0x88>
 800aae2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aae6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800aaea:	4770      	bx	lr
 800aaec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800aaf0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800aaf4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800aaf8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800aafc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ab24 <__kernel_sinf+0x8c>
 800ab00:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ab04:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	2f2ec9d3 	.word	0x2f2ec9d3
 800ab10:	b2d72f34 	.word	0xb2d72f34
 800ab14:	3638ef1b 	.word	0x3638ef1b
 800ab18:	b9500d01 	.word	0xb9500d01
 800ab1c:	3c088889 	.word	0x3c088889
 800ab20:	be2aaaab 	.word	0xbe2aaaab
 800ab24:	3e2aaaab 	.word	0x3e2aaaab

0800ab28 <__kernel_tanf>:
 800ab28:	b508      	push	{r3, lr}
 800ab2a:	ee10 3a10 	vmov	r3, s0
 800ab2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ab32:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800ab36:	eef0 7a40 	vmov.f32	s15, s0
 800ab3a:	da17      	bge.n	800ab6c <__kernel_tanf+0x44>
 800ab3c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800ab40:	ee17 1a10 	vmov	r1, s14
 800ab44:	bb41      	cbnz	r1, 800ab98 <__kernel_tanf+0x70>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	d108      	bne.n	800ab5e <__kernel_tanf+0x36>
 800ab4c:	f7fe fb86 	bl	800925c <fabsf>
 800ab50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab58:	eeb0 0a67 	vmov.f32	s0, s15
 800ab5c:	bd08      	pop	{r3, pc}
 800ab5e:	2801      	cmp	r0, #1
 800ab60:	d0fa      	beq.n	800ab58 <__kernel_tanf+0x30>
 800ab62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab6a:	e7f5      	b.n	800ab58 <__kernel_tanf+0x30>
 800ab6c:	494c      	ldr	r1, [pc, #304]	; (800aca0 <__kernel_tanf+0x178>)
 800ab6e:	428a      	cmp	r2, r1
 800ab70:	db12      	blt.n	800ab98 <__kernel_tanf+0x70>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	bfb8      	it	lt
 800ab76:	eef1 7a40 	vneglt.f32	s15, s0
 800ab7a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800aca4 <__kernel_tanf+0x17c>
 800ab7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ab82:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800aca8 <__kernel_tanf+0x180>
 800ab86:	bfb8      	it	lt
 800ab88:	eef1 0a60 	vneglt.f32	s1, s1
 800ab8c:	ee70 0a60 	vsub.f32	s1, s0, s1
 800ab90:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800ab94:	eddf 0a45 	vldr	s1, [pc, #276]	; 800acac <__kernel_tanf+0x184>
 800ab98:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acb0 <__kernel_tanf+0x188>
 800ab9c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800acb4 <__kernel_tanf+0x18c>
 800aba0:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800acb8 <__kernel_tanf+0x190>
 800aba4:	493e      	ldr	r1, [pc, #248]	; (800aca0 <__kernel_tanf+0x178>)
 800aba6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800abaa:	428a      	cmp	r2, r1
 800abac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800abb0:	eea7 6a25 	vfma.f32	s12, s14, s11
 800abb4:	eddf 5a41 	vldr	s11, [pc, #260]	; 800acbc <__kernel_tanf+0x194>
 800abb8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800abbc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800acc0 <__kernel_tanf+0x198>
 800abc0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800abc4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800acc4 <__kernel_tanf+0x19c>
 800abc8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800abcc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800acc8 <__kernel_tanf+0x1a0>
 800abd0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800abd4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800accc <__kernel_tanf+0x1a4>
 800abd8:	eee7 5a05 	vfma.f32	s11, s14, s10
 800abdc:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800acd0 <__kernel_tanf+0x1a8>
 800abe0:	eea5 5a87 	vfma.f32	s10, s11, s14
 800abe4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800acd4 <__kernel_tanf+0x1ac>
 800abe8:	eee5 5a07 	vfma.f32	s11, s10, s14
 800abec:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800acd8 <__kernel_tanf+0x1b0>
 800abf0:	eea5 5a87 	vfma.f32	s10, s11, s14
 800abf4:	eddf 5a39 	vldr	s11, [pc, #228]	; 800acdc <__kernel_tanf+0x1b4>
 800abf8:	eee5 5a07 	vfma.f32	s11, s10, s14
 800abfc:	eeb0 7a46 	vmov.f32	s14, s12
 800ac00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ac04:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800ac08:	eeb0 6a60 	vmov.f32	s12, s1
 800ac0c:	eea7 6a05 	vfma.f32	s12, s14, s10
 800ac10:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ace0 <__kernel_tanf+0x1b8>
 800ac14:	eee6 0a26 	vfma.f32	s1, s12, s13
 800ac18:	eee5 0a07 	vfma.f32	s1, s10, s14
 800ac1c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ac20:	db1d      	blt.n	800ac5e <__kernel_tanf+0x136>
 800ac22:	ee06 0a90 	vmov	s13, r0
 800ac26:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800ac2a:	ee27 6a07 	vmul.f32	s12, s14, s14
 800ac2e:	ee37 7a00 	vadd.f32	s14, s14, s0
 800ac32:	179b      	asrs	r3, r3, #30
 800ac34:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	f1c3 0301 	rsb	r3, r3, #1
 800ac40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ac44:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800ac48:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ac4c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ac50:	ee07 3a90 	vmov	s15, r3
 800ac54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac58:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ac5c:	e77c      	b.n	800ab58 <__kernel_tanf+0x30>
 800ac5e:	2801      	cmp	r0, #1
 800ac60:	d01b      	beq.n	800ac9a <__kernel_tanf+0x172>
 800ac62:	4b20      	ldr	r3, [pc, #128]	; (800ace4 <__kernel_tanf+0x1bc>)
 800ac64:	ee17 2a10 	vmov	r2, s14
 800ac68:	401a      	ands	r2, r3
 800ac6a:	ee06 2a10 	vmov	s12, r2
 800ac6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ac72:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ac76:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ac7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ac7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac82:	ee16 2a90 	vmov	r2, s13
 800ac86:	4013      	ands	r3, r2
 800ac88:	ee07 3a90 	vmov	s15, r3
 800ac8c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ac90:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800ac94:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ac98:	e75e      	b.n	800ab58 <__kernel_tanf+0x30>
 800ac9a:	eef0 7a47 	vmov.f32	s15, s14
 800ac9e:	e75b      	b.n	800ab58 <__kernel_tanf+0x30>
 800aca0:	3f2ca140 	.word	0x3f2ca140
 800aca4:	3f490fda 	.word	0x3f490fda
 800aca8:	33222168 	.word	0x33222168
 800acac:	00000000 	.word	0x00000000
 800acb0:	b79bae5f 	.word	0xb79bae5f
 800acb4:	38a3f445 	.word	0x38a3f445
 800acb8:	37d95384 	.word	0x37d95384
 800acbc:	3a1a26c8 	.word	0x3a1a26c8
 800acc0:	3b6b6916 	.word	0x3b6b6916
 800acc4:	3cb327a4 	.word	0x3cb327a4
 800acc8:	3e088889 	.word	0x3e088889
 800accc:	3895c07a 	.word	0x3895c07a
 800acd0:	398137b9 	.word	0x398137b9
 800acd4:	3abede48 	.word	0x3abede48
 800acd8:	3c11371f 	.word	0x3c11371f
 800acdc:	3d5d0dd1 	.word	0x3d5d0dd1
 800ace0:	3eaaaaab 	.word	0x3eaaaaab
 800ace4:	fffff000 	.word	0xfffff000

0800ace8 <with_errno>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	4604      	mov	r4, r0
 800acec:	460d      	mov	r5, r1
 800acee:	4616      	mov	r6, r2
 800acf0:	f7fb fbc8 	bl	8006484 <__errno>
 800acf4:	4629      	mov	r1, r5
 800acf6:	6006      	str	r6, [r0, #0]
 800acf8:	4620      	mov	r0, r4
 800acfa:	bd70      	pop	{r4, r5, r6, pc}

0800acfc <xflow>:
 800acfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acfe:	4614      	mov	r4, r2
 800ad00:	461d      	mov	r5, r3
 800ad02:	b108      	cbz	r0, 800ad08 <xflow+0xc>
 800ad04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad08:	e9cd 2300 	strd	r2, r3, [sp]
 800ad0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad10:	4620      	mov	r0, r4
 800ad12:	4629      	mov	r1, r5
 800ad14:	f7f5 fc78 	bl	8000608 <__aeabi_dmul>
 800ad18:	2222      	movs	r2, #34	; 0x22
 800ad1a:	b003      	add	sp, #12
 800ad1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad20:	f7ff bfe2 	b.w	800ace8 <with_errno>

0800ad24 <__math_uflow>:
 800ad24:	b508      	push	{r3, lr}
 800ad26:	2200      	movs	r2, #0
 800ad28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad2c:	f7ff ffe6 	bl	800acfc <xflow>
 800ad30:	ec41 0b10 	vmov	d0, r0, r1
 800ad34:	bd08      	pop	{r3, pc}

0800ad36 <__math_oflow>:
 800ad36:	b508      	push	{r3, lr}
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ad3e:	f7ff ffdd 	bl	800acfc <xflow>
 800ad42:	ec41 0b10 	vmov	d0, r0, r1
 800ad46:	bd08      	pop	{r3, pc}

0800ad48 <fabs>:
 800ad48:	ec51 0b10 	vmov	r0, r1, d0
 800ad4c:	ee10 2a10 	vmov	r2, s0
 800ad50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad54:	ec43 2b10 	vmov	d0, r2, r3
 800ad58:	4770      	bx	lr

0800ad5a <finite>:
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	ed8d 0b00 	vstr	d0, [sp]
 800ad60:	9801      	ldr	r0, [sp, #4]
 800ad62:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ad66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad6a:	0fc0      	lsrs	r0, r0, #31
 800ad6c:	b002      	add	sp, #8
 800ad6e:	4770      	bx	lr

0800ad70 <scalbn>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	ec55 4b10 	vmov	r4, r5, d0
 800ad76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	b99a      	cbnz	r2, 800ada8 <scalbn+0x38>
 800ad80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad84:	4323      	orrs	r3, r4
 800ad86:	d036      	beq.n	800adf6 <scalbn+0x86>
 800ad88:	4b39      	ldr	r3, [pc, #228]	; (800ae70 <scalbn+0x100>)
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	ee10 0a10 	vmov	r0, s0
 800ad90:	2200      	movs	r2, #0
 800ad92:	f7f5 fc39 	bl	8000608 <__aeabi_dmul>
 800ad96:	4b37      	ldr	r3, [pc, #220]	; (800ae74 <scalbn+0x104>)
 800ad98:	429e      	cmp	r6, r3
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	da10      	bge.n	800adc2 <scalbn+0x52>
 800ada0:	a32b      	add	r3, pc, #172	; (adr r3, 800ae50 <scalbn+0xe0>)
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	e03a      	b.n	800ae1e <scalbn+0xae>
 800ada8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800adac:	428a      	cmp	r2, r1
 800adae:	d10c      	bne.n	800adca <scalbn+0x5a>
 800adb0:	ee10 2a10 	vmov	r2, s0
 800adb4:	4620      	mov	r0, r4
 800adb6:	4629      	mov	r1, r5
 800adb8:	f7f5 fa70 	bl	800029c <__adddf3>
 800adbc:	4604      	mov	r4, r0
 800adbe:	460d      	mov	r5, r1
 800adc0:	e019      	b.n	800adf6 <scalbn+0x86>
 800adc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adc6:	460b      	mov	r3, r1
 800adc8:	3a36      	subs	r2, #54	; 0x36
 800adca:	4432      	add	r2, r6
 800adcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800add0:	428a      	cmp	r2, r1
 800add2:	dd08      	ble.n	800ade6 <scalbn+0x76>
 800add4:	2d00      	cmp	r5, #0
 800add6:	a120      	add	r1, pc, #128	; (adr r1, 800ae58 <scalbn+0xe8>)
 800add8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800addc:	da1c      	bge.n	800ae18 <scalbn+0xa8>
 800adde:	a120      	add	r1, pc, #128	; (adr r1, 800ae60 <scalbn+0xf0>)
 800ade0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade4:	e018      	b.n	800ae18 <scalbn+0xa8>
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	dd08      	ble.n	800adfc <scalbn+0x8c>
 800adea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800adf2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800adf6:	ec45 4b10 	vmov	d0, r4, r5
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae00:	da19      	bge.n	800ae36 <scalbn+0xc6>
 800ae02:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae06:	429e      	cmp	r6, r3
 800ae08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ae0c:	dd0a      	ble.n	800ae24 <scalbn+0xb4>
 800ae0e:	a112      	add	r1, pc, #72	; (adr r1, 800ae58 <scalbn+0xe8>)
 800ae10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1e2      	bne.n	800adde <scalbn+0x6e>
 800ae18:	a30f      	add	r3, pc, #60	; (adr r3, 800ae58 <scalbn+0xe8>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	f7f5 fbf3 	bl	8000608 <__aeabi_dmul>
 800ae22:	e7cb      	b.n	800adbc <scalbn+0x4c>
 800ae24:	a10a      	add	r1, pc, #40	; (adr r1, 800ae50 <scalbn+0xe0>)
 800ae26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d0b8      	beq.n	800ada0 <scalbn+0x30>
 800ae2e:	a10e      	add	r1, pc, #56	; (adr r1, 800ae68 <scalbn+0xf8>)
 800ae30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae34:	e7b4      	b.n	800ada0 <scalbn+0x30>
 800ae36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae3a:	3236      	adds	r2, #54	; 0x36
 800ae3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae44:	4620      	mov	r0, r4
 800ae46:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <scalbn+0x108>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	e7e8      	b.n	800ae1e <scalbn+0xae>
 800ae4c:	f3af 8000 	nop.w
 800ae50:	c2f8f359 	.word	0xc2f8f359
 800ae54:	01a56e1f 	.word	0x01a56e1f
 800ae58:	8800759c 	.word	0x8800759c
 800ae5c:	7e37e43c 	.word	0x7e37e43c
 800ae60:	8800759c 	.word	0x8800759c
 800ae64:	fe37e43c 	.word	0xfe37e43c
 800ae68:	c2f8f359 	.word	0xc2f8f359
 800ae6c:	81a56e1f 	.word	0x81a56e1f
 800ae70:	43500000 	.word	0x43500000
 800ae74:	ffff3cb0 	.word	0xffff3cb0
 800ae78:	3c900000 	.word	0x3c900000

0800ae7c <floorf>:
 800ae7c:	ee10 3a10 	vmov	r3, s0
 800ae80:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae84:	3a7f      	subs	r2, #127	; 0x7f
 800ae86:	2a16      	cmp	r2, #22
 800ae88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae8c:	dc2a      	bgt.n	800aee4 <floorf+0x68>
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	da11      	bge.n	800aeb6 <floorf+0x3a>
 800ae92:	eddf 7a18 	vldr	s15, [pc, #96]	; 800aef4 <floorf+0x78>
 800ae96:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ae9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea2:	dd05      	ble.n	800aeb0 <floorf+0x34>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	da23      	bge.n	800aef0 <floorf+0x74>
 800aea8:	4a13      	ldr	r2, [pc, #76]	; (800aef8 <floorf+0x7c>)
 800aeaa:	2900      	cmp	r1, #0
 800aeac:	bf18      	it	ne
 800aeae:	4613      	movne	r3, r2
 800aeb0:	ee00 3a10 	vmov	s0, r3
 800aeb4:	4770      	bx	lr
 800aeb6:	4911      	ldr	r1, [pc, #68]	; (800aefc <floorf+0x80>)
 800aeb8:	4111      	asrs	r1, r2
 800aeba:	420b      	tst	r3, r1
 800aebc:	d0fa      	beq.n	800aeb4 <floorf+0x38>
 800aebe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800aef4 <floorf+0x78>
 800aec2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aec6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aeca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aece:	ddef      	ble.n	800aeb0 <floorf+0x34>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	bfbe      	ittt	lt
 800aed4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800aed8:	fa40 f202 	asrlt.w	r2, r0, r2
 800aedc:	189b      	addlt	r3, r3, r2
 800aede:	ea23 0301 	bic.w	r3, r3, r1
 800aee2:	e7e5      	b.n	800aeb0 <floorf+0x34>
 800aee4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aee8:	d3e4      	bcc.n	800aeb4 <floorf+0x38>
 800aeea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aeee:	4770      	bx	lr
 800aef0:	2300      	movs	r3, #0
 800aef2:	e7dd      	b.n	800aeb0 <floorf+0x34>
 800aef4:	7149f2ca 	.word	0x7149f2ca
 800aef8:	bf800000 	.word	0xbf800000
 800aefc:	007fffff 	.word	0x007fffff

0800af00 <nanf>:
 800af00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af08 <nanf+0x8>
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	7fc00000 	.word	0x7fc00000

0800af0c <scalbnf>:
 800af0c:	ee10 3a10 	vmov	r3, s0
 800af10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800af14:	d025      	beq.n	800af62 <scalbnf+0x56>
 800af16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800af1a:	d302      	bcc.n	800af22 <scalbnf+0x16>
 800af1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af20:	4770      	bx	lr
 800af22:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800af26:	d122      	bne.n	800af6e <scalbnf+0x62>
 800af28:	4b2a      	ldr	r3, [pc, #168]	; (800afd4 <scalbnf+0xc8>)
 800af2a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800afd8 <scalbnf+0xcc>
 800af2e:	4298      	cmp	r0, r3
 800af30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af34:	db16      	blt.n	800af64 <scalbnf+0x58>
 800af36:	ee10 3a10 	vmov	r3, s0
 800af3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800af3e:	3a19      	subs	r2, #25
 800af40:	4402      	add	r2, r0
 800af42:	2afe      	cmp	r2, #254	; 0xfe
 800af44:	dd15      	ble.n	800af72 <scalbnf+0x66>
 800af46:	ee10 3a10 	vmov	r3, s0
 800af4a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800afdc <scalbnf+0xd0>
 800af4e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800afe0 <scalbnf+0xd4>
 800af52:	2b00      	cmp	r3, #0
 800af54:	eeb0 7a67 	vmov.f32	s14, s15
 800af58:	bfb8      	it	lt
 800af5a:	eef0 7a66 	vmovlt.f32	s15, s13
 800af5e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800af62:	4770      	bx	lr
 800af64:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800afe4 <scalbnf+0xd8>
 800af68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af6c:	4770      	bx	lr
 800af6e:	0dd2      	lsrs	r2, r2, #23
 800af70:	e7e6      	b.n	800af40 <scalbnf+0x34>
 800af72:	2a00      	cmp	r2, #0
 800af74:	dd06      	ble.n	800af84 <scalbnf+0x78>
 800af76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af7a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800af7e:	ee00 3a10 	vmov	s0, r3
 800af82:	4770      	bx	lr
 800af84:	f112 0f16 	cmn.w	r2, #22
 800af88:	da1a      	bge.n	800afc0 <scalbnf+0xb4>
 800af8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800af8e:	4298      	cmp	r0, r3
 800af90:	ee10 3a10 	vmov	r3, s0
 800af94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af98:	dd0a      	ble.n	800afb0 <scalbnf+0xa4>
 800af9a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800afdc <scalbnf+0xd0>
 800af9e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800afe0 <scalbnf+0xd4>
 800afa2:	eef0 7a40 	vmov.f32	s15, s0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bf18      	it	ne
 800afaa:	eeb0 0a47 	vmovne.f32	s0, s14
 800afae:	e7db      	b.n	800af68 <scalbnf+0x5c>
 800afb0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800afe4 <scalbnf+0xd8>
 800afb4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800afe8 <scalbnf+0xdc>
 800afb8:	eef0 7a40 	vmov.f32	s15, s0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	e7f3      	b.n	800afa8 <scalbnf+0x9c>
 800afc0:	3219      	adds	r2, #25
 800afc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afc6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800afca:	eddf 7a08 	vldr	s15, [pc, #32]	; 800afec <scalbnf+0xe0>
 800afce:	ee07 3a10 	vmov	s14, r3
 800afd2:	e7c4      	b.n	800af5e <scalbnf+0x52>
 800afd4:	ffff3cb0 	.word	0xffff3cb0
 800afd8:	4c000000 	.word	0x4c000000
 800afdc:	7149f2ca 	.word	0x7149f2ca
 800afe0:	f149f2ca 	.word	0xf149f2ca
 800afe4:	0da24260 	.word	0x0da24260
 800afe8:	8da24260 	.word	0x8da24260
 800afec:	33000000 	.word	0x33000000

0800aff0 <_init>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr

0800affc <_fini>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	bf00      	nop
 800b000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b002:	bc08      	pop	{r3}
 800b004:	469e      	mov	lr, r3
 800b006:	4770      	bx	lr
