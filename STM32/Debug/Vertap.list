
Vertap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  0800afb0  0800afb0  0001afb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b858  0800b858  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b858  0800b858  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b858  0800b858  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b858  0800b858  0001b858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b85c  0800b85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000364  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000544  20000544  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012480  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221c  00000000  00000000  00032690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  000348b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f08  00000000  00000000  000358a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d14  00000000  00000000  000367a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142ad  00000000  00000000  000584bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd3f2  00000000  00000000  0006c769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139b5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ac0  00000000  00000000  00139bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af98 	.word	0x0800af98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800af98 	.word	0x0800af98

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <FIR_Filter_Init>:

#include "FIRfilter.h"

static const float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f,-0.0052635f,-0.0068811f,0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.0068811f,-0.0052635f};

void FIR_Filter_Init(FIRfilter* fir) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	// clear filter buffer
	for (uint8_t i=0; i<FIR_FILTER_LENGTH; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e009      	b.n	8000c7a <FIR_Filter_Init+0x22>
		fir->buf[i]=0.0f;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
	for (uint8_t i=0; i<FIR_FILTER_LENGTH; i++) {
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	3301      	adds	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d9f2      	bls.n	8000c66 <FIR_Filter_Init+0xe>
	}

	// reset index
	fir->bufIndex = 0;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// clear input
	fir->output = 0.0f;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <FIR_Filter_Update>:
float FIR_Filter_Update(FIRfilter* fir, float input) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	ed87 0a00 	vstr	s0, [r7]
	fir->buf[fir->bufIndex] = input;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	601a      	str	r2, [r3, #0]

	fir->bufIndex++;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (fir->bufIndex == FIR_FILTER_LENGTH) fir->bufIndex=0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cce:	2b10      	cmp	r3, #16
 8000cd0:	d103      	bne.n	8000cda <FIR_Filter_Update+0x3e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	fir->output = 0.0f;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
	uint8_t sumIndex = fir->bufIndex;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ce8:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i=0; i<FIR_FILTER_LENGTH;i++){
 8000cea:	2300      	movs	r3, #0
 8000cec:	73bb      	strb	r3, [r7, #14]
 8000cee:	e021      	b.n	8000d34 <FIR_Filter_Update+0x98>
		if(sumIndex>0) sumIndex--;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <FIR_Filter_Update+0x62>
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	e001      	b.n	8000d02 <FIR_Filter_Update+0x66>
		else sumIndex=FIR_FILTER_LENGTH-1;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	73fb      	strb	r3, [r7, #15]

		fir->output += FIR_IMPULSE_RESPONSE[i]*fir->buf[sumIndex];
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000d08:	7bbb      	ldrb	r3, [r7, #14]
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <FIR_Filter_Update+0xb4>)
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	edd3 6a00 	vldr	s13, [r3]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	for (uint8_t i=0; i<FIR_FILTER_LENGTH;i++){
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	3301      	adds	r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	2b0f      	cmp	r3, #15
 8000d38:	d9da      	bls.n	8000cf0 <FIR_Filter_Update+0x54>
	}

	return fir->output;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	ee07 3a90 	vmov	s15, r3
}
 8000d42:	eeb0 0a67 	vmov.f32	s0, s15
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	0800afe0 	.word	0x0800afe0

08000d54 <MPU6050_Init>:
// Declare button variable
bool buttonPressed;
float userSetPhiPosition_deg;
float userSetThetaPosition_deg;

void MPU6050_Init(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af04      	add	r7, sp, #16
	uint8_t check=0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_WHO_AM_I, 1, &check, 1, 1000);
 8000d5e:	23d0      	movs	r3, #208	; 0xd0
 8000d60:	b299      	uxth	r1, r3
 8000d62:	2375      	movs	r3, #117	; 0x75
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	4827      	ldr	r0, [pc, #156]	; (8000e14 <MPU6050_Init+0xc0>)
 8000d78:	f001 fcf0 	bl	800275c <HAL_I2C_Mem_Read>

	if (check != VAL_WHO_AM_I) {
 8000d7c:	79fa      	ldrb	r2, [r7, #7]
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <MPU6050_Init+0xc4>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d003      	beq.n	8000d8e <MPU6050_Init+0x3a>
		printf("Could not find MPU6050!\r\n");
 8000d86:	4825      	ldr	r0, [pc, #148]	; (8000e1c <MPU6050_Init+0xc8>)
 8000d88:	f006 f870 	bl	8006e6c <puts>
 8000d8c:	e03e      	b.n	8000e0c <MPU6050_Init+0xb8>
		return;
	}

	printf("Found!\r\n");
 8000d8e:	4824      	ldr	r0, [pc, #144]	; (8000e20 <MPU6050_Init+0xcc>)
 8000d90:	f006 f86c 	bl	8006e6c <puts>

	// Power IMU
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_PWR_MGMT_1, 1, &VAL_PWR_MGMT_1, 1, 1000);
 8000d94:	23d0      	movs	r3, #208	; 0xd0
 8000d96:	b299      	uxth	r1, r3
 8000d98:	236b      	movs	r3, #107	; 0x6b
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	2301      	movs	r3, #1
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MPU6050_Init+0xd0>)
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2301      	movs	r3, #1
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <MPU6050_Init+0xc0>)
 8000dae:	f001 fbc1 	bl	8002534 <HAL_I2C_Mem_Write>

	// Set sampling rate of 1 kHz
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_SMPRT_DIV, 1, &VAL_SMPRT_DIV, 1, 1000);
 8000db2:	23d0      	movs	r3, #208	; 0xd0
 8000db4:	b299      	uxth	r1, r3
 8000db6:	2319      	movs	r3, #25
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MPU6050_Init+0xd4>)
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4812      	ldr	r0, [pc, #72]	; (8000e14 <MPU6050_Init+0xc0>)
 8000dcc:	f001 fbb2 	bl	8002534 <HAL_I2C_Mem_Write>

	// Set gyro config
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_GYRO_CONFIG, 1, &VAL_GYRO_CONFIG, 1, 1000);
 8000dd0:	23d0      	movs	r3, #208	; 0xd0
 8000dd2:	b299      	uxth	r1, r3
 8000dd4:	231b      	movs	r3, #27
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	2301      	movs	r3, #1
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MPU6050_Init+0xd8>)
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2301      	movs	r3, #1
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <MPU6050_Init+0xc0>)
 8000dea:	f001 fba3 	bl	8002534 <HAL_I2C_Mem_Write>

	// Set accel config
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_ACCEL_CONFIG, 1, &VAL_ACCEL_CONFIG, 1, 1000);
 8000dee:	23d0      	movs	r3, #208	; 0xd0
 8000df0:	b299      	uxth	r1, r3
 8000df2:	231c      	movs	r3, #28
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MPU6050_Init+0xdc>)
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MPU6050_Init+0xc0>)
 8000e08:	f001 fb94 	bl	8002534 <HAL_I2C_Mem_Write>

}
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001fc 	.word	0x200001fc
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	0800afb0 	.word	0x0800afb0
 8000e20:	0800afcc 	.word	0x0800afcc
 8000e24:	20000324 	.word	0x20000324
 8000e28:	20000001 	.word	0x20000001
 8000e2c:	20000325 	.word	0x20000325
 8000e30:	20000326 	.word	0x20000326

08000e34 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af04      	add	r7, sp, #16
	// Read accel values into buffer
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_ACCEL_XOUT_H, 1, Raw_Accel_Buffer, 6, 1000);
 8000e3a:	23d0      	movs	r3, #208	; 0xd0
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	233b      	movs	r3, #59	; 0x3b
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	9302      	str	r3, [sp, #8]
 8000e48:	2306      	movs	r3, #6
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	482f      	ldr	r0, [pc, #188]	; (8000f10 <MPU6050_Read_Accel+0xdc>)
 8000e54:	f001 fc82 	bl	800275c <HAL_I2C_Mem_Read>

	// Seperate buffer into individual accel axis variables
	Raw_Accel_X = (int16_t)(Raw_Accel_Buffer[0]<<8 | Raw_Accel_Buffer[1]);
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MPU6050_Read_Accel+0xe0>)
 8000e6c:	801a      	strh	r2, [r3, #0]
	Raw_Accel_Y = (int16_t)(Raw_Accel_Buffer[2]<<8 | Raw_Accel_Buffer[3]);
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e70:	789b      	ldrb	r3, [r3, #2]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e78:	78db      	ldrb	r3, [r3, #3]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <MPU6050_Read_Accel+0xe4>)
 8000e82:	801a      	strh	r2, [r3, #0]
	Raw_Accel_Z = (int16_t)(Raw_Accel_Buffer[4]<<8 | Raw_Accel_Buffer[5]);
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MPU6050_Read_Accel+0xd8>)
 8000e8e:	795b      	ldrb	r3, [r3, #5]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MPU6050_Read_Accel+0xe8>)
 8000e98:	801a      	strh	r2, [r3, #0]

	// Units converted from g to m/s^2
	Ax_raw = (Raw_Accel_X / 16384.0f)*g_TO_MPS2;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MPU6050_Read_Accel+0xe0>)
 8000e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000f20 <MPU6050_Read_Accel+0xec>
 8000eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f24 <MPU6050_Read_Accel+0xf0>
 8000eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MPU6050_Read_Accel+0xf4>)
 8000eba:	edc3 7a00 	vstr	s15, [r3]
	Ay_raw = (Raw_Accel_Y / 16384.0f)*g_TO_MPS2;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MPU6050_Read_Accel+0xe4>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ecc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000f20 <MPU6050_Read_Accel+0xec>
 8000ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000f24 <MPU6050_Read_Accel+0xf0>
 8000ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MPU6050_Read_Accel+0xf8>)
 8000ede:	edc3 7a00 	vstr	s15, [r3]
	Az_raw = (Raw_Accel_Z / 16384.0f)*g_TO_MPS2;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MPU6050_Read_Accel+0xe8>)
 8000ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f20 <MPU6050_Read_Accel+0xec>
 8000ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f24 <MPU6050_Read_Accel+0xf0>
 8000efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MPU6050_Read_Accel+0xfc>)
 8000f02:	edc3 7a00 	vstr	s15, [r3]
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000328 	.word	0x20000328
 8000f10:	200001fc 	.word	0x200001fc
 8000f14:	20000336 	.word	0x20000336
 8000f18:	20000338 	.word	0x20000338
 8000f1c:	2000033a 	.word	0x2000033a
 8000f20:	46800000 	.word	0x46800000
 8000f24:	411cf5c3 	.word	0x411cf5c3
 8000f28:	20000344 	.word	0x20000344
 8000f2c:	20000348 	.word	0x20000348
 8000f30:	2000034c 	.word	0x2000034c

08000f34 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af04      	add	r7, sp, #16
	// Read gyro values
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_GYRO_XOUT_H, 1, Raw_Gyro_Buffer, 6, 1000);
 8000f3a:	23d0      	movs	r3, #208	; 0xd0
 8000f3c:	b299      	uxth	r1, r3
 8000f3e:	2343      	movs	r3, #67	; 0x43
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2306      	movs	r3, #6
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	4829      	ldr	r0, [pc, #164]	; (8000ff8 <MPU6050_Read_Gyro+0xc4>)
 8000f54:	f001 fc02 	bl	800275c <HAL_I2C_Mem_Read>

	// Seperate buffer into individual gyro axis variables
	Raw_Gyro_X = (int16_t)(Raw_Gyro_Buffer[0]<<8 | Raw_Gyro_Buffer[1]);
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <MPU6050_Read_Gyro+0xc8>)
 8000f6c:	801a      	strh	r2, [r3, #0]
	Raw_Gyro_Y = (int16_t)(Raw_Gyro_Buffer[2]<<8 | Raw_Gyro_Buffer[3]);
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f70:	789b      	ldrb	r3, [r3, #2]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f78:	78db      	ldrb	r3, [r3, #3]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MPU6050_Read_Gyro+0xcc>)
 8000f82:	801a      	strh	r2, [r3, #0]
	Raw_Gyro_Z = (int16_t)(Raw_Gyro_Buffer[4]<<8 | Raw_Gyro_Buffer[5]);
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MPU6050_Read_Gyro+0xc0>)
 8000f8e:	795b      	ldrb	r3, [r3, #5]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MPU6050_Read_Gyro+0xd0>)
 8000f98:	801a      	strh	r2, [r3, #0]

	// Units in deg/s
	Gyx_raw = Raw_Gyro_X / 131.0f;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MPU6050_Read_Gyro+0xc8>)
 8000f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001008 <MPU6050_Read_Gyro+0xd4>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MPU6050_Read_Gyro+0xd8>)
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
	Gyy_raw = Raw_Gyro_Y / 131.0f;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MPU6050_Read_Gyro+0xcc>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001008 <MPU6050_Read_Gyro+0xd4>
 8000fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <MPU6050_Read_Gyro+0xdc>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]
	Gyz_raw = Raw_Gyro_Z / 131.0f;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MPU6050_Read_Gyro+0xd0>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001008 <MPU6050_Read_Gyro+0xd4>
 8000fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MPU6050_Read_Gyro+0xe0>)
 8000fea:	edc3 7a00 	vstr	s15, [r3]
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000330 	.word	0x20000330
 8000ff8:	200001fc 	.word	0x200001fc
 8000ffc:	2000033c 	.word	0x2000033c
 8001000:	2000033e 	.word	0x2000033e
 8001004:	20000340 	.word	0x20000340
 8001008:	43030000 	.word	0x43030000
 800100c:	20000350 	.word	0x20000350
 8001010:	20000354 	.word	0x20000354
 8001014:	20000358 	.word	0x20000358

08001018 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
//	if(GPIO_Pin == BUTTON_Pin) {
//		userSetPhiPosition_deg = phiHat_deg;
//		userSetThetaPosition_deg = thetaHat_deg;
//	}
	userSetPhiPosition_deg = phiHat_deg;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_GPIO_EXTI_Callback+0x28>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001028:	6013      	str	r3, [r2, #0]
    userSetThetaPosition_deg = thetaHat_deg;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_GPIO_EXTI_Callback+0x30>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_GPIO_EXTI_Callback+0x34>)
 8001030:	6013      	str	r3, [r2, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000050c 	.word	0x2000050c
 8001044:	20000524 	.word	0x20000524
 8001048:	20000510 	.word	0x20000510
 800104c:	20000528 	.word	0x20000528

08001050 <__io_putchar>:

int __io_putchar(int ch)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001058:	1d39      	adds	r1, r7, #4
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	2201      	movs	r2, #1
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <__io_putchar+0x20>)
 8001062:	f004 fd6d 	bl	8005b40 <HAL_UART_Transmit>
  return ch;
 8001066:	687b      	ldr	r3, [r7, #4]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000029c 	.word	0x2000029c
 8001074:	00000000 	.word	0x00000000

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	ed2d 8b04 	vpush	{d8-d9}
 800107e:	b088      	sub	sp, #32
 8001080:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f000 fe71 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 fa23 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 fb79 	bl	8001780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800108e:	f000 fb47 	bl	8001720 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001092:	f000 fa81 	bl	8001598 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001096:	f000 fabf 	bl	8001618 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 800109a:	f7ff fe5b 	bl	8000d54 <MPU6050_Init>
  FIR_Filter_Init(&lpfAccX);
 800109e:	48d6      	ldr	r0, [pc, #856]	; (80013f8 <main+0x380>)
 80010a0:	f7ff fdda 	bl	8000c58 <FIR_Filter_Init>
  FIR_Filter_Init(&lpfAccY);
 80010a4:	48d5      	ldr	r0, [pc, #852]	; (80013fc <main+0x384>)
 80010a6:	f7ff fdd7 	bl	8000c58 <FIR_Filter_Init>
  FIR_Filter_Init(&lpfAccZ);
 80010aa:	48d5      	ldr	r0, [pc, #852]	; (8001400 <main+0x388>)
 80010ac:	f7ff fdd4 	bl	8000c58 <FIR_Filter_Init>

  // Estimate euler angles
  phiHat_deg = 0.0f;
 80010b0:	4bd4      	ldr	r3, [pc, #848]	; (8001404 <main+0x38c>)
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
  thetaHat_deg = 0.0f;
 80010b8:	4bd3      	ldr	r3, [pc, #844]	; (8001408 <main+0x390>)
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
  userSetPhiPosition_deg = 0.0f;
 80010c0:	4bd2      	ldr	r3, [pc, #840]	; (800140c <main+0x394>)
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
  userSetThetaPosition_deg = 0.0f;
 80010c8:	4bd1      	ldr	r3, [pc, #836]	; (8001410 <main+0x398>)
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

  // Initalize error and its associated variables
  scaledRoll = 0.0f;
 80010d0:	4bd0      	ldr	r3, [pc, #832]	; (8001414 <main+0x39c>)
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
  scaledPitch = 0.0f;
 80010d8:	4bcf      	ldr	r3, [pc, #828]	; (8001418 <main+0x3a0>)
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
  scaledError = 0.0f;
 80010e0:	4bce      	ldr	r3, [pc, #824]	; (800141c <main+0x3a4>)
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

  // Initalize green and red pulse width value
  greenPulseWidth = 255;
 80010e8:	4bcd      	ldr	r3, [pc, #820]	; (8001420 <main+0x3a8>)
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	701a      	strb	r2, [r3, #0]
  redPulseWidth = 0;
 80010ee:	4bcd      	ldr	r3, [pc, #820]	; (8001424 <main+0x3ac>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]

  // Start PWM output for Green and Red (RGB LED)
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80010f4:	2104      	movs	r1, #4
 80010f6:	48cc      	ldr	r0, [pc, #816]	; (8001428 <main+0x3b0>)
 80010f8:	f003 fcfa 	bl	8004af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010fc:	2108      	movs	r1, #8
 80010fe:	48ca      	ldr	r0, [pc, #808]	; (8001428 <main+0x3b0>)
 8001100:	f003 fcf6 	bl	8004af0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 8001104:	f7ff fe96 	bl	8000e34 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001108:	f7ff ff14 	bl	8000f34 <MPU6050_Read_Gyro>

	  // Update FIR accel values
	  FIR_Filter_Update(&lpfAccX, Ax_raw);
 800110c:	4bc7      	ldr	r3, [pc, #796]	; (800142c <main+0x3b4>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	48b8      	ldr	r0, [pc, #736]	; (80013f8 <main+0x380>)
 8001118:	f7ff fdc0 	bl	8000c9c <FIR_Filter_Update>
	  FIR_Filter_Update(&lpfAccY, Ay_raw);
 800111c:	4bc4      	ldr	r3, [pc, #784]	; (8001430 <main+0x3b8>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	48b5      	ldr	r0, [pc, #724]	; (80013fc <main+0x384>)
 8001128:	f7ff fdb8 	bl	8000c9c <FIR_Filter_Update>
	  FIR_Filter_Update(&lpfAccZ, Az_raw);
 800112c:	4bc1      	ldr	r3, [pc, #772]	; (8001434 <main+0x3bc>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	48b2      	ldr	r0, [pc, #712]	; (8001400 <main+0x388>)
 8001138:	f7ff fdb0 	bl	8000c9c <FIR_Filter_Update>

	  // Calculate phi (roll) and theta (pitch) estimate values
	  float phiHat_acc_deg = atanf(lpfAccY.output / lpfAccZ.output) * RAD_TO_DEG;
 800113c:	4baf      	ldr	r3, [pc, #700]	; (80013fc <main+0x384>)
 800113e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001142:	4baf      	ldr	r3, [pc, #700]	; (8001400 <main+0x388>)
 8001144:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001148:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800114c:	eeb0 0a66 	vmov.f32	s0, s13
 8001150:	f007 ff40 	bl	8008fd4 <atanf>
 8001154:	eef0 7a40 	vmov.f32	s15, s0
 8001158:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001438 <main+0x3c0>
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	edc7 7a05 	vstr	s15, [r7, #20]
	  float thetaHat_acc_deg = asinf(lpfAccX.output / g_TO_MPS2) * RAD_TO_DEG;
 8001164:	4ba4      	ldr	r3, [pc, #656]	; (80013f8 <main+0x380>)
 8001166:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800116a:	eddf 6ab4 	vldr	s13, [pc, #720]	; 800143c <main+0x3c4>
 800116e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001172:	eeb0 0a47 	vmov.f32	s0, s14
 8001176:	f008 f95b 	bl	8009430 <asinf>
 800117a:	eef0 7a40 	vmov.f32	s15, s0
 800117e:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001438 <main+0x3c0>
 8001182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001186:	edc7 7a04 	vstr	s15, [r7, #16]

	  // Update FIR gyro values
	  FIR_Filter_Update(&lpfGyrX, Gyx_raw);
 800118a:	4bad      	ldr	r3, [pc, #692]	; (8001440 <main+0x3c8>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	eeb0 0a67 	vmov.f32	s0, s15
 8001194:	48ab      	ldr	r0, [pc, #684]	; (8001444 <main+0x3cc>)
 8001196:	f7ff fd81 	bl	8000c9c <FIR_Filter_Update>
	  FIR_Filter_Update(&lpfGyrY, Gyy_raw);
 800119a:	4bab      	ldr	r3, [pc, #684]	; (8001448 <main+0x3d0>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	48a9      	ldr	r0, [pc, #676]	; (800144c <main+0x3d4>)
 80011a6:	f7ff fd79 	bl	8000c9c <FIR_Filter_Update>
	  FIR_Filter_Update(&lpfGyrZ, Gyz_raw);
 80011aa:	4ba9      	ldr	r3, [pc, #676]	; (8001450 <main+0x3d8>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	48a7      	ldr	r0, [pc, #668]	; (8001454 <main+0x3dc>)
 80011b6:	f7ff fd71 	bl	8000c9c <FIR_Filter_Update>

	  float phiDot_dps = lpfGyrX.output + tanf(thetaHat_deg) * (sinf(phiHat_deg)*lpfGyrY.output + cosf(phiHat_deg)*lpfGyrZ.output);
 80011ba:	4ba2      	ldr	r3, [pc, #648]	; (8001444 <main+0x3cc>)
 80011bc:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 80011c0:	4b91      	ldr	r3, [pc, #580]	; (8001408 <main+0x390>)
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	f008 f869 	bl	80092a0 <tanf>
 80011ce:	eeb0 9a40 	vmov.f32	s18, s0
 80011d2:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <main+0x38c>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	eeb0 0a67 	vmov.f32	s0, s15
 80011dc:	f008 f81a 	bl	8009214 <sinf>
 80011e0:	eeb0 7a40 	vmov.f32	s14, s0
 80011e4:	4b99      	ldr	r3, [pc, #612]	; (800144c <main+0x3d4>)
 80011e6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80011ea:	ee67 8a27 	vmul.f32	s17, s14, s15
 80011ee:	4b85      	ldr	r3, [pc, #532]	; (8001404 <main+0x38c>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	f007 ffc0 	bl	800917c <cosf>
 80011fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001200:	4b94      	ldr	r3, [pc, #592]	; (8001454 <main+0x3dc>)
 8001202:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120a:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800120e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8001212:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001216:	edc7 7a03 	vstr	s15, [r7, #12]
	  float thetaDot_dps = cosf(phiHat_deg)*lpfGyrY.output - sinf(phiHat_deg)*lpfGyrZ.output;
 800121a:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <main+0x38c>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	f007 ffaa 	bl	800917c <cosf>
 8001228:	eeb0 7a40 	vmov.f32	s14, s0
 800122c:	4b87      	ldr	r3, [pc, #540]	; (800144c <main+0x3d4>)
 800122e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001232:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001236:	4b73      	ldr	r3, [pc, #460]	; (8001404 <main+0x38c>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	f007 ffe8 	bl	8009214 <sinf>
 8001244:	eeb0 7a40 	vmov.f32	s14, s0
 8001248:	4b82      	ldr	r3, [pc, #520]	; (8001454 <main+0x3dc>)
 800124a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001256:	edc7 7a02 	vstr	s15, [r7, #8]

	  phiHat_deg = (COMP_FILT_ALPHA*phiHat_acc_deg) + ((1.0f-COMP_FILT_ALPHA)*(phiHat_deg + SAMPLE_TIME_MS * phiDot_dps));
 800125a:	edd7 7a05 	vldr	s15, [r7, #20]
 800125e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001458 <main+0x3e0>
 8001262:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001266:	edd7 7a03 	vldr	s15, [r7, #12]
 800126a:	eddf 6a7c 	vldr	s13, [pc, #496]	; 800145c <main+0x3e4>
 800126e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001272:	4b64      	ldr	r3, [pc, #400]	; (8001404 <main+0x38c>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800127c:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001460 <main+0x3e8>
 8001280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	4b5e      	ldr	r3, [pc, #376]	; (8001404 <main+0x38c>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
	  thetaHat_deg = (COMP_FILT_ALPHA*thetaHat_acc_deg) + ((1.0f-COMP_FILT_ALPHA)*(thetaHat_deg + SAMPLE_TIME_MS * thetaDot_dps));
 800128e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001292:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001458 <main+0x3e0>
 8001296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800129a:	edd7 7a02 	vldr	s15, [r7, #8]
 800129e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800145c <main+0x3e4>
 80012a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012a6:	4b58      	ldr	r3, [pc, #352]	; (8001408 <main+0x390>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012b0:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001460 <main+0x3e8>
 80012b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012bc:	4b52      	ldr	r3, [pc, #328]	; (8001408 <main+0x390>)
 80012be:	edc3 7a00 	vstr	s15, [r3]

	  scaledRoll = SCALE_CONSTANT * fabs(phiHat_deg - userSetPhiPosition_deg);
 80012c2:	4b50      	ldr	r3, [pc, #320]	; (8001404 <main+0x38c>)
 80012c4:	ed93 7a00 	vldr	s14, [r3]
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <main+0x394>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	eef0 7ae7 	vabs.f32	s15, s15
 80012d6:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001464 <main+0x3ec>
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <main+0x39c>)
 80012e0:	edc3 7a00 	vstr	s15, [r3]
	  scaledPitch = SCALE_CONSTANT * fabs(thetaHat_deg - userSetThetaPosition_deg);
 80012e4:	4b48      	ldr	r3, [pc, #288]	; (8001408 <main+0x390>)
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <main+0x398>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f4:	eef0 7ae7 	vabs.f32	s15, s15
 80012f8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001464 <main+0x3ec>
 80012fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <main+0x3a0>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
	  scaledError = sqrt( pow(scaledRoll,2) + pow(scaledPitch,2) );
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <main+0x39c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f924 	bl	8000558 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	ed9f 1b36 	vldr	d1, [pc, #216]	; 80013f0 <main+0x378>
 8001318:	ec43 2b10 	vmov	d0, r2, r3
 800131c:	f007 ffec 	bl	80092f8 <pow>
 8001320:	ec55 4b10 	vmov	r4, r5, d0
 8001324:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <main+0x3a0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f915 	bl	8000558 <__aeabi_f2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80013f0 <main+0x378>
 8001336:	ec43 2b10 	vmov	d0, r2, r3
 800133a:	f007 ffdd 	bl	80092f8 <pow>
 800133e:	ec53 2b10 	vmov	r2, r3, d0
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ffa9 	bl	800029c <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b17 	vmov	d7, r2, r3
 8001352:	eeb0 0a47 	vmov.f32	s0, s14
 8001356:	eef0 0a67 	vmov.f32	s1, s15
 800135a:	f008 f83d 	bl	80093d8 <sqrt>
 800135e:	ec53 2b10 	vmov	r2, r3, d0
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fc27 	bl	8000bb8 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <main+0x3a4>)
 800136e:	6013      	str	r3, [r2, #0]
	  if(scaledRoll>1.0f || scaledPitch>1.0f) scaledError=1.0f;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <main+0x39c>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800137a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	dc09      	bgt.n	8001398 <main+0x320>
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <main+0x3a0>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	dd03      	ble.n	80013a0 <main+0x328>
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <main+0x3a4>)
 800139a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800139e:	601a      	str	r2, [r3, #0]

	  greenPulseWidth = (uint8_t)(COUNTER_PWM_LED - (scaledError * COUNTER_PWM_LED * SENSITIVITY_LED));
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <main+0x3a4>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001468 <main+0x3f0>
 80013aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001468 <main+0x3f0>
 80013ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80013c6:	793b      	ldrb	r3, [r7, #4]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <main+0x3a8>)
 80013cc:	701a      	strb	r2, [r3, #0]
	  redPulseWidth = (uint8_t)(scaledError * COUNTER_PWM_LED * SENSITIVITY_LED);
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <main+0x3a4>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001468 <main+0x3f0>
 80013d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013dc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80013ec:	793b      	ldrb	r3, [r7, #4]
 80013ee:	e03d      	b.n	800146c <main+0x3f4>
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40000000 	.word	0x40000000
 80013f8:	2000035c 	.word	0x2000035c
 80013fc:	200003a4 	.word	0x200003a4
 8001400:	200003ec 	.word	0x200003ec
 8001404:	2000050c 	.word	0x2000050c
 8001408:	20000510 	.word	0x20000510
 800140c:	20000524 	.word	0x20000524
 8001410:	20000528 	.word	0x20000528
 8001414:	20000518 	.word	0x20000518
 8001418:	2000051c 	.word	0x2000051c
 800141c:	20000520 	.word	0x20000520
 8001420:	20000514 	.word	0x20000514
 8001424:	20000515 	.word	0x20000515
 8001428:	20000250 	.word	0x20000250
 800142c:	20000344 	.word	0x20000344
 8001430:	20000348 	.word	0x20000348
 8001434:	2000034c 	.word	0x2000034c
 8001438:	42652ee6 	.word	0x42652ee6
 800143c:	411cf5c3 	.word	0x411cf5c3
 8001440:	20000350 	.word	0x20000350
 8001444:	20000434 	.word	0x20000434
 8001448:	20000354 	.word	0x20000354
 800144c:	2000047c 	.word	0x2000047c
 8001450:	20000358 	.word	0x20000358
 8001454:	200004c4 	.word	0x200004c4
 8001458:	3d4ccccd 	.word	0x3d4ccccd
 800145c:	3c23d70a 	.word	0x3c23d70a
 8001460:	3f733333 	.word	0x3f733333
 8001464:	3c80b990 	.word	0x3c80b990
 8001468:	437f0000 	.word	0x437f0000
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <main+0x440>)
 8001470:	701a      	strb	r2, [r3, #0]

	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,greenPulseWidth);
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <main+0x444>)
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <main+0x448>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,redPulseWidth);
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <main+0x440>)
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <main+0x448>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c
//	  printf("%.3f,%.3f\r\n", Ax_raw, lpfAccX.output);
//	  printf("%.3f,%.3f\r\n", Ay_raw, lpfAccY.output);
//	  printf("%.3f,%.3f\r\n", Az_raw, lpfAccZ.output);
//	  printf("%.3f,%.3f,%.3f\r\n",phiHat_deg,thetaHat_deg, scaledError);

	  printf("%.3f,%.3f\r\n", userSetPhiPosition_deg, userSetThetaPosition_deg);
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <main+0x44c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f864 	bl	8000558 <__aeabi_f2d>
 8001490:	4604      	mov	r4, r0
 8001492:	460d      	mov	r5, r1
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <main+0x450>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f85d 	bl	8000558 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	e9cd 2300 	strd	r2, r3, [sp]
 80014a6:	4622      	mov	r2, r4
 80014a8:	462b      	mov	r3, r5
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <main+0x454>)
 80014ac:	f005 fc58 	bl	8006d60 <iprintf>

	  HAL_Delay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f000 fcbf 	bl	8001e34 <HAL_Delay>
  {
 80014b6:	e625      	b.n	8001104 <main+0x8c>
 80014b8:	20000515 	.word	0x20000515
 80014bc:	20000514 	.word	0x20000514
 80014c0:	20000250 	.word	0x20000250
 80014c4:	20000524 	.word	0x20000524
 80014c8:	20000528 	.word	0x20000528
 80014cc:	0800afd4 	.word	0x0800afd4

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0a6      	sub	sp, #152	; 0x98
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 ffcc 	bl	800647c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2258      	movs	r2, #88	; 0x58
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f004 ffbe 	bl	800647c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001500:	2302      	movs	r3, #2
 8001502:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	2301      	movs	r3, #1
 8001506:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001508:	2310      	movs	r3, #16
 800150a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800151c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001520:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fd7e 	bl	8003030 <HAL_RCC_OscConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800153a:	f000 f99d 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153e:	230f      	movs	r3, #15
 8001540:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001542:	2302      	movs	r3, #2
 8001544:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001554:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001558:	2102      	movs	r1, #2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fdbc 	bl	80040d8 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001566:	f000 f987 	bl	8001878 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SystemClock_Config+0xc4>)
 800156c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001576:	2300      	movs	r3, #0
 8001578:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4618      	mov	r0, r3
 800157e:	f002 ffe1 	bl	8004544 <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001588:	f000 f976 	bl	8001878 <Error_Handler>
  }
}
 800158c:	bf00      	nop
 800158e:	3798      	adds	r7, #152	; 0x98
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	00200022 	.word	0x00200022

08001598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_I2C1_Init+0x74>)
 800159e:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <MX_I2C1_Init+0x78>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_I2C1_Init+0x74>)
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <MX_I2C1_Init+0x7c>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_I2C1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_I2C1_Init+0x74>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_I2C1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_I2C1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_I2C1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_I2C1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_I2C1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <MX_I2C1_Init+0x74>)
 80015d4:	f000 ff1e 	bl	8002414 <HAL_I2C_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015de:	f000 f94b 	bl	8001878 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <MX_I2C1_Init+0x74>)
 80015e6:	f001 fc8b 	bl	8002f00 <HAL_I2CEx_ConfigAnalogFilter>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015f0:	f000 f942 	bl	8001878 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015f4:	2100      	movs	r1, #0
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_I2C1_Init+0x74>)
 80015f8:	f001 fccd 	bl	8002f96 <HAL_I2CEx_ConfigDigitalFilter>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001602:	f000 f939 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200001fc 	.word	0x200001fc
 8001610:	40005400 	.word	0x40005400
 8001614:	2000090e 	.word	0x2000090e

08001618 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	615a      	str	r2, [r3, #20]
 8001648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <MX_TIM4_Init+0x100>)
 800164c:	4a33      	ldr	r2, [pc, #204]	; (800171c <MX_TIM4_Init+0x104>)
 800164e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <MX_TIM4_Init+0x100>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <MX_TIM4_Init+0x100>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <MX_TIM4_Init+0x100>)
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_TIM4_Init+0x100>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <MX_TIM4_Init+0x100>)
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800166e:	482a      	ldr	r0, [pc, #168]	; (8001718 <MX_TIM4_Init+0x100>)
 8001670:	f003 f986 	bl	8004980 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800167a:	f000 f8fd 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001688:	4619      	mov	r1, r3
 800168a:	4823      	ldr	r0, [pc, #140]	; (8001718 <MX_TIM4_Init+0x100>)
 800168c:	f003 fc50 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001696:	f000 f8ef 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800169a:	481f      	ldr	r0, [pc, #124]	; (8001718 <MX_TIM4_Init+0x100>)
 800169c:	f003 f9c7 	bl	8004a2e <HAL_TIM_PWM_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80016a6:	f000 f8e7 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4817      	ldr	r0, [pc, #92]	; (8001718 <MX_TIM4_Init+0x100>)
 80016ba:	f004 f967 	bl	800598c <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80016c4:	f000 f8d8 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 255;
 80016cc:	23ff      	movs	r3, #255	; 0xff
 80016ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	2204      	movs	r2, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <MX_TIM4_Init+0x100>)
 80016e0:	f003 fb12 	bl	8004d08 <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80016ea:	f000 f8c5 	bl	8001878 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016f2:	463b      	mov	r3, r7
 80016f4:	2208      	movs	r2, #8
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_TIM4_Init+0x100>)
 80016fa:	f003 fb05 	bl	8004d08 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001704:	f000 f8b8 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <MX_TIM4_Init+0x100>)
 800170a:	f000 f961 	bl	80019d0 <HAL_TIM_MspPostInit>

}
 800170e:	bf00      	nop
 8001710:	3738      	adds	r7, #56	; 0x38
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000250 	.word	0x20000250
 800171c:	40000800 	.word	0x40000800

08001720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <MX_USART2_UART_Init+0x5c>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_USART2_UART_Init+0x58>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_USART2_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART2_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART2_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001764:	f004 f99e 	bl	8005aa4 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800176e:	f000 f883 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000029c 	.word	0x2000029c
 800177c:	40004400 	.word	0x40004400

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <MX_GPIO_Init+0xf0>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a35      	ldr	r2, [pc, #212]	; (8001870 <MX_GPIO_Init+0xf0>)
 800179c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a2f      	ldr	r2, [pc, #188]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b8:	6153      	str	r3, [r2, #20]
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a29      	ldr	r2, [pc, #164]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	6153      	str	r3, [r2, #20]
 80017d2:	4b27      	ldr	r3, [pc, #156]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	4a23      	ldr	r2, [pc, #140]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e8:	6153      	str	r3, [r2, #20]
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <MX_GPIO_Init+0xf0>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2120      	movs	r1, #32
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f000 fdd9 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001808:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4816      	ldr	r0, [pc, #88]	; (8001874 <MX_GPIO_Init+0xf4>)
 800181a:	f000 fc41 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800181e:	2320      	movs	r3, #32
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001838:	f000 fc32 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800183c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001842:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001848:	2301      	movs	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <MX_GPIO_Init+0xf4>)
 8001854:	f000 fc24 	bl	80020a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2017      	movs	r0, #23
 800185e:	f000 fbe8 	bl	8002032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001862:	2017      	movs	r0, #23
 8001864:	f000 fc01 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	; 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	48000800 	.word	0x48000800

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	e7fe      	b.n	8001880 <Error_Handler+0x8>
	...

08001884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_MspInit+0x44>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_MspInit+0x44>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_MspInit+0x44>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_MspInit+0x44>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_MspInit+0x44>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_MspInit+0x44>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ba:	2007      	movs	r0, #7
 80018bc:	f000 fbae 	bl	800201c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a26      	ldr	r2, [pc, #152]	; (8001984 <HAL_I2C_MspInit+0xb8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d145      	bne.n	800197a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a25      	ldr	r2, [pc, #148]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b23      	ldr	r3, [pc, #140]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800191e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001924:	2312      	movs	r3, #18
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001930:	2304      	movs	r3, #4
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f000 fbaf 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001946:	2312      	movs	r3, #18
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001952:	2304      	movs	r3, #4
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	480b      	ldr	r0, [pc, #44]	; (800198c <HAL_I2C_MspInit+0xc0>)
 800195e:	f000 fb9f 	bl	80020a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 8001968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_I2C_MspInit+0xbc>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40005400 	.word	0x40005400
 8001988:	40021000 	.word	0x40021000
 800198c:	48000400 	.word	0x48000400

08001990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_TIM_Base_MspInit+0x38>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10b      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_TIM_Base_MspInit+0x3c>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_TIM_Base_MspInit+0x3c>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_TIM_Base_MspInit+0x3c>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40000800 	.word	0x40000800
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <HAL_TIM_MspPostInit+0xa0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d13a      	bne.n	8001a68 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_TIM_MspPostInit+0xa4>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_TIM_MspPostInit+0xa4>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	6153      	str	r3, [r2, #20]
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_TIM_MspPostInit+0xa4>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_TIM_MspPostInit+0xa4>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_TIM_MspPostInit+0xa4>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6153      	str	r3, [r2, #20]
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_TIM_MspPostInit+0xa4>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA12     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001a34:	230a      	movs	r3, #10
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a42:	f000 fb2d 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <HAL_TIM_MspPostInit+0xa8>)
 8001a64:	f000 fb1c 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40000800 	.word	0x40000800
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000400 	.word	0x48000400

08001a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_UART_MspInit+0x7c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d128      	bne.n	8001af0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	6153      	str	r3, [r2, #20]
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f000 fad8 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af0:	bf00      	nop
 8001af2:	3728      	adds	r7, #40	; 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40004400 	.word	0x40004400
 8001afc:	40021000 	.word	0x40021000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 f952 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001b58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b5c:	f000 fc42 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_kill>:

int _kill(int pid, int sig)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b7e:	f004 fc53 	bl	8006428 <__errno>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2216      	movs	r2, #22
 8001b86:	601a      	str	r2, [r3, #0]
	return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_exit>:

void _exit (int status)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffe7 	bl	8001b74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ba6:	e7fe      	b.n	8001ba6 <_exit+0x12>

08001ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00a      	b.n	8001bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bba:	f3af 8000 	nop.w
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf0      	blt.n	8001bba <_read+0x12>
	}

return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e009      	b.n	8001c08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fa27 	bl	8001050 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf1      	blt.n	8001bf4 <_write+0x12>
	}
	return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_close>:

int _close(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c42:	605a      	str	r2, [r3, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_isatty>:

int _isatty(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f004 fbb8 	bl	8006428 <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20010000 	.word	0x20010000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	2000052c 	.word	0x2000052c
 8001cec:	20000548 	.word	0x20000548

08001cf0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <SystemInit+0x20>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <SystemInit+0x20>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d18:	f7ff ffea 	bl	8001cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d1e:	490d      	ldr	r1, [pc, #52]	; (8001d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <LoopForever+0xe>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d34:	4c0a      	ldr	r4, [pc, #40]	; (8001d60 <LoopForever+0x16>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f004 fb77 	bl	8006434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d46:	f7ff f997 	bl	8001078 <main>

08001d4a <LoopForever>:

LoopForever:
    b LoopForever
 8001d4a:	e7fe      	b.n	8001d4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d58:	0800b860 	.word	0x0800b860
  ldr r2, =_sbss
 8001d5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d60:	20000544 	.word	0x20000544

08001d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_2_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_Init+0x28>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_Init+0x28>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f94f 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fd7e 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000

08001d94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f967 	bl	8002086 <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 f92f 	bl	8002032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000004 	.word	0x20000004
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	20000008 	.word	0x20000008

08001df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x20>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x24>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_IncTick+0x24>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	2000000c 	.word	0x2000000c
 8001e18:	20000530 	.word	0x20000530

08001e1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_GetTick+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000530 	.word	0x20000530

08001e34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff ffee 	bl	8001e1c <HAL_GetTick>
 8001e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d005      	beq.n	8001e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_Delay+0x44>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e5a:	bf00      	nop
 8001e5c:	f7ff ffde 	bl	8001e1c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d8f7      	bhi.n	8001e5c <HAL_Delay+0x28>
  {
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0b      	blt.n	8001f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <__NVIC_EnableIRQ+0x38>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2001      	movs	r0, #1
 8001f02:	fa00 f202 	lsl.w	r2, r0, r2
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db0a      	blt.n	8001f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	; (8001f68 <__NVIC_SetPriority+0x4c>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f44:	e00a      	b.n	8001f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4908      	ldr	r1, [pc, #32]	; (8001f6c <__NVIC_SetPriority+0x50>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3b04      	subs	r3, #4
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	761a      	strb	r2, [r3, #24]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	bf28      	it	cs
 8001f8e:	2304      	movcs	r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d902      	bls.n	8001fa0 <NVIC_EncodePriority+0x30>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <NVIC_EncodePriority+0x32>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	4313      	orrs	r3, r2
         );
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe8:	d301      	bcc.n	8001fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00f      	b.n	800200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <SysTick_Config+0x40>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7ff ff8e 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <SysTick_Config+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <SysTick_Config+0x40>)
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff29 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff3e 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff8e 	bl	8001f70 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5d 	bl	8001f1c <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff31 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa2 	bl	8001fd8 <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ae:	e160      	b.n	8002372 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8152 	beq.w	800236c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d005      	beq.n	80020e0 <HAL_GPIO_Init+0x40>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d130      	bne.n	8002142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002116:	2201      	movs	r2, #1
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 0201 	and.w	r2, r3, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b03      	cmp	r3, #3
 800214c:	d017      	beq.n	800217e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d123      	bne.n	80021d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	6939      	ldr	r1, [r7, #16]
 80021ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0203 	and.w	r2, r3, #3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80ac 	beq.w	800236c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002214:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <HAL_GPIO_Init+0x2f0>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a5d      	ldr	r2, [pc, #372]	; (8002390 <HAL_GPIO_Init+0x2f0>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b5b      	ldr	r3, [pc, #364]	; (8002390 <HAL_GPIO_Init+0x2f0>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800222c:	4a59      	ldr	r2, [pc, #356]	; (8002394 <HAL_GPIO_Init+0x2f4>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002256:	d025      	beq.n	80022a4 <HAL_GPIO_Init+0x204>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a4f      	ldr	r2, [pc, #316]	; (8002398 <HAL_GPIO_Init+0x2f8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d01f      	beq.n	80022a0 <HAL_GPIO_Init+0x200>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_GPIO_Init+0x2fc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d019      	beq.n	800229c <HAL_GPIO_Init+0x1fc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a4d      	ldr	r2, [pc, #308]	; (80023a0 <HAL_GPIO_Init+0x300>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <HAL_GPIO_Init+0x1f8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a4c      	ldr	r2, [pc, #304]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00d      	beq.n	8002294 <HAL_GPIO_Init+0x1f4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_GPIO_Init+0x308>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <HAL_GPIO_Init+0x1f0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_GPIO_Init+0x30c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_GPIO_Init+0x1ec>
 8002288:	2306      	movs	r3, #6
 800228a:	e00c      	b.n	80022a6 <HAL_GPIO_Init+0x206>
 800228c:	2307      	movs	r3, #7
 800228e:	e00a      	b.n	80022a6 <HAL_GPIO_Init+0x206>
 8002290:	2305      	movs	r3, #5
 8002292:	e008      	b.n	80022a6 <HAL_GPIO_Init+0x206>
 8002294:	2304      	movs	r3, #4
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x206>
 8002298:	2303      	movs	r3, #3
 800229a:	e004      	b.n	80022a6 <HAL_GPIO_Init+0x206>
 800229c:	2302      	movs	r3, #2
 800229e:	e002      	b.n	80022a6 <HAL_GPIO_Init+0x206>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_Init+0x206>
 80022a4:	2300      	movs	r3, #0
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	f002 0203 	and.w	r2, r2, #3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4093      	lsls	r3, r2
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b6:	4937      	ldr	r1, [pc, #220]	; (8002394 <HAL_GPIO_Init+0x2f4>)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c4:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_GPIO_Init+0x310>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022e8:	4a31      	ldr	r2, [pc, #196]	; (80023b0 <HAL_GPIO_Init+0x310>)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_GPIO_Init+0x310>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002312:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <HAL_GPIO_Init+0x310>)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_GPIO_Init+0x310>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800233c:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <HAL_GPIO_Init+0x310>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_GPIO_Init+0x310>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_GPIO_Init+0x310>)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	f47f ae97 	bne.w	80020b0 <HAL_GPIO_Init+0x10>
  }
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40021000 	.word	0x40021000
 8002394:	40010000 	.word	0x40010000
 8002398:	48000400 	.word	0x48000400
 800239c:	48000800 	.word	0x48000800
 80023a0:	48000c00 	.word	0x48000c00
 80023a4:	48001000 	.word	0x48001000
 80023a8:	48001400 	.word	0x48001400
 80023ac:	48001800 	.word	0x48001800
 80023b0:	40010400 	.word	0x40010400

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fe08 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40010400 	.word	0x40010400

08002414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e081      	b.n	800252a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fa46 	bl	80018cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002464:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002474:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e006      	b.n	800249c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800249a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d104      	bne.n	80024ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69d9      	ldr	r1, [r3, #28]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4603      	mov	r3, r0
 8002544:	817b      	strh	r3, [r7, #10]
 8002546:	460b      	mov	r3, r1
 8002548:	813b      	strh	r3, [r7, #8]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b20      	cmp	r3, #32
 8002558:	f040 80f9 	bne.w	800274e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_I2C_Mem_Write+0x34>
 8002562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0ed      	b.n	8002750 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Mem_Write+0x4e>
 800257e:	2302      	movs	r3, #2
 8002580:	e0e6      	b.n	8002750 <HAL_I2C_Mem_Write+0x21c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800258a:	f7ff fc47 	bl	8001e1c <HAL_GetTick>
 800258e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2319      	movs	r3, #25
 8002596:	2201      	movs	r2, #1
 8002598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fac3 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0d1      	b.n	8002750 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2221      	movs	r2, #33	; 0x21
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a3a      	ldr	r2, [r7, #32]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025d4:	88f8      	ldrh	r0, [r7, #6]
 80025d6:	893a      	ldrh	r2, [r7, #8]
 80025d8:	8979      	ldrh	r1, [r7, #10]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4603      	mov	r3, r0
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f9d3 	bl	8002990 <I2C_RequestMemoryWrite>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0a9      	b.n	8002750 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	2bff      	cmp	r3, #255	; 0xff
 8002604:	d90e      	bls.n	8002624 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	22ff      	movs	r2, #255	; 0xff
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	b2da      	uxtb	r2, r3
 8002612:	8979      	ldrh	r1, [r7, #10]
 8002614:	2300      	movs	r3, #0
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fc3d 	bl	8002e9c <I2C_TransferConfig>
 8002622:	e00f      	b.n	8002644 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	b2da      	uxtb	r2, r3
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	2300      	movs	r3, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fc2c 	bl	8002e9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fabc 	bl	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e07b      	b.n	8002750 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d034      	beq.n	80026fc <HAL_I2C_Mem_Write+0x1c8>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	d130      	bne.n	80026fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	2200      	movs	r2, #0
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fa3f 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e04d      	b.n	8002750 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2bff      	cmp	r3, #255	; 0xff
 80026bc:	d90e      	bls.n	80026dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	22ff      	movs	r2, #255	; 0xff
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	8979      	ldrh	r1, [r7, #10]
 80026cc:	2300      	movs	r3, #0
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fbe1 	bl	8002e9c <I2C_TransferConfig>
 80026da:	e00f      	b.n	80026fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	8979      	ldrh	r1, [r7, #10]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fbd0 	bl	8002e9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d19e      	bne.n	8002644 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 faa2 	bl	8002c54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e01a      	b.n	8002750 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2220      	movs	r2, #32
 8002720:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_I2C_Mem_Write+0x224>)
 800272e:	400b      	ands	r3, r1
 8002730:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800274e:	2302      	movs	r3, #2
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	fe00e800 	.word	0xfe00e800

0800275c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	461a      	mov	r2, r3
 800276a:	4603      	mov	r3, r0
 800276c:	817b      	strh	r3, [r7, #10]
 800276e:	460b      	mov	r3, r1
 8002770:	813b      	strh	r3, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	f040 80fd 	bne.w	800297e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_I2C_Mem_Read+0x34>
 800278a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0f1      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_I2C_Mem_Read+0x4e>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e0ea      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027b2:	f7ff fb33 	bl	8001e1c <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2319      	movs	r3, #25
 80027be:	2201      	movs	r2, #1
 80027c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f9af 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d5      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2222      	movs	r2, #34	; 0x22
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027fc:	88f8      	ldrh	r0, [r7, #6]
 80027fe:	893a      	ldrh	r2, [r7, #8]
 8002800:	8979      	ldrh	r1, [r7, #10]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4603      	mov	r3, r0
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f913 	bl	8002a38 <I2C_RequestMemoryRead>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0ad      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	2bff      	cmp	r3, #255	; 0xff
 800282c:	d90e      	bls.n	800284c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	22ff      	movs	r2, #255	; 0xff
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	b2da      	uxtb	r2, r3
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	4b52      	ldr	r3, [pc, #328]	; (8002988 <HAL_I2C_Mem_Read+0x22c>)
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fb29 	bl	8002e9c <I2C_TransferConfig>
 800284a:	e00f      	b.n	800286c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	b2da      	uxtb	r2, r3
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <HAL_I2C_Mem_Read+0x22c>)
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fb18 	bl	8002e9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	2200      	movs	r2, #0
 8002874:	2104      	movs	r1, #4
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f956 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07c      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d034      	beq.n	800292c <HAL_I2C_Mem_Read+0x1d0>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d130      	bne.n	800292c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f927 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e04d      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2bff      	cmp	r3, #255	; 0xff
 80028ec:	d90e      	bls.n	800290c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	22ff      	movs	r2, #255	; 0xff
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	8979      	ldrh	r1, [r7, #10]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fac9 	bl	8002e9c <I2C_TransferConfig>
 800290a:	e00f      	b.n	800292c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	b2da      	uxtb	r2, r3
 800291c:	8979      	ldrh	r1, [r7, #10]
 800291e:	2300      	movs	r3, #0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fab8 	bl	8002e9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d19a      	bne.n	800286c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f98a 	bl	8002c54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e01a      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2220      	movs	r2, #32
 8002950:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_I2C_Mem_Read+0x230>)
 800295e:	400b      	ands	r3, r1
 8002960:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	80002400 	.word	0x80002400
 800298c:	fe00e800 	.word	0xfe00e800

08002990 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	817b      	strh	r3, [r7, #10]
 80029a2:	460b      	mov	r3, r1
 80029a4:	813b      	strh	r3, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <I2C_RequestMemoryWrite+0xa4>)
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fa6f 	bl	8002e9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	69b9      	ldr	r1, [r7, #24]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f8ff 	bl	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e02c      	b.n	8002a2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029d8:	893b      	ldrh	r3, [r7, #8]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
 80029e2:	e015      	b.n	8002a10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029e4:	893b      	ldrh	r3, [r7, #8]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	69b9      	ldr	r1, [r7, #24]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f8e5 	bl	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e012      	b.n	8002a2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a06:	893b      	ldrh	r3, [r7, #8]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2200      	movs	r2, #0
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f884 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	80002000 	.word	0x80002000

08002a38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	8979      	ldrh	r1, [r7, #10]
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <I2C_RequestMemoryRead+0xa4>)
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fa1c 	bl	8002e9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f8ac 	bl	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e02c      	b.n	8002ad2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d105      	bne.n	8002a8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
 8002a88:	e015      	b.n	8002ab6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a8a:	893b      	ldrh	r3, [r7, #8]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f892 	bl	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e012      	b.n	8002ad2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aac:	893b      	ldrh	r3, [r7, #8]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f831 	bl	8002b28 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	80002000 	.word	0x80002000

08002ae0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d103      	bne.n	8002afe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d007      	beq.n	8002b1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	619a      	str	r2, [r3, #24]
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b38:	e031      	b.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d02d      	beq.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b42:	f7ff f96b 	bl	8001e1c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d122      	bne.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d113      	bne.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00f      	b.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d0be      	beq.n	8002b3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bd2:	e033      	b.n	8002c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f87f 	bl	8002cdc <I2C_IsErrorOccurred>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e031      	b.n	8002c4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d025      	beq.n	8002c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf0:	f7ff f914 	bl	8001e1c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d302      	bcc.n	8002c06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11a      	bne.n	8002c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d013      	beq.n	8002c3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e007      	b.n	8002c4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d1c4      	bne.n	8002bd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c60:	e02f      	b.n	8002cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f838 	bl	8002cdc <I2C_IsErrorOccurred>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e02d      	b.n	8002cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7ff f8d1 	bl	8001e1c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11a      	bne.n	8002cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d013      	beq.n	8002cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f043 0220 	orr.w	r2, r3, #32
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e007      	b.n	8002cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d1c8      	bne.n	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d068      	beq.n	8002dda <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d10:	e049      	b.n	8002da6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d045      	beq.n	8002da6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7ff f87f 	bl	8001e1c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <I2C_IsErrorOccurred+0x54>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d13a      	bne.n	8002da6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d52:	d121      	bne.n	8002d98 <I2C_IsErrorOccurred+0xbc>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d5a:	d01d      	beq.n	8002d98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d01a      	beq.n	8002d98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d72:	f7ff f853 	bl	8001e1c <HAL_GetTick>
 8002d76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d78:	e00e      	b.n	8002d98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d7a:	f7ff f84f 	bl	8001e1c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b19      	cmp	r3, #25
 8002d86:	d907      	bls.n	8002d98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f043 0320 	orr.w	r3, r3, #32
 8002d8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002d96:	e006      	b.n	8002da6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d1e9      	bne.n	8002d7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d003      	beq.n	8002dbc <I2C_IsErrorOccurred+0xe0>
 8002db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0aa      	beq.n	8002d12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01c      	beq.n	8002e8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff fe45 	bl	8002ae0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <I2C_IsErrorOccurred+0x1bc>)
 8002e62:	400b      	ands	r3, r1
 8002e64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	fe00e800 	.word	0xfe00e800

08002e9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	817b      	strh	r3, [r7, #10]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eb4:	7a7b      	ldrb	r3, [r7, #9]
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ebc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	0d5b      	lsrs	r3, r3, #21
 8002ed6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <I2C_TransferConfig+0x60>)
 8002edc:	430b      	orrs	r3, r1
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	ea02 0103 	and.w	r1, r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	03ff63ff 	.word	0x03ff63ff

08002f00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d138      	bne.n	8002f88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e032      	b.n	8002f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d139      	bne.n	8003020 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e033      	b.n	8003022 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2224      	movs	r2, #36	; 0x24
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fe8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003036:	af00      	add	r7, sp, #0
 8003038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800303c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003040:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003046:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f001 b83a 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 816f 	beq.w	800334a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800306c:	4bb5      	ldr	r3, [pc, #724]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b04      	cmp	r3, #4
 8003076:	d00c      	beq.n	8003092 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003078:	4bb2      	ldr	r3, [pc, #712]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d15c      	bne.n	800313e <HAL_RCC_OscConfig+0x10e>
 8003084:	4baf      	ldr	r3, [pc, #700]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d155      	bne.n	800313e <HAL_RCC_OscConfig+0x10e>
 8003092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003096:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_RCC_OscConfig+0x94>
 80030be:	4ba1      	ldr	r3, [pc, #644]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	e015      	b.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 80030c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80030d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030e0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030ec:	4b95      	ldr	r3, [pc, #596]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030f4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80030f8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80030fc:	fa92 f2a2 	rbit	r2, r2
 8003100:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003104:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003108:	fab2 f282 	clz	r2, r2
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	f042 0220 	orr.w	r2, r2, #32
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	f002 021f 	and.w	r2, r2, #31
 8003118:	2101      	movs	r1, #1
 800311a:	fa01 f202 	lsl.w	r2, r1, r2
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8111 	beq.w	8003348 <HAL_RCC_OscConfig+0x318>
 8003126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800312a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 8108 	bne.w	8003348 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f000 bfc6 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003142:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x12e>
 8003150:	4b7c      	ldr	r3, [pc, #496]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a7b      	ldr	r2, [pc, #492]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e036      	b.n	80031cc <HAL_RCC_OscConfig+0x19c>
 800315e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003162:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x158>
 800316e:	4b75      	ldr	r3, [pc, #468]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a74      	ldr	r2, [pc, #464]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 8003174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a71      	ldr	r2, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 8003180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e021      	b.n	80031cc <HAL_RCC_OscConfig+0x19c>
 8003188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x184>
 800319a:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a69      	ldr	r2, [pc, #420]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b67      	ldr	r3, [pc, #412]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a66      	ldr	r2, [pc, #408]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0x19c>
 80031b4:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a62      	ldr	r2, [pc, #392]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b60      	ldr	r3, [pc, #384]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5f      	ldr	r2, [pc, #380]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ca:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d059      	beq.n	8003290 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fe1e 	bl	8001e1c <HAL_GetTick>
 80031e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e6:	f7fe fe19 	bl	8001e1c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d902      	bls.n	80031fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	f000 bf67 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>
 80031fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003200:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003210:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d102      	bne.n	800322e <HAL_RCC_OscConfig+0x1fe>
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	e015      	b.n	800325a <HAL_RCC_OscConfig+0x22a>
 800322e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003232:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003246:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800324a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800325e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003262:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003266:	fa92 f2a2 	rbit	r2, r2
 800326a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800326e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ab      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1b6>
 800328e:	e05c      	b.n	800334a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fdc4 	bl	8001e1c <HAL_GetTick>
 8003294:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329a:	f7fe fdbf 	bl	8001e1c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d902      	bls.n	80032b0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	f000 bf0d 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>
 80032b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80032c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_OscConfig+0x2b2>
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x2de>
 80032e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80032f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80032fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_RCC_OscConfig+0x314>)
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003312:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003316:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003322:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f042 0220 	orr.w	r2, r2, #32
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f002 021f 	and.w	r2, r2, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ab      	bne.n	800329a <HAL_RCC_OscConfig+0x26a>
 8003342:	e002      	b.n	800334a <HAL_RCC_OscConfig+0x31a>
 8003344:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 817f 	beq.w	800365e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003360:	4ba7      	ldr	r3, [pc, #668]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800336c:	4ba4      	ldr	r3, [pc, #656]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d173      	bne.n	8003460 <HAL_RCC_OscConfig+0x430>
 8003378:	4ba1      	ldr	r3, [pc, #644]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003384:	d16c      	bne.n	8003460 <HAL_RCC_OscConfig+0x430>
 8003386:	2302      	movs	r3, #2
 8003388:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003398:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d102      	bne.n	80033b6 <HAL_RCC_OscConfig+0x386>
 80033b0:	4b93      	ldr	r3, [pc, #588]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	e013      	b.n	80033de <HAL_RCC_OscConfig+0x3ae>
 80033b6:	2302      	movs	r3, #2
 80033b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80033c8:	2302      	movs	r3, #2
 80033ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80033ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80033da:	4b89      	ldr	r3, [pc, #548]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2202      	movs	r2, #2
 80033e0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80033e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80033e8:	fa92 f2a2 	rbit	r2, r2
 80033ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80033f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f042 0220 	orr.w	r2, r2, #32
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f002 021f 	and.w	r2, r2, #31
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCC_OscConfig+0x3f6>
 8003410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003414:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d002      	beq.n	8003426 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f000 be52 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003432:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	21f8      	movs	r1, #248	; 0xf8
 800343c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003444:	fa91 f1a1 	rbit	r1, r1
 8003448:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800344c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003450:	fab1 f181 	clz	r1, r1
 8003454:	b2c9      	uxtb	r1, r1
 8003456:	408b      	lsls	r3, r1
 8003458:	4969      	ldr	r1, [pc, #420]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	e0fe      	b.n	800365e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003464:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8088 	beq.w	8003582 <HAL_RCC_OscConfig+0x552>
 8003472:	2301      	movs	r3, #1
 8003474:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003484:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003492:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	461a      	mov	r2, r3
 800349a:	2301      	movs	r3, #1
 800349c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fcbd 	bl	8001e1c <HAL_GetTick>
 80034a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fe fcb8 	bl	8001e1c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d902      	bls.n	80034be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	f000 be06 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>
 80034be:	2302      	movs	r3, #2
 80034c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80034d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <HAL_RCC_OscConfig+0x4be>
 80034e8:	4b45      	ldr	r3, [pc, #276]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	e013      	b.n	8003516 <HAL_RCC_OscConfig+0x4e6>
 80034ee:	2302      	movs	r3, #2
 80034f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003500:	2302      	movs	r3, #2
 8003502:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003506:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2202      	movs	r2, #2
 8003518:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800351c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003520:	fa92 f2a2 	rbit	r2, r2
 8003524:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003528:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800352c:	fab2 f282 	clz	r2, r2
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	f042 0220 	orr.w	r2, r2, #32
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	f002 021f 	and.w	r2, r2, #31
 800353c:	2101      	movs	r1, #1
 800353e:	fa01 f202 	lsl.w	r2, r1, r2
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0af      	beq.n	80034a8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003554:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	21f8      	movs	r1, #248	; 0xf8
 800355e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003566:	fa91 f1a1 	rbit	r1, r1
 800356a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800356e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003572:	fab1 f181 	clz	r1, r1
 8003576:	b2c9      	uxtb	r1, r1
 8003578:	408b      	lsls	r3, r1
 800357a:	4921      	ldr	r1, [pc, #132]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e06d      	b.n	800365e <HAL_RCC_OscConfig+0x62e>
 8003582:	2301      	movs	r3, #1
 8003584:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003594:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	461a      	mov	r2, r3
 80035aa:	2300      	movs	r3, #0
 80035ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fe fc35 	bl	8001e1c <HAL_GetTick>
 80035b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe fc30 	bl	8001e1c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d902      	bls.n	80035ce <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	f000 bd7e 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>
 80035ce:	2302      	movs	r3, #2
 80035d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80035e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCC_OscConfig+0x5d4>
 80035f8:	4b01      	ldr	r3, [pc, #4]	; (8003600 <HAL_RCC_OscConfig+0x5d0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	e016      	b.n	800362c <HAL_RCC_OscConfig+0x5fc>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	2302      	movs	r3, #2
 8003606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003616:	2302      	movs	r3, #2
 8003618:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800361c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003628:	4bbf      	ldr	r3, [pc, #764]	; (8003928 <HAL_RCC_OscConfig+0x8f8>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	2202      	movs	r2, #2
 800362e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003632:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003636:	fa92 f2a2 	rbit	r2, r2
 800363a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800363e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003642:	fab2 f282 	clz	r2, r2
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	f042 0220 	orr.w	r2, r2, #32
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	f002 021f 	and.w	r2, r2, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f202 	lsl.w	r2, r1, r2
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ac      	bne.n	80035b8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003662:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8113 	beq.w	800389a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003678:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d07c      	beq.n	800377e <HAL_RCC_OscConfig+0x74e>
 8003684:	2301      	movs	r3, #1
 8003686:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003696:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	4ba2      	ldr	r3, [pc, #648]	; (800392c <HAL_RCC_OscConfig+0x8fc>)
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	461a      	mov	r2, r3
 80036aa:	2301      	movs	r3, #1
 80036ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fbb5 	bl	8001e1c <HAL_GetTick>
 80036b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fe fbb0 	bl	8001e1c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d902      	bls.n	80036ce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	f000 bcfe 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>
 80036ce:	2302      	movs	r3, #2
 80036d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d8:	fa93 f2a3 	rbit	r2, r3
 80036dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ee:	2202      	movs	r2, #2
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003712:	2202      	movs	r2, #2
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800371a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f2a3 	rbit	r2, r3
 8003724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003728:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800372c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b7e      	ldr	r3, [pc, #504]	; (8003928 <HAL_RCC_OscConfig+0x8f8>)
 8003730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003736:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800373a:	2102      	movs	r1, #2
 800373c:	6019      	str	r1, [r3, #0]
 800373e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003742:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	fa93 f1a3 	rbit	r1, r3
 800374c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003750:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003754:	6019      	str	r1, [r3, #0]
  return result;
 8003756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d09d      	beq.n	80036b8 <HAL_RCC_OscConfig+0x688>
 800377c:	e08d      	b.n	800389a <HAL_RCC_OscConfig+0x86a>
 800377e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003782:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	fa93 f2a3 	rbit	r2, r3
 8003798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037a0:	601a      	str	r2, [r3, #0]
  return result;
 80037a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b5d      	ldr	r3, [pc, #372]	; (800392c <HAL_RCC_OscConfig+0x8fc>)
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	461a      	mov	r2, r3
 80037bc:	2300      	movs	r3, #0
 80037be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7fe fb2c 	bl	8001e1c <HAL_GetTick>
 80037c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ca:	f7fe fb27 	bl	8001e1c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d902      	bls.n	80037e0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	f000 bc75 	b.w	80040ca <HAL_RCC_OscConfig+0x109a>
 80037e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037e8:	2202      	movs	r2, #2
 80037ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fa93 f2a3 	rbit	r2, r3
 80037fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800380c:	2202      	movs	r2, #2
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003830:	2202      	movs	r2, #2
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003838:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	fa93 f2a3 	rbit	r2, r3
 8003842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003846:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800384a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x8f8>)
 800384e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003854:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003858:	2102      	movs	r1, #2
 800385a:	6019      	str	r1, [r3, #0]
 800385c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003860:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	fa93 f1a3 	rbit	r1, r3
 800386a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003872:	6019      	str	r1, [r3, #0]
  return result;
 8003874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003878:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d197      	bne.n	80037ca <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 81a5 	beq.w	8003bfa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <HAL_RCC_OscConfig+0x8f8>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_RCC_OscConfig+0x8f8>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_RCC_OscConfig+0x8f8>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	61d3      	str	r3, [r2, #28]
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCC_OscConfig+0x8f8>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80038d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_RCC_OscConfig+0x900>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d121      	bne.n	8003940 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <HAL_RCC_OscConfig+0x900>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <HAL_RCC_OscConfig+0x900>)
 8003902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003906:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003908:	f7fe fa88 	bl	8001e1c <HAL_GetTick>
 800390c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	e010      	b.n	8003934 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003912:	f7fe fa83 	bl	8001e1c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d908      	bls.n	8003934 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e3d1      	b.n	80040ca <HAL_RCC_OscConfig+0x109a>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	10908120 	.word	0x10908120
 8003930:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4b8d      	ldr	r3, [pc, #564]	; (8003b6c <HAL_RCC_OscConfig+0xb3c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0e8      	beq.n	8003912 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003944:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x92e>
 8003950:	4b87      	ldr	r3, [pc, #540]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4a86      	ldr	r2, [pc, #536]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6213      	str	r3, [r2, #32]
 800395c:	e035      	b.n	80039ca <HAL_RCC_OscConfig+0x99a>
 800395e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003962:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x958>
 800396e:	4b80      	ldr	r3, [pc, #512]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4a7f      	ldr	r2, [pc, #508]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	6213      	str	r3, [r2, #32]
 800397a:	4b7d      	ldr	r3, [pc, #500]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4a7c      	ldr	r2, [pc, #496]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	6213      	str	r3, [r2, #32]
 8003986:	e020      	b.n	80039ca <HAL_RCC_OscConfig+0x99a>
 8003988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b05      	cmp	r3, #5
 8003996:	d10c      	bne.n	80039b2 <HAL_RCC_OscConfig+0x982>
 8003998:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a74      	ldr	r2, [pc, #464]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	4b72      	ldr	r3, [pc, #456]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a71      	ldr	r2, [pc, #452]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	e00b      	b.n	80039ca <HAL_RCC_OscConfig+0x99a>
 80039b2:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4a6e      	ldr	r2, [pc, #440]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6213      	str	r3, [r2, #32]
 80039be:	4b6c      	ldr	r3, [pc, #432]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a6b      	ldr	r2, [pc, #428]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8081 	beq.w	8003ade <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039dc:	f7fe fa1e 	bl	8001e1c <HAL_GetTick>
 80039e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e4:	e00b      	b.n	80039fe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fe fa19 	bl	8001e1c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e365      	b.n	80040ca <HAL_RCC_OscConfig+0x109a>
 80039fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a06:	2202      	movs	r2, #2
 8003a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	fa93 f2a3 	rbit	r2, r3
 8003a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f2a3 	rbit	r2, r3
 8003a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a44:	601a      	str	r2, [r3, #0]
  return result;
 8003a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d102      	bne.n	8003a6a <HAL_RCC_OscConfig+0xa3a>
 8003a64:	4b42      	ldr	r3, [pc, #264]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	e013      	b.n	8003a92 <HAL_RCC_OscConfig+0xa62>
 8003a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a72:	2202      	movs	r2, #2
 8003a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a7a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	fa93 f2a3 	rbit	r2, r3
 8003a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a88:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	6011      	str	r1, [r2, #0]
 8003a9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aa2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	fa92 f1a2 	rbit	r1, r2
 8003aac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ab0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003ab4:	6011      	str	r1, [r2, #0]
  return result;
 8003ab6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aba:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	fab2 f282 	clz	r2, r2
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	f002 021f 	and.w	r2, r2, #31
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d084      	beq.n	80039e6 <HAL_RCC_OscConfig+0x9b6>
 8003adc:	e083      	b.n	8003be6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fe f99d 	bl	8001e1c <HAL_GetTick>
 8003ae2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fe f998 	bl	8001e1c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e2e4      	b.n	80040ca <HAL_RCC_OscConfig+0x109a>
 8003b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b10:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fa93 f2a3 	rbit	r2, r3
 8003b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	fa93 f2a3 	rbit	r2, r3
 8003b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b46:	601a      	str	r2, [r3, #0]
  return result;
 8003b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d106      	bne.n	8003b74 <HAL_RCC_OscConfig+0xb44>
 8003b66:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <HAL_RCC_OscConfig+0xb40>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	e017      	b.n	8003b9c <HAL_RCC_OscConfig+0xb6c>
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b84:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b92:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	4bb3      	ldr	r3, [pc, #716]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ba0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	6011      	str	r1, [r2, #0]
 8003ba8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	fa92 f1a2 	rbit	r1, r2
 8003bb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bba:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003bbe:	6011      	str	r1, [r2, #0]
  return result;
 8003bc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bc4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	fab2 f282 	clz	r2, r2
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	f002 021f 	and.w	r2, r2, #31
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d180      	bne.n	8003ae8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003be6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bee:	4b9e      	ldr	r3, [pc, #632]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4a9d      	ldr	r2, [pc, #628]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 825e 	beq.w	80040c8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c0c:	4b96      	ldr	r3, [pc, #600]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	f000 821f 	beq.w	8004058 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	f040 8170 	bne.w	8003f0c <HAL_RCC_OscConfig+0xedc>
 8003c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c3e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	fa93 f2a3 	rbit	r2, r3
 8003c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c50:	601a      	str	r2, [r3, #0]
  return result;
 8003c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c5a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2300      	movs	r3, #0
 8003c70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fe f8d3 	bl	8001e1c <HAL_GetTick>
 8003c76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7a:	e009      	b.n	8003c90 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe f8ce 	bl	8001e1c <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e21c      	b.n	80040ca <HAL_RCC_OscConfig+0x109a>
 8003c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	fa93 f2a3 	rbit	r2, r3
 8003cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cb4:	601a      	str	r2, [r3, #0]
  return result;
 8003cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d102      	bne.n	8003cda <HAL_RCC_OscConfig+0xcaa>
 8003cd4:	4b64      	ldr	r3, [pc, #400]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	e027      	b.n	8003d2a <HAL_RCC_OscConfig+0xcfa>
 8003cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cde:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cec:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	fa93 f2a3 	rbit	r2, r3
 8003cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d20:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d36:	6011      	str	r1, [r2, #0]
 8003d38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	fa92 f1a2 	rbit	r1, r2
 8003d46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d4a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d4e:	6011      	str	r1, [r2, #0]
  return result;
 8003d50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d54:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	fab2 f282 	clz	r2, r2
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	f042 0220 	orr.w	r2, r2, #32
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	f002 021f 	and.w	r2, r2, #31
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d182      	bne.n	8003c7c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d76:	4b3c      	ldr	r3, [pc, #240]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f023 020f 	bic.w	r2, r3, #15
 8003d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	4937      	ldr	r1, [pc, #220]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a19      	ldr	r1, [r3, #32]
 8003da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	492d      	ldr	r1, [pc, #180]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
 8003db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	fa93 f2a3 	rbit	r2, r3
 8003dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ddc:	601a      	str	r2, [r3, #0]
  return result;
 8003dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003de6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003df2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfe:	f7fe f80d 	bl	8001e1c <HAL_GetTick>
 8003e02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e06:	e009      	b.n	8003e1c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fe f808 	bl	8001e1c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e156      	b.n	80040ca <HAL_RCC_OscConfig+0x109a>
 8003e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	fa93 f2a3 	rbit	r2, r3
 8003e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e40:	601a      	str	r2, [r3, #0]
  return result;
 8003e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCC_OscConfig+0xe3c>
 8003e60:	4b01      	ldr	r3, [pc, #4]	; (8003e68 <HAL_RCC_OscConfig+0xe38>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	e02a      	b.n	8003ebc <HAL_RCC_OscConfig+0xe8c>
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e70:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e96:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	fa93 f2a3 	rbit	r2, r3
 8003eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <HAL_RCC_OscConfig+0x10a4>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ec0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ec4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ec8:	6011      	str	r1, [r2, #0]
 8003eca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ece:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	fa92 f1a2 	rbit	r1, r2
 8003ed8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003edc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003ee0:	6011      	str	r1, [r2, #0]
  return result;
 8003ee2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ee6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	fab2 f282 	clz	r2, r2
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	f042 0220 	orr.w	r2, r2, #32
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	f002 021f 	and.w	r2, r2, #31
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f202 	lsl.w	r2, r1, r2
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f43f af7f 	beq.w	8003e08 <HAL_RCC_OscConfig+0xdd8>
 8003f0a:	e0dd      	b.n	80040c8 <HAL_RCC_OscConfig+0x1098>
 8003f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f10:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	fa93 f2a3 	rbit	r2, r3
 8003f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f30:	601a      	str	r2, [r3, #0]
  return result;
 8003f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f36:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f3a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fd ff63 	bl	8001e1c <HAL_GetTick>
 8003f56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5a:	e009      	b.n	8003f70 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd ff5e 	bl	8001e1c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0ac      	b.n	80040ca <HAL_RCC_OscConfig+0x109a>
 8003f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	fa93 f2a3 	rbit	r2, r3
 8003f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f94:	601a      	str	r2, [r3, #0]
  return result;
 8003f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_RCC_OscConfig+0xf8a>
 8003fb4:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_OscConfig+0x10a4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	e027      	b.n	800400a <HAL_RCC_OscConfig+0xfda>
 8003fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fbe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fcc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f2a3 	rbit	r2, r3
 8003fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	fa93 f2a3 	rbit	r2, r3
 8003ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004000:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	4b33      	ldr	r3, [pc, #204]	; (80040d4 <HAL_RCC_OscConfig+0x10a4>)
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800400e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004012:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004016:	6011      	str	r1, [r2, #0]
 8004018:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800401c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	fa92 f1a2 	rbit	r1, r2
 8004026:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800402a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800402e:	6011      	str	r1, [r2, #0]
  return result;
 8004030:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004034:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	fab2 f282 	clz	r2, r2
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	f042 0220 	orr.w	r2, r2, #32
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	f002 021f 	and.w	r2, r2, #31
 800404a:	2101      	movs	r1, #1
 800404c:	fa01 f202 	lsl.w	r2, r1, r2
 8004050:	4013      	ands	r3, r2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d182      	bne.n	8003f5c <HAL_RCC_OscConfig+0xf2c>
 8004056:	e037      	b.n	80040c8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e02e      	b.n	80040ca <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_OscConfig+0x10a4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004074:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_RCC_OscConfig+0x10a4>)
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800407c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004080:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004088:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	429a      	cmp	r2, r3
 8004092:	d117      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004094:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004098:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800409c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80040ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000

080040d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b09e      	sub	sp, #120	; 0x78
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e162      	b.n	80043b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b90      	ldr	r3, [pc, #576]	; (8004334 <HAL_RCC_ClockConfig+0x25c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d910      	bls.n	8004120 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b8d      	ldr	r3, [pc, #564]	; (8004334 <HAL_RCC_ClockConfig+0x25c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 0207 	bic.w	r2, r3, #7
 8004106:	498b      	ldr	r1, [pc, #556]	; (8004334 <HAL_RCC_ClockConfig+0x25c>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b89      	ldr	r3, [pc, #548]	; (8004334 <HAL_RCC_ClockConfig+0x25c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e14a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412c:	4b82      	ldr	r3, [pc, #520]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	497f      	ldr	r1, [pc, #508]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 800413a:	4313      	orrs	r3, r2
 800413c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80dc 	beq.w	8004304 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d13c      	bne.n	80041ce <HAL_RCC_ClockConfig+0xf6>
 8004154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004158:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d102      	bne.n	800417e <HAL_RCC_ClockConfig+0xa6>
 8004178:	4b6f      	ldr	r3, [pc, #444]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	e00f      	b.n	800419e <HAL_RCC_ClockConfig+0xc6>
 800417e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004182:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	667b      	str	r3, [r7, #100]	; 0x64
 800418c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004190:	663b      	str	r3, [r7, #96]	; 0x60
 8004192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800419a:	4b67      	ldr	r3, [pc, #412]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80041a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041a6:	fa92 f2a2 	rbit	r2, r2
 80041aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80041ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041ae:	fab2 f282 	clz	r2, r2
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	f042 0220 	orr.w	r2, r2, #32
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	f002 021f 	and.w	r2, r2, #31
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f202 	lsl.w	r2, r1, r2
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d17b      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0f3      	b.n	80043b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d13c      	bne.n	8004250 <HAL_RCC_ClockConfig+0x178>
 80041d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <HAL_RCC_ClockConfig+0x128>
 80041fa:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	e00f      	b.n	8004220 <HAL_RCC_ClockConfig+0x148>
 8004200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004204:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
 800420e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004212:	643b      	str	r3, [r7, #64]	; 0x40
 8004214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800421c:	4b46      	ldr	r3, [pc, #280]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004224:	63ba      	str	r2, [r7, #56]	; 0x38
 8004226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004228:	fa92 f2a2 	rbit	r2, r2
 800422c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800422e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004230:	fab2 f282 	clz	r2, r2
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	f042 0220 	orr.w	r2, r2, #32
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	f002 021f 	and.w	r2, r2, #31
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f202 	lsl.w	r2, r1, r2
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d13a      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b2      	b.n	80043b6 <HAL_RCC_ClockConfig+0x2de>
 8004250:	2302      	movs	r3, #2
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d102      	bne.n	8004278 <HAL_RCC_ClockConfig+0x1a0>
 8004272:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	e00d      	b.n	8004294 <HAL_RCC_ClockConfig+0x1bc>
 8004278:	2302      	movs	r3, #2
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
 8004284:	2302      	movs	r3, #2
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2202      	movs	r2, #2
 8004296:	61ba      	str	r2, [r7, #24]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	fa92 f2a2 	rbit	r2, r2
 800429e:	617a      	str	r2, [r7, #20]
  return result;
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	fab2 f282 	clz	r2, r2
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	f042 0220 	orr.w	r2, r2, #32
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	f002 021f 	and.w	r2, r2, #31
 80042b2:	2101      	movs	r1, #1
 80042b4:	fa01 f202 	lsl.w	r2, r1, r2
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e079      	b.n	80043b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	491a      	ldr	r1, [pc, #104]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d4:	f7fd fda2 	bl	8001e1c <HAL_GetTick>
 80042d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fd fd9e 	bl	8001e1c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e061      	b.n	80043b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_RCC_ClockConfig+0x260>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 020c 	and.w	r2, r3, #12
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	429a      	cmp	r2, r3
 8004302:	d1eb      	bne.n	80042dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_ClockConfig+0x25c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d214      	bcs.n	800433c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCC_ClockConfig+0x25c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 0207 	bic.w	r2, r3, #7
 800431a:	4906      	ldr	r1, [pc, #24]	; (8004334 <HAL_RCC_ClockConfig+0x25c>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b04      	ldr	r3, [pc, #16]	; (8004334 <HAL_RCC_ClockConfig+0x25c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d005      	beq.n	800433c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e040      	b.n	80043b6 <HAL_RCC_ClockConfig+0x2de>
 8004334:	40022000 	.word	0x40022000
 8004338:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <HAL_RCC_ClockConfig+0x2e8>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	491a      	ldr	r1, [pc, #104]	; (80043c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004366:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4912      	ldr	r1, [pc, #72]	; (80043c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800437a:	f000 f829 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 800437e:	4601      	mov	r1, r0
 8004380:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <HAL_RCC_ClockConfig+0x2e8>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004388:	22f0      	movs	r2, #240	; 0xf0
 800438a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	fa92 f2a2 	rbit	r2, r2
 8004392:	60fa      	str	r2, [r7, #12]
  return result;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	fab2 f282 	clz	r2, r2
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	40d3      	lsrs	r3, r2
 800439e:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <HAL_RCC_ClockConfig+0x2ec>)
 80043a0:	5cd3      	ldrb	r3, [r2, r3]
 80043a2:	fa21 f303 	lsr.w	r3, r1, r3
 80043a6:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <HAL_RCC_ClockConfig+0x2f0>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <HAL_RCC_ClockConfig+0x2f4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fd fcf0 	bl	8001d94 <HAL_InitTick>
  
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3778      	adds	r7, #120	; 0x78
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	0800b020 	.word	0x0800b020
 80043c8:	20000004 	.word	0x20000004
 80043cc:	20000008 	.word	0x20000008

080043d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b08b      	sub	sp, #44	; 0x2c
 80043d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d002      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x30>
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0x36>
 80043fe:	e03f      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004402:	623b      	str	r3, [r7, #32]
      break;
 8004404:	e03f      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800440c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004410:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	fa92 f2a2 	rbit	r2, r2
 8004418:	607a      	str	r2, [r7, #4]
  return result;
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	fab2 f282 	clz	r2, r2
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	40d3      	lsrs	r3, r2
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004426:	5cd3      	ldrb	r3, [r2, r3]
 8004428:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <HAL_RCC_GetSysClockFreq+0xc4>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	220f      	movs	r2, #15
 8004434:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	fa92 f2a2 	rbit	r2, r2
 800443c:	60fa      	str	r2, [r7, #12]
  return result;
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	fab2 f282 	clz	r2, r2
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	40d3      	lsrs	r3, r2
 8004448:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004458:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <HAL_RCC_GetSysClockFreq+0xc8>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	e007      	b.n	800447a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800446a:	4a0b      	ldr	r2, [pc, #44]	; (8004498 <HAL_RCC_GetSysClockFreq+0xc8>)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	623b      	str	r3, [r7, #32]
      break;
 800447e:	e002      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004482:	623b      	str	r3, [r7, #32]
      break;
 8004484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004486:	6a3b      	ldr	r3, [r7, #32]
}
 8004488:	4618      	mov	r0, r3
 800448a:	372c      	adds	r7, #44	; 0x2c
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40021000 	.word	0x40021000
 8004498:	007a1200 	.word	0x007a1200
 800449c:	0800b038 	.word	0x0800b038
 80044a0:	0800b048 	.word	0x0800b048

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000004 	.word	0x20000004

080044bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044c2:	f7ff ffef 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c6:	4601      	mov	r1, r0
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	fa92 f2a2 	rbit	r2, r2
 80044dc:	603a      	str	r2, [r7, #0]
  return result;
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	fab2 f282 	clz	r2, r2
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	40d3      	lsrs	r3, r2
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80044ea:	5cd3      	ldrb	r3, [r2, r3]
 80044ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	0800b030 	.word	0x0800b030

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004506:	f7ff ffcd 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 800450a:	4601      	mov	r1, r0
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004514:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004518:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	fa92 f2a2 	rbit	r2, r2
 8004520:	603a      	str	r2, [r7, #0]
  return result;
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	fab2 f282 	clz	r2, r2
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	40d3      	lsrs	r3, r2
 800452c:	4a04      	ldr	r2, [pc, #16]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x40>)
 800452e:	5cd3      	ldrb	r3, [r2, r3]
 8004530:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000
 8004540:	0800b030 	.word	0x0800b030

08004544 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b092      	sub	sp, #72	; 0x48
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80d4 	beq.w	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004568:	4b4e      	ldr	r3, [pc, #312]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10e      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004574:	4b4b      	ldr	r3, [pc, #300]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	61d3      	str	r3, [r2, #28]
 8004580:	4b48      	ldr	r3, [pc, #288]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004592:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d118      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800459e:	4b42      	ldr	r3, [pc, #264]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a41      	ldr	r2, [pc, #260]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045aa:	f7fd fc37 	bl	8001e1c <HAL_GetTick>
 80045ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b0:	e008      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b2:	f7fd fc33 	bl	8001e1c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b64      	cmp	r3, #100	; 0x64
 80045be:	d901      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1d6      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c4:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045d0:	4b34      	ldr	r3, [pc, #208]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8084 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d07c      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045f0:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	461a      	mov	r2, r3
 800461a:	2301      	movs	r3, #1
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	461a      	mov	r2, r3
 800463e:	2300      	movs	r3, #0
 8004640:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004646:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d04b      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004652:	f7fd fbe3 	bl	8001e1c <HAL_GetTick>
 8004656:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	e00a      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fd fbdf 	bl	8001e1c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e180      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004670:	2302      	movs	r3, #2
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	2302      	movs	r3, #2
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	61fb      	str	r3, [r7, #28]
  return result;
 8004688:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d108      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800469e:	4b01      	ldr	r3, [pc, #4]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	e00d      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40007000 	.word	0x40007000
 80046ac:	10908100 	.word	0x10908100
 80046b0:	2302      	movs	r3, #2
 80046b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	4b9a      	ldr	r3, [pc, #616]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2202      	movs	r2, #2
 80046c2:	613a      	str	r2, [r7, #16]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	fa92 f2a2 	rbit	r2, r2
 80046ca:	60fa      	str	r2, [r7, #12]
  return result;
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	fab2 f282 	clz	r2, r2
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	f002 021f 	and.w	r2, r2, #31
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0b7      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046ea:	4b8f      	ldr	r3, [pc, #572]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	498c      	ldr	r1, [pc, #560]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004704:	4b88      	ldr	r3, [pc, #544]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4a87      	ldr	r2, [pc, #540]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800471c:	4b82      	ldr	r3, [pc, #520]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f023 0203 	bic.w	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	497f      	ldr	r1, [pc, #508]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800473a:	4b7b      	ldr	r3, [pc, #492]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4978      	ldr	r1, [pc, #480]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004758:	4b73      	ldr	r3, [pc, #460]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	4970      	ldr	r1, [pc, #448]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004776:	4b6c      	ldr	r3, [pc, #432]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f023 0210 	bic.w	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4969      	ldr	r1, [pc, #420]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004784:	4313      	orrs	r3, r2
 8004786:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004794:	4b64      	ldr	r3, [pc, #400]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	4961      	ldr	r1, [pc, #388]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b2:	4b5d      	ldr	r3, [pc, #372]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	f023 0220 	bic.w	r2, r3, #32
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	495a      	ldr	r1, [pc, #360]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d0:	4b55      	ldr	r3, [pc, #340]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	4952      	ldr	r1, [pc, #328]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047ee:	4b4e      	ldr	r3, [pc, #312]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	494b      	ldr	r1, [pc, #300]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800480c:	4b46      	ldr	r3, [pc, #280]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	4943      	ldr	r1, [pc, #268]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800482a:	4b3f      	ldr	r3, [pc, #252]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	493c      	ldr	r1, [pc, #240]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004848:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	4934      	ldr	r1, [pc, #208]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004866:	4b30      	ldr	r3, [pc, #192]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	492d      	ldr	r1, [pc, #180]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	4925      	ldr	r1, [pc, #148]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048a2:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	491e      	ldr	r1, [pc, #120]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	4916      	ldr	r1, [pc, #88]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ea:	490f      	ldr	r1, [pc, #60]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	4907      	ldr	r1, [pc, #28]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800491a:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	e002      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	4913      	ldr	r1, [pc, #76]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004930:	4313      	orrs	r3, r2
 8004932:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494c:	490b      	ldr	r1, [pc, #44]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800494e:	4313      	orrs	r3, r2
 8004950:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	4904      	ldr	r1, [pc, #16]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800496c:	4313      	orrs	r3, r2
 800496e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3748      	adds	r7, #72	; 0x48
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40021000 	.word	0x40021000

08004980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e049      	b.n	8004a26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fc fff2 	bl	8001990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f000 fb80 	bl	80050c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e049      	b.n	8004ad4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f841 	bl	8004adc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f000 fb29 	bl	80050c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <HAL_TIM_PWM_Start+0x24>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e03c      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d109      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x3e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e02f      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d109      	bne.n	8004b48 <HAL_TIM_PWM_Start+0x58>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e022      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d109      	bne.n	8004b62 <HAL_TIM_PWM_Start+0x72>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	bf14      	ite	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	2300      	moveq	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e015      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d109      	bne.n	8004b7c <HAL_TIM_PWM_Start+0x8c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e008      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0a1      	b.n	8004cda <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0xb6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba4:	e023      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0xc6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb4:	e01b      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0xd6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc4:	e013      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0xe6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd4:	e00b      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0xf6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be4:	e003      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fea2 	bl	8005940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a38      	ldr	r2, [pc, #224]	; (8004ce4 <HAL_TIM_PWM_Start+0x1f4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d018      	beq.n	8004c38 <HAL_TIM_PWM_Start+0x148>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a37      	ldr	r2, [pc, #220]	; (8004ce8 <HAL_TIM_PWM_Start+0x1f8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d013      	beq.n	8004c38 <HAL_TIM_PWM_Start+0x148>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a35      	ldr	r2, [pc, #212]	; (8004cec <HAL_TIM_PWM_Start+0x1fc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00e      	beq.n	8004c38 <HAL_TIM_PWM_Start+0x148>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a34      	ldr	r2, [pc, #208]	; (8004cf0 <HAL_TIM_PWM_Start+0x200>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d009      	beq.n	8004c38 <HAL_TIM_PWM_Start+0x148>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a32      	ldr	r2, [pc, #200]	; (8004cf4 <HAL_TIM_PWM_Start+0x204>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_TIM_PWM_Start+0x148>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a31      	ldr	r2, [pc, #196]	; (8004cf8 <HAL_TIM_PWM_Start+0x208>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d101      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x14c>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <HAL_TIM_PWM_Start+0x14e>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_TIM_PWM_Start+0x1f4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d01d      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x1a8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d018      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x1a8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a24      	ldr	r2, [pc, #144]	; (8004cfc <HAL_TIM_PWM_Start+0x20c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x1a8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <HAL_TIM_PWM_Start+0x210>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x1a8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_TIM_PWM_Start+0x1f8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x1a8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_TIM_PWM_Start+0x1fc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x1a8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <HAL_TIM_PWM_Start+0x208>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d115      	bne.n	8004cc4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <HAL_TIM_PWM_Start+0x214>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d015      	beq.n	8004cd6 <HAL_TIM_PWM_Start+0x1e6>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb0:	d011      	beq.n	8004cd6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc2:	e008      	b.n	8004cd6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800
 8004cf8:	40015000 	.word	0x40015000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	00010007 	.word	0x00010007

08004d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0ff      	b.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b14      	cmp	r3, #20
 8004d32:	f200 80f0 	bhi.w	8004f16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d91 	.word	0x08004d91
 8004d40:	08004f17 	.word	0x08004f17
 8004d44:	08004f17 	.word	0x08004f17
 8004d48:	08004f17 	.word	0x08004f17
 8004d4c:	08004dd1 	.word	0x08004dd1
 8004d50:	08004f17 	.word	0x08004f17
 8004d54:	08004f17 	.word	0x08004f17
 8004d58:	08004f17 	.word	0x08004f17
 8004d5c:	08004e13 	.word	0x08004e13
 8004d60:	08004f17 	.word	0x08004f17
 8004d64:	08004f17 	.word	0x08004f17
 8004d68:	08004f17 	.word	0x08004f17
 8004d6c:	08004e53 	.word	0x08004e53
 8004d70:	08004f17 	.word	0x08004f17
 8004d74:	08004f17 	.word	0x08004f17
 8004d78:	08004f17 	.word	0x08004f17
 8004d7c:	08004e95 	.word	0x08004e95
 8004d80:	08004f17 	.word	0x08004f17
 8004d84:	08004f17 	.word	0x08004f17
 8004d88:	08004f17 	.word	0x08004f17
 8004d8c:	08004ed5 	.word	0x08004ed5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fa32 	bl	8005200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0208 	orr.w	r2, r2, #8
 8004daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0204 	bic.w	r2, r2, #4
 8004dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6999      	ldr	r1, [r3, #24]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	619a      	str	r2, [r3, #24]
      break;
 8004dce:	e0a5      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 faac 	bl	8005334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6999      	ldr	r1, [r3, #24]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	021a      	lsls	r2, r3, #8
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	619a      	str	r2, [r3, #24]
      break;
 8004e10:	e084      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fb1f 	bl	800545c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0208 	orr.w	r2, r2, #8
 8004e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0204 	bic.w	r2, r2, #4
 8004e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69d9      	ldr	r1, [r3, #28]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	61da      	str	r2, [r3, #28]
      break;
 8004e50:	e064      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fb91 	bl	8005580 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69d9      	ldr	r1, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	021a      	lsls	r2, r3, #8
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	61da      	str	r2, [r3, #28]
      break;
 8004e92:	e043      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fbe0 	bl	8005660 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0208 	orr.w	r2, r2, #8
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0204 	bic.w	r2, r2, #4
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ed2:	e023      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fc2a 	bl	8005734 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	021a      	lsls	r2, r3, #8
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f14:	e002      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
      break;
 8004f1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop

08004f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_TIM_ConfigClockSource+0x1c>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e0b6      	b.n	80050ba <HAL_TIM_ConfigClockSource+0x18a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f88:	d03e      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0xd8>
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	f200 8087 	bhi.w	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f96:	f000 8086 	beq.w	80050a6 <HAL_TIM_ConfigClockSource+0x176>
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9e:	d87f      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fa0:	2b70      	cmp	r3, #112	; 0x70
 8004fa2:	d01a      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0xaa>
 8004fa4:	2b70      	cmp	r3, #112	; 0x70
 8004fa6:	d87b      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fa8:	2b60      	cmp	r3, #96	; 0x60
 8004faa:	d050      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x11e>
 8004fac:	2b60      	cmp	r3, #96	; 0x60
 8004fae:	d877      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fb0:	2b50      	cmp	r3, #80	; 0x50
 8004fb2:	d03c      	beq.n	800502e <HAL_TIM_ConfigClockSource+0xfe>
 8004fb4:	2b50      	cmp	r3, #80	; 0x50
 8004fb6:	d873      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d058      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x13e>
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	d86f      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fc0:	2b30      	cmp	r3, #48	; 0x30
 8004fc2:	d064      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15e>
 8004fc4:	2b30      	cmp	r3, #48	; 0x30
 8004fc6:	d86b      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d060      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15e>
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d867      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d05c      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15e>
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d05a      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15e>
 8004fd8:	e062      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6899      	ldr	r1, [r3, #8]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f000 fc89 	bl	8005900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	609a      	str	r2, [r3, #8]
      break;
 8005006:	e04f      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6899      	ldr	r1, [r3, #8]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f000 fc72 	bl	8005900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800502a:	609a      	str	r2, [r3, #8]
      break;
 800502c:	e03c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fbe6 	bl	800580c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2150      	movs	r1, #80	; 0x50
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fc3f 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 800504c:	e02c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6859      	ldr	r1, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	461a      	mov	r2, r3
 800505c:	f000 fc05 	bl	800586a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2160      	movs	r1, #96	; 0x60
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fc2f 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 800506c:	e01c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	461a      	mov	r2, r3
 800507c:	f000 fbc6 	bl	800580c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2140      	movs	r1, #64	; 0x40
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fc1f 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 800508c:	e00c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f000 fc16 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 800509e:	e003      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
      break;
 80050a4:	e000      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a42      	ldr	r2, [pc, #264]	; (80051e0 <TIM_Base_SetConfig+0x11c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e2:	d00f      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3f      	ldr	r2, [pc, #252]	; (80051e4 <TIM_Base_SetConfig+0x120>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3e      	ldr	r2, [pc, #248]	; (80051e8 <TIM_Base_SetConfig+0x124>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3d      	ldr	r2, [pc, #244]	; (80051ec <TIM_Base_SetConfig+0x128>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3c      	ldr	r2, [pc, #240]	; (80051f0 <TIM_Base_SetConfig+0x12c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a31      	ldr	r2, [pc, #196]	; (80051e0 <TIM_Base_SetConfig+0x11c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01f      	beq.n	800515e <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2e      	ldr	r2, [pc, #184]	; (80051e4 <TIM_Base_SetConfig+0x120>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2d      	ldr	r2, [pc, #180]	; (80051e8 <TIM_Base_SetConfig+0x124>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0x9a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2c      	ldr	r2, [pc, #176]	; (80051ec <TIM_Base_SetConfig+0x128>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2c      	ldr	r2, [pc, #176]	; (80051f4 <TIM_Base_SetConfig+0x130>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2b      	ldr	r2, [pc, #172]	; (80051f8 <TIM_Base_SetConfig+0x134>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <TIM_Base_SetConfig+0x138>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0x9a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a25      	ldr	r2, [pc, #148]	; (80051f0 <TIM_Base_SetConfig+0x12c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <TIM_Base_SetConfig+0x11c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <TIM_Base_SetConfig+0x100>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a13      	ldr	r2, [pc, #76]	; (80051ec <TIM_Base_SetConfig+0x128>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00f      	beq.n	80051c4 <TIM_Base_SetConfig+0x100>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <TIM_Base_SetConfig+0x130>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00b      	beq.n	80051c4 <TIM_Base_SetConfig+0x100>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <TIM_Base_SetConfig+0x134>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d007      	beq.n	80051c4 <TIM_Base_SetConfig+0x100>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a11      	ldr	r2, [pc, #68]	; (80051fc <TIM_Base_SetConfig+0x138>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0x100>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <TIM_Base_SetConfig+0x12c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d103      	bne.n	80051cc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	615a      	str	r2, [r3, #20]
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40013400 	.word	0x40013400
 80051f0:	40015000 	.word	0x40015000
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0302 	bic.w	r3, r3, #2
 800524c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a30      	ldr	r2, [pc, #192]	; (800531c <TIM_OC1_SetConfig+0x11c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <TIM_OC1_SetConfig+0x88>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <TIM_OC1_SetConfig+0x120>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00f      	beq.n	8005288 <TIM_OC1_SetConfig+0x88>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a2e      	ldr	r2, [pc, #184]	; (8005324 <TIM_OC1_SetConfig+0x124>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_OC1_SetConfig+0x88>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a2d      	ldr	r2, [pc, #180]	; (8005328 <TIM_OC1_SetConfig+0x128>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_OC1_SetConfig+0x88>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a2c      	ldr	r2, [pc, #176]	; (800532c <TIM_OC1_SetConfig+0x12c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_OC1_SetConfig+0x88>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a2b      	ldr	r2, [pc, #172]	; (8005330 <TIM_OC1_SetConfig+0x130>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10c      	bne.n	80052a2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 0308 	bic.w	r3, r3, #8
 800528e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <TIM_OC1_SetConfig+0x11c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <TIM_OC1_SetConfig+0xd2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <TIM_OC1_SetConfig+0x120>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00f      	beq.n	80052d2 <TIM_OC1_SetConfig+0xd2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <TIM_OC1_SetConfig+0x124>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00b      	beq.n	80052d2 <TIM_OC1_SetConfig+0xd2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <TIM_OC1_SetConfig+0x128>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <TIM_OC1_SetConfig+0xd2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <TIM_OC1_SetConfig+0x12c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_OC1_SetConfig+0xd2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <TIM_OC1_SetConfig+0x130>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d111      	bne.n	80052f6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	621a      	str	r2, [r3, #32]
}
 8005310:	bf00      	nop
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40013400 	.word	0x40013400
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800
 8005330:	40015000 	.word	0x40015000

08005334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f023 0210 	bic.w	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0320 	bic.w	r3, r3, #32
 8005382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a2c      	ldr	r2, [pc, #176]	; (8005444 <TIM_OC2_SetConfig+0x110>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_OC2_SetConfig+0x74>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a2b      	ldr	r2, [pc, #172]	; (8005448 <TIM_OC2_SetConfig+0x114>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC2_SetConfig+0x74>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a2a      	ldr	r2, [pc, #168]	; (800544c <TIM_OC2_SetConfig+0x118>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d10d      	bne.n	80053c4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <TIM_OC2_SetConfig+0x110>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <TIM_OC2_SetConfig+0xc0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <TIM_OC2_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00f      	beq.n	80053f4 <TIM_OC2_SetConfig+0xc0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <TIM_OC2_SetConfig+0x11c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00b      	beq.n	80053f4 <TIM_OC2_SetConfig+0xc0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <TIM_OC2_SetConfig+0x120>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_OC2_SetConfig+0xc0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1c      	ldr	r2, [pc, #112]	; (8005458 <TIM_OC2_SetConfig+0x124>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC2_SetConfig+0xc0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a17      	ldr	r2, [pc, #92]	; (800544c <TIM_OC2_SetConfig+0x118>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d113      	bne.n	800541c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005402:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40015000 	.word	0x40015000
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800

0800545c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <TIM_OC3_SetConfig+0x10c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_OC3_SetConfig+0x72>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <TIM_OC3_SetConfig+0x110>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_OC3_SetConfig+0x72>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a29      	ldr	r2, [pc, #164]	; (8005570 <TIM_OC3_SetConfig+0x114>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d10d      	bne.n	80054ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <TIM_OC3_SetConfig+0x10c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <TIM_OC3_SetConfig+0xbe>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <TIM_OC3_SetConfig+0x110>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_OC3_SetConfig+0xbe>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <TIM_OC3_SetConfig+0x118>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_OC3_SetConfig+0xbe>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <TIM_OC3_SetConfig+0x11c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_OC3_SetConfig+0xbe>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <TIM_OC3_SetConfig+0x120>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_OC3_SetConfig+0xbe>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a16      	ldr	r2, [pc, #88]	; (8005570 <TIM_OC3_SetConfig+0x114>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d113      	bne.n	8005542 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	621a      	str	r2, [r3, #32]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40013400 	.word	0x40013400
 8005570:	40015000 	.word	0x40015000
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	031b      	lsls	r3, r3, #12
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1a      	ldr	r2, [pc, #104]	; (8005648 <TIM_OC4_SetConfig+0xc8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_OC4_SetConfig+0x8c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a19      	ldr	r2, [pc, #100]	; (800564c <TIM_OC4_SetConfig+0xcc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC4_SetConfig+0x8c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <TIM_OC4_SetConfig+0xd0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC4_SetConfig+0x8c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a17      	ldr	r2, [pc, #92]	; (8005654 <TIM_OC4_SetConfig+0xd4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC4_SetConfig+0x8c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a16      	ldr	r2, [pc, #88]	; (8005658 <TIM_OC4_SetConfig+0xd8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC4_SetConfig+0x8c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a15      	ldr	r2, [pc, #84]	; (800565c <TIM_OC4_SetConfig+0xdc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800
 800565c:	40015000 	.word	0x40015000

08005660 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a19      	ldr	r2, [pc, #100]	; (800571c <TIM_OC5_SetConfig+0xbc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <TIM_OC5_SetConfig+0x82>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a18      	ldr	r2, [pc, #96]	; (8005720 <TIM_OC5_SetConfig+0xc0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00f      	beq.n	80056e2 <TIM_OC5_SetConfig+0x82>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a17      	ldr	r2, [pc, #92]	; (8005724 <TIM_OC5_SetConfig+0xc4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00b      	beq.n	80056e2 <TIM_OC5_SetConfig+0x82>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a16      	ldr	r2, [pc, #88]	; (8005728 <TIM_OC5_SetConfig+0xc8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <TIM_OC5_SetConfig+0x82>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a15      	ldr	r2, [pc, #84]	; (800572c <TIM_OC5_SetConfig+0xcc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_OC5_SetConfig+0x82>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a14      	ldr	r2, [pc, #80]	; (8005730 <TIM_OC5_SetConfig+0xd0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d109      	bne.n	80056f6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	621a      	str	r2, [r3, #32]
}
 8005710:	bf00      	nop
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40013400 	.word	0x40013400
 8005724:	40014000 	.word	0x40014000
 8005728:	40014400 	.word	0x40014400
 800572c:	40014800 	.word	0x40014800
 8005730:	40015000 	.word	0x40015000

08005734 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800577a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	051b      	lsls	r3, r3, #20
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1a      	ldr	r2, [pc, #104]	; (80057f4 <TIM_OC6_SetConfig+0xc0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d013      	beq.n	80057b8 <TIM_OC6_SetConfig+0x84>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <TIM_OC6_SetConfig+0xc4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00f      	beq.n	80057b8 <TIM_OC6_SetConfig+0x84>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a18      	ldr	r2, [pc, #96]	; (80057fc <TIM_OC6_SetConfig+0xc8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00b      	beq.n	80057b8 <TIM_OC6_SetConfig+0x84>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a17      	ldr	r2, [pc, #92]	; (8005800 <TIM_OC6_SetConfig+0xcc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <TIM_OC6_SetConfig+0x84>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a16      	ldr	r2, [pc, #88]	; (8005804 <TIM_OC6_SetConfig+0xd0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC6_SetConfig+0x84>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <TIM_OC6_SetConfig+0xd4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d109      	bne.n	80057cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40013400 	.word	0x40013400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800
 8005808:	40015000 	.word	0x40015000

0800580c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 030a 	bic.w	r3, r3, #10
 8005848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586a:	b480      	push	{r7}
 800586c:	b087      	sub	sp, #28
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0210 	bic.w	r2, r3, #16
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	031b      	lsls	r3, r3, #12
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f043 0307 	orr.w	r3, r3, #7
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	609a      	str	r2, [r3, #8]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800591a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	021a      	lsls	r2, r3, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	431a      	orrs	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	609a      	str	r2, [r3, #8]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2201      	movs	r2, #1
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1a      	ldr	r2, [r3, #32]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	43db      	mvns	r3, r3
 8005962:	401a      	ands	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a1a      	ldr	r2, [r3, #32]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	fa01 f303 	lsl.w	r3, r1, r3
 8005978:	431a      	orrs	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e06d      	b.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a30      	ldr	r2, [pc, #192]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d004      	beq.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d01d      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a20:	d018      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1c      	ldr	r2, [pc, #112]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1a      	ldr	r2, [pc, #104]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d10c      	bne.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40013400 	.word	0x40013400
 8005a94:	40015000 	.word	0x40015000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40014000 	.word	0x40014000

08005aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e040      	b.n	8005b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fb ffd8 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	; 0x24
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8b6 	bl	8005c54 <UART_SetConfig>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e022      	b.n	8005b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa7e 	bl	8005ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb05 	bl	8006140 <UART_CheckIdleState>
 8005b36:	4603      	mov	r3, r0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d178      	bne.n	8005c4a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_UART_Transmit+0x24>
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e071      	b.n	8005c4c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2221      	movs	r2, #33	; 0x21
 8005b74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b76:	f7fc f951 	bl	8001e1c <HAL_GetTick>
 8005b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b94:	d108      	bne.n	8005ba8 <HAL_UART_Transmit+0x68>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d104      	bne.n	8005ba8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e003      	b.n	8005bb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bb0:	e030      	b.n	8005c14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fb67 	bl	8006290 <UART_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e03c      	b.n	8005c4c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be4:	b292      	uxth	r2, r2
 8005be6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	3302      	adds	r3, #2
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	e008      	b.n	8005c02 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	781a      	ldrb	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	b292      	uxth	r2, r2
 8005bfa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1c8      	bne.n	8005bb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2200      	movs	r2, #0
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fb30 	bl	8006290 <UART_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e005      	b.n	8005c4c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e000      	b.n	8005c4c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c4a:	2302      	movs	r3, #2
  }
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b92      	ldr	r3, [pc, #584]	; (8005ec8 <UART_SetConfig+0x274>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6812      	ldr	r2, [r2, #0]
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a80      	ldr	r2, [pc, #512]	; (8005ecc <UART_SetConfig+0x278>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d120      	bne.n	8005d12 <UART_SetConfig+0xbe>
 8005cd0:	4b7f      	ldr	r3, [pc, #508]	; (8005ed0 <UART_SetConfig+0x27c>)
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d817      	bhi.n	8005d0c <UART_SetConfig+0xb8>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <UART_SetConfig+0x90>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005cf5 	.word	0x08005cf5
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005d07 	.word	0x08005d07
 8005cf0:	08005cfb 	.word	0x08005cfb
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e0b5      	b.n	8005e66 <UART_SetConfig+0x212>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e0b2      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d00:	2304      	movs	r3, #4
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e0af      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d06:	2308      	movs	r3, #8
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e0ac      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e0a9      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6f      	ldr	r2, [pc, #444]	; (8005ed4 <UART_SetConfig+0x280>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d124      	bne.n	8005d66 <UART_SetConfig+0x112>
 8005d1c:	4b6c      	ldr	r3, [pc, #432]	; (8005ed0 <UART_SetConfig+0x27c>)
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d28:	d011      	beq.n	8005d4e <UART_SetConfig+0xfa>
 8005d2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d2e:	d817      	bhi.n	8005d60 <UART_SetConfig+0x10c>
 8005d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d34:	d011      	beq.n	8005d5a <UART_SetConfig+0x106>
 8005d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d3a:	d811      	bhi.n	8005d60 <UART_SetConfig+0x10c>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <UART_SetConfig+0xf4>
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d44:	d006      	beq.n	8005d54 <UART_SetConfig+0x100>
 8005d46:	e00b      	b.n	8005d60 <UART_SetConfig+0x10c>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e08b      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e088      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d54:	2304      	movs	r3, #4
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e085      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e082      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d60:	2310      	movs	r3, #16
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e07f      	b.n	8005e66 <UART_SetConfig+0x212>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a5b      	ldr	r2, [pc, #364]	; (8005ed8 <UART_SetConfig+0x284>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d124      	bne.n	8005dba <UART_SetConfig+0x166>
 8005d70:	4b57      	ldr	r3, [pc, #348]	; (8005ed0 <UART_SetConfig+0x27c>)
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d7c:	d011      	beq.n	8005da2 <UART_SetConfig+0x14e>
 8005d7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d82:	d817      	bhi.n	8005db4 <UART_SetConfig+0x160>
 8005d84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d88:	d011      	beq.n	8005dae <UART_SetConfig+0x15a>
 8005d8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d8e:	d811      	bhi.n	8005db4 <UART_SetConfig+0x160>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <UART_SetConfig+0x148>
 8005d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d98:	d006      	beq.n	8005da8 <UART_SetConfig+0x154>
 8005d9a:	e00b      	b.n	8005db4 <UART_SetConfig+0x160>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e061      	b.n	8005e66 <UART_SetConfig+0x212>
 8005da2:	2302      	movs	r3, #2
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e05e      	b.n	8005e66 <UART_SetConfig+0x212>
 8005da8:	2304      	movs	r3, #4
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e05b      	b.n	8005e66 <UART_SetConfig+0x212>
 8005dae:	2308      	movs	r3, #8
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e058      	b.n	8005e66 <UART_SetConfig+0x212>
 8005db4:	2310      	movs	r3, #16
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e055      	b.n	8005e66 <UART_SetConfig+0x212>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a47      	ldr	r2, [pc, #284]	; (8005edc <UART_SetConfig+0x288>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d124      	bne.n	8005e0e <UART_SetConfig+0x1ba>
 8005dc4:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <UART_SetConfig+0x27c>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005dcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dd0:	d011      	beq.n	8005df6 <UART_SetConfig+0x1a2>
 8005dd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dd6:	d817      	bhi.n	8005e08 <UART_SetConfig+0x1b4>
 8005dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ddc:	d011      	beq.n	8005e02 <UART_SetConfig+0x1ae>
 8005dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de2:	d811      	bhi.n	8005e08 <UART_SetConfig+0x1b4>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <UART_SetConfig+0x19c>
 8005de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dec:	d006      	beq.n	8005dfc <UART_SetConfig+0x1a8>
 8005dee:	e00b      	b.n	8005e08 <UART_SetConfig+0x1b4>
 8005df0:	2300      	movs	r3, #0
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e037      	b.n	8005e66 <UART_SetConfig+0x212>
 8005df6:	2302      	movs	r3, #2
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e034      	b.n	8005e66 <UART_SetConfig+0x212>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e031      	b.n	8005e66 <UART_SetConfig+0x212>
 8005e02:	2308      	movs	r3, #8
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e02e      	b.n	8005e66 <UART_SetConfig+0x212>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e02b      	b.n	8005e66 <UART_SetConfig+0x212>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a33      	ldr	r2, [pc, #204]	; (8005ee0 <UART_SetConfig+0x28c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d124      	bne.n	8005e62 <UART_SetConfig+0x20e>
 8005e18:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <UART_SetConfig+0x27c>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e24:	d011      	beq.n	8005e4a <UART_SetConfig+0x1f6>
 8005e26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e2a:	d817      	bhi.n	8005e5c <UART_SetConfig+0x208>
 8005e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e30:	d011      	beq.n	8005e56 <UART_SetConfig+0x202>
 8005e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e36:	d811      	bhi.n	8005e5c <UART_SetConfig+0x208>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <UART_SetConfig+0x1f0>
 8005e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e40:	d006      	beq.n	8005e50 <UART_SetConfig+0x1fc>
 8005e42:	e00b      	b.n	8005e5c <UART_SetConfig+0x208>
 8005e44:	2300      	movs	r3, #0
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e00d      	b.n	8005e66 <UART_SetConfig+0x212>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e00a      	b.n	8005e66 <UART_SetConfig+0x212>
 8005e50:	2304      	movs	r3, #4
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e007      	b.n	8005e66 <UART_SetConfig+0x212>
 8005e56:	2308      	movs	r3, #8
 8005e58:	77fb      	strb	r3, [r7, #31]
 8005e5a:	e004      	b.n	8005e66 <UART_SetConfig+0x212>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e001      	b.n	8005e66 <UART_SetConfig+0x212>
 8005e62:	2310      	movs	r3, #16
 8005e64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6e:	d16b      	bne.n	8005f48 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005e70:	7ffb      	ldrb	r3, [r7, #31]
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d838      	bhi.n	8005ee8 <UART_SetConfig+0x294>
 8005e76:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <UART_SetConfig+0x228>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	08005ee9 	.word	0x08005ee9
 8005e8c:	08005eb7 	.word	0x08005eb7
 8005e90:	08005ee9 	.word	0x08005ee9
 8005e94:	08005ee9 	.word	0x08005ee9
 8005e98:	08005ee9 	.word	0x08005ee9
 8005e9c:	08005ebf 	.word	0x08005ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea0:	f7fe fb0c 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8005ea4:	61b8      	str	r0, [r7, #24]
        break;
 8005ea6:	e024      	b.n	8005ef2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea8:	f7fe fb2a 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8005eac:	61b8      	str	r0, [r7, #24]
        break;
 8005eae:	e020      	b.n	8005ef2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <UART_SetConfig+0x290>)
 8005eb2:	61bb      	str	r3, [r7, #24]
        break;
 8005eb4:	e01d      	b.n	8005ef2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb6:	f7fe fa8b 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 8005eba:	61b8      	str	r0, [r7, #24]
        break;
 8005ebc:	e019      	b.n	8005ef2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec2:	61bb      	str	r3, [r7, #24]
        break;
 8005ec4:	e015      	b.n	8005ef2 <UART_SetConfig+0x29e>
 8005ec6:	bf00      	nop
 8005ec8:	efff69f3 	.word	0xefff69f3
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40004400 	.word	0x40004400
 8005ed8:	40004800 	.word	0x40004800
 8005edc:	40004c00 	.word	0x40004c00
 8005ee0:	40005000 	.word	0x40005000
 8005ee4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	77bb      	strb	r3, [r7, #30]
        break;
 8005ef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d073      	beq.n	8005fe0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	005a      	lsls	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	441a      	add	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b0f      	cmp	r3, #15
 8005f12:	d916      	bls.n	8005f42 <UART_SetConfig+0x2ee>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1a:	d212      	bcs.n	8005f42 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f023 030f 	bic.w	r3, r3, #15
 8005f24:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	085b      	lsrs	r3, r3, #1
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	89fb      	ldrh	r3, [r7, #14]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	89fa      	ldrh	r2, [r7, #14]
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	e04e      	b.n	8005fe0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	77bb      	strb	r3, [r7, #30]
 8005f46:	e04b      	b.n	8005fe0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d827      	bhi.n	8005f9e <UART_SetConfig+0x34a>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <UART_SetConfig+0x300>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f81 	.word	0x08005f81
 8005f5c:	08005f89 	.word	0x08005f89
 8005f60:	08005f9f 	.word	0x08005f9f
 8005f64:	08005f8f 	.word	0x08005f8f
 8005f68:	08005f9f 	.word	0x08005f9f
 8005f6c:	08005f9f 	.word	0x08005f9f
 8005f70:	08005f9f 	.word	0x08005f9f
 8005f74:	08005f97 	.word	0x08005f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7fe faa0 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8005f7c:	61b8      	str	r0, [r7, #24]
        break;
 8005f7e:	e013      	b.n	8005fa8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f80:	f7fe fabe 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8005f84:	61b8      	str	r0, [r7, #24]
        break;
 8005f86:	e00f      	b.n	8005fa8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f88:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <UART_SetConfig+0x3a4>)
 8005f8a:	61bb      	str	r3, [r7, #24]
        break;
 8005f8c:	e00c      	b.n	8005fa8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8e:	f7fe fa1f 	bl	80043d0 <HAL_RCC_GetSysClockFreq>
 8005f92:	61b8      	str	r0, [r7, #24]
        break;
 8005f94:	e008      	b.n	8005fa8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9a:	61bb      	str	r3, [r7, #24]
        break;
 8005f9c:	e004      	b.n	8005fa8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	77bb      	strb	r3, [r7, #30]
        break;
 8005fa6:	bf00      	nop
    }

    if (pclk != 0U)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d018      	beq.n	8005fe0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	085a      	lsrs	r2, r3, #1
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	441a      	add	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b0f      	cmp	r3, #15
 8005fc6:	d909      	bls.n	8005fdc <UART_SetConfig+0x388>
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fce:	d205      	bcs.n	8005fdc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60da      	str	r2, [r3, #12]
 8005fda:	e001      	b.n	8005fe0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005fec:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	007a1200 	.word	0x007a1200

08005ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01a      	beq.n	8006112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060fa:	d10a      	bne.n	8006112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b098      	sub	sp, #96	; 0x60
 8006144:	af02      	add	r7, sp, #8
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006150:	f7fb fe64 	bl	8001e1c <HAL_GetTick>
 8006154:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b08      	cmp	r3, #8
 8006162:	d12e      	bne.n	80061c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616c:	2200      	movs	r2, #0
 800616e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f88c 	bl	8006290 <UART_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d021      	beq.n	80061c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006192:	653b      	str	r3, [r7, #80]	; 0x50
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800619c:	647b      	str	r3, [r7, #68]	; 0x44
 800619e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e6      	bne.n	800617e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e062      	b.n	8006288 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d149      	bne.n	8006264 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d8:	2200      	movs	r2, #0
 80061da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f856 	bl	8006290 <UART_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d03c      	beq.n	8006264 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	623b      	str	r3, [r7, #32]
   return(result);
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006208:	633b      	str	r3, [r7, #48]	; 0x30
 800620a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800620e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	60fb      	str	r3, [r7, #12]
   return(result);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800623c:	61fa      	str	r2, [r7, #28]
 800623e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69b9      	ldr	r1, [r7, #24]
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	617b      	str	r3, [r7, #20]
   return(result);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e011      	b.n	8006288 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3758      	adds	r7, #88	; 0x58
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a0:	e049      	b.n	8006336 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d045      	beq.n	8006336 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062aa:	f7fb fdb7 	bl	8001e1c <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d302      	bcc.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e048      	b.n	8006356 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d031      	beq.n	8006336 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d110      	bne.n	8006302 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2208      	movs	r2, #8
 80062e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f838 	bl	800635e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2208      	movs	r2, #8
 80062f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e029      	b.n	8006356 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006310:	d111      	bne.n	8006336 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800631a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f81e 	bl	800635e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e00f      	b.n	8006356 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4013      	ands	r3, r2
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	429a      	cmp	r2, r3
 8006344:	bf0c      	ite	eq
 8006346:	2301      	moveq	r3, #1
 8006348:	2300      	movne	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	79fb      	ldrb	r3, [r7, #7]
 8006350:	429a      	cmp	r2, r3
 8006352:	d0a6      	beq.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800635e:	b480      	push	{r7}
 8006360:	b095      	sub	sp, #84	; 0x54
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800637a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006384:	643b      	str	r3, [r7, #64]	; 0x40
 8006386:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800638a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e6      	bne.n	8006366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3308      	adds	r3, #8
 80063b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e5      	bne.n	8006398 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d118      	bne.n	8006406 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f023 0310 	bic.w	r3, r3, #16
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6979      	ldr	r1, [r7, #20]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e6      	bne.n	80063d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	669a      	str	r2, [r3, #104]	; 0x68
}
 800641a:	bf00      	nop
 800641c:	3754      	adds	r7, #84	; 0x54
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <__errno>:
 8006428:	4b01      	ldr	r3, [pc, #4]	; (8006430 <__errno+0x8>)
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	20000010 	.word	0x20000010

08006434 <__libc_init_array>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	4d0d      	ldr	r5, [pc, #52]	; (800646c <__libc_init_array+0x38>)
 8006438:	4c0d      	ldr	r4, [pc, #52]	; (8006470 <__libc_init_array+0x3c>)
 800643a:	1b64      	subs	r4, r4, r5
 800643c:	10a4      	asrs	r4, r4, #2
 800643e:	2600      	movs	r6, #0
 8006440:	42a6      	cmp	r6, r4
 8006442:	d109      	bne.n	8006458 <__libc_init_array+0x24>
 8006444:	4d0b      	ldr	r5, [pc, #44]	; (8006474 <__libc_init_array+0x40>)
 8006446:	4c0c      	ldr	r4, [pc, #48]	; (8006478 <__libc_init_array+0x44>)
 8006448:	f004 fda6 	bl	800af98 <_init>
 800644c:	1b64      	subs	r4, r4, r5
 800644e:	10a4      	asrs	r4, r4, #2
 8006450:	2600      	movs	r6, #0
 8006452:	42a6      	cmp	r6, r4
 8006454:	d105      	bne.n	8006462 <__libc_init_array+0x2e>
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	f855 3b04 	ldr.w	r3, [r5], #4
 800645c:	4798      	blx	r3
 800645e:	3601      	adds	r6, #1
 8006460:	e7ee      	b.n	8006440 <__libc_init_array+0xc>
 8006462:	f855 3b04 	ldr.w	r3, [r5], #4
 8006466:	4798      	blx	r3
 8006468:	3601      	adds	r6, #1
 800646a:	e7f2      	b.n	8006452 <__libc_init_array+0x1e>
 800646c:	0800b858 	.word	0x0800b858
 8006470:	0800b858 	.word	0x0800b858
 8006474:	0800b858 	.word	0x0800b858
 8006478:	0800b85c 	.word	0x0800b85c

0800647c <memset>:
 800647c:	4402      	add	r2, r0
 800647e:	4603      	mov	r3, r0
 8006480:	4293      	cmp	r3, r2
 8006482:	d100      	bne.n	8006486 <memset+0xa>
 8006484:	4770      	bx	lr
 8006486:	f803 1b01 	strb.w	r1, [r3], #1
 800648a:	e7f9      	b.n	8006480 <memset+0x4>

0800648c <__cvt>:
 800648c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006490:	ec55 4b10 	vmov	r4, r5, d0
 8006494:	2d00      	cmp	r5, #0
 8006496:	460e      	mov	r6, r1
 8006498:	4619      	mov	r1, r3
 800649a:	462b      	mov	r3, r5
 800649c:	bfbb      	ittet	lt
 800649e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064a2:	461d      	movlt	r5, r3
 80064a4:	2300      	movge	r3, #0
 80064a6:	232d      	movlt	r3, #45	; 0x2d
 80064a8:	700b      	strb	r3, [r1, #0]
 80064aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064b0:	4691      	mov	r9, r2
 80064b2:	f023 0820 	bic.w	r8, r3, #32
 80064b6:	bfbc      	itt	lt
 80064b8:	4622      	movlt	r2, r4
 80064ba:	4614      	movlt	r4, r2
 80064bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064c0:	d005      	beq.n	80064ce <__cvt+0x42>
 80064c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064c6:	d100      	bne.n	80064ca <__cvt+0x3e>
 80064c8:	3601      	adds	r6, #1
 80064ca:	2102      	movs	r1, #2
 80064cc:	e000      	b.n	80064d0 <__cvt+0x44>
 80064ce:	2103      	movs	r1, #3
 80064d0:	ab03      	add	r3, sp, #12
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	ab02      	add	r3, sp, #8
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	ec45 4b10 	vmov	d0, r4, r5
 80064dc:	4653      	mov	r3, sl
 80064de:	4632      	mov	r2, r6
 80064e0:	f000 fe1a 	bl	8007118 <_dtoa_r>
 80064e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064e8:	4607      	mov	r7, r0
 80064ea:	d102      	bne.n	80064f2 <__cvt+0x66>
 80064ec:	f019 0f01 	tst.w	r9, #1
 80064f0:	d022      	beq.n	8006538 <__cvt+0xac>
 80064f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064f6:	eb07 0906 	add.w	r9, r7, r6
 80064fa:	d110      	bne.n	800651e <__cvt+0x92>
 80064fc:	783b      	ldrb	r3, [r7, #0]
 80064fe:	2b30      	cmp	r3, #48	; 0x30
 8006500:	d10a      	bne.n	8006518 <__cvt+0x8c>
 8006502:	2200      	movs	r2, #0
 8006504:	2300      	movs	r3, #0
 8006506:	4620      	mov	r0, r4
 8006508:	4629      	mov	r1, r5
 800650a:	f7fa fae5 	bl	8000ad8 <__aeabi_dcmpeq>
 800650e:	b918      	cbnz	r0, 8006518 <__cvt+0x8c>
 8006510:	f1c6 0601 	rsb	r6, r6, #1
 8006514:	f8ca 6000 	str.w	r6, [sl]
 8006518:	f8da 3000 	ldr.w	r3, [sl]
 800651c:	4499      	add	r9, r3
 800651e:	2200      	movs	r2, #0
 8006520:	2300      	movs	r3, #0
 8006522:	4620      	mov	r0, r4
 8006524:	4629      	mov	r1, r5
 8006526:	f7fa fad7 	bl	8000ad8 <__aeabi_dcmpeq>
 800652a:	b108      	cbz	r0, 8006530 <__cvt+0xa4>
 800652c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006530:	2230      	movs	r2, #48	; 0x30
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	454b      	cmp	r3, r9
 8006536:	d307      	bcc.n	8006548 <__cvt+0xbc>
 8006538:	9b03      	ldr	r3, [sp, #12]
 800653a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800653c:	1bdb      	subs	r3, r3, r7
 800653e:	4638      	mov	r0, r7
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	b004      	add	sp, #16
 8006544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006548:	1c59      	adds	r1, r3, #1
 800654a:	9103      	str	r1, [sp, #12]
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e7f0      	b.n	8006532 <__cvt+0xa6>

08006550 <__exponent>:
 8006550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006552:	4603      	mov	r3, r0
 8006554:	2900      	cmp	r1, #0
 8006556:	bfb8      	it	lt
 8006558:	4249      	neglt	r1, r1
 800655a:	f803 2b02 	strb.w	r2, [r3], #2
 800655e:	bfb4      	ite	lt
 8006560:	222d      	movlt	r2, #45	; 0x2d
 8006562:	222b      	movge	r2, #43	; 0x2b
 8006564:	2909      	cmp	r1, #9
 8006566:	7042      	strb	r2, [r0, #1]
 8006568:	dd2a      	ble.n	80065c0 <__exponent+0x70>
 800656a:	f10d 0407 	add.w	r4, sp, #7
 800656e:	46a4      	mov	ip, r4
 8006570:	270a      	movs	r7, #10
 8006572:	46a6      	mov	lr, r4
 8006574:	460a      	mov	r2, r1
 8006576:	fb91 f6f7 	sdiv	r6, r1, r7
 800657a:	fb07 1516 	mls	r5, r7, r6, r1
 800657e:	3530      	adds	r5, #48	; 0x30
 8006580:	2a63      	cmp	r2, #99	; 0x63
 8006582:	f104 34ff 	add.w	r4, r4, #4294967295
 8006586:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800658a:	4631      	mov	r1, r6
 800658c:	dcf1      	bgt.n	8006572 <__exponent+0x22>
 800658e:	3130      	adds	r1, #48	; 0x30
 8006590:	f1ae 0502 	sub.w	r5, lr, #2
 8006594:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006598:	1c44      	adds	r4, r0, #1
 800659a:	4629      	mov	r1, r5
 800659c:	4561      	cmp	r1, ip
 800659e:	d30a      	bcc.n	80065b6 <__exponent+0x66>
 80065a0:	f10d 0209 	add.w	r2, sp, #9
 80065a4:	eba2 020e 	sub.w	r2, r2, lr
 80065a8:	4565      	cmp	r5, ip
 80065aa:	bf88      	it	hi
 80065ac:	2200      	movhi	r2, #0
 80065ae:	4413      	add	r3, r2
 80065b0:	1a18      	subs	r0, r3, r0
 80065b2:	b003      	add	sp, #12
 80065b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065be:	e7ed      	b.n	800659c <__exponent+0x4c>
 80065c0:	2330      	movs	r3, #48	; 0x30
 80065c2:	3130      	adds	r1, #48	; 0x30
 80065c4:	7083      	strb	r3, [r0, #2]
 80065c6:	70c1      	strb	r1, [r0, #3]
 80065c8:	1d03      	adds	r3, r0, #4
 80065ca:	e7f1      	b.n	80065b0 <__exponent+0x60>

080065cc <_printf_float>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	ed2d 8b02 	vpush	{d8}
 80065d4:	b08d      	sub	sp, #52	; 0x34
 80065d6:	460c      	mov	r4, r1
 80065d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065dc:	4616      	mov	r6, r2
 80065de:	461f      	mov	r7, r3
 80065e0:	4605      	mov	r5, r0
 80065e2:	f001 fd3f 	bl	8008064 <_localeconv_r>
 80065e6:	f8d0 a000 	ldr.w	sl, [r0]
 80065ea:	4650      	mov	r0, sl
 80065ec:	f7f9 fdf8 	bl	80001e0 <strlen>
 80065f0:	2300      	movs	r3, #0
 80065f2:	930a      	str	r3, [sp, #40]	; 0x28
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	9305      	str	r3, [sp, #20]
 80065f8:	f8d8 3000 	ldr.w	r3, [r8]
 80065fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006600:	3307      	adds	r3, #7
 8006602:	f023 0307 	bic.w	r3, r3, #7
 8006606:	f103 0208 	add.w	r2, r3, #8
 800660a:	f8c8 2000 	str.w	r2, [r8]
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006616:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800661a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800661e:	9307      	str	r3, [sp, #28]
 8006620:	f8cd 8018 	str.w	r8, [sp, #24]
 8006624:	ee08 0a10 	vmov	s16, r0
 8006628:	4b9f      	ldr	r3, [pc, #636]	; (80068a8 <_printf_float+0x2dc>)
 800662a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800662e:	f04f 32ff 	mov.w	r2, #4294967295
 8006632:	f7fa fa83 	bl	8000b3c <__aeabi_dcmpun>
 8006636:	bb88      	cbnz	r0, 800669c <_printf_float+0xd0>
 8006638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800663c:	4b9a      	ldr	r3, [pc, #616]	; (80068a8 <_printf_float+0x2dc>)
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	f7fa fa5d 	bl	8000b00 <__aeabi_dcmple>
 8006646:	bb48      	cbnz	r0, 800669c <_printf_float+0xd0>
 8006648:	2200      	movs	r2, #0
 800664a:	2300      	movs	r3, #0
 800664c:	4640      	mov	r0, r8
 800664e:	4649      	mov	r1, r9
 8006650:	f7fa fa4c 	bl	8000aec <__aeabi_dcmplt>
 8006654:	b110      	cbz	r0, 800665c <_printf_float+0x90>
 8006656:	232d      	movs	r3, #45	; 0x2d
 8006658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800665c:	4b93      	ldr	r3, [pc, #588]	; (80068ac <_printf_float+0x2e0>)
 800665e:	4894      	ldr	r0, [pc, #592]	; (80068b0 <_printf_float+0x2e4>)
 8006660:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006664:	bf94      	ite	ls
 8006666:	4698      	movls	r8, r3
 8006668:	4680      	movhi	r8, r0
 800666a:	2303      	movs	r3, #3
 800666c:	6123      	str	r3, [r4, #16]
 800666e:	9b05      	ldr	r3, [sp, #20]
 8006670:	f023 0204 	bic.w	r2, r3, #4
 8006674:	6022      	str	r2, [r4, #0]
 8006676:	f04f 0900 	mov.w	r9, #0
 800667a:	9700      	str	r7, [sp, #0]
 800667c:	4633      	mov	r3, r6
 800667e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006680:	4621      	mov	r1, r4
 8006682:	4628      	mov	r0, r5
 8006684:	f000 f9d8 	bl	8006a38 <_printf_common>
 8006688:	3001      	adds	r0, #1
 800668a:	f040 8090 	bne.w	80067ae <_printf_float+0x1e2>
 800668e:	f04f 30ff 	mov.w	r0, #4294967295
 8006692:	b00d      	add	sp, #52	; 0x34
 8006694:	ecbd 8b02 	vpop	{d8}
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	4642      	mov	r2, r8
 800669e:	464b      	mov	r3, r9
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7fa fa4a 	bl	8000b3c <__aeabi_dcmpun>
 80066a8:	b140      	cbz	r0, 80066bc <_printf_float+0xf0>
 80066aa:	464b      	mov	r3, r9
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bfbc      	itt	lt
 80066b0:	232d      	movlt	r3, #45	; 0x2d
 80066b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066b6:	487f      	ldr	r0, [pc, #508]	; (80068b4 <_printf_float+0x2e8>)
 80066b8:	4b7f      	ldr	r3, [pc, #508]	; (80068b8 <_printf_float+0x2ec>)
 80066ba:	e7d1      	b.n	8006660 <_printf_float+0x94>
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066c2:	9206      	str	r2, [sp, #24]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	d13f      	bne.n	8006748 <_printf_float+0x17c>
 80066c8:	2306      	movs	r3, #6
 80066ca:	6063      	str	r3, [r4, #4]
 80066cc:	9b05      	ldr	r3, [sp, #20]
 80066ce:	6861      	ldr	r1, [r4, #4]
 80066d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066d4:	2300      	movs	r3, #0
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	ab0a      	add	r3, sp, #40	; 0x28
 80066da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066de:	ab09      	add	r3, sp, #36	; 0x24
 80066e0:	ec49 8b10 	vmov	d0, r8, r9
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066ec:	4628      	mov	r0, r5
 80066ee:	f7ff fecd 	bl	800648c <__cvt>
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f6:	2b47      	cmp	r3, #71	; 0x47
 80066f8:	4680      	mov	r8, r0
 80066fa:	d108      	bne.n	800670e <_printf_float+0x142>
 80066fc:	1cc8      	adds	r0, r1, #3
 80066fe:	db02      	blt.n	8006706 <_printf_float+0x13a>
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	4299      	cmp	r1, r3
 8006704:	dd41      	ble.n	800678a <_printf_float+0x1be>
 8006706:	f1ab 0b02 	sub.w	fp, fp, #2
 800670a:	fa5f fb8b 	uxtb.w	fp, fp
 800670e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006712:	d820      	bhi.n	8006756 <_printf_float+0x18a>
 8006714:	3901      	subs	r1, #1
 8006716:	465a      	mov	r2, fp
 8006718:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800671c:	9109      	str	r1, [sp, #36]	; 0x24
 800671e:	f7ff ff17 	bl	8006550 <__exponent>
 8006722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006724:	1813      	adds	r3, r2, r0
 8006726:	2a01      	cmp	r2, #1
 8006728:	4681      	mov	r9, r0
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	dc02      	bgt.n	8006734 <_printf_float+0x168>
 800672e:	6822      	ldr	r2, [r4, #0]
 8006730:	07d2      	lsls	r2, r2, #31
 8006732:	d501      	bpl.n	8006738 <_printf_float+0x16c>
 8006734:	3301      	adds	r3, #1
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800673c:	2b00      	cmp	r3, #0
 800673e:	d09c      	beq.n	800667a <_printf_float+0xae>
 8006740:	232d      	movs	r3, #45	; 0x2d
 8006742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006746:	e798      	b.n	800667a <_printf_float+0xae>
 8006748:	9a06      	ldr	r2, [sp, #24]
 800674a:	2a47      	cmp	r2, #71	; 0x47
 800674c:	d1be      	bne.n	80066cc <_printf_float+0x100>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1bc      	bne.n	80066cc <_printf_float+0x100>
 8006752:	2301      	movs	r3, #1
 8006754:	e7b9      	b.n	80066ca <_printf_float+0xfe>
 8006756:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800675a:	d118      	bne.n	800678e <_printf_float+0x1c2>
 800675c:	2900      	cmp	r1, #0
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	dd0b      	ble.n	800677a <_printf_float+0x1ae>
 8006762:	6121      	str	r1, [r4, #16]
 8006764:	b913      	cbnz	r3, 800676c <_printf_float+0x1a0>
 8006766:	6822      	ldr	r2, [r4, #0]
 8006768:	07d0      	lsls	r0, r2, #31
 800676a:	d502      	bpl.n	8006772 <_printf_float+0x1a6>
 800676c:	3301      	adds	r3, #1
 800676e:	440b      	add	r3, r1
 8006770:	6123      	str	r3, [r4, #16]
 8006772:	65a1      	str	r1, [r4, #88]	; 0x58
 8006774:	f04f 0900 	mov.w	r9, #0
 8006778:	e7de      	b.n	8006738 <_printf_float+0x16c>
 800677a:	b913      	cbnz	r3, 8006782 <_printf_float+0x1b6>
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	07d2      	lsls	r2, r2, #31
 8006780:	d501      	bpl.n	8006786 <_printf_float+0x1ba>
 8006782:	3302      	adds	r3, #2
 8006784:	e7f4      	b.n	8006770 <_printf_float+0x1a4>
 8006786:	2301      	movs	r3, #1
 8006788:	e7f2      	b.n	8006770 <_printf_float+0x1a4>
 800678a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800678e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006790:	4299      	cmp	r1, r3
 8006792:	db05      	blt.n	80067a0 <_printf_float+0x1d4>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	6121      	str	r1, [r4, #16]
 8006798:	07d8      	lsls	r0, r3, #31
 800679a:	d5ea      	bpl.n	8006772 <_printf_float+0x1a6>
 800679c:	1c4b      	adds	r3, r1, #1
 800679e:	e7e7      	b.n	8006770 <_printf_float+0x1a4>
 80067a0:	2900      	cmp	r1, #0
 80067a2:	bfd4      	ite	le
 80067a4:	f1c1 0202 	rsble	r2, r1, #2
 80067a8:	2201      	movgt	r2, #1
 80067aa:	4413      	add	r3, r2
 80067ac:	e7e0      	b.n	8006770 <_printf_float+0x1a4>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	055a      	lsls	r2, r3, #21
 80067b2:	d407      	bmi.n	80067c4 <_printf_float+0x1f8>
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	4642      	mov	r2, r8
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	d12c      	bne.n	800681c <_printf_float+0x250>
 80067c2:	e764      	b.n	800668e <_printf_float+0xc2>
 80067c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067c8:	f240 80e0 	bls.w	800698c <_printf_float+0x3c0>
 80067cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067d0:	2200      	movs	r2, #0
 80067d2:	2300      	movs	r3, #0
 80067d4:	f7fa f980 	bl	8000ad8 <__aeabi_dcmpeq>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d034      	beq.n	8006846 <_printf_float+0x27a>
 80067dc:	4a37      	ldr	r2, [pc, #220]	; (80068bc <_printf_float+0x2f0>)
 80067de:	2301      	movs	r3, #1
 80067e0:	4631      	mov	r1, r6
 80067e2:	4628      	mov	r0, r5
 80067e4:	47b8      	blx	r7
 80067e6:	3001      	adds	r0, #1
 80067e8:	f43f af51 	beq.w	800668e <_printf_float+0xc2>
 80067ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f0:	429a      	cmp	r2, r3
 80067f2:	db02      	blt.n	80067fa <_printf_float+0x22e>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	07d8      	lsls	r0, r3, #31
 80067f8:	d510      	bpl.n	800681c <_printf_float+0x250>
 80067fa:	ee18 3a10 	vmov	r3, s16
 80067fe:	4652      	mov	r2, sl
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	f43f af41 	beq.w	800668e <_printf_float+0xc2>
 800680c:	f04f 0800 	mov.w	r8, #0
 8006810:	f104 091a 	add.w	r9, r4, #26
 8006814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006816:	3b01      	subs	r3, #1
 8006818:	4543      	cmp	r3, r8
 800681a:	dc09      	bgt.n	8006830 <_printf_float+0x264>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	079b      	lsls	r3, r3, #30
 8006820:	f100 8105 	bmi.w	8006a2e <_printf_float+0x462>
 8006824:	68e0      	ldr	r0, [r4, #12]
 8006826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006828:	4298      	cmp	r0, r3
 800682a:	bfb8      	it	lt
 800682c:	4618      	movlt	r0, r3
 800682e:	e730      	b.n	8006692 <_printf_float+0xc6>
 8006830:	2301      	movs	r3, #1
 8006832:	464a      	mov	r2, r9
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f af27 	beq.w	800668e <_printf_float+0xc2>
 8006840:	f108 0801 	add.w	r8, r8, #1
 8006844:	e7e6      	b.n	8006814 <_printf_float+0x248>
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	dc39      	bgt.n	80068c0 <_printf_float+0x2f4>
 800684c:	4a1b      	ldr	r2, [pc, #108]	; (80068bc <_printf_float+0x2f0>)
 800684e:	2301      	movs	r3, #1
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f af19 	beq.w	800668e <_printf_float+0xc2>
 800685c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006860:	4313      	orrs	r3, r2
 8006862:	d102      	bne.n	800686a <_printf_float+0x29e>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	07d9      	lsls	r1, r3, #31
 8006868:	d5d8      	bpl.n	800681c <_printf_float+0x250>
 800686a:	ee18 3a10 	vmov	r3, s16
 800686e:	4652      	mov	r2, sl
 8006870:	4631      	mov	r1, r6
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f43f af09 	beq.w	800668e <_printf_float+0xc2>
 800687c:	f04f 0900 	mov.w	r9, #0
 8006880:	f104 0a1a 	add.w	sl, r4, #26
 8006884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006886:	425b      	negs	r3, r3
 8006888:	454b      	cmp	r3, r9
 800688a:	dc01      	bgt.n	8006890 <_printf_float+0x2c4>
 800688c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688e:	e792      	b.n	80067b6 <_printf_float+0x1ea>
 8006890:	2301      	movs	r3, #1
 8006892:	4652      	mov	r2, sl
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f aef7 	beq.w	800668e <_printf_float+0xc2>
 80068a0:	f109 0901 	add.w	r9, r9, #1
 80068a4:	e7ee      	b.n	8006884 <_printf_float+0x2b8>
 80068a6:	bf00      	nop
 80068a8:	7fefffff 	.word	0x7fefffff
 80068ac:	0800b05c 	.word	0x0800b05c
 80068b0:	0800b060 	.word	0x0800b060
 80068b4:	0800b068 	.word	0x0800b068
 80068b8:	0800b064 	.word	0x0800b064
 80068bc:	0800b06c 	.word	0x0800b06c
 80068c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068c4:	429a      	cmp	r2, r3
 80068c6:	bfa8      	it	ge
 80068c8:	461a      	movge	r2, r3
 80068ca:	2a00      	cmp	r2, #0
 80068cc:	4691      	mov	r9, r2
 80068ce:	dc37      	bgt.n	8006940 <_printf_float+0x374>
 80068d0:	f04f 0b00 	mov.w	fp, #0
 80068d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068d8:	f104 021a 	add.w	r2, r4, #26
 80068dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068de:	9305      	str	r3, [sp, #20]
 80068e0:	eba3 0309 	sub.w	r3, r3, r9
 80068e4:	455b      	cmp	r3, fp
 80068e6:	dc33      	bgt.n	8006950 <_printf_float+0x384>
 80068e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ec:	429a      	cmp	r2, r3
 80068ee:	db3b      	blt.n	8006968 <_printf_float+0x39c>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	07da      	lsls	r2, r3, #31
 80068f4:	d438      	bmi.n	8006968 <_printf_float+0x39c>
 80068f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f8:	9a05      	ldr	r2, [sp, #20]
 80068fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068fc:	1a9a      	subs	r2, r3, r2
 80068fe:	eba3 0901 	sub.w	r9, r3, r1
 8006902:	4591      	cmp	r9, r2
 8006904:	bfa8      	it	ge
 8006906:	4691      	movge	r9, r2
 8006908:	f1b9 0f00 	cmp.w	r9, #0
 800690c:	dc35      	bgt.n	800697a <_printf_float+0x3ae>
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006916:	f104 0a1a 	add.w	sl, r4, #26
 800691a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	eba3 0309 	sub.w	r3, r3, r9
 8006924:	4543      	cmp	r3, r8
 8006926:	f77f af79 	ble.w	800681c <_printf_float+0x250>
 800692a:	2301      	movs	r3, #1
 800692c:	4652      	mov	r2, sl
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	f43f aeaa 	beq.w	800668e <_printf_float+0xc2>
 800693a:	f108 0801 	add.w	r8, r8, #1
 800693e:	e7ec      	b.n	800691a <_printf_float+0x34e>
 8006940:	4613      	mov	r3, r2
 8006942:	4631      	mov	r1, r6
 8006944:	4642      	mov	r2, r8
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	d1c0      	bne.n	80068d0 <_printf_float+0x304>
 800694e:	e69e      	b.n	800668e <_printf_float+0xc2>
 8006950:	2301      	movs	r3, #1
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	9205      	str	r2, [sp, #20]
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f ae97 	beq.w	800668e <_printf_float+0xc2>
 8006960:	9a05      	ldr	r2, [sp, #20]
 8006962:	f10b 0b01 	add.w	fp, fp, #1
 8006966:	e7b9      	b.n	80068dc <_printf_float+0x310>
 8006968:	ee18 3a10 	vmov	r3, s16
 800696c:	4652      	mov	r2, sl
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	d1be      	bne.n	80068f6 <_printf_float+0x32a>
 8006978:	e689      	b.n	800668e <_printf_float+0xc2>
 800697a:	9a05      	ldr	r2, [sp, #20]
 800697c:	464b      	mov	r3, r9
 800697e:	4442      	add	r2, r8
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	d1c1      	bne.n	800690e <_printf_float+0x342>
 800698a:	e680      	b.n	800668e <_printf_float+0xc2>
 800698c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800698e:	2a01      	cmp	r2, #1
 8006990:	dc01      	bgt.n	8006996 <_printf_float+0x3ca>
 8006992:	07db      	lsls	r3, r3, #31
 8006994:	d538      	bpl.n	8006a08 <_printf_float+0x43c>
 8006996:	2301      	movs	r3, #1
 8006998:	4642      	mov	r2, r8
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae74 	beq.w	800668e <_printf_float+0xc2>
 80069a6:	ee18 3a10 	vmov	r3, s16
 80069aa:	4652      	mov	r2, sl
 80069ac:	4631      	mov	r1, r6
 80069ae:	4628      	mov	r0, r5
 80069b0:	47b8      	blx	r7
 80069b2:	3001      	adds	r0, #1
 80069b4:	f43f ae6b 	beq.w	800668e <_printf_float+0xc2>
 80069b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069bc:	2200      	movs	r2, #0
 80069be:	2300      	movs	r3, #0
 80069c0:	f7fa f88a 	bl	8000ad8 <__aeabi_dcmpeq>
 80069c4:	b9d8      	cbnz	r0, 80069fe <_printf_float+0x432>
 80069c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c8:	f108 0201 	add.w	r2, r8, #1
 80069cc:	3b01      	subs	r3, #1
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	d10e      	bne.n	80069f6 <_printf_float+0x42a>
 80069d8:	e659      	b.n	800668e <_printf_float+0xc2>
 80069da:	2301      	movs	r3, #1
 80069dc:	4652      	mov	r2, sl
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b8      	blx	r7
 80069e4:	3001      	adds	r0, #1
 80069e6:	f43f ae52 	beq.w	800668e <_printf_float+0xc2>
 80069ea:	f108 0801 	add.w	r8, r8, #1
 80069ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f0:	3b01      	subs	r3, #1
 80069f2:	4543      	cmp	r3, r8
 80069f4:	dcf1      	bgt.n	80069da <_printf_float+0x40e>
 80069f6:	464b      	mov	r3, r9
 80069f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069fc:	e6dc      	b.n	80067b8 <_printf_float+0x1ec>
 80069fe:	f04f 0800 	mov.w	r8, #0
 8006a02:	f104 0a1a 	add.w	sl, r4, #26
 8006a06:	e7f2      	b.n	80069ee <_printf_float+0x422>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4642      	mov	r2, r8
 8006a0c:	e7df      	b.n	80069ce <_printf_float+0x402>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	464a      	mov	r2, r9
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f ae38 	beq.w	800668e <_printf_float+0xc2>
 8006a1e:	f108 0801 	add.w	r8, r8, #1
 8006a22:	68e3      	ldr	r3, [r4, #12]
 8006a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a26:	1a5b      	subs	r3, r3, r1
 8006a28:	4543      	cmp	r3, r8
 8006a2a:	dcf0      	bgt.n	8006a0e <_printf_float+0x442>
 8006a2c:	e6fa      	b.n	8006824 <_printf_float+0x258>
 8006a2e:	f04f 0800 	mov.w	r8, #0
 8006a32:	f104 0919 	add.w	r9, r4, #25
 8006a36:	e7f4      	b.n	8006a22 <_printf_float+0x456>

08006a38 <_printf_common>:
 8006a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3c:	4616      	mov	r6, r2
 8006a3e:	4699      	mov	r9, r3
 8006a40:	688a      	ldr	r2, [r1, #8]
 8006a42:	690b      	ldr	r3, [r1, #16]
 8006a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	bfb8      	it	lt
 8006a4c:	4613      	movlt	r3, r2
 8006a4e:	6033      	str	r3, [r6, #0]
 8006a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a54:	4607      	mov	r7, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	b10a      	cbz	r2, 8006a5e <_printf_common+0x26>
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	6033      	str	r3, [r6, #0]
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	0699      	lsls	r1, r3, #26
 8006a62:	bf42      	ittt	mi
 8006a64:	6833      	ldrmi	r3, [r6, #0]
 8006a66:	3302      	addmi	r3, #2
 8006a68:	6033      	strmi	r3, [r6, #0]
 8006a6a:	6825      	ldr	r5, [r4, #0]
 8006a6c:	f015 0506 	ands.w	r5, r5, #6
 8006a70:	d106      	bne.n	8006a80 <_printf_common+0x48>
 8006a72:	f104 0a19 	add.w	sl, r4, #25
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	6832      	ldr	r2, [r6, #0]
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	42ab      	cmp	r3, r5
 8006a7e:	dc26      	bgt.n	8006ace <_printf_common+0x96>
 8006a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a84:	1e13      	subs	r3, r2, #0
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	bf18      	it	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	0692      	lsls	r2, r2, #26
 8006a8e:	d42b      	bmi.n	8006ae8 <_printf_common+0xb0>
 8006a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a94:	4649      	mov	r1, r9
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c0      	blx	r8
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d01e      	beq.n	8006adc <_printf_common+0xa4>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	68e5      	ldr	r5, [r4, #12]
 8006aa2:	6832      	ldr	r2, [r6, #0]
 8006aa4:	f003 0306 	and.w	r3, r3, #6
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	bf08      	it	eq
 8006aac:	1aad      	subeq	r5, r5, r2
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	6922      	ldr	r2, [r4, #16]
 8006ab2:	bf0c      	ite	eq
 8006ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ab8:	2500      	movne	r5, #0
 8006aba:	4293      	cmp	r3, r2
 8006abc:	bfc4      	itt	gt
 8006abe:	1a9b      	subgt	r3, r3, r2
 8006ac0:	18ed      	addgt	r5, r5, r3
 8006ac2:	2600      	movs	r6, #0
 8006ac4:	341a      	adds	r4, #26
 8006ac6:	42b5      	cmp	r5, r6
 8006ac8:	d11a      	bne.n	8006b00 <_printf_common+0xc8>
 8006aca:	2000      	movs	r0, #0
 8006acc:	e008      	b.n	8006ae0 <_printf_common+0xa8>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4652      	mov	r2, sl
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	47c0      	blx	r8
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d103      	bne.n	8006ae4 <_printf_common+0xac>
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	e7c6      	b.n	8006a76 <_printf_common+0x3e>
 8006ae8:	18e1      	adds	r1, r4, r3
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	2030      	movs	r0, #48	; 0x30
 8006aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006af2:	4422      	add	r2, r4
 8006af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006afc:	3302      	adds	r3, #2
 8006afe:	e7c7      	b.n	8006a90 <_printf_common+0x58>
 8006b00:	2301      	movs	r3, #1
 8006b02:	4622      	mov	r2, r4
 8006b04:	4649      	mov	r1, r9
 8006b06:	4638      	mov	r0, r7
 8006b08:	47c0      	blx	r8
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d0e6      	beq.n	8006adc <_printf_common+0xa4>
 8006b0e:	3601      	adds	r6, #1
 8006b10:	e7d9      	b.n	8006ac6 <_printf_common+0x8e>
	...

08006b14 <_printf_i>:
 8006b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	7e0f      	ldrb	r7, [r1, #24]
 8006b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b1c:	2f78      	cmp	r7, #120	; 0x78
 8006b1e:	4691      	mov	r9, r2
 8006b20:	4680      	mov	r8, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	469a      	mov	sl, r3
 8006b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b2a:	d807      	bhi.n	8006b3c <_printf_i+0x28>
 8006b2c:	2f62      	cmp	r7, #98	; 0x62
 8006b2e:	d80a      	bhi.n	8006b46 <_printf_i+0x32>
 8006b30:	2f00      	cmp	r7, #0
 8006b32:	f000 80d8 	beq.w	8006ce6 <_printf_i+0x1d2>
 8006b36:	2f58      	cmp	r7, #88	; 0x58
 8006b38:	f000 80a3 	beq.w	8006c82 <_printf_i+0x16e>
 8006b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b44:	e03a      	b.n	8006bbc <_printf_i+0xa8>
 8006b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b4a:	2b15      	cmp	r3, #21
 8006b4c:	d8f6      	bhi.n	8006b3c <_printf_i+0x28>
 8006b4e:	a101      	add	r1, pc, #4	; (adr r1, 8006b54 <_printf_i+0x40>)
 8006b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b54:	08006bad 	.word	0x08006bad
 8006b58:	08006bc1 	.word	0x08006bc1
 8006b5c:	08006b3d 	.word	0x08006b3d
 8006b60:	08006b3d 	.word	0x08006b3d
 8006b64:	08006b3d 	.word	0x08006b3d
 8006b68:	08006b3d 	.word	0x08006b3d
 8006b6c:	08006bc1 	.word	0x08006bc1
 8006b70:	08006b3d 	.word	0x08006b3d
 8006b74:	08006b3d 	.word	0x08006b3d
 8006b78:	08006b3d 	.word	0x08006b3d
 8006b7c:	08006b3d 	.word	0x08006b3d
 8006b80:	08006ccd 	.word	0x08006ccd
 8006b84:	08006bf1 	.word	0x08006bf1
 8006b88:	08006caf 	.word	0x08006caf
 8006b8c:	08006b3d 	.word	0x08006b3d
 8006b90:	08006b3d 	.word	0x08006b3d
 8006b94:	08006cef 	.word	0x08006cef
 8006b98:	08006b3d 	.word	0x08006b3d
 8006b9c:	08006bf1 	.word	0x08006bf1
 8006ba0:	08006b3d 	.word	0x08006b3d
 8006ba4:	08006b3d 	.word	0x08006b3d
 8006ba8:	08006cb7 	.word	0x08006cb7
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	1d1a      	adds	r2, r3, #4
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	602a      	str	r2, [r5, #0]
 8006bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e0a3      	b.n	8006d08 <_printf_i+0x1f4>
 8006bc0:	6820      	ldr	r0, [r4, #0]
 8006bc2:	6829      	ldr	r1, [r5, #0]
 8006bc4:	0606      	lsls	r6, r0, #24
 8006bc6:	f101 0304 	add.w	r3, r1, #4
 8006bca:	d50a      	bpl.n	8006be2 <_printf_i+0xce>
 8006bcc:	680e      	ldr	r6, [r1, #0]
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	da03      	bge.n	8006bdc <_printf_i+0xc8>
 8006bd4:	232d      	movs	r3, #45	; 0x2d
 8006bd6:	4276      	negs	r6, r6
 8006bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bdc:	485e      	ldr	r0, [pc, #376]	; (8006d58 <_printf_i+0x244>)
 8006bde:	230a      	movs	r3, #10
 8006be0:	e019      	b.n	8006c16 <_printf_i+0x102>
 8006be2:	680e      	ldr	r6, [r1, #0]
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bea:	bf18      	it	ne
 8006bec:	b236      	sxthne	r6, r6
 8006bee:	e7ef      	b.n	8006bd0 <_printf_i+0xbc>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	6820      	ldr	r0, [r4, #0]
 8006bf4:	1d19      	adds	r1, r3, #4
 8006bf6:	6029      	str	r1, [r5, #0]
 8006bf8:	0601      	lsls	r1, r0, #24
 8006bfa:	d501      	bpl.n	8006c00 <_printf_i+0xec>
 8006bfc:	681e      	ldr	r6, [r3, #0]
 8006bfe:	e002      	b.n	8006c06 <_printf_i+0xf2>
 8006c00:	0646      	lsls	r6, r0, #25
 8006c02:	d5fb      	bpl.n	8006bfc <_printf_i+0xe8>
 8006c04:	881e      	ldrh	r6, [r3, #0]
 8006c06:	4854      	ldr	r0, [pc, #336]	; (8006d58 <_printf_i+0x244>)
 8006c08:	2f6f      	cmp	r7, #111	; 0x6f
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2308      	moveq	r3, #8
 8006c0e:	230a      	movne	r3, #10
 8006c10:	2100      	movs	r1, #0
 8006c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c16:	6865      	ldr	r5, [r4, #4]
 8006c18:	60a5      	str	r5, [r4, #8]
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	bfa2      	ittt	ge
 8006c1e:	6821      	ldrge	r1, [r4, #0]
 8006c20:	f021 0104 	bicge.w	r1, r1, #4
 8006c24:	6021      	strge	r1, [r4, #0]
 8006c26:	b90e      	cbnz	r6, 8006c2c <_printf_i+0x118>
 8006c28:	2d00      	cmp	r5, #0
 8006c2a:	d04d      	beq.n	8006cc8 <_printf_i+0x1b4>
 8006c2c:	4615      	mov	r5, r2
 8006c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c32:	fb03 6711 	mls	r7, r3, r1, r6
 8006c36:	5dc7      	ldrb	r7, [r0, r7]
 8006c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c3c:	4637      	mov	r7, r6
 8006c3e:	42bb      	cmp	r3, r7
 8006c40:	460e      	mov	r6, r1
 8006c42:	d9f4      	bls.n	8006c2e <_printf_i+0x11a>
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d10b      	bne.n	8006c60 <_printf_i+0x14c>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	07de      	lsls	r6, r3, #31
 8006c4c:	d508      	bpl.n	8006c60 <_printf_i+0x14c>
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	6861      	ldr	r1, [r4, #4]
 8006c52:	4299      	cmp	r1, r3
 8006c54:	bfde      	ittt	le
 8006c56:	2330      	movle	r3, #48	; 0x30
 8006c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c60:	1b52      	subs	r2, r2, r5
 8006c62:	6122      	str	r2, [r4, #16]
 8006c64:	f8cd a000 	str.w	sl, [sp]
 8006c68:	464b      	mov	r3, r9
 8006c6a:	aa03      	add	r2, sp, #12
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4640      	mov	r0, r8
 8006c70:	f7ff fee2 	bl	8006a38 <_printf_common>
 8006c74:	3001      	adds	r0, #1
 8006c76:	d14c      	bne.n	8006d12 <_printf_i+0x1fe>
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	b004      	add	sp, #16
 8006c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c82:	4835      	ldr	r0, [pc, #212]	; (8006d58 <_printf_i+0x244>)
 8006c84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c88:	6829      	ldr	r1, [r5, #0]
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c90:	6029      	str	r1, [r5, #0]
 8006c92:	061d      	lsls	r5, r3, #24
 8006c94:	d514      	bpl.n	8006cc0 <_printf_i+0x1ac>
 8006c96:	07df      	lsls	r7, r3, #31
 8006c98:	bf44      	itt	mi
 8006c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c9e:	6023      	strmi	r3, [r4, #0]
 8006ca0:	b91e      	cbnz	r6, 8006caa <_printf_i+0x196>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	f023 0320 	bic.w	r3, r3, #32
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	2310      	movs	r3, #16
 8006cac:	e7b0      	b.n	8006c10 <_printf_i+0xfc>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	f043 0320 	orr.w	r3, r3, #32
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	2378      	movs	r3, #120	; 0x78
 8006cb8:	4828      	ldr	r0, [pc, #160]	; (8006d5c <_printf_i+0x248>)
 8006cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cbe:	e7e3      	b.n	8006c88 <_printf_i+0x174>
 8006cc0:	0659      	lsls	r1, r3, #25
 8006cc2:	bf48      	it	mi
 8006cc4:	b2b6      	uxthmi	r6, r6
 8006cc6:	e7e6      	b.n	8006c96 <_printf_i+0x182>
 8006cc8:	4615      	mov	r5, r2
 8006cca:	e7bb      	b.n	8006c44 <_printf_i+0x130>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	6826      	ldr	r6, [r4, #0]
 8006cd0:	6961      	ldr	r1, [r4, #20]
 8006cd2:	1d18      	adds	r0, r3, #4
 8006cd4:	6028      	str	r0, [r5, #0]
 8006cd6:	0635      	lsls	r5, r6, #24
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	d501      	bpl.n	8006ce0 <_printf_i+0x1cc>
 8006cdc:	6019      	str	r1, [r3, #0]
 8006cde:	e002      	b.n	8006ce6 <_printf_i+0x1d2>
 8006ce0:	0670      	lsls	r0, r6, #25
 8006ce2:	d5fb      	bpl.n	8006cdc <_printf_i+0x1c8>
 8006ce4:	8019      	strh	r1, [r3, #0]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	4615      	mov	r5, r2
 8006cec:	e7ba      	b.n	8006c64 <_printf_i+0x150>
 8006cee:	682b      	ldr	r3, [r5, #0]
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	602a      	str	r2, [r5, #0]
 8006cf4:	681d      	ldr	r5, [r3, #0]
 8006cf6:	6862      	ldr	r2, [r4, #4]
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f7f9 fa78 	bl	80001f0 <memchr>
 8006d00:	b108      	cbz	r0, 8006d06 <_printf_i+0x1f2>
 8006d02:	1b40      	subs	r0, r0, r5
 8006d04:	6060      	str	r0, [r4, #4]
 8006d06:	6863      	ldr	r3, [r4, #4]
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d10:	e7a8      	b.n	8006c64 <_printf_i+0x150>
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	462a      	mov	r2, r5
 8006d16:	4649      	mov	r1, r9
 8006d18:	4640      	mov	r0, r8
 8006d1a:	47d0      	blx	sl
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d0ab      	beq.n	8006c78 <_printf_i+0x164>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	079b      	lsls	r3, r3, #30
 8006d24:	d413      	bmi.n	8006d4e <_printf_i+0x23a>
 8006d26:	68e0      	ldr	r0, [r4, #12]
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	4298      	cmp	r0, r3
 8006d2c:	bfb8      	it	lt
 8006d2e:	4618      	movlt	r0, r3
 8006d30:	e7a4      	b.n	8006c7c <_printf_i+0x168>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4632      	mov	r2, r6
 8006d36:	4649      	mov	r1, r9
 8006d38:	4640      	mov	r0, r8
 8006d3a:	47d0      	blx	sl
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d09b      	beq.n	8006c78 <_printf_i+0x164>
 8006d40:	3501      	adds	r5, #1
 8006d42:	68e3      	ldr	r3, [r4, #12]
 8006d44:	9903      	ldr	r1, [sp, #12]
 8006d46:	1a5b      	subs	r3, r3, r1
 8006d48:	42ab      	cmp	r3, r5
 8006d4a:	dcf2      	bgt.n	8006d32 <_printf_i+0x21e>
 8006d4c:	e7eb      	b.n	8006d26 <_printf_i+0x212>
 8006d4e:	2500      	movs	r5, #0
 8006d50:	f104 0619 	add.w	r6, r4, #25
 8006d54:	e7f5      	b.n	8006d42 <_printf_i+0x22e>
 8006d56:	bf00      	nop
 8006d58:	0800b06e 	.word	0x0800b06e
 8006d5c:	0800b07f 	.word	0x0800b07f

08006d60 <iprintf>:
 8006d60:	b40f      	push	{r0, r1, r2, r3}
 8006d62:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <iprintf+0x2c>)
 8006d64:	b513      	push	{r0, r1, r4, lr}
 8006d66:	681c      	ldr	r4, [r3, #0]
 8006d68:	b124      	cbz	r4, 8006d74 <iprintf+0x14>
 8006d6a:	69a3      	ldr	r3, [r4, #24]
 8006d6c:	b913      	cbnz	r3, 8006d74 <iprintf+0x14>
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f001 f8da 	bl	8007f28 <__sinit>
 8006d74:	ab05      	add	r3, sp, #20
 8006d76:	9a04      	ldr	r2, [sp, #16]
 8006d78:	68a1      	ldr	r1, [r4, #8]
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f001 fe97 	bl	8008ab0 <_vfiprintf_r>
 8006d82:	b002      	add	sp, #8
 8006d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d88:	b004      	add	sp, #16
 8006d8a:	4770      	bx	lr
 8006d8c:	20000010 	.word	0x20000010

08006d90 <_puts_r>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	460e      	mov	r6, r1
 8006d94:	4605      	mov	r5, r0
 8006d96:	b118      	cbz	r0, 8006da0 <_puts_r+0x10>
 8006d98:	6983      	ldr	r3, [r0, #24]
 8006d9a:	b90b      	cbnz	r3, 8006da0 <_puts_r+0x10>
 8006d9c:	f001 f8c4 	bl	8007f28 <__sinit>
 8006da0:	69ab      	ldr	r3, [r5, #24]
 8006da2:	68ac      	ldr	r4, [r5, #8]
 8006da4:	b913      	cbnz	r3, 8006dac <_puts_r+0x1c>
 8006da6:	4628      	mov	r0, r5
 8006da8:	f001 f8be 	bl	8007f28 <__sinit>
 8006dac:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <_puts_r+0xd0>)
 8006dae:	429c      	cmp	r4, r3
 8006db0:	d120      	bne.n	8006df4 <_puts_r+0x64>
 8006db2:	686c      	ldr	r4, [r5, #4]
 8006db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006db6:	07db      	lsls	r3, r3, #31
 8006db8:	d405      	bmi.n	8006dc6 <_puts_r+0x36>
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	0598      	lsls	r0, r3, #22
 8006dbe:	d402      	bmi.n	8006dc6 <_puts_r+0x36>
 8006dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc2:	f001 f954 	bl	800806e <__retarget_lock_acquire_recursive>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	0719      	lsls	r1, r3, #28
 8006dca:	d51d      	bpl.n	8006e08 <_puts_r+0x78>
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	b1db      	cbz	r3, 8006e08 <_puts_r+0x78>
 8006dd0:	3e01      	subs	r6, #1
 8006dd2:	68a3      	ldr	r3, [r4, #8]
 8006dd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	60a3      	str	r3, [r4, #8]
 8006ddc:	bb39      	cbnz	r1, 8006e2e <_puts_r+0x9e>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	da38      	bge.n	8006e54 <_puts_r+0xc4>
 8006de2:	4622      	mov	r2, r4
 8006de4:	210a      	movs	r1, #10
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 f848 	bl	8006e7c <__swbuf_r>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d011      	beq.n	8006e14 <_puts_r+0x84>
 8006df0:	250a      	movs	r5, #10
 8006df2:	e011      	b.n	8006e18 <_puts_r+0x88>
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <_puts_r+0xd4>)
 8006df6:	429c      	cmp	r4, r3
 8006df8:	d101      	bne.n	8006dfe <_puts_r+0x6e>
 8006dfa:	68ac      	ldr	r4, [r5, #8]
 8006dfc:	e7da      	b.n	8006db4 <_puts_r+0x24>
 8006dfe:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <_puts_r+0xd8>)
 8006e00:	429c      	cmp	r4, r3
 8006e02:	bf08      	it	eq
 8006e04:	68ec      	ldreq	r4, [r5, #12]
 8006e06:	e7d5      	b.n	8006db4 <_puts_r+0x24>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 f888 	bl	8006f20 <__swsetup_r>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d0dd      	beq.n	8006dd0 <_puts_r+0x40>
 8006e14:	f04f 35ff 	mov.w	r5, #4294967295
 8006e18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e1a:	07da      	lsls	r2, r3, #31
 8006e1c:	d405      	bmi.n	8006e2a <_puts_r+0x9a>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	059b      	lsls	r3, r3, #22
 8006e22:	d402      	bmi.n	8006e2a <_puts_r+0x9a>
 8006e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e26:	f001 f923 	bl	8008070 <__retarget_lock_release_recursive>
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	da04      	bge.n	8006e3c <_puts_r+0xac>
 8006e32:	69a2      	ldr	r2, [r4, #24]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	dc06      	bgt.n	8006e46 <_puts_r+0xb6>
 8006e38:	290a      	cmp	r1, #10
 8006e3a:	d004      	beq.n	8006e46 <_puts_r+0xb6>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	6022      	str	r2, [r4, #0]
 8006e42:	7019      	strb	r1, [r3, #0]
 8006e44:	e7c5      	b.n	8006dd2 <_puts_r+0x42>
 8006e46:	4622      	mov	r2, r4
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f000 f817 	bl	8006e7c <__swbuf_r>
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d1bf      	bne.n	8006dd2 <_puts_r+0x42>
 8006e52:	e7df      	b.n	8006e14 <_puts_r+0x84>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	250a      	movs	r5, #10
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	6022      	str	r2, [r4, #0]
 8006e5c:	701d      	strb	r5, [r3, #0]
 8006e5e:	e7db      	b.n	8006e18 <_puts_r+0x88>
 8006e60:	0800b140 	.word	0x0800b140
 8006e64:	0800b160 	.word	0x0800b160
 8006e68:	0800b120 	.word	0x0800b120

08006e6c <puts>:
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <puts+0xc>)
 8006e6e:	4601      	mov	r1, r0
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	f7ff bf8d 	b.w	8006d90 <_puts_r>
 8006e76:	bf00      	nop
 8006e78:	20000010 	.word	0x20000010

08006e7c <__swbuf_r>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	460e      	mov	r6, r1
 8006e80:	4614      	mov	r4, r2
 8006e82:	4605      	mov	r5, r0
 8006e84:	b118      	cbz	r0, 8006e8e <__swbuf_r+0x12>
 8006e86:	6983      	ldr	r3, [r0, #24]
 8006e88:	b90b      	cbnz	r3, 8006e8e <__swbuf_r+0x12>
 8006e8a:	f001 f84d 	bl	8007f28 <__sinit>
 8006e8e:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <__swbuf_r+0x98>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d12b      	bne.n	8006eec <__swbuf_r+0x70>
 8006e94:	686c      	ldr	r4, [r5, #4]
 8006e96:	69a3      	ldr	r3, [r4, #24]
 8006e98:	60a3      	str	r3, [r4, #8]
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	071a      	lsls	r2, r3, #28
 8006e9e:	d52f      	bpl.n	8006f00 <__swbuf_r+0x84>
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	b36b      	cbz	r3, 8006f00 <__swbuf_r+0x84>
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	6820      	ldr	r0, [r4, #0]
 8006ea8:	1ac0      	subs	r0, r0, r3
 8006eaa:	6963      	ldr	r3, [r4, #20]
 8006eac:	b2f6      	uxtb	r6, r6
 8006eae:	4283      	cmp	r3, r0
 8006eb0:	4637      	mov	r7, r6
 8006eb2:	dc04      	bgt.n	8006ebe <__swbuf_r+0x42>
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 ffa2 	bl	8007e00 <_fflush_r>
 8006ebc:	bb30      	cbnz	r0, 8006f0c <__swbuf_r+0x90>
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	60a3      	str	r3, [r4, #8]
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	6022      	str	r2, [r4, #0]
 8006eca:	701e      	strb	r6, [r3, #0]
 8006ecc:	6963      	ldr	r3, [r4, #20]
 8006ece:	3001      	adds	r0, #1
 8006ed0:	4283      	cmp	r3, r0
 8006ed2:	d004      	beq.n	8006ede <__swbuf_r+0x62>
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	07db      	lsls	r3, r3, #31
 8006ed8:	d506      	bpl.n	8006ee8 <__swbuf_r+0x6c>
 8006eda:	2e0a      	cmp	r6, #10
 8006edc:	d104      	bne.n	8006ee8 <__swbuf_r+0x6c>
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 ff8d 	bl	8007e00 <_fflush_r>
 8006ee6:	b988      	cbnz	r0, 8006f0c <__swbuf_r+0x90>
 8006ee8:	4638      	mov	r0, r7
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <__swbuf_r+0x9c>)
 8006eee:	429c      	cmp	r4, r3
 8006ef0:	d101      	bne.n	8006ef6 <__swbuf_r+0x7a>
 8006ef2:	68ac      	ldr	r4, [r5, #8]
 8006ef4:	e7cf      	b.n	8006e96 <__swbuf_r+0x1a>
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <__swbuf_r+0xa0>)
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	bf08      	it	eq
 8006efc:	68ec      	ldreq	r4, [r5, #12]
 8006efe:	e7ca      	b.n	8006e96 <__swbuf_r+0x1a>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 f80c 	bl	8006f20 <__swsetup_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d0cb      	beq.n	8006ea4 <__swbuf_r+0x28>
 8006f0c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f10:	e7ea      	b.n	8006ee8 <__swbuf_r+0x6c>
 8006f12:	bf00      	nop
 8006f14:	0800b140 	.word	0x0800b140
 8006f18:	0800b160 	.word	0x0800b160
 8006f1c:	0800b120 	.word	0x0800b120

08006f20 <__swsetup_r>:
 8006f20:	4b32      	ldr	r3, [pc, #200]	; (8006fec <__swsetup_r+0xcc>)
 8006f22:	b570      	push	{r4, r5, r6, lr}
 8006f24:	681d      	ldr	r5, [r3, #0]
 8006f26:	4606      	mov	r6, r0
 8006f28:	460c      	mov	r4, r1
 8006f2a:	b125      	cbz	r5, 8006f36 <__swsetup_r+0x16>
 8006f2c:	69ab      	ldr	r3, [r5, #24]
 8006f2e:	b913      	cbnz	r3, 8006f36 <__swsetup_r+0x16>
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 fff9 	bl	8007f28 <__sinit>
 8006f36:	4b2e      	ldr	r3, [pc, #184]	; (8006ff0 <__swsetup_r+0xd0>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	d10f      	bne.n	8006f5c <__swsetup_r+0x3c>
 8006f3c:	686c      	ldr	r4, [r5, #4]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f44:	0719      	lsls	r1, r3, #28
 8006f46:	d42c      	bmi.n	8006fa2 <__swsetup_r+0x82>
 8006f48:	06dd      	lsls	r5, r3, #27
 8006f4a:	d411      	bmi.n	8006f70 <__swsetup_r+0x50>
 8006f4c:	2309      	movs	r3, #9
 8006f4e:	6033      	str	r3, [r6, #0]
 8006f50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f54:	81a3      	strh	r3, [r4, #12]
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	e03e      	b.n	8006fda <__swsetup_r+0xba>
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <__swsetup_r+0xd4>)
 8006f5e:	429c      	cmp	r4, r3
 8006f60:	d101      	bne.n	8006f66 <__swsetup_r+0x46>
 8006f62:	68ac      	ldr	r4, [r5, #8]
 8006f64:	e7eb      	b.n	8006f3e <__swsetup_r+0x1e>
 8006f66:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <__swsetup_r+0xd8>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	bf08      	it	eq
 8006f6c:	68ec      	ldreq	r4, [r5, #12]
 8006f6e:	e7e6      	b.n	8006f3e <__swsetup_r+0x1e>
 8006f70:	0758      	lsls	r0, r3, #29
 8006f72:	d512      	bpl.n	8006f9a <__swsetup_r+0x7a>
 8006f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f76:	b141      	cbz	r1, 8006f8a <__swsetup_r+0x6a>
 8006f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	d002      	beq.n	8006f86 <__swsetup_r+0x66>
 8006f80:	4630      	mov	r0, r6
 8006f82:	f001 fc8b 	bl	800889c <_free_r>
 8006f86:	2300      	movs	r3, #0
 8006f88:	6363      	str	r3, [r4, #52]	; 0x34
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	2300      	movs	r3, #0
 8006f94:	6063      	str	r3, [r4, #4]
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0308 	orr.w	r3, r3, #8
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	b94b      	cbnz	r3, 8006fba <__swsetup_r+0x9a>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fb0:	d003      	beq.n	8006fba <__swsetup_r+0x9a>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f001 f881 	bl	80080bc <__smakebuf_r>
 8006fba:	89a0      	ldrh	r0, [r4, #12]
 8006fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fc0:	f010 0301 	ands.w	r3, r0, #1
 8006fc4:	d00a      	beq.n	8006fdc <__swsetup_r+0xbc>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	6963      	ldr	r3, [r4, #20]
 8006fcc:	425b      	negs	r3, r3
 8006fce:	61a3      	str	r3, [r4, #24]
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	b943      	cbnz	r3, 8006fe6 <__swsetup_r+0xc6>
 8006fd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fd8:	d1ba      	bne.n	8006f50 <__swsetup_r+0x30>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	0781      	lsls	r1, r0, #30
 8006fde:	bf58      	it	pl
 8006fe0:	6963      	ldrpl	r3, [r4, #20]
 8006fe2:	60a3      	str	r3, [r4, #8]
 8006fe4:	e7f4      	b.n	8006fd0 <__swsetup_r+0xb0>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e7f7      	b.n	8006fda <__swsetup_r+0xba>
 8006fea:	bf00      	nop
 8006fec:	20000010 	.word	0x20000010
 8006ff0:	0800b140 	.word	0x0800b140
 8006ff4:	0800b160 	.word	0x0800b160
 8006ff8:	0800b120 	.word	0x0800b120

08006ffc <quorem>:
 8006ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	6903      	ldr	r3, [r0, #16]
 8007002:	690c      	ldr	r4, [r1, #16]
 8007004:	42a3      	cmp	r3, r4
 8007006:	4607      	mov	r7, r0
 8007008:	f2c0 8081 	blt.w	800710e <quorem+0x112>
 800700c:	3c01      	subs	r4, #1
 800700e:	f101 0814 	add.w	r8, r1, #20
 8007012:	f100 0514 	add.w	r5, r0, #20
 8007016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007024:	3301      	adds	r3, #1
 8007026:	429a      	cmp	r2, r3
 8007028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800702c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007030:	fbb2 f6f3 	udiv	r6, r2, r3
 8007034:	d331      	bcc.n	800709a <quorem+0x9e>
 8007036:	f04f 0e00 	mov.w	lr, #0
 800703a:	4640      	mov	r0, r8
 800703c:	46ac      	mov	ip, r5
 800703e:	46f2      	mov	sl, lr
 8007040:	f850 2b04 	ldr.w	r2, [r0], #4
 8007044:	b293      	uxth	r3, r2
 8007046:	fb06 e303 	mla	r3, r6, r3, lr
 800704a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800704e:	b29b      	uxth	r3, r3
 8007050:	ebaa 0303 	sub.w	r3, sl, r3
 8007054:	f8dc a000 	ldr.w	sl, [ip]
 8007058:	0c12      	lsrs	r2, r2, #16
 800705a:	fa13 f38a 	uxtah	r3, r3, sl
 800705e:	fb06 e202 	mla	r2, r6, r2, lr
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800706a:	b292      	uxth	r2, r2
 800706c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007074:	f8bd 3000 	ldrh.w	r3, [sp]
 8007078:	4581      	cmp	r9, r0
 800707a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707e:	f84c 3b04 	str.w	r3, [ip], #4
 8007082:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007086:	d2db      	bcs.n	8007040 <quorem+0x44>
 8007088:	f855 300b 	ldr.w	r3, [r5, fp]
 800708c:	b92b      	cbnz	r3, 800709a <quorem+0x9e>
 800708e:	9b01      	ldr	r3, [sp, #4]
 8007090:	3b04      	subs	r3, #4
 8007092:	429d      	cmp	r5, r3
 8007094:	461a      	mov	r2, r3
 8007096:	d32e      	bcc.n	80070f6 <quorem+0xfa>
 8007098:	613c      	str	r4, [r7, #16]
 800709a:	4638      	mov	r0, r7
 800709c:	f001 fae6 	bl	800866c <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	db24      	blt.n	80070ee <quorem+0xf2>
 80070a4:	3601      	adds	r6, #1
 80070a6:	4628      	mov	r0, r5
 80070a8:	f04f 0c00 	mov.w	ip, #0
 80070ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80070b0:	f8d0 e000 	ldr.w	lr, [r0]
 80070b4:	b293      	uxth	r3, r2
 80070b6:	ebac 0303 	sub.w	r3, ip, r3
 80070ba:	0c12      	lsrs	r2, r2, #16
 80070bc:	fa13 f38e 	uxtah	r3, r3, lr
 80070c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ce:	45c1      	cmp	r9, r8
 80070d0:	f840 3b04 	str.w	r3, [r0], #4
 80070d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070d8:	d2e8      	bcs.n	80070ac <quorem+0xb0>
 80070da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070e2:	b922      	cbnz	r2, 80070ee <quorem+0xf2>
 80070e4:	3b04      	subs	r3, #4
 80070e6:	429d      	cmp	r5, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	d30a      	bcc.n	8007102 <quorem+0x106>
 80070ec:	613c      	str	r4, [r7, #16]
 80070ee:	4630      	mov	r0, r6
 80070f0:	b003      	add	sp, #12
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	3b04      	subs	r3, #4
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d1cc      	bne.n	8007098 <quorem+0x9c>
 80070fe:	3c01      	subs	r4, #1
 8007100:	e7c7      	b.n	8007092 <quorem+0x96>
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	3b04      	subs	r3, #4
 8007106:	2a00      	cmp	r2, #0
 8007108:	d1f0      	bne.n	80070ec <quorem+0xf0>
 800710a:	3c01      	subs	r4, #1
 800710c:	e7eb      	b.n	80070e6 <quorem+0xea>
 800710e:	2000      	movs	r0, #0
 8007110:	e7ee      	b.n	80070f0 <quorem+0xf4>
 8007112:	0000      	movs	r0, r0
 8007114:	0000      	movs	r0, r0
	...

08007118 <_dtoa_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	ed2d 8b04 	vpush	{d8-d9}
 8007120:	ec57 6b10 	vmov	r6, r7, d0
 8007124:	b093      	sub	sp, #76	; 0x4c
 8007126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800712c:	9106      	str	r1, [sp, #24]
 800712e:	ee10 aa10 	vmov	sl, s0
 8007132:	4604      	mov	r4, r0
 8007134:	9209      	str	r2, [sp, #36]	; 0x24
 8007136:	930c      	str	r3, [sp, #48]	; 0x30
 8007138:	46bb      	mov	fp, r7
 800713a:	b975      	cbnz	r5, 800715a <_dtoa_r+0x42>
 800713c:	2010      	movs	r0, #16
 800713e:	f000 fffd 	bl	800813c <malloc>
 8007142:	4602      	mov	r2, r0
 8007144:	6260      	str	r0, [r4, #36]	; 0x24
 8007146:	b920      	cbnz	r0, 8007152 <_dtoa_r+0x3a>
 8007148:	4ba7      	ldr	r3, [pc, #668]	; (80073e8 <_dtoa_r+0x2d0>)
 800714a:	21ea      	movs	r1, #234	; 0xea
 800714c:	48a7      	ldr	r0, [pc, #668]	; (80073ec <_dtoa_r+0x2d4>)
 800714e:	f001 fe45 	bl	8008ddc <__assert_func>
 8007152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007156:	6005      	str	r5, [r0, #0]
 8007158:	60c5      	str	r5, [r0, #12]
 800715a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800715c:	6819      	ldr	r1, [r3, #0]
 800715e:	b151      	cbz	r1, 8007176 <_dtoa_r+0x5e>
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	604a      	str	r2, [r1, #4]
 8007164:	2301      	movs	r3, #1
 8007166:	4093      	lsls	r3, r2
 8007168:	608b      	str	r3, [r1, #8]
 800716a:	4620      	mov	r0, r4
 800716c:	f001 f83c 	bl	80081e8 <_Bfree>
 8007170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	1e3b      	subs	r3, r7, #0
 8007178:	bfaa      	itet	ge
 800717a:	2300      	movge	r3, #0
 800717c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007180:	f8c8 3000 	strge.w	r3, [r8]
 8007184:	4b9a      	ldr	r3, [pc, #616]	; (80073f0 <_dtoa_r+0x2d8>)
 8007186:	bfbc      	itt	lt
 8007188:	2201      	movlt	r2, #1
 800718a:	f8c8 2000 	strlt.w	r2, [r8]
 800718e:	ea33 030b 	bics.w	r3, r3, fp
 8007192:	d11b      	bne.n	80071cc <_dtoa_r+0xb4>
 8007194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007196:	f242 730f 	movw	r3, #9999	; 0x270f
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071a0:	4333      	orrs	r3, r6
 80071a2:	f000 8592 	beq.w	8007cca <_dtoa_r+0xbb2>
 80071a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071a8:	b963      	cbnz	r3, 80071c4 <_dtoa_r+0xac>
 80071aa:	4b92      	ldr	r3, [pc, #584]	; (80073f4 <_dtoa_r+0x2dc>)
 80071ac:	e022      	b.n	80071f4 <_dtoa_r+0xdc>
 80071ae:	4b92      	ldr	r3, [pc, #584]	; (80073f8 <_dtoa_r+0x2e0>)
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	3308      	adds	r3, #8
 80071b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	9801      	ldr	r0, [sp, #4]
 80071ba:	b013      	add	sp, #76	; 0x4c
 80071bc:	ecbd 8b04 	vpop	{d8-d9}
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	4b8b      	ldr	r3, [pc, #556]	; (80073f4 <_dtoa_r+0x2dc>)
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	3303      	adds	r3, #3
 80071ca:	e7f3      	b.n	80071b4 <_dtoa_r+0x9c>
 80071cc:	2200      	movs	r2, #0
 80071ce:	2300      	movs	r3, #0
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	f7f9 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 80071d8:	ec4b ab19 	vmov	d9, sl, fp
 80071dc:	4680      	mov	r8, r0
 80071de:	b158      	cbz	r0, 80071f8 <_dtoa_r+0xe0>
 80071e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071e2:	2301      	movs	r3, #1
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 856b 	beq.w	8007cc4 <_dtoa_r+0xbac>
 80071ee:	4883      	ldr	r0, [pc, #524]	; (80073fc <_dtoa_r+0x2e4>)
 80071f0:	6018      	str	r0, [r3, #0]
 80071f2:	1e43      	subs	r3, r0, #1
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	e7df      	b.n	80071b8 <_dtoa_r+0xa0>
 80071f8:	ec4b ab10 	vmov	d0, sl, fp
 80071fc:	aa10      	add	r2, sp, #64	; 0x40
 80071fe:	a911      	add	r1, sp, #68	; 0x44
 8007200:	4620      	mov	r0, r4
 8007202:	f001 fad9 	bl	80087b8 <__d2b>
 8007206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800720a:	ee08 0a10 	vmov	s16, r0
 800720e:	2d00      	cmp	r5, #0
 8007210:	f000 8084 	beq.w	800731c <_dtoa_r+0x204>
 8007214:	ee19 3a90 	vmov	r3, s19
 8007218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800721c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007220:	4656      	mov	r6, sl
 8007222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800722a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800722e:	4b74      	ldr	r3, [pc, #464]	; (8007400 <_dtoa_r+0x2e8>)
 8007230:	2200      	movs	r2, #0
 8007232:	4630      	mov	r0, r6
 8007234:	4639      	mov	r1, r7
 8007236:	f7f9 f82f 	bl	8000298 <__aeabi_dsub>
 800723a:	a365      	add	r3, pc, #404	; (adr r3, 80073d0 <_dtoa_r+0x2b8>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f7f9 f9e2 	bl	8000608 <__aeabi_dmul>
 8007244:	a364      	add	r3, pc, #400	; (adr r3, 80073d8 <_dtoa_r+0x2c0>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f7f9 f827 	bl	800029c <__adddf3>
 800724e:	4606      	mov	r6, r0
 8007250:	4628      	mov	r0, r5
 8007252:	460f      	mov	r7, r1
 8007254:	f7f9 f96e 	bl	8000534 <__aeabi_i2d>
 8007258:	a361      	add	r3, pc, #388	; (adr r3, 80073e0 <_dtoa_r+0x2c8>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f9 f9d3 	bl	8000608 <__aeabi_dmul>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4630      	mov	r0, r6
 8007268:	4639      	mov	r1, r7
 800726a:	f7f9 f817 	bl	800029c <__adddf3>
 800726e:	4606      	mov	r6, r0
 8007270:	460f      	mov	r7, r1
 8007272:	f7f9 fc79 	bl	8000b68 <__aeabi_d2iz>
 8007276:	2200      	movs	r2, #0
 8007278:	9000      	str	r0, [sp, #0]
 800727a:	2300      	movs	r3, #0
 800727c:	4630      	mov	r0, r6
 800727e:	4639      	mov	r1, r7
 8007280:	f7f9 fc34 	bl	8000aec <__aeabi_dcmplt>
 8007284:	b150      	cbz	r0, 800729c <_dtoa_r+0x184>
 8007286:	9800      	ldr	r0, [sp, #0]
 8007288:	f7f9 f954 	bl	8000534 <__aeabi_i2d>
 800728c:	4632      	mov	r2, r6
 800728e:	463b      	mov	r3, r7
 8007290:	f7f9 fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007294:	b910      	cbnz	r0, 800729c <_dtoa_r+0x184>
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	9b00      	ldr	r3, [sp, #0]
 800729e:	2b16      	cmp	r3, #22
 80072a0:	d85a      	bhi.n	8007358 <_dtoa_r+0x240>
 80072a2:	9a00      	ldr	r2, [sp, #0]
 80072a4:	4b57      	ldr	r3, [pc, #348]	; (8007404 <_dtoa_r+0x2ec>)
 80072a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	ec51 0b19 	vmov	r0, r1, d9
 80072b2:	f7f9 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d050      	beq.n	800735c <_dtoa_r+0x244>
 80072ba:	9b00      	ldr	r3, [sp, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072c6:	1b5d      	subs	r5, r3, r5
 80072c8:	1e6b      	subs	r3, r5, #1
 80072ca:	9305      	str	r3, [sp, #20]
 80072cc:	bf45      	ittet	mi
 80072ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80072d2:	9304      	strmi	r3, [sp, #16]
 80072d4:	2300      	movpl	r3, #0
 80072d6:	2300      	movmi	r3, #0
 80072d8:	bf4c      	ite	mi
 80072da:	9305      	strmi	r3, [sp, #20]
 80072dc:	9304      	strpl	r3, [sp, #16]
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db3d      	blt.n	8007360 <_dtoa_r+0x248>
 80072e4:	9b05      	ldr	r3, [sp, #20]
 80072e6:	9a00      	ldr	r2, [sp, #0]
 80072e8:	920a      	str	r2, [sp, #40]	; 0x28
 80072ea:	4413      	add	r3, r2
 80072ec:	9305      	str	r3, [sp, #20]
 80072ee:	2300      	movs	r3, #0
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	9b06      	ldr	r3, [sp, #24]
 80072f4:	2b09      	cmp	r3, #9
 80072f6:	f200 8089 	bhi.w	800740c <_dtoa_r+0x2f4>
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	bfc4      	itt	gt
 80072fe:	3b04      	subgt	r3, #4
 8007300:	9306      	strgt	r3, [sp, #24]
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	f1a3 0302 	sub.w	r3, r3, #2
 8007308:	bfcc      	ite	gt
 800730a:	2500      	movgt	r5, #0
 800730c:	2501      	movle	r5, #1
 800730e:	2b03      	cmp	r3, #3
 8007310:	f200 8087 	bhi.w	8007422 <_dtoa_r+0x30a>
 8007314:	e8df f003 	tbb	[pc, r3]
 8007318:	59383a2d 	.word	0x59383a2d
 800731c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007320:	441d      	add	r5, r3
 8007322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007326:	2b20      	cmp	r3, #32
 8007328:	bfc1      	itttt	gt
 800732a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800732e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007332:	fa0b f303 	lslgt.w	r3, fp, r3
 8007336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800733a:	bfda      	itte	le
 800733c:	f1c3 0320 	rsble	r3, r3, #32
 8007340:	fa06 f003 	lslle.w	r0, r6, r3
 8007344:	4318      	orrgt	r0, r3
 8007346:	f7f9 f8e5 	bl	8000514 <__aeabi_ui2d>
 800734a:	2301      	movs	r3, #1
 800734c:	4606      	mov	r6, r0
 800734e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007352:	3d01      	subs	r5, #1
 8007354:	930e      	str	r3, [sp, #56]	; 0x38
 8007356:	e76a      	b.n	800722e <_dtoa_r+0x116>
 8007358:	2301      	movs	r3, #1
 800735a:	e7b2      	b.n	80072c2 <_dtoa_r+0x1aa>
 800735c:	900b      	str	r0, [sp, #44]	; 0x2c
 800735e:	e7b1      	b.n	80072c4 <_dtoa_r+0x1ac>
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	9a00      	ldr	r2, [sp, #0]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	9304      	str	r3, [sp, #16]
 8007368:	4253      	negs	r3, r2
 800736a:	9307      	str	r3, [sp, #28]
 800736c:	2300      	movs	r3, #0
 800736e:	930a      	str	r3, [sp, #40]	; 0x28
 8007370:	e7bf      	b.n	80072f2 <_dtoa_r+0x1da>
 8007372:	2300      	movs	r3, #0
 8007374:	9308      	str	r3, [sp, #32]
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	dc55      	bgt.n	8007428 <_dtoa_r+0x310>
 800737c:	2301      	movs	r3, #1
 800737e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007382:	461a      	mov	r2, r3
 8007384:	9209      	str	r2, [sp, #36]	; 0x24
 8007386:	e00c      	b.n	80073a2 <_dtoa_r+0x28a>
 8007388:	2301      	movs	r3, #1
 800738a:	e7f3      	b.n	8007374 <_dtoa_r+0x25c>
 800738c:	2300      	movs	r3, #0
 800738e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b00      	ldr	r3, [sp, #0]
 8007394:	4413      	add	r3, r2
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	3301      	adds	r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	9303      	str	r3, [sp, #12]
 800739e:	bfb8      	it	lt
 80073a0:	2301      	movlt	r3, #1
 80073a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073a4:	2200      	movs	r2, #0
 80073a6:	6042      	str	r2, [r0, #4]
 80073a8:	2204      	movs	r2, #4
 80073aa:	f102 0614 	add.w	r6, r2, #20
 80073ae:	429e      	cmp	r6, r3
 80073b0:	6841      	ldr	r1, [r0, #4]
 80073b2:	d93d      	bls.n	8007430 <_dtoa_r+0x318>
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 fed7 	bl	8008168 <_Balloc>
 80073ba:	9001      	str	r0, [sp, #4]
 80073bc:	2800      	cmp	r0, #0
 80073be:	d13b      	bne.n	8007438 <_dtoa_r+0x320>
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <_dtoa_r+0x2f0>)
 80073c2:	4602      	mov	r2, r0
 80073c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073c8:	e6c0      	b.n	800714c <_dtoa_r+0x34>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7df      	b.n	800738e <_dtoa_r+0x276>
 80073ce:	bf00      	nop
 80073d0:	636f4361 	.word	0x636f4361
 80073d4:	3fd287a7 	.word	0x3fd287a7
 80073d8:	8b60c8b3 	.word	0x8b60c8b3
 80073dc:	3fc68a28 	.word	0x3fc68a28
 80073e0:	509f79fb 	.word	0x509f79fb
 80073e4:	3fd34413 	.word	0x3fd34413
 80073e8:	0800b09d 	.word	0x0800b09d
 80073ec:	0800b0b4 	.word	0x0800b0b4
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	0800b099 	.word	0x0800b099
 80073f8:	0800b090 	.word	0x0800b090
 80073fc:	0800b06d 	.word	0x0800b06d
 8007400:	3ff80000 	.word	0x3ff80000
 8007404:	0800b208 	.word	0x0800b208
 8007408:	0800b10f 	.word	0x0800b10f
 800740c:	2501      	movs	r5, #1
 800740e:	2300      	movs	r3, #0
 8007410:	9306      	str	r3, [sp, #24]
 8007412:	9508      	str	r5, [sp, #32]
 8007414:	f04f 33ff 	mov.w	r3, #4294967295
 8007418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	2312      	movs	r3, #18
 8007420:	e7b0      	b.n	8007384 <_dtoa_r+0x26c>
 8007422:	2301      	movs	r3, #1
 8007424:	9308      	str	r3, [sp, #32]
 8007426:	e7f5      	b.n	8007414 <_dtoa_r+0x2fc>
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800742e:	e7b8      	b.n	80073a2 <_dtoa_r+0x28a>
 8007430:	3101      	adds	r1, #1
 8007432:	6041      	str	r1, [r0, #4]
 8007434:	0052      	lsls	r2, r2, #1
 8007436:	e7b8      	b.n	80073aa <_dtoa_r+0x292>
 8007438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800743a:	9a01      	ldr	r2, [sp, #4]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	2b0e      	cmp	r3, #14
 8007442:	f200 809d 	bhi.w	8007580 <_dtoa_r+0x468>
 8007446:	2d00      	cmp	r5, #0
 8007448:	f000 809a 	beq.w	8007580 <_dtoa_r+0x468>
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd32      	ble.n	80074b8 <_dtoa_r+0x3a0>
 8007452:	4ab7      	ldr	r2, [pc, #732]	; (8007730 <_dtoa_r+0x618>)
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800745c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007460:	9b00      	ldr	r3, [sp, #0]
 8007462:	05d8      	lsls	r0, r3, #23
 8007464:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007468:	d516      	bpl.n	8007498 <_dtoa_r+0x380>
 800746a:	4bb2      	ldr	r3, [pc, #712]	; (8007734 <_dtoa_r+0x61c>)
 800746c:	ec51 0b19 	vmov	r0, r1, d9
 8007470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007474:	f7f9 f9f2 	bl	800085c <__aeabi_ddiv>
 8007478:	f007 070f 	and.w	r7, r7, #15
 800747c:	4682      	mov	sl, r0
 800747e:	468b      	mov	fp, r1
 8007480:	2503      	movs	r5, #3
 8007482:	4eac      	ldr	r6, [pc, #688]	; (8007734 <_dtoa_r+0x61c>)
 8007484:	b957      	cbnz	r7, 800749c <_dtoa_r+0x384>
 8007486:	4642      	mov	r2, r8
 8007488:	464b      	mov	r3, r9
 800748a:	4650      	mov	r0, sl
 800748c:	4659      	mov	r1, fp
 800748e:	f7f9 f9e5 	bl	800085c <__aeabi_ddiv>
 8007492:	4682      	mov	sl, r0
 8007494:	468b      	mov	fp, r1
 8007496:	e028      	b.n	80074ea <_dtoa_r+0x3d2>
 8007498:	2502      	movs	r5, #2
 800749a:	e7f2      	b.n	8007482 <_dtoa_r+0x36a>
 800749c:	07f9      	lsls	r1, r7, #31
 800749e:	d508      	bpl.n	80074b2 <_dtoa_r+0x39a>
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074a8:	f7f9 f8ae 	bl	8000608 <__aeabi_dmul>
 80074ac:	3501      	adds	r5, #1
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	107f      	asrs	r7, r7, #1
 80074b4:	3608      	adds	r6, #8
 80074b6:	e7e5      	b.n	8007484 <_dtoa_r+0x36c>
 80074b8:	f000 809b 	beq.w	80075f2 <_dtoa_r+0x4da>
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	4f9d      	ldr	r7, [pc, #628]	; (8007734 <_dtoa_r+0x61c>)
 80074c0:	425e      	negs	r6, r3
 80074c2:	4b9b      	ldr	r3, [pc, #620]	; (8007730 <_dtoa_r+0x618>)
 80074c4:	f006 020f 	and.w	r2, r6, #15
 80074c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	ec51 0b19 	vmov	r0, r1, d9
 80074d4:	f7f9 f898 	bl	8000608 <__aeabi_dmul>
 80074d8:	1136      	asrs	r6, r6, #4
 80074da:	4682      	mov	sl, r0
 80074dc:	468b      	mov	fp, r1
 80074de:	2300      	movs	r3, #0
 80074e0:	2502      	movs	r5, #2
 80074e2:	2e00      	cmp	r6, #0
 80074e4:	d17a      	bne.n	80075dc <_dtoa_r+0x4c4>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1d3      	bne.n	8007492 <_dtoa_r+0x37a>
 80074ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8082 	beq.w	80075f6 <_dtoa_r+0x4de>
 80074f2:	4b91      	ldr	r3, [pc, #580]	; (8007738 <_dtoa_r+0x620>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	4650      	mov	r0, sl
 80074f8:	4659      	mov	r1, fp
 80074fa:	f7f9 faf7 	bl	8000aec <__aeabi_dcmplt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d079      	beq.n	80075f6 <_dtoa_r+0x4de>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d076      	beq.n	80075f6 <_dtoa_r+0x4de>
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	dd36      	ble.n	800757c <_dtoa_r+0x464>
 800750e:	9b00      	ldr	r3, [sp, #0]
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	1e5f      	subs	r7, r3, #1
 8007516:	2200      	movs	r2, #0
 8007518:	4b88      	ldr	r3, [pc, #544]	; (800773c <_dtoa_r+0x624>)
 800751a:	f7f9 f875 	bl	8000608 <__aeabi_dmul>
 800751e:	9e02      	ldr	r6, [sp, #8]
 8007520:	4682      	mov	sl, r0
 8007522:	468b      	mov	fp, r1
 8007524:	3501      	adds	r5, #1
 8007526:	4628      	mov	r0, r5
 8007528:	f7f9 f804 	bl	8000534 <__aeabi_i2d>
 800752c:	4652      	mov	r2, sl
 800752e:	465b      	mov	r3, fp
 8007530:	f7f9 f86a 	bl	8000608 <__aeabi_dmul>
 8007534:	4b82      	ldr	r3, [pc, #520]	; (8007740 <_dtoa_r+0x628>)
 8007536:	2200      	movs	r2, #0
 8007538:	f7f8 feb0 	bl	800029c <__adddf3>
 800753c:	46d0      	mov	r8, sl
 800753e:	46d9      	mov	r9, fp
 8007540:	4682      	mov	sl, r0
 8007542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007546:	2e00      	cmp	r6, #0
 8007548:	d158      	bne.n	80075fc <_dtoa_r+0x4e4>
 800754a:	4b7e      	ldr	r3, [pc, #504]	; (8007744 <_dtoa_r+0x62c>)
 800754c:	2200      	movs	r2, #0
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f8 fea1 	bl	8000298 <__aeabi_dsub>
 8007556:	4652      	mov	r2, sl
 8007558:	465b      	mov	r3, fp
 800755a:	4680      	mov	r8, r0
 800755c:	4689      	mov	r9, r1
 800755e:	f7f9 fae3 	bl	8000b28 <__aeabi_dcmpgt>
 8007562:	2800      	cmp	r0, #0
 8007564:	f040 8295 	bne.w	8007a92 <_dtoa_r+0x97a>
 8007568:	4652      	mov	r2, sl
 800756a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800756e:	4640      	mov	r0, r8
 8007570:	4649      	mov	r1, r9
 8007572:	f7f9 fabb 	bl	8000aec <__aeabi_dcmplt>
 8007576:	2800      	cmp	r0, #0
 8007578:	f040 8289 	bne.w	8007a8e <_dtoa_r+0x976>
 800757c:	ec5b ab19 	vmov	sl, fp, d9
 8007580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007582:	2b00      	cmp	r3, #0
 8007584:	f2c0 8148 	blt.w	8007818 <_dtoa_r+0x700>
 8007588:	9a00      	ldr	r2, [sp, #0]
 800758a:	2a0e      	cmp	r2, #14
 800758c:	f300 8144 	bgt.w	8007818 <_dtoa_r+0x700>
 8007590:	4b67      	ldr	r3, [pc, #412]	; (8007730 <_dtoa_r+0x618>)
 8007592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800759a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	f280 80d5 	bge.w	800774c <_dtoa_r+0x634>
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f300 80d1 	bgt.w	800774c <_dtoa_r+0x634>
 80075aa:	f040 826f 	bne.w	8007a8c <_dtoa_r+0x974>
 80075ae:	4b65      	ldr	r3, [pc, #404]	; (8007744 <_dtoa_r+0x62c>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	4652      	mov	r2, sl
 80075bc:	465b      	mov	r3, fp
 80075be:	f7f9 faa9 	bl	8000b14 <__aeabi_dcmpge>
 80075c2:	9e03      	ldr	r6, [sp, #12]
 80075c4:	4637      	mov	r7, r6
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f040 8245 	bne.w	8007a56 <_dtoa_r+0x93e>
 80075cc:	9d01      	ldr	r5, [sp, #4]
 80075ce:	2331      	movs	r3, #49	; 0x31
 80075d0:	f805 3b01 	strb.w	r3, [r5], #1
 80075d4:	9b00      	ldr	r3, [sp, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	e240      	b.n	8007a5e <_dtoa_r+0x946>
 80075dc:	07f2      	lsls	r2, r6, #31
 80075de:	d505      	bpl.n	80075ec <_dtoa_r+0x4d4>
 80075e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e4:	f7f9 f810 	bl	8000608 <__aeabi_dmul>
 80075e8:	3501      	adds	r5, #1
 80075ea:	2301      	movs	r3, #1
 80075ec:	1076      	asrs	r6, r6, #1
 80075ee:	3708      	adds	r7, #8
 80075f0:	e777      	b.n	80074e2 <_dtoa_r+0x3ca>
 80075f2:	2502      	movs	r5, #2
 80075f4:	e779      	b.n	80074ea <_dtoa_r+0x3d2>
 80075f6:	9f00      	ldr	r7, [sp, #0]
 80075f8:	9e03      	ldr	r6, [sp, #12]
 80075fa:	e794      	b.n	8007526 <_dtoa_r+0x40e>
 80075fc:	9901      	ldr	r1, [sp, #4]
 80075fe:	4b4c      	ldr	r3, [pc, #304]	; (8007730 <_dtoa_r+0x618>)
 8007600:	4431      	add	r1, r6
 8007602:	910d      	str	r1, [sp, #52]	; 0x34
 8007604:	9908      	ldr	r1, [sp, #32]
 8007606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800760a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800760e:	2900      	cmp	r1, #0
 8007610:	d043      	beq.n	800769a <_dtoa_r+0x582>
 8007612:	494d      	ldr	r1, [pc, #308]	; (8007748 <_dtoa_r+0x630>)
 8007614:	2000      	movs	r0, #0
 8007616:	f7f9 f921 	bl	800085c <__aeabi_ddiv>
 800761a:	4652      	mov	r2, sl
 800761c:	465b      	mov	r3, fp
 800761e:	f7f8 fe3b 	bl	8000298 <__aeabi_dsub>
 8007622:	9d01      	ldr	r5, [sp, #4]
 8007624:	4682      	mov	sl, r0
 8007626:	468b      	mov	fp, r1
 8007628:	4649      	mov	r1, r9
 800762a:	4640      	mov	r0, r8
 800762c:	f7f9 fa9c 	bl	8000b68 <__aeabi_d2iz>
 8007630:	4606      	mov	r6, r0
 8007632:	f7f8 ff7f 	bl	8000534 <__aeabi_i2d>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 fe2b 	bl	8000298 <__aeabi_dsub>
 8007642:	3630      	adds	r6, #48	; 0x30
 8007644:	f805 6b01 	strb.w	r6, [r5], #1
 8007648:	4652      	mov	r2, sl
 800764a:	465b      	mov	r3, fp
 800764c:	4680      	mov	r8, r0
 800764e:	4689      	mov	r9, r1
 8007650:	f7f9 fa4c 	bl	8000aec <__aeabi_dcmplt>
 8007654:	2800      	cmp	r0, #0
 8007656:	d163      	bne.n	8007720 <_dtoa_r+0x608>
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	4936      	ldr	r1, [pc, #216]	; (8007738 <_dtoa_r+0x620>)
 800765e:	2000      	movs	r0, #0
 8007660:	f7f8 fe1a 	bl	8000298 <__aeabi_dsub>
 8007664:	4652      	mov	r2, sl
 8007666:	465b      	mov	r3, fp
 8007668:	f7f9 fa40 	bl	8000aec <__aeabi_dcmplt>
 800766c:	2800      	cmp	r0, #0
 800766e:	f040 80b5 	bne.w	80077dc <_dtoa_r+0x6c4>
 8007672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007674:	429d      	cmp	r5, r3
 8007676:	d081      	beq.n	800757c <_dtoa_r+0x464>
 8007678:	4b30      	ldr	r3, [pc, #192]	; (800773c <_dtoa_r+0x624>)
 800767a:	2200      	movs	r2, #0
 800767c:	4650      	mov	r0, sl
 800767e:	4659      	mov	r1, fp
 8007680:	f7f8 ffc2 	bl	8000608 <__aeabi_dmul>
 8007684:	4b2d      	ldr	r3, [pc, #180]	; (800773c <_dtoa_r+0x624>)
 8007686:	4682      	mov	sl, r0
 8007688:	468b      	mov	fp, r1
 800768a:	4640      	mov	r0, r8
 800768c:	4649      	mov	r1, r9
 800768e:	2200      	movs	r2, #0
 8007690:	f7f8 ffba 	bl	8000608 <__aeabi_dmul>
 8007694:	4680      	mov	r8, r0
 8007696:	4689      	mov	r9, r1
 8007698:	e7c6      	b.n	8007628 <_dtoa_r+0x510>
 800769a:	4650      	mov	r0, sl
 800769c:	4659      	mov	r1, fp
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a4:	9d01      	ldr	r5, [sp, #4]
 80076a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a8:	4682      	mov	sl, r0
 80076aa:	468b      	mov	fp, r1
 80076ac:	4649      	mov	r1, r9
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7f9 fa5a 	bl	8000b68 <__aeabi_d2iz>
 80076b4:	4606      	mov	r6, r0
 80076b6:	f7f8 ff3d 	bl	8000534 <__aeabi_i2d>
 80076ba:	3630      	adds	r6, #48	; 0x30
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f8 fde8 	bl	8000298 <__aeabi_dsub>
 80076c8:	f805 6b01 	strb.w	r6, [r5], #1
 80076cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ce:	429d      	cmp	r5, r3
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	d124      	bne.n	8007724 <_dtoa_r+0x60c>
 80076da:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <_dtoa_r+0x630>)
 80076dc:	4650      	mov	r0, sl
 80076de:	4659      	mov	r1, fp
 80076e0:	f7f8 fddc 	bl	800029c <__adddf3>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f7f9 fa1c 	bl	8000b28 <__aeabi_dcmpgt>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d173      	bne.n	80077dc <_dtoa_r+0x6c4>
 80076f4:	4652      	mov	r2, sl
 80076f6:	465b      	mov	r3, fp
 80076f8:	4913      	ldr	r1, [pc, #76]	; (8007748 <_dtoa_r+0x630>)
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7f8 fdcc 	bl	8000298 <__aeabi_dsub>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4640      	mov	r0, r8
 8007706:	4649      	mov	r1, r9
 8007708:	f7f9 f9f0 	bl	8000aec <__aeabi_dcmplt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f43f af35 	beq.w	800757c <_dtoa_r+0x464>
 8007712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007714:	1e6b      	subs	r3, r5, #1
 8007716:	930f      	str	r3, [sp, #60]	; 0x3c
 8007718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800771c:	2b30      	cmp	r3, #48	; 0x30
 800771e:	d0f8      	beq.n	8007712 <_dtoa_r+0x5fa>
 8007720:	9700      	str	r7, [sp, #0]
 8007722:	e049      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <_dtoa_r+0x624>)
 8007726:	f7f8 ff6f 	bl	8000608 <__aeabi_dmul>
 800772a:	4680      	mov	r8, r0
 800772c:	4689      	mov	r9, r1
 800772e:	e7bd      	b.n	80076ac <_dtoa_r+0x594>
 8007730:	0800b208 	.word	0x0800b208
 8007734:	0800b1e0 	.word	0x0800b1e0
 8007738:	3ff00000 	.word	0x3ff00000
 800773c:	40240000 	.word	0x40240000
 8007740:	401c0000 	.word	0x401c0000
 8007744:	40140000 	.word	0x40140000
 8007748:	3fe00000 	.word	0x3fe00000
 800774c:	9d01      	ldr	r5, [sp, #4]
 800774e:	4656      	mov	r6, sl
 8007750:	465f      	mov	r7, fp
 8007752:	4642      	mov	r2, r8
 8007754:	464b      	mov	r3, r9
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7f9 f87f 	bl	800085c <__aeabi_ddiv>
 800775e:	f7f9 fa03 	bl	8000b68 <__aeabi_d2iz>
 8007762:	4682      	mov	sl, r0
 8007764:	f7f8 fee6 	bl	8000534 <__aeabi_i2d>
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	f7f8 ff4c 	bl	8000608 <__aeabi_dmul>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800777c:	f7f8 fd8c 	bl	8000298 <__aeabi_dsub>
 8007780:	f805 6b01 	strb.w	r6, [r5], #1
 8007784:	9e01      	ldr	r6, [sp, #4]
 8007786:	9f03      	ldr	r7, [sp, #12]
 8007788:	1bae      	subs	r6, r5, r6
 800778a:	42b7      	cmp	r7, r6
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	d135      	bne.n	80077fe <_dtoa_r+0x6e6>
 8007792:	f7f8 fd83 	bl	800029c <__adddf3>
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	f7f9 f9c3 	bl	8000b28 <__aeabi_dcmpgt>
 80077a2:	b9d0      	cbnz	r0, 80077da <_dtoa_r+0x6c2>
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f9 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80077b0:	b110      	cbz	r0, 80077b8 <_dtoa_r+0x6a0>
 80077b2:	f01a 0f01 	tst.w	sl, #1
 80077b6:	d110      	bne.n	80077da <_dtoa_r+0x6c2>
 80077b8:	4620      	mov	r0, r4
 80077ba:	ee18 1a10 	vmov	r1, s16
 80077be:	f000 fd13 	bl	80081e8 <_Bfree>
 80077c2:	2300      	movs	r3, #0
 80077c4:	9800      	ldr	r0, [sp, #0]
 80077c6:	702b      	strb	r3, [r5, #0]
 80077c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ca:	3001      	adds	r0, #1
 80077cc:	6018      	str	r0, [r3, #0]
 80077ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f43f acf1 	beq.w	80071b8 <_dtoa_r+0xa0>
 80077d6:	601d      	str	r5, [r3, #0]
 80077d8:	e4ee      	b.n	80071b8 <_dtoa_r+0xa0>
 80077da:	9f00      	ldr	r7, [sp, #0]
 80077dc:	462b      	mov	r3, r5
 80077de:	461d      	mov	r5, r3
 80077e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e4:	2a39      	cmp	r2, #57	; 0x39
 80077e6:	d106      	bne.n	80077f6 <_dtoa_r+0x6de>
 80077e8:	9a01      	ldr	r2, [sp, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1f7      	bne.n	80077de <_dtoa_r+0x6c6>
 80077ee:	9901      	ldr	r1, [sp, #4]
 80077f0:	2230      	movs	r2, #48	; 0x30
 80077f2:	3701      	adds	r7, #1
 80077f4:	700a      	strb	r2, [r1, #0]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	3201      	adds	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e790      	b.n	8007720 <_dtoa_r+0x608>
 80077fe:	4ba6      	ldr	r3, [pc, #664]	; (8007a98 <_dtoa_r+0x980>)
 8007800:	2200      	movs	r2, #0
 8007802:	f7f8 ff01 	bl	8000608 <__aeabi_dmul>
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	f7f9 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8007812:	2800      	cmp	r0, #0
 8007814:	d09d      	beq.n	8007752 <_dtoa_r+0x63a>
 8007816:	e7cf      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007818:	9a08      	ldr	r2, [sp, #32]
 800781a:	2a00      	cmp	r2, #0
 800781c:	f000 80d7 	beq.w	80079ce <_dtoa_r+0x8b6>
 8007820:	9a06      	ldr	r2, [sp, #24]
 8007822:	2a01      	cmp	r2, #1
 8007824:	f300 80ba 	bgt.w	800799c <_dtoa_r+0x884>
 8007828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800782a:	2a00      	cmp	r2, #0
 800782c:	f000 80b2 	beq.w	8007994 <_dtoa_r+0x87c>
 8007830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007834:	9e07      	ldr	r6, [sp, #28]
 8007836:	9d04      	ldr	r5, [sp, #16]
 8007838:	9a04      	ldr	r2, [sp, #16]
 800783a:	441a      	add	r2, r3
 800783c:	9204      	str	r2, [sp, #16]
 800783e:	9a05      	ldr	r2, [sp, #20]
 8007840:	2101      	movs	r1, #1
 8007842:	441a      	add	r2, r3
 8007844:	4620      	mov	r0, r4
 8007846:	9205      	str	r2, [sp, #20]
 8007848:	f000 fd86 	bl	8008358 <__i2b>
 800784c:	4607      	mov	r7, r0
 800784e:	2d00      	cmp	r5, #0
 8007850:	dd0c      	ble.n	800786c <_dtoa_r+0x754>
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd09      	ble.n	800786c <_dtoa_r+0x754>
 8007858:	42ab      	cmp	r3, r5
 800785a:	9a04      	ldr	r2, [sp, #16]
 800785c:	bfa8      	it	ge
 800785e:	462b      	movge	r3, r5
 8007860:	1ad2      	subs	r2, r2, r3
 8007862:	9204      	str	r2, [sp, #16]
 8007864:	9a05      	ldr	r2, [sp, #20]
 8007866:	1aed      	subs	r5, r5, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	9b07      	ldr	r3, [sp, #28]
 800786e:	b31b      	cbz	r3, 80078b8 <_dtoa_r+0x7a0>
 8007870:	9b08      	ldr	r3, [sp, #32]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80af 	beq.w	80079d6 <_dtoa_r+0x8be>
 8007878:	2e00      	cmp	r6, #0
 800787a:	dd13      	ble.n	80078a4 <_dtoa_r+0x78c>
 800787c:	4639      	mov	r1, r7
 800787e:	4632      	mov	r2, r6
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fe29 	bl	80084d8 <__pow5mult>
 8007886:	ee18 2a10 	vmov	r2, s16
 800788a:	4601      	mov	r1, r0
 800788c:	4607      	mov	r7, r0
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fd78 	bl	8008384 <__multiply>
 8007894:	ee18 1a10 	vmov	r1, s16
 8007898:	4680      	mov	r8, r0
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fca4 	bl	80081e8 <_Bfree>
 80078a0:	ee08 8a10 	vmov	s16, r8
 80078a4:	9b07      	ldr	r3, [sp, #28]
 80078a6:	1b9a      	subs	r2, r3, r6
 80078a8:	d006      	beq.n	80078b8 <_dtoa_r+0x7a0>
 80078aa:	ee18 1a10 	vmov	r1, s16
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 fe12 	bl	80084d8 <__pow5mult>
 80078b4:	ee08 0a10 	vmov	s16, r0
 80078b8:	2101      	movs	r1, #1
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 fd4c 	bl	8008358 <__i2b>
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	4606      	mov	r6, r0
 80078c6:	f340 8088 	ble.w	80079da <_dtoa_r+0x8c2>
 80078ca:	461a      	mov	r2, r3
 80078cc:	4601      	mov	r1, r0
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 fe02 	bl	80084d8 <__pow5mult>
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	4606      	mov	r6, r0
 80078da:	f340 8081 	ble.w	80079e0 <_dtoa_r+0x8c8>
 80078de:	f04f 0800 	mov.w	r8, #0
 80078e2:	6933      	ldr	r3, [r6, #16]
 80078e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078e8:	6918      	ldr	r0, [r3, #16]
 80078ea:	f000 fce5 	bl	80082b8 <__hi0bits>
 80078ee:	f1c0 0020 	rsb	r0, r0, #32
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	4418      	add	r0, r3
 80078f6:	f010 001f 	ands.w	r0, r0, #31
 80078fa:	f000 8092 	beq.w	8007a22 <_dtoa_r+0x90a>
 80078fe:	f1c0 0320 	rsb	r3, r0, #32
 8007902:	2b04      	cmp	r3, #4
 8007904:	f340 808a 	ble.w	8007a1c <_dtoa_r+0x904>
 8007908:	f1c0 001c 	rsb	r0, r0, #28
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	4403      	add	r3, r0
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	9b05      	ldr	r3, [sp, #20]
 8007914:	4403      	add	r3, r0
 8007916:	4405      	add	r5, r0
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd07      	ble.n	8007930 <_dtoa_r+0x818>
 8007920:	ee18 1a10 	vmov	r1, s16
 8007924:	461a      	mov	r2, r3
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fe30 	bl	800858c <__lshift>
 800792c:	ee08 0a10 	vmov	s16, r0
 8007930:	9b05      	ldr	r3, [sp, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	dd05      	ble.n	8007942 <_dtoa_r+0x82a>
 8007936:	4631      	mov	r1, r6
 8007938:	461a      	mov	r2, r3
 800793a:	4620      	mov	r0, r4
 800793c:	f000 fe26 	bl	800858c <__lshift>
 8007940:	4606      	mov	r6, r0
 8007942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d06e      	beq.n	8007a26 <_dtoa_r+0x90e>
 8007948:	ee18 0a10 	vmov	r0, s16
 800794c:	4631      	mov	r1, r6
 800794e:	f000 fe8d 	bl	800866c <__mcmp>
 8007952:	2800      	cmp	r0, #0
 8007954:	da67      	bge.n	8007a26 <_dtoa_r+0x90e>
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	3b01      	subs	r3, #1
 800795a:	ee18 1a10 	vmov	r1, s16
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	220a      	movs	r2, #10
 8007962:	2300      	movs	r3, #0
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fc61 	bl	800822c <__multadd>
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	ee08 0a10 	vmov	s16, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 81b1 	beq.w	8007cd8 <_dtoa_r+0xbc0>
 8007976:	2300      	movs	r3, #0
 8007978:	4639      	mov	r1, r7
 800797a:	220a      	movs	r2, #10
 800797c:	4620      	mov	r0, r4
 800797e:	f000 fc55 	bl	800822c <__multadd>
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	4607      	mov	r7, r0
 8007988:	f300 808e 	bgt.w	8007aa8 <_dtoa_r+0x990>
 800798c:	9b06      	ldr	r3, [sp, #24]
 800798e:	2b02      	cmp	r3, #2
 8007990:	dc51      	bgt.n	8007a36 <_dtoa_r+0x91e>
 8007992:	e089      	b.n	8007aa8 <_dtoa_r+0x990>
 8007994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800799a:	e74b      	b.n	8007834 <_dtoa_r+0x71c>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1e5e      	subs	r6, r3, #1
 80079a0:	9b07      	ldr	r3, [sp, #28]
 80079a2:	42b3      	cmp	r3, r6
 80079a4:	bfbf      	itttt	lt
 80079a6:	9b07      	ldrlt	r3, [sp, #28]
 80079a8:	9607      	strlt	r6, [sp, #28]
 80079aa:	1af2      	sublt	r2, r6, r3
 80079ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80079ae:	bfb6      	itet	lt
 80079b0:	189b      	addlt	r3, r3, r2
 80079b2:	1b9e      	subge	r6, r3, r6
 80079b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	bfb8      	it	lt
 80079ba:	2600      	movlt	r6, #0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bfb7      	itett	lt
 80079c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80079c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80079c8:	1a9d      	sublt	r5, r3, r2
 80079ca:	2300      	movlt	r3, #0
 80079cc:	e734      	b.n	8007838 <_dtoa_r+0x720>
 80079ce:	9e07      	ldr	r6, [sp, #28]
 80079d0:	9d04      	ldr	r5, [sp, #16]
 80079d2:	9f08      	ldr	r7, [sp, #32]
 80079d4:	e73b      	b.n	800784e <_dtoa_r+0x736>
 80079d6:	9a07      	ldr	r2, [sp, #28]
 80079d8:	e767      	b.n	80078aa <_dtoa_r+0x792>
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	dc18      	bgt.n	8007a12 <_dtoa_r+0x8fa>
 80079e0:	f1ba 0f00 	cmp.w	sl, #0
 80079e4:	d115      	bne.n	8007a12 <_dtoa_r+0x8fa>
 80079e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079ea:	b993      	cbnz	r3, 8007a12 <_dtoa_r+0x8fa>
 80079ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079f0:	0d1b      	lsrs	r3, r3, #20
 80079f2:	051b      	lsls	r3, r3, #20
 80079f4:	b183      	cbz	r3, 8007a18 <_dtoa_r+0x900>
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	3301      	adds	r3, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	3301      	adds	r3, #1
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	f04f 0801 	mov.w	r8, #1
 8007a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f47f af6a 	bne.w	80078e2 <_dtoa_r+0x7ca>
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e76f      	b.n	80078f2 <_dtoa_r+0x7da>
 8007a12:	f04f 0800 	mov.w	r8, #0
 8007a16:	e7f6      	b.n	8007a06 <_dtoa_r+0x8ee>
 8007a18:	4698      	mov	r8, r3
 8007a1a:	e7f4      	b.n	8007a06 <_dtoa_r+0x8ee>
 8007a1c:	f43f af7d 	beq.w	800791a <_dtoa_r+0x802>
 8007a20:	4618      	mov	r0, r3
 8007a22:	301c      	adds	r0, #28
 8007a24:	e772      	b.n	800790c <_dtoa_r+0x7f4>
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dc37      	bgt.n	8007a9c <_dtoa_r+0x984>
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	dd34      	ble.n	8007a9c <_dtoa_r+0x984>
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	9302      	str	r3, [sp, #8]
 8007a36:	9b02      	ldr	r3, [sp, #8]
 8007a38:	b96b      	cbnz	r3, 8007a56 <_dtoa_r+0x93e>
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fbf4 	bl	800822c <__multadd>
 8007a44:	4601      	mov	r1, r0
 8007a46:	4606      	mov	r6, r0
 8007a48:	ee18 0a10 	vmov	r0, s16
 8007a4c:	f000 fe0e 	bl	800866c <__mcmp>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f73f adbb 	bgt.w	80075cc <_dtoa_r+0x4b4>
 8007a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a58:	9d01      	ldr	r5, [sp, #4]
 8007a5a:	43db      	mvns	r3, r3
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	f04f 0800 	mov.w	r8, #0
 8007a62:	4631      	mov	r1, r6
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fbbf 	bl	80081e8 <_Bfree>
 8007a6a:	2f00      	cmp	r7, #0
 8007a6c:	f43f aea4 	beq.w	80077b8 <_dtoa_r+0x6a0>
 8007a70:	f1b8 0f00 	cmp.w	r8, #0
 8007a74:	d005      	beq.n	8007a82 <_dtoa_r+0x96a>
 8007a76:	45b8      	cmp	r8, r7
 8007a78:	d003      	beq.n	8007a82 <_dtoa_r+0x96a>
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f000 fbb3 	bl	80081e8 <_Bfree>
 8007a82:	4639      	mov	r1, r7
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 fbaf 	bl	80081e8 <_Bfree>
 8007a8a:	e695      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	4637      	mov	r7, r6
 8007a90:	e7e1      	b.n	8007a56 <_dtoa_r+0x93e>
 8007a92:	9700      	str	r7, [sp, #0]
 8007a94:	4637      	mov	r7, r6
 8007a96:	e599      	b.n	80075cc <_dtoa_r+0x4b4>
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80ca 	beq.w	8007c38 <_dtoa_r+0xb20>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	dd05      	ble.n	8007ab8 <_dtoa_r+0x9a0>
 8007aac:	4639      	mov	r1, r7
 8007aae:	462a      	mov	r2, r5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 fd6b 	bl	800858c <__lshift>
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	d05b      	beq.n	8007b76 <_dtoa_r+0xa5e>
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 fb51 	bl	8008168 <_Balloc>
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b928      	cbnz	r0, 8007ad6 <_dtoa_r+0x9be>
 8007aca:	4b87      	ldr	r3, [pc, #540]	; (8007ce8 <_dtoa_r+0xbd0>)
 8007acc:	4602      	mov	r2, r0
 8007ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ad2:	f7ff bb3b 	b.w	800714c <_dtoa_r+0x34>
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	3202      	adds	r2, #2
 8007ada:	0092      	lsls	r2, r2, #2
 8007adc:	f107 010c 	add.w	r1, r7, #12
 8007ae0:	300c      	adds	r0, #12
 8007ae2:	f000 fb33 	bl	800814c <memcpy>
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 fd4e 	bl	800858c <__lshift>
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	f103 0901 	add.w	r9, r3, #1
 8007af6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	9305      	str	r3, [sp, #20]
 8007afe:	f00a 0301 	and.w	r3, sl, #1
 8007b02:	46b8      	mov	r8, r7
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	4607      	mov	r7, r0
 8007b08:	4631      	mov	r1, r6
 8007b0a:	ee18 0a10 	vmov	r0, s16
 8007b0e:	f7ff fa75 	bl	8006ffc <quorem>
 8007b12:	4641      	mov	r1, r8
 8007b14:	9002      	str	r0, [sp, #8]
 8007b16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b1a:	ee18 0a10 	vmov	r0, s16
 8007b1e:	f000 fda5 	bl	800866c <__mcmp>
 8007b22:	463a      	mov	r2, r7
 8007b24:	9003      	str	r0, [sp, #12]
 8007b26:	4631      	mov	r1, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fdbb 	bl	80086a4 <__mdiff>
 8007b2e:	68c2      	ldr	r2, [r0, #12]
 8007b30:	f109 3bff 	add.w	fp, r9, #4294967295
 8007b34:	4605      	mov	r5, r0
 8007b36:	bb02      	cbnz	r2, 8007b7a <_dtoa_r+0xa62>
 8007b38:	4601      	mov	r1, r0
 8007b3a:	ee18 0a10 	vmov	r0, s16
 8007b3e:	f000 fd95 	bl	800866c <__mcmp>
 8007b42:	4602      	mov	r2, r0
 8007b44:	4629      	mov	r1, r5
 8007b46:	4620      	mov	r0, r4
 8007b48:	9207      	str	r2, [sp, #28]
 8007b4a:	f000 fb4d 	bl	80081e8 <_Bfree>
 8007b4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007b52:	ea43 0102 	orr.w	r1, r3, r2
 8007b56:	9b04      	ldr	r3, [sp, #16]
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	464d      	mov	r5, r9
 8007b5c:	d10f      	bne.n	8007b7e <_dtoa_r+0xa66>
 8007b5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b62:	d02a      	beq.n	8007bba <_dtoa_r+0xaa2>
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd02      	ble.n	8007b70 <_dtoa_r+0xa58>
 8007b6a:	9b02      	ldr	r3, [sp, #8]
 8007b6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007b70:	f88b a000 	strb.w	sl, [fp]
 8007b74:	e775      	b.n	8007a62 <_dtoa_r+0x94a>
 8007b76:	4638      	mov	r0, r7
 8007b78:	e7ba      	b.n	8007af0 <_dtoa_r+0x9d8>
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	e7e2      	b.n	8007b44 <_dtoa_r+0xa2c>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	db04      	blt.n	8007b8e <_dtoa_r+0xa76>
 8007b84:	9906      	ldr	r1, [sp, #24]
 8007b86:	430b      	orrs	r3, r1
 8007b88:	9904      	ldr	r1, [sp, #16]
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	d122      	bne.n	8007bd4 <_dtoa_r+0xabc>
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	ddee      	ble.n	8007b70 <_dtoa_r+0xa58>
 8007b92:	ee18 1a10 	vmov	r1, s16
 8007b96:	2201      	movs	r2, #1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fcf7 	bl	800858c <__lshift>
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	ee08 0a10 	vmov	s16, r0
 8007ba4:	f000 fd62 	bl	800866c <__mcmp>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	dc03      	bgt.n	8007bb4 <_dtoa_r+0xa9c>
 8007bac:	d1e0      	bne.n	8007b70 <_dtoa_r+0xa58>
 8007bae:	f01a 0f01 	tst.w	sl, #1
 8007bb2:	d0dd      	beq.n	8007b70 <_dtoa_r+0xa58>
 8007bb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bb8:	d1d7      	bne.n	8007b6a <_dtoa_r+0xa52>
 8007bba:	2339      	movs	r3, #57	; 0x39
 8007bbc:	f88b 3000 	strb.w	r3, [fp]
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	461d      	mov	r5, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bca:	2a39      	cmp	r2, #57	; 0x39
 8007bcc:	d071      	beq.n	8007cb2 <_dtoa_r+0xb9a>
 8007bce:	3201      	adds	r2, #1
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e746      	b.n	8007a62 <_dtoa_r+0x94a>
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	dd07      	ble.n	8007be8 <_dtoa_r+0xad0>
 8007bd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bdc:	d0ed      	beq.n	8007bba <_dtoa_r+0xaa2>
 8007bde:	f10a 0301 	add.w	r3, sl, #1
 8007be2:	f88b 3000 	strb.w	r3, [fp]
 8007be6:	e73c      	b.n	8007a62 <_dtoa_r+0x94a>
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007bee:	4599      	cmp	r9, r3
 8007bf0:	d047      	beq.n	8007c82 <_dtoa_r+0xb6a>
 8007bf2:	ee18 1a10 	vmov	r1, s16
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 fb16 	bl	800822c <__multadd>
 8007c00:	45b8      	cmp	r8, r7
 8007c02:	ee08 0a10 	vmov	s16, r0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	f04f 020a 	mov.w	r2, #10
 8007c0e:	4641      	mov	r1, r8
 8007c10:	4620      	mov	r0, r4
 8007c12:	d106      	bne.n	8007c22 <_dtoa_r+0xb0a>
 8007c14:	f000 fb0a 	bl	800822c <__multadd>
 8007c18:	4680      	mov	r8, r0
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	f109 0901 	add.w	r9, r9, #1
 8007c20:	e772      	b.n	8007b08 <_dtoa_r+0x9f0>
 8007c22:	f000 fb03 	bl	800822c <__multadd>
 8007c26:	4639      	mov	r1, r7
 8007c28:	4680      	mov	r8, r0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	220a      	movs	r2, #10
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fafc 	bl	800822c <__multadd>
 8007c34:	4607      	mov	r7, r0
 8007c36:	e7f1      	b.n	8007c1c <_dtoa_r+0xb04>
 8007c38:	9b03      	ldr	r3, [sp, #12]
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	9d01      	ldr	r5, [sp, #4]
 8007c3e:	ee18 0a10 	vmov	r0, s16
 8007c42:	4631      	mov	r1, r6
 8007c44:	f7ff f9da 	bl	8006ffc <quorem>
 8007c48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c4c:	9b01      	ldr	r3, [sp, #4]
 8007c4e:	f805 ab01 	strb.w	sl, [r5], #1
 8007c52:	1aea      	subs	r2, r5, r3
 8007c54:	9b02      	ldr	r3, [sp, #8]
 8007c56:	4293      	cmp	r3, r2
 8007c58:	dd09      	ble.n	8007c6e <_dtoa_r+0xb56>
 8007c5a:	ee18 1a10 	vmov	r1, s16
 8007c5e:	2300      	movs	r3, #0
 8007c60:	220a      	movs	r2, #10
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fae2 	bl	800822c <__multadd>
 8007c68:	ee08 0a10 	vmov	s16, r0
 8007c6c:	e7e7      	b.n	8007c3e <_dtoa_r+0xb26>
 8007c6e:	9b02      	ldr	r3, [sp, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bfc8      	it	gt
 8007c74:	461d      	movgt	r5, r3
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	bfd8      	it	le
 8007c7a:	2501      	movle	r5, #1
 8007c7c:	441d      	add	r5, r3
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	ee18 1a10 	vmov	r1, s16
 8007c86:	2201      	movs	r2, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fc7f 	bl	800858c <__lshift>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	ee08 0a10 	vmov	s16, r0
 8007c94:	f000 fcea 	bl	800866c <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dc91      	bgt.n	8007bc0 <_dtoa_r+0xaa8>
 8007c9c:	d102      	bne.n	8007ca4 <_dtoa_r+0xb8c>
 8007c9e:	f01a 0f01 	tst.w	sl, #1
 8007ca2:	d18d      	bne.n	8007bc0 <_dtoa_r+0xaa8>
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cac:	2a30      	cmp	r2, #48	; 0x30
 8007cae:	d0fa      	beq.n	8007ca6 <_dtoa_r+0xb8e>
 8007cb0:	e6d7      	b.n	8007a62 <_dtoa_r+0x94a>
 8007cb2:	9a01      	ldr	r2, [sp, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d184      	bne.n	8007bc2 <_dtoa_r+0xaaa>
 8007cb8:	9b00      	ldr	r3, [sp, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2331      	movs	r3, #49	; 0x31
 8007cc0:	7013      	strb	r3, [r2, #0]
 8007cc2:	e6ce      	b.n	8007a62 <_dtoa_r+0x94a>
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <_dtoa_r+0xbd4>)
 8007cc6:	f7ff ba95 	b.w	80071f4 <_dtoa_r+0xdc>
 8007cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f47f aa6e 	bne.w	80071ae <_dtoa_r+0x96>
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <_dtoa_r+0xbd8>)
 8007cd4:	f7ff ba8e 	b.w	80071f4 <_dtoa_r+0xdc>
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dcae      	bgt.n	8007c3c <_dtoa_r+0xb24>
 8007cde:	9b06      	ldr	r3, [sp, #24]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f73f aea8 	bgt.w	8007a36 <_dtoa_r+0x91e>
 8007ce6:	e7a9      	b.n	8007c3c <_dtoa_r+0xb24>
 8007ce8:	0800b10f 	.word	0x0800b10f
 8007cec:	0800b06c 	.word	0x0800b06c
 8007cf0:	0800b090 	.word	0x0800b090

08007cf4 <__sflush_r>:
 8007cf4:	898a      	ldrh	r2, [r1, #12]
 8007cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	0710      	lsls	r0, r2, #28
 8007cfe:	460c      	mov	r4, r1
 8007d00:	d458      	bmi.n	8007db4 <__sflush_r+0xc0>
 8007d02:	684b      	ldr	r3, [r1, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dc05      	bgt.n	8007d14 <__sflush_r+0x20>
 8007d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	dc02      	bgt.n	8007d14 <__sflush_r+0x20>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	d0f9      	beq.n	8007d0e <__sflush_r+0x1a>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d20:	682f      	ldr	r7, [r5, #0]
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	d032      	beq.n	8007d8c <__sflush_r+0x98>
 8007d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	075a      	lsls	r2, r3, #29
 8007d2c:	d505      	bpl.n	8007d3a <__sflush_r+0x46>
 8007d2e:	6863      	ldr	r3, [r4, #4]
 8007d30:	1ac0      	subs	r0, r0, r3
 8007d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d34:	b10b      	cbz	r3, 8007d3a <__sflush_r+0x46>
 8007d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d38:	1ac0      	subs	r0, r0, r3
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d40:	6a21      	ldr	r1, [r4, #32]
 8007d42:	4628      	mov	r0, r5
 8007d44:	47b0      	blx	r6
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	d106      	bne.n	8007d5a <__sflush_r+0x66>
 8007d4c:	6829      	ldr	r1, [r5, #0]
 8007d4e:	291d      	cmp	r1, #29
 8007d50:	d82c      	bhi.n	8007dac <__sflush_r+0xb8>
 8007d52:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <__sflush_r+0x108>)
 8007d54:	40ca      	lsrs	r2, r1
 8007d56:	07d6      	lsls	r6, r2, #31
 8007d58:	d528      	bpl.n	8007dac <__sflush_r+0xb8>
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6062      	str	r2, [r4, #4]
 8007d5e:	04d9      	lsls	r1, r3, #19
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	6022      	str	r2, [r4, #0]
 8007d64:	d504      	bpl.n	8007d70 <__sflush_r+0x7c>
 8007d66:	1c42      	adds	r2, r0, #1
 8007d68:	d101      	bne.n	8007d6e <__sflush_r+0x7a>
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	b903      	cbnz	r3, 8007d70 <__sflush_r+0x7c>
 8007d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d72:	602f      	str	r7, [r5, #0]
 8007d74:	2900      	cmp	r1, #0
 8007d76:	d0ca      	beq.n	8007d0e <__sflush_r+0x1a>
 8007d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	d002      	beq.n	8007d86 <__sflush_r+0x92>
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 fd8b 	bl	800889c <_free_r>
 8007d86:	2000      	movs	r0, #0
 8007d88:	6360      	str	r0, [r4, #52]	; 0x34
 8007d8a:	e7c1      	b.n	8007d10 <__sflush_r+0x1c>
 8007d8c:	6a21      	ldr	r1, [r4, #32]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b0      	blx	r6
 8007d94:	1c41      	adds	r1, r0, #1
 8007d96:	d1c7      	bne.n	8007d28 <__sflush_r+0x34>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0c4      	beq.n	8007d28 <__sflush_r+0x34>
 8007d9e:	2b1d      	cmp	r3, #29
 8007da0:	d001      	beq.n	8007da6 <__sflush_r+0xb2>
 8007da2:	2b16      	cmp	r3, #22
 8007da4:	d101      	bne.n	8007daa <__sflush_r+0xb6>
 8007da6:	602f      	str	r7, [r5, #0]
 8007da8:	e7b1      	b.n	8007d0e <__sflush_r+0x1a>
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	e7ad      	b.n	8007d10 <__sflush_r+0x1c>
 8007db4:	690f      	ldr	r7, [r1, #16]
 8007db6:	2f00      	cmp	r7, #0
 8007db8:	d0a9      	beq.n	8007d0e <__sflush_r+0x1a>
 8007dba:	0793      	lsls	r3, r2, #30
 8007dbc:	680e      	ldr	r6, [r1, #0]
 8007dbe:	bf08      	it	eq
 8007dc0:	694b      	ldreq	r3, [r1, #20]
 8007dc2:	600f      	str	r7, [r1, #0]
 8007dc4:	bf18      	it	ne
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	eba6 0807 	sub.w	r8, r6, r7
 8007dcc:	608b      	str	r3, [r1, #8]
 8007dce:	f1b8 0f00 	cmp.w	r8, #0
 8007dd2:	dd9c      	ble.n	8007d0e <__sflush_r+0x1a>
 8007dd4:	6a21      	ldr	r1, [r4, #32]
 8007dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dd8:	4643      	mov	r3, r8
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b0      	blx	r6
 8007de0:	2800      	cmp	r0, #0
 8007de2:	dc06      	bgt.n	8007df2 <__sflush_r+0xfe>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dea:	81a3      	strh	r3, [r4, #12]
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	e78e      	b.n	8007d10 <__sflush_r+0x1c>
 8007df2:	4407      	add	r7, r0
 8007df4:	eba8 0800 	sub.w	r8, r8, r0
 8007df8:	e7e9      	b.n	8007dce <__sflush_r+0xda>
 8007dfa:	bf00      	nop
 8007dfc:	20400001 	.word	0x20400001

08007e00 <_fflush_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	690b      	ldr	r3, [r1, #16]
 8007e04:	4605      	mov	r5, r0
 8007e06:	460c      	mov	r4, r1
 8007e08:	b913      	cbnz	r3, 8007e10 <_fflush_r+0x10>
 8007e0a:	2500      	movs	r5, #0
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	b118      	cbz	r0, 8007e1a <_fflush_r+0x1a>
 8007e12:	6983      	ldr	r3, [r0, #24]
 8007e14:	b90b      	cbnz	r3, 8007e1a <_fflush_r+0x1a>
 8007e16:	f000 f887 	bl	8007f28 <__sinit>
 8007e1a:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <_fflush_r+0x6c>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	d11b      	bne.n	8007e58 <_fflush_r+0x58>
 8007e20:	686c      	ldr	r4, [r5, #4]
 8007e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0ef      	beq.n	8007e0a <_fflush_r+0xa>
 8007e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e2c:	07d0      	lsls	r0, r2, #31
 8007e2e:	d404      	bmi.n	8007e3a <_fflush_r+0x3a>
 8007e30:	0599      	lsls	r1, r3, #22
 8007e32:	d402      	bmi.n	8007e3a <_fflush_r+0x3a>
 8007e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e36:	f000 f91a 	bl	800806e <__retarget_lock_acquire_recursive>
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	f7ff ff59 	bl	8007cf4 <__sflush_r>
 8007e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e44:	07da      	lsls	r2, r3, #31
 8007e46:	4605      	mov	r5, r0
 8007e48:	d4e0      	bmi.n	8007e0c <_fflush_r+0xc>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	059b      	lsls	r3, r3, #22
 8007e4e:	d4dd      	bmi.n	8007e0c <_fflush_r+0xc>
 8007e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e52:	f000 f90d 	bl	8008070 <__retarget_lock_release_recursive>
 8007e56:	e7d9      	b.n	8007e0c <_fflush_r+0xc>
 8007e58:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <_fflush_r+0x70>)
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	d101      	bne.n	8007e62 <_fflush_r+0x62>
 8007e5e:	68ac      	ldr	r4, [r5, #8]
 8007e60:	e7df      	b.n	8007e22 <_fflush_r+0x22>
 8007e62:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <_fflush_r+0x74>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	bf08      	it	eq
 8007e68:	68ec      	ldreq	r4, [r5, #12]
 8007e6a:	e7da      	b.n	8007e22 <_fflush_r+0x22>
 8007e6c:	0800b140 	.word	0x0800b140
 8007e70:	0800b160 	.word	0x0800b160
 8007e74:	0800b120 	.word	0x0800b120

08007e78 <std>:
 8007e78:	2300      	movs	r3, #0
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e86:	6083      	str	r3, [r0, #8]
 8007e88:	8181      	strh	r1, [r0, #12]
 8007e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e8c:	81c2      	strh	r2, [r0, #14]
 8007e8e:	6183      	str	r3, [r0, #24]
 8007e90:	4619      	mov	r1, r3
 8007e92:	2208      	movs	r2, #8
 8007e94:	305c      	adds	r0, #92	; 0x5c
 8007e96:	f7fe faf1 	bl	800647c <memset>
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <std+0x38>)
 8007e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <std+0x3c>)
 8007ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <std+0x40>)
 8007ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <std+0x44>)
 8007ea8:	6224      	str	r4, [r4, #32]
 8007eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	08008d31 	.word	0x08008d31
 8007eb4:	08008d53 	.word	0x08008d53
 8007eb8:	08008d8b 	.word	0x08008d8b
 8007ebc:	08008daf 	.word	0x08008daf

08007ec0 <_cleanup_r>:
 8007ec0:	4901      	ldr	r1, [pc, #4]	; (8007ec8 <_cleanup_r+0x8>)
 8007ec2:	f000 b8af 	b.w	8008024 <_fwalk_reent>
 8007ec6:	bf00      	nop
 8007ec8:	08007e01 	.word	0x08007e01

08007ecc <__sfmoreglue>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	2268      	movs	r2, #104	; 0x68
 8007ed0:	1e4d      	subs	r5, r1, #1
 8007ed2:	4355      	muls	r5, r2
 8007ed4:	460e      	mov	r6, r1
 8007ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eda:	f000 fd4b 	bl	8008974 <_malloc_r>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	b140      	cbz	r0, 8007ef4 <__sfmoreglue+0x28>
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ee8:	300c      	adds	r0, #12
 8007eea:	60a0      	str	r0, [r4, #8]
 8007eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ef0:	f7fe fac4 	bl	800647c <memset>
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}

08007ef8 <__sfp_lock_acquire>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__sfp_lock_acquire+0x8>)
 8007efa:	f000 b8b8 	b.w	800806e <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	20000535 	.word	0x20000535

08007f04 <__sfp_lock_release>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__sfp_lock_release+0x8>)
 8007f06:	f000 b8b3 	b.w	8008070 <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20000535 	.word	0x20000535

08007f10 <__sinit_lock_acquire>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__sinit_lock_acquire+0x8>)
 8007f12:	f000 b8ac 	b.w	800806e <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	20000536 	.word	0x20000536

08007f1c <__sinit_lock_release>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__sinit_lock_release+0x8>)
 8007f1e:	f000 b8a7 	b.w	8008070 <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	20000536 	.word	0x20000536

08007f28 <__sinit>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f7ff fff0 	bl	8007f10 <__sinit_lock_acquire>
 8007f30:	69a3      	ldr	r3, [r4, #24]
 8007f32:	b11b      	cbz	r3, 8007f3c <__sinit+0x14>
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	f7ff bff0 	b.w	8007f1c <__sinit_lock_release>
 8007f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f40:	6523      	str	r3, [r4, #80]	; 0x50
 8007f42:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <__sinit+0x68>)
 8007f44:	4a13      	ldr	r2, [pc, #76]	; (8007f94 <__sinit+0x6c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	bf04      	itt	eq
 8007f4e:	2301      	moveq	r3, #1
 8007f50:	61a3      	streq	r3, [r4, #24]
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 f820 	bl	8007f98 <__sfp>
 8007f58:	6060      	str	r0, [r4, #4]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 f81c 	bl	8007f98 <__sfp>
 8007f60:	60a0      	str	r0, [r4, #8]
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 f818 	bl	8007f98 <__sfp>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	60e0      	str	r0, [r4, #12]
 8007f6c:	2104      	movs	r1, #4
 8007f6e:	6860      	ldr	r0, [r4, #4]
 8007f70:	f7ff ff82 	bl	8007e78 <std>
 8007f74:	68a0      	ldr	r0, [r4, #8]
 8007f76:	2201      	movs	r2, #1
 8007f78:	2109      	movs	r1, #9
 8007f7a:	f7ff ff7d 	bl	8007e78 <std>
 8007f7e:	68e0      	ldr	r0, [r4, #12]
 8007f80:	2202      	movs	r2, #2
 8007f82:	2112      	movs	r1, #18
 8007f84:	f7ff ff78 	bl	8007e78 <std>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	61a3      	str	r3, [r4, #24]
 8007f8c:	e7d2      	b.n	8007f34 <__sinit+0xc>
 8007f8e:	bf00      	nop
 8007f90:	0800b058 	.word	0x0800b058
 8007f94:	08007ec1 	.word	0x08007ec1

08007f98 <__sfp>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	f7ff ffac 	bl	8007ef8 <__sfp_lock_acquire>
 8007fa0:	4b1e      	ldr	r3, [pc, #120]	; (800801c <__sfp+0x84>)
 8007fa2:	681e      	ldr	r6, [r3, #0]
 8007fa4:	69b3      	ldr	r3, [r6, #24]
 8007fa6:	b913      	cbnz	r3, 8007fae <__sfp+0x16>
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff ffbd 	bl	8007f28 <__sinit>
 8007fae:	3648      	adds	r6, #72	; 0x48
 8007fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	d503      	bpl.n	8007fc0 <__sfp+0x28>
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	b30b      	cbz	r3, 8008000 <__sfp+0x68>
 8007fbc:	6836      	ldr	r6, [r6, #0]
 8007fbe:	e7f7      	b.n	8007fb0 <__sfp+0x18>
 8007fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fc4:	b9d5      	cbnz	r5, 8007ffc <__sfp+0x64>
 8007fc6:	4b16      	ldr	r3, [pc, #88]	; (8008020 <__sfp+0x88>)
 8007fc8:	60e3      	str	r3, [r4, #12]
 8007fca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fce:	6665      	str	r5, [r4, #100]	; 0x64
 8007fd0:	f000 f84c 	bl	800806c <__retarget_lock_init_recursive>
 8007fd4:	f7ff ff96 	bl	8007f04 <__sfp_lock_release>
 8007fd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fe0:	6025      	str	r5, [r4, #0]
 8007fe2:	61a5      	str	r5, [r4, #24]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fec:	f7fe fa46 	bl	800647c <memset>
 8007ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ffc:	3468      	adds	r4, #104	; 0x68
 8007ffe:	e7d9      	b.n	8007fb4 <__sfp+0x1c>
 8008000:	2104      	movs	r1, #4
 8008002:	4638      	mov	r0, r7
 8008004:	f7ff ff62 	bl	8007ecc <__sfmoreglue>
 8008008:	4604      	mov	r4, r0
 800800a:	6030      	str	r0, [r6, #0]
 800800c:	2800      	cmp	r0, #0
 800800e:	d1d5      	bne.n	8007fbc <__sfp+0x24>
 8008010:	f7ff ff78 	bl	8007f04 <__sfp_lock_release>
 8008014:	230c      	movs	r3, #12
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	e7ee      	b.n	8007ff8 <__sfp+0x60>
 800801a:	bf00      	nop
 800801c:	0800b058 	.word	0x0800b058
 8008020:	ffff0001 	.word	0xffff0001

08008024 <_fwalk_reent>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	4606      	mov	r6, r0
 800802a:	4688      	mov	r8, r1
 800802c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008030:	2700      	movs	r7, #0
 8008032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008036:	f1b9 0901 	subs.w	r9, r9, #1
 800803a:	d505      	bpl.n	8008048 <_fwalk_reent+0x24>
 800803c:	6824      	ldr	r4, [r4, #0]
 800803e:	2c00      	cmp	r4, #0
 8008040:	d1f7      	bne.n	8008032 <_fwalk_reent+0xe>
 8008042:	4638      	mov	r0, r7
 8008044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008048:	89ab      	ldrh	r3, [r5, #12]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d907      	bls.n	800805e <_fwalk_reent+0x3a>
 800804e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008052:	3301      	adds	r3, #1
 8008054:	d003      	beq.n	800805e <_fwalk_reent+0x3a>
 8008056:	4629      	mov	r1, r5
 8008058:	4630      	mov	r0, r6
 800805a:	47c0      	blx	r8
 800805c:	4307      	orrs	r7, r0
 800805e:	3568      	adds	r5, #104	; 0x68
 8008060:	e7e9      	b.n	8008036 <_fwalk_reent+0x12>
	...

08008064 <_localeconv_r>:
 8008064:	4800      	ldr	r0, [pc, #0]	; (8008068 <_localeconv_r+0x4>)
 8008066:	4770      	bx	lr
 8008068:	20000164 	.word	0x20000164

0800806c <__retarget_lock_init_recursive>:
 800806c:	4770      	bx	lr

0800806e <__retarget_lock_acquire_recursive>:
 800806e:	4770      	bx	lr

08008070 <__retarget_lock_release_recursive>:
 8008070:	4770      	bx	lr

08008072 <__swhatbuf_r>:
 8008072:	b570      	push	{r4, r5, r6, lr}
 8008074:	460e      	mov	r6, r1
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	2900      	cmp	r1, #0
 800807c:	b096      	sub	sp, #88	; 0x58
 800807e:	4614      	mov	r4, r2
 8008080:	461d      	mov	r5, r3
 8008082:	da08      	bge.n	8008096 <__swhatbuf_r+0x24>
 8008084:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	602a      	str	r2, [r5, #0]
 800808c:	061a      	lsls	r2, r3, #24
 800808e:	d410      	bmi.n	80080b2 <__swhatbuf_r+0x40>
 8008090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008094:	e00e      	b.n	80080b4 <__swhatbuf_r+0x42>
 8008096:	466a      	mov	r2, sp
 8008098:	f000 fee0 	bl	8008e5c <_fstat_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	dbf1      	blt.n	8008084 <__swhatbuf_r+0x12>
 80080a0:	9a01      	ldr	r2, [sp, #4]
 80080a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080aa:	425a      	negs	r2, r3
 80080ac:	415a      	adcs	r2, r3
 80080ae:	602a      	str	r2, [r5, #0]
 80080b0:	e7ee      	b.n	8008090 <__swhatbuf_r+0x1e>
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	2000      	movs	r0, #0
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	b016      	add	sp, #88	; 0x58
 80080ba:	bd70      	pop	{r4, r5, r6, pc}

080080bc <__smakebuf_r>:
 80080bc:	898b      	ldrh	r3, [r1, #12]
 80080be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080c0:	079d      	lsls	r5, r3, #30
 80080c2:	4606      	mov	r6, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	d507      	bpl.n	80080d8 <__smakebuf_r+0x1c>
 80080c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	2301      	movs	r3, #1
 80080d2:	6163      	str	r3, [r4, #20]
 80080d4:	b002      	add	sp, #8
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	ab01      	add	r3, sp, #4
 80080da:	466a      	mov	r2, sp
 80080dc:	f7ff ffc9 	bl	8008072 <__swhatbuf_r>
 80080e0:	9900      	ldr	r1, [sp, #0]
 80080e2:	4605      	mov	r5, r0
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 fc45 	bl	8008974 <_malloc_r>
 80080ea:	b948      	cbnz	r0, 8008100 <__smakebuf_r+0x44>
 80080ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d4ef      	bmi.n	80080d4 <__smakebuf_r+0x18>
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	f043 0302 	orr.w	r3, r3, #2
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	e7e3      	b.n	80080c8 <__smakebuf_r+0xc>
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <__smakebuf_r+0x7c>)
 8008102:	62b3      	str	r3, [r6, #40]	; 0x28
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	6020      	str	r0, [r4, #0]
 8008108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	6163      	str	r3, [r4, #20]
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	6120      	str	r0, [r4, #16]
 8008116:	b15b      	cbz	r3, 8008130 <__smakebuf_r+0x74>
 8008118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800811c:	4630      	mov	r0, r6
 800811e:	f000 feaf 	bl	8008e80 <_isatty_r>
 8008122:	b128      	cbz	r0, 8008130 <__smakebuf_r+0x74>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f023 0303 	bic.w	r3, r3, #3
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	89a0      	ldrh	r0, [r4, #12]
 8008132:	4305      	orrs	r5, r0
 8008134:	81a5      	strh	r5, [r4, #12]
 8008136:	e7cd      	b.n	80080d4 <__smakebuf_r+0x18>
 8008138:	08007ec1 	.word	0x08007ec1

0800813c <malloc>:
 800813c:	4b02      	ldr	r3, [pc, #8]	; (8008148 <malloc+0xc>)
 800813e:	4601      	mov	r1, r0
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	f000 bc17 	b.w	8008974 <_malloc_r>
 8008146:	bf00      	nop
 8008148:	20000010 	.word	0x20000010

0800814c <memcpy>:
 800814c:	440a      	add	r2, r1
 800814e:	4291      	cmp	r1, r2
 8008150:	f100 33ff 	add.w	r3, r0, #4294967295
 8008154:	d100      	bne.n	8008158 <memcpy+0xc>
 8008156:	4770      	bx	lr
 8008158:	b510      	push	{r4, lr}
 800815a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008162:	4291      	cmp	r1, r2
 8008164:	d1f9      	bne.n	800815a <memcpy+0xe>
 8008166:	bd10      	pop	{r4, pc}

08008168 <_Balloc>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	b976      	cbnz	r6, 8008190 <_Balloc+0x28>
 8008172:	2010      	movs	r0, #16
 8008174:	f7ff ffe2 	bl	800813c <malloc>
 8008178:	4602      	mov	r2, r0
 800817a:	6260      	str	r0, [r4, #36]	; 0x24
 800817c:	b920      	cbnz	r0, 8008188 <_Balloc+0x20>
 800817e:	4b18      	ldr	r3, [pc, #96]	; (80081e0 <_Balloc+0x78>)
 8008180:	4818      	ldr	r0, [pc, #96]	; (80081e4 <_Balloc+0x7c>)
 8008182:	2166      	movs	r1, #102	; 0x66
 8008184:	f000 fe2a 	bl	8008ddc <__assert_func>
 8008188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800818c:	6006      	str	r6, [r0, #0]
 800818e:	60c6      	str	r6, [r0, #12]
 8008190:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008192:	68f3      	ldr	r3, [r6, #12]
 8008194:	b183      	cbz	r3, 80081b8 <_Balloc+0x50>
 8008196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800819e:	b9b8      	cbnz	r0, 80081d0 <_Balloc+0x68>
 80081a0:	2101      	movs	r1, #1
 80081a2:	fa01 f605 	lsl.w	r6, r1, r5
 80081a6:	1d72      	adds	r2, r6, #5
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fb60 	bl	8008870 <_calloc_r>
 80081b0:	b160      	cbz	r0, 80081cc <_Balloc+0x64>
 80081b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081b6:	e00e      	b.n	80081d6 <_Balloc+0x6e>
 80081b8:	2221      	movs	r2, #33	; 0x21
 80081ba:	2104      	movs	r1, #4
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 fb57 	bl	8008870 <_calloc_r>
 80081c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c4:	60f0      	str	r0, [r6, #12]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e4      	bne.n	8008196 <_Balloc+0x2e>
 80081cc:	2000      	movs	r0, #0
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	6802      	ldr	r2, [r0, #0]
 80081d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081d6:	2300      	movs	r3, #0
 80081d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081dc:	e7f7      	b.n	80081ce <_Balloc+0x66>
 80081de:	bf00      	nop
 80081e0:	0800b09d 	.word	0x0800b09d
 80081e4:	0800b180 	.word	0x0800b180

080081e8 <_Bfree>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081ec:	4605      	mov	r5, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	b976      	cbnz	r6, 8008210 <_Bfree+0x28>
 80081f2:	2010      	movs	r0, #16
 80081f4:	f7ff ffa2 	bl	800813c <malloc>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6268      	str	r0, [r5, #36]	; 0x24
 80081fc:	b920      	cbnz	r0, 8008208 <_Bfree+0x20>
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <_Bfree+0x3c>)
 8008200:	4809      	ldr	r0, [pc, #36]	; (8008228 <_Bfree+0x40>)
 8008202:	218a      	movs	r1, #138	; 0x8a
 8008204:	f000 fdea 	bl	8008ddc <__assert_func>
 8008208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800820c:	6006      	str	r6, [r0, #0]
 800820e:	60c6      	str	r6, [r0, #12]
 8008210:	b13c      	cbz	r4, 8008222 <_Bfree+0x3a>
 8008212:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008214:	6862      	ldr	r2, [r4, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800821c:	6021      	str	r1, [r4, #0]
 800821e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	0800b09d 	.word	0x0800b09d
 8008228:	0800b180 	.word	0x0800b180

0800822c <__multadd>:
 800822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008230:	690d      	ldr	r5, [r1, #16]
 8008232:	4607      	mov	r7, r0
 8008234:	460c      	mov	r4, r1
 8008236:	461e      	mov	r6, r3
 8008238:	f101 0c14 	add.w	ip, r1, #20
 800823c:	2000      	movs	r0, #0
 800823e:	f8dc 3000 	ldr.w	r3, [ip]
 8008242:	b299      	uxth	r1, r3
 8008244:	fb02 6101 	mla	r1, r2, r1, r6
 8008248:	0c1e      	lsrs	r6, r3, #16
 800824a:	0c0b      	lsrs	r3, r1, #16
 800824c:	fb02 3306 	mla	r3, r2, r6, r3
 8008250:	b289      	uxth	r1, r1
 8008252:	3001      	adds	r0, #1
 8008254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008258:	4285      	cmp	r5, r0
 800825a:	f84c 1b04 	str.w	r1, [ip], #4
 800825e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008262:	dcec      	bgt.n	800823e <__multadd+0x12>
 8008264:	b30e      	cbz	r6, 80082aa <__multadd+0x7e>
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	42ab      	cmp	r3, r5
 800826a:	dc19      	bgt.n	80082a0 <__multadd+0x74>
 800826c:	6861      	ldr	r1, [r4, #4]
 800826e:	4638      	mov	r0, r7
 8008270:	3101      	adds	r1, #1
 8008272:	f7ff ff79 	bl	8008168 <_Balloc>
 8008276:	4680      	mov	r8, r0
 8008278:	b928      	cbnz	r0, 8008286 <__multadd+0x5a>
 800827a:	4602      	mov	r2, r0
 800827c:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <__multadd+0x84>)
 800827e:	480d      	ldr	r0, [pc, #52]	; (80082b4 <__multadd+0x88>)
 8008280:	21b5      	movs	r1, #181	; 0xb5
 8008282:	f000 fdab 	bl	8008ddc <__assert_func>
 8008286:	6922      	ldr	r2, [r4, #16]
 8008288:	3202      	adds	r2, #2
 800828a:	f104 010c 	add.w	r1, r4, #12
 800828e:	0092      	lsls	r2, r2, #2
 8008290:	300c      	adds	r0, #12
 8008292:	f7ff ff5b 	bl	800814c <memcpy>
 8008296:	4621      	mov	r1, r4
 8008298:	4638      	mov	r0, r7
 800829a:	f7ff ffa5 	bl	80081e8 <_Bfree>
 800829e:	4644      	mov	r4, r8
 80082a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082a4:	3501      	adds	r5, #1
 80082a6:	615e      	str	r6, [r3, #20]
 80082a8:	6125      	str	r5, [r4, #16]
 80082aa:	4620      	mov	r0, r4
 80082ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b0:	0800b10f 	.word	0x0800b10f
 80082b4:	0800b180 	.word	0x0800b180

080082b8 <__hi0bits>:
 80082b8:	0c03      	lsrs	r3, r0, #16
 80082ba:	041b      	lsls	r3, r3, #16
 80082bc:	b9d3      	cbnz	r3, 80082f4 <__hi0bits+0x3c>
 80082be:	0400      	lsls	r0, r0, #16
 80082c0:	2310      	movs	r3, #16
 80082c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082c6:	bf04      	itt	eq
 80082c8:	0200      	lsleq	r0, r0, #8
 80082ca:	3308      	addeq	r3, #8
 80082cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082d0:	bf04      	itt	eq
 80082d2:	0100      	lsleq	r0, r0, #4
 80082d4:	3304      	addeq	r3, #4
 80082d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082da:	bf04      	itt	eq
 80082dc:	0080      	lsleq	r0, r0, #2
 80082de:	3302      	addeq	r3, #2
 80082e0:	2800      	cmp	r0, #0
 80082e2:	db05      	blt.n	80082f0 <__hi0bits+0x38>
 80082e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082e8:	f103 0301 	add.w	r3, r3, #1
 80082ec:	bf08      	it	eq
 80082ee:	2320      	moveq	r3, #32
 80082f0:	4618      	mov	r0, r3
 80082f2:	4770      	bx	lr
 80082f4:	2300      	movs	r3, #0
 80082f6:	e7e4      	b.n	80082c2 <__hi0bits+0xa>

080082f8 <__lo0bits>:
 80082f8:	6803      	ldr	r3, [r0, #0]
 80082fa:	f013 0207 	ands.w	r2, r3, #7
 80082fe:	4601      	mov	r1, r0
 8008300:	d00b      	beq.n	800831a <__lo0bits+0x22>
 8008302:	07da      	lsls	r2, r3, #31
 8008304:	d423      	bmi.n	800834e <__lo0bits+0x56>
 8008306:	0798      	lsls	r0, r3, #30
 8008308:	bf49      	itett	mi
 800830a:	085b      	lsrmi	r3, r3, #1
 800830c:	089b      	lsrpl	r3, r3, #2
 800830e:	2001      	movmi	r0, #1
 8008310:	600b      	strmi	r3, [r1, #0]
 8008312:	bf5c      	itt	pl
 8008314:	600b      	strpl	r3, [r1, #0]
 8008316:	2002      	movpl	r0, #2
 8008318:	4770      	bx	lr
 800831a:	b298      	uxth	r0, r3
 800831c:	b9a8      	cbnz	r0, 800834a <__lo0bits+0x52>
 800831e:	0c1b      	lsrs	r3, r3, #16
 8008320:	2010      	movs	r0, #16
 8008322:	b2da      	uxtb	r2, r3
 8008324:	b90a      	cbnz	r2, 800832a <__lo0bits+0x32>
 8008326:	3008      	adds	r0, #8
 8008328:	0a1b      	lsrs	r3, r3, #8
 800832a:	071a      	lsls	r2, r3, #28
 800832c:	bf04      	itt	eq
 800832e:	091b      	lsreq	r3, r3, #4
 8008330:	3004      	addeq	r0, #4
 8008332:	079a      	lsls	r2, r3, #30
 8008334:	bf04      	itt	eq
 8008336:	089b      	lsreq	r3, r3, #2
 8008338:	3002      	addeq	r0, #2
 800833a:	07da      	lsls	r2, r3, #31
 800833c:	d403      	bmi.n	8008346 <__lo0bits+0x4e>
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	f100 0001 	add.w	r0, r0, #1
 8008344:	d005      	beq.n	8008352 <__lo0bits+0x5a>
 8008346:	600b      	str	r3, [r1, #0]
 8008348:	4770      	bx	lr
 800834a:	4610      	mov	r0, r2
 800834c:	e7e9      	b.n	8008322 <__lo0bits+0x2a>
 800834e:	2000      	movs	r0, #0
 8008350:	4770      	bx	lr
 8008352:	2020      	movs	r0, #32
 8008354:	4770      	bx	lr
	...

08008358 <__i2b>:
 8008358:	b510      	push	{r4, lr}
 800835a:	460c      	mov	r4, r1
 800835c:	2101      	movs	r1, #1
 800835e:	f7ff ff03 	bl	8008168 <_Balloc>
 8008362:	4602      	mov	r2, r0
 8008364:	b928      	cbnz	r0, 8008372 <__i2b+0x1a>
 8008366:	4b05      	ldr	r3, [pc, #20]	; (800837c <__i2b+0x24>)
 8008368:	4805      	ldr	r0, [pc, #20]	; (8008380 <__i2b+0x28>)
 800836a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800836e:	f000 fd35 	bl	8008ddc <__assert_func>
 8008372:	2301      	movs	r3, #1
 8008374:	6144      	str	r4, [r0, #20]
 8008376:	6103      	str	r3, [r0, #16]
 8008378:	bd10      	pop	{r4, pc}
 800837a:	bf00      	nop
 800837c:	0800b10f 	.word	0x0800b10f
 8008380:	0800b180 	.word	0x0800b180

08008384 <__multiply>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	4691      	mov	r9, r2
 800838a:	690a      	ldr	r2, [r1, #16]
 800838c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008390:	429a      	cmp	r2, r3
 8008392:	bfb8      	it	lt
 8008394:	460b      	movlt	r3, r1
 8008396:	460c      	mov	r4, r1
 8008398:	bfbc      	itt	lt
 800839a:	464c      	movlt	r4, r9
 800839c:	4699      	movlt	r9, r3
 800839e:	6927      	ldr	r7, [r4, #16]
 80083a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083a4:	68a3      	ldr	r3, [r4, #8]
 80083a6:	6861      	ldr	r1, [r4, #4]
 80083a8:	eb07 060a 	add.w	r6, r7, sl
 80083ac:	42b3      	cmp	r3, r6
 80083ae:	b085      	sub	sp, #20
 80083b0:	bfb8      	it	lt
 80083b2:	3101      	addlt	r1, #1
 80083b4:	f7ff fed8 	bl	8008168 <_Balloc>
 80083b8:	b930      	cbnz	r0, 80083c8 <__multiply+0x44>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b44      	ldr	r3, [pc, #272]	; (80084d0 <__multiply+0x14c>)
 80083be:	4845      	ldr	r0, [pc, #276]	; (80084d4 <__multiply+0x150>)
 80083c0:	f240 115d 	movw	r1, #349	; 0x15d
 80083c4:	f000 fd0a 	bl	8008ddc <__assert_func>
 80083c8:	f100 0514 	add.w	r5, r0, #20
 80083cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083d0:	462b      	mov	r3, r5
 80083d2:	2200      	movs	r2, #0
 80083d4:	4543      	cmp	r3, r8
 80083d6:	d321      	bcc.n	800841c <__multiply+0x98>
 80083d8:	f104 0314 	add.w	r3, r4, #20
 80083dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083e0:	f109 0314 	add.w	r3, r9, #20
 80083e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083e8:	9202      	str	r2, [sp, #8]
 80083ea:	1b3a      	subs	r2, r7, r4
 80083ec:	3a15      	subs	r2, #21
 80083ee:	f022 0203 	bic.w	r2, r2, #3
 80083f2:	3204      	adds	r2, #4
 80083f4:	f104 0115 	add.w	r1, r4, #21
 80083f8:	428f      	cmp	r7, r1
 80083fa:	bf38      	it	cc
 80083fc:	2204      	movcc	r2, #4
 80083fe:	9201      	str	r2, [sp, #4]
 8008400:	9a02      	ldr	r2, [sp, #8]
 8008402:	9303      	str	r3, [sp, #12]
 8008404:	429a      	cmp	r2, r3
 8008406:	d80c      	bhi.n	8008422 <__multiply+0x9e>
 8008408:	2e00      	cmp	r6, #0
 800840a:	dd03      	ble.n	8008414 <__multiply+0x90>
 800840c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008410:	2b00      	cmp	r3, #0
 8008412:	d05a      	beq.n	80084ca <__multiply+0x146>
 8008414:	6106      	str	r6, [r0, #16]
 8008416:	b005      	add	sp, #20
 8008418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841c:	f843 2b04 	str.w	r2, [r3], #4
 8008420:	e7d8      	b.n	80083d4 <__multiply+0x50>
 8008422:	f8b3 a000 	ldrh.w	sl, [r3]
 8008426:	f1ba 0f00 	cmp.w	sl, #0
 800842a:	d024      	beq.n	8008476 <__multiply+0xf2>
 800842c:	f104 0e14 	add.w	lr, r4, #20
 8008430:	46a9      	mov	r9, r5
 8008432:	f04f 0c00 	mov.w	ip, #0
 8008436:	f85e 2b04 	ldr.w	r2, [lr], #4
 800843a:	f8d9 1000 	ldr.w	r1, [r9]
 800843e:	fa1f fb82 	uxth.w	fp, r2
 8008442:	b289      	uxth	r1, r1
 8008444:	fb0a 110b 	mla	r1, sl, fp, r1
 8008448:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800844c:	f8d9 2000 	ldr.w	r2, [r9]
 8008450:	4461      	add	r1, ip
 8008452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008456:	fb0a c20b 	mla	r2, sl, fp, ip
 800845a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800845e:	b289      	uxth	r1, r1
 8008460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008464:	4577      	cmp	r7, lr
 8008466:	f849 1b04 	str.w	r1, [r9], #4
 800846a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800846e:	d8e2      	bhi.n	8008436 <__multiply+0xb2>
 8008470:	9a01      	ldr	r2, [sp, #4]
 8008472:	f845 c002 	str.w	ip, [r5, r2]
 8008476:	9a03      	ldr	r2, [sp, #12]
 8008478:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800847c:	3304      	adds	r3, #4
 800847e:	f1b9 0f00 	cmp.w	r9, #0
 8008482:	d020      	beq.n	80084c6 <__multiply+0x142>
 8008484:	6829      	ldr	r1, [r5, #0]
 8008486:	f104 0c14 	add.w	ip, r4, #20
 800848a:	46ae      	mov	lr, r5
 800848c:	f04f 0a00 	mov.w	sl, #0
 8008490:	f8bc b000 	ldrh.w	fp, [ip]
 8008494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008498:	fb09 220b 	mla	r2, r9, fp, r2
 800849c:	4492      	add	sl, r2
 800849e:	b289      	uxth	r1, r1
 80084a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084a4:	f84e 1b04 	str.w	r1, [lr], #4
 80084a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084ac:	f8be 1000 	ldrh.w	r1, [lr]
 80084b0:	0c12      	lsrs	r2, r2, #16
 80084b2:	fb09 1102 	mla	r1, r9, r2, r1
 80084b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084ba:	4567      	cmp	r7, ip
 80084bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084c0:	d8e6      	bhi.n	8008490 <__multiply+0x10c>
 80084c2:	9a01      	ldr	r2, [sp, #4]
 80084c4:	50a9      	str	r1, [r5, r2]
 80084c6:	3504      	adds	r5, #4
 80084c8:	e79a      	b.n	8008400 <__multiply+0x7c>
 80084ca:	3e01      	subs	r6, #1
 80084cc:	e79c      	b.n	8008408 <__multiply+0x84>
 80084ce:	bf00      	nop
 80084d0:	0800b10f 	.word	0x0800b10f
 80084d4:	0800b180 	.word	0x0800b180

080084d8 <__pow5mult>:
 80084d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084dc:	4615      	mov	r5, r2
 80084de:	f012 0203 	ands.w	r2, r2, #3
 80084e2:	4606      	mov	r6, r0
 80084e4:	460f      	mov	r7, r1
 80084e6:	d007      	beq.n	80084f8 <__pow5mult+0x20>
 80084e8:	4c25      	ldr	r4, [pc, #148]	; (8008580 <__pow5mult+0xa8>)
 80084ea:	3a01      	subs	r2, #1
 80084ec:	2300      	movs	r3, #0
 80084ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084f2:	f7ff fe9b 	bl	800822c <__multadd>
 80084f6:	4607      	mov	r7, r0
 80084f8:	10ad      	asrs	r5, r5, #2
 80084fa:	d03d      	beq.n	8008578 <__pow5mult+0xa0>
 80084fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084fe:	b97c      	cbnz	r4, 8008520 <__pow5mult+0x48>
 8008500:	2010      	movs	r0, #16
 8008502:	f7ff fe1b 	bl	800813c <malloc>
 8008506:	4602      	mov	r2, r0
 8008508:	6270      	str	r0, [r6, #36]	; 0x24
 800850a:	b928      	cbnz	r0, 8008518 <__pow5mult+0x40>
 800850c:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <__pow5mult+0xac>)
 800850e:	481e      	ldr	r0, [pc, #120]	; (8008588 <__pow5mult+0xb0>)
 8008510:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008514:	f000 fc62 	bl	8008ddc <__assert_func>
 8008518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800851c:	6004      	str	r4, [r0, #0]
 800851e:	60c4      	str	r4, [r0, #12]
 8008520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008528:	b94c      	cbnz	r4, 800853e <__pow5mult+0x66>
 800852a:	f240 2171 	movw	r1, #625	; 0x271
 800852e:	4630      	mov	r0, r6
 8008530:	f7ff ff12 	bl	8008358 <__i2b>
 8008534:	2300      	movs	r3, #0
 8008536:	f8c8 0008 	str.w	r0, [r8, #8]
 800853a:	4604      	mov	r4, r0
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	f04f 0900 	mov.w	r9, #0
 8008542:	07eb      	lsls	r3, r5, #31
 8008544:	d50a      	bpl.n	800855c <__pow5mult+0x84>
 8008546:	4639      	mov	r1, r7
 8008548:	4622      	mov	r2, r4
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ff1a 	bl	8008384 <__multiply>
 8008550:	4639      	mov	r1, r7
 8008552:	4680      	mov	r8, r0
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fe47 	bl	80081e8 <_Bfree>
 800855a:	4647      	mov	r7, r8
 800855c:	106d      	asrs	r5, r5, #1
 800855e:	d00b      	beq.n	8008578 <__pow5mult+0xa0>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	b938      	cbnz	r0, 8008574 <__pow5mult+0x9c>
 8008564:	4622      	mov	r2, r4
 8008566:	4621      	mov	r1, r4
 8008568:	4630      	mov	r0, r6
 800856a:	f7ff ff0b 	bl	8008384 <__multiply>
 800856e:	6020      	str	r0, [r4, #0]
 8008570:	f8c0 9000 	str.w	r9, [r0]
 8008574:	4604      	mov	r4, r0
 8008576:	e7e4      	b.n	8008542 <__pow5mult+0x6a>
 8008578:	4638      	mov	r0, r7
 800857a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857e:	bf00      	nop
 8008580:	0800b2d0 	.word	0x0800b2d0
 8008584:	0800b09d 	.word	0x0800b09d
 8008588:	0800b180 	.word	0x0800b180

0800858c <__lshift>:
 800858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	460c      	mov	r4, r1
 8008592:	6849      	ldr	r1, [r1, #4]
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800859a:	68a3      	ldr	r3, [r4, #8]
 800859c:	4607      	mov	r7, r0
 800859e:	4691      	mov	r9, r2
 80085a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085a4:	f108 0601 	add.w	r6, r8, #1
 80085a8:	42b3      	cmp	r3, r6
 80085aa:	db0b      	blt.n	80085c4 <__lshift+0x38>
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff fddb 	bl	8008168 <_Balloc>
 80085b2:	4605      	mov	r5, r0
 80085b4:	b948      	cbnz	r0, 80085ca <__lshift+0x3e>
 80085b6:	4602      	mov	r2, r0
 80085b8:	4b2a      	ldr	r3, [pc, #168]	; (8008664 <__lshift+0xd8>)
 80085ba:	482b      	ldr	r0, [pc, #172]	; (8008668 <__lshift+0xdc>)
 80085bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085c0:	f000 fc0c 	bl	8008ddc <__assert_func>
 80085c4:	3101      	adds	r1, #1
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	e7ee      	b.n	80085a8 <__lshift+0x1c>
 80085ca:	2300      	movs	r3, #0
 80085cc:	f100 0114 	add.w	r1, r0, #20
 80085d0:	f100 0210 	add.w	r2, r0, #16
 80085d4:	4618      	mov	r0, r3
 80085d6:	4553      	cmp	r3, sl
 80085d8:	db37      	blt.n	800864a <__lshift+0xbe>
 80085da:	6920      	ldr	r0, [r4, #16]
 80085dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085e0:	f104 0314 	add.w	r3, r4, #20
 80085e4:	f019 091f 	ands.w	r9, r9, #31
 80085e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085f0:	d02f      	beq.n	8008652 <__lshift+0xc6>
 80085f2:	f1c9 0e20 	rsb	lr, r9, #32
 80085f6:	468a      	mov	sl, r1
 80085f8:	f04f 0c00 	mov.w	ip, #0
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	fa02 f209 	lsl.w	r2, r2, r9
 8008602:	ea42 020c 	orr.w	r2, r2, ip
 8008606:	f84a 2b04 	str.w	r2, [sl], #4
 800860a:	f853 2b04 	ldr.w	r2, [r3], #4
 800860e:	4298      	cmp	r0, r3
 8008610:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008614:	d8f2      	bhi.n	80085fc <__lshift+0x70>
 8008616:	1b03      	subs	r3, r0, r4
 8008618:	3b15      	subs	r3, #21
 800861a:	f023 0303 	bic.w	r3, r3, #3
 800861e:	3304      	adds	r3, #4
 8008620:	f104 0215 	add.w	r2, r4, #21
 8008624:	4290      	cmp	r0, r2
 8008626:	bf38      	it	cc
 8008628:	2304      	movcc	r3, #4
 800862a:	f841 c003 	str.w	ip, [r1, r3]
 800862e:	f1bc 0f00 	cmp.w	ip, #0
 8008632:	d001      	beq.n	8008638 <__lshift+0xac>
 8008634:	f108 0602 	add.w	r6, r8, #2
 8008638:	3e01      	subs	r6, #1
 800863a:	4638      	mov	r0, r7
 800863c:	612e      	str	r6, [r5, #16]
 800863e:	4621      	mov	r1, r4
 8008640:	f7ff fdd2 	bl	80081e8 <_Bfree>
 8008644:	4628      	mov	r0, r5
 8008646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864a:	f842 0f04 	str.w	r0, [r2, #4]!
 800864e:	3301      	adds	r3, #1
 8008650:	e7c1      	b.n	80085d6 <__lshift+0x4a>
 8008652:	3904      	subs	r1, #4
 8008654:	f853 2b04 	ldr.w	r2, [r3], #4
 8008658:	f841 2f04 	str.w	r2, [r1, #4]!
 800865c:	4298      	cmp	r0, r3
 800865e:	d8f9      	bhi.n	8008654 <__lshift+0xc8>
 8008660:	e7ea      	b.n	8008638 <__lshift+0xac>
 8008662:	bf00      	nop
 8008664:	0800b10f 	.word	0x0800b10f
 8008668:	0800b180 	.word	0x0800b180

0800866c <__mcmp>:
 800866c:	b530      	push	{r4, r5, lr}
 800866e:	6902      	ldr	r2, [r0, #16]
 8008670:	690c      	ldr	r4, [r1, #16]
 8008672:	1b12      	subs	r2, r2, r4
 8008674:	d10e      	bne.n	8008694 <__mcmp+0x28>
 8008676:	f100 0314 	add.w	r3, r0, #20
 800867a:	3114      	adds	r1, #20
 800867c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008684:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008688:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800868c:	42a5      	cmp	r5, r4
 800868e:	d003      	beq.n	8008698 <__mcmp+0x2c>
 8008690:	d305      	bcc.n	800869e <__mcmp+0x32>
 8008692:	2201      	movs	r2, #1
 8008694:	4610      	mov	r0, r2
 8008696:	bd30      	pop	{r4, r5, pc}
 8008698:	4283      	cmp	r3, r0
 800869a:	d3f3      	bcc.n	8008684 <__mcmp+0x18>
 800869c:	e7fa      	b.n	8008694 <__mcmp+0x28>
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	e7f7      	b.n	8008694 <__mcmp+0x28>

080086a4 <__mdiff>:
 80086a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	460c      	mov	r4, r1
 80086aa:	4606      	mov	r6, r0
 80086ac:	4611      	mov	r1, r2
 80086ae:	4620      	mov	r0, r4
 80086b0:	4690      	mov	r8, r2
 80086b2:	f7ff ffdb 	bl	800866c <__mcmp>
 80086b6:	1e05      	subs	r5, r0, #0
 80086b8:	d110      	bne.n	80086dc <__mdiff+0x38>
 80086ba:	4629      	mov	r1, r5
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff fd53 	bl	8008168 <_Balloc>
 80086c2:	b930      	cbnz	r0, 80086d2 <__mdiff+0x2e>
 80086c4:	4b3a      	ldr	r3, [pc, #232]	; (80087b0 <__mdiff+0x10c>)
 80086c6:	4602      	mov	r2, r0
 80086c8:	f240 2132 	movw	r1, #562	; 0x232
 80086cc:	4839      	ldr	r0, [pc, #228]	; (80087b4 <__mdiff+0x110>)
 80086ce:	f000 fb85 	bl	8008ddc <__assert_func>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086dc:	bfa4      	itt	ge
 80086de:	4643      	movge	r3, r8
 80086e0:	46a0      	movge	r8, r4
 80086e2:	4630      	mov	r0, r6
 80086e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086e8:	bfa6      	itte	ge
 80086ea:	461c      	movge	r4, r3
 80086ec:	2500      	movge	r5, #0
 80086ee:	2501      	movlt	r5, #1
 80086f0:	f7ff fd3a 	bl	8008168 <_Balloc>
 80086f4:	b920      	cbnz	r0, 8008700 <__mdiff+0x5c>
 80086f6:	4b2e      	ldr	r3, [pc, #184]	; (80087b0 <__mdiff+0x10c>)
 80086f8:	4602      	mov	r2, r0
 80086fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086fe:	e7e5      	b.n	80086cc <__mdiff+0x28>
 8008700:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008704:	6926      	ldr	r6, [r4, #16]
 8008706:	60c5      	str	r5, [r0, #12]
 8008708:	f104 0914 	add.w	r9, r4, #20
 800870c:	f108 0514 	add.w	r5, r8, #20
 8008710:	f100 0e14 	add.w	lr, r0, #20
 8008714:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008718:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800871c:	f108 0210 	add.w	r2, r8, #16
 8008720:	46f2      	mov	sl, lr
 8008722:	2100      	movs	r1, #0
 8008724:	f859 3b04 	ldr.w	r3, [r9], #4
 8008728:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800872c:	fa1f f883 	uxth.w	r8, r3
 8008730:	fa11 f18b 	uxtah	r1, r1, fp
 8008734:	0c1b      	lsrs	r3, r3, #16
 8008736:	eba1 0808 	sub.w	r8, r1, r8
 800873a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800873e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008742:	fa1f f888 	uxth.w	r8, r8
 8008746:	1419      	asrs	r1, r3, #16
 8008748:	454e      	cmp	r6, r9
 800874a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800874e:	f84a 3b04 	str.w	r3, [sl], #4
 8008752:	d8e7      	bhi.n	8008724 <__mdiff+0x80>
 8008754:	1b33      	subs	r3, r6, r4
 8008756:	3b15      	subs	r3, #21
 8008758:	f023 0303 	bic.w	r3, r3, #3
 800875c:	3304      	adds	r3, #4
 800875e:	3415      	adds	r4, #21
 8008760:	42a6      	cmp	r6, r4
 8008762:	bf38      	it	cc
 8008764:	2304      	movcc	r3, #4
 8008766:	441d      	add	r5, r3
 8008768:	4473      	add	r3, lr
 800876a:	469e      	mov	lr, r3
 800876c:	462e      	mov	r6, r5
 800876e:	4566      	cmp	r6, ip
 8008770:	d30e      	bcc.n	8008790 <__mdiff+0xec>
 8008772:	f10c 0203 	add.w	r2, ip, #3
 8008776:	1b52      	subs	r2, r2, r5
 8008778:	f022 0203 	bic.w	r2, r2, #3
 800877c:	3d03      	subs	r5, #3
 800877e:	45ac      	cmp	ip, r5
 8008780:	bf38      	it	cc
 8008782:	2200      	movcc	r2, #0
 8008784:	441a      	add	r2, r3
 8008786:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800878a:	b17b      	cbz	r3, 80087ac <__mdiff+0x108>
 800878c:	6107      	str	r7, [r0, #16]
 800878e:	e7a3      	b.n	80086d8 <__mdiff+0x34>
 8008790:	f856 8b04 	ldr.w	r8, [r6], #4
 8008794:	fa11 f288 	uxtah	r2, r1, r8
 8008798:	1414      	asrs	r4, r2, #16
 800879a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800879e:	b292      	uxth	r2, r2
 80087a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087a4:	f84e 2b04 	str.w	r2, [lr], #4
 80087a8:	1421      	asrs	r1, r4, #16
 80087aa:	e7e0      	b.n	800876e <__mdiff+0xca>
 80087ac:	3f01      	subs	r7, #1
 80087ae:	e7ea      	b.n	8008786 <__mdiff+0xe2>
 80087b0:	0800b10f 	.word	0x0800b10f
 80087b4:	0800b180 	.word	0x0800b180

080087b8 <__d2b>:
 80087b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087bc:	4689      	mov	r9, r1
 80087be:	2101      	movs	r1, #1
 80087c0:	ec57 6b10 	vmov	r6, r7, d0
 80087c4:	4690      	mov	r8, r2
 80087c6:	f7ff fccf 	bl	8008168 <_Balloc>
 80087ca:	4604      	mov	r4, r0
 80087cc:	b930      	cbnz	r0, 80087dc <__d2b+0x24>
 80087ce:	4602      	mov	r2, r0
 80087d0:	4b25      	ldr	r3, [pc, #148]	; (8008868 <__d2b+0xb0>)
 80087d2:	4826      	ldr	r0, [pc, #152]	; (800886c <__d2b+0xb4>)
 80087d4:	f240 310a 	movw	r1, #778	; 0x30a
 80087d8:	f000 fb00 	bl	8008ddc <__assert_func>
 80087dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087e4:	bb35      	cbnz	r5, 8008834 <__d2b+0x7c>
 80087e6:	2e00      	cmp	r6, #0
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	d028      	beq.n	800883e <__d2b+0x86>
 80087ec:	4668      	mov	r0, sp
 80087ee:	9600      	str	r6, [sp, #0]
 80087f0:	f7ff fd82 	bl	80082f8 <__lo0bits>
 80087f4:	9900      	ldr	r1, [sp, #0]
 80087f6:	b300      	cbz	r0, 800883a <__d2b+0x82>
 80087f8:	9a01      	ldr	r2, [sp, #4]
 80087fa:	f1c0 0320 	rsb	r3, r0, #32
 80087fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008802:	430b      	orrs	r3, r1
 8008804:	40c2      	lsrs	r2, r0
 8008806:	6163      	str	r3, [r4, #20]
 8008808:	9201      	str	r2, [sp, #4]
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	61a3      	str	r3, [r4, #24]
 800880e:	2b00      	cmp	r3, #0
 8008810:	bf14      	ite	ne
 8008812:	2202      	movne	r2, #2
 8008814:	2201      	moveq	r2, #1
 8008816:	6122      	str	r2, [r4, #16]
 8008818:	b1d5      	cbz	r5, 8008850 <__d2b+0x98>
 800881a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800881e:	4405      	add	r5, r0
 8008820:	f8c9 5000 	str.w	r5, [r9]
 8008824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008828:	f8c8 0000 	str.w	r0, [r8]
 800882c:	4620      	mov	r0, r4
 800882e:	b003      	add	sp, #12
 8008830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008838:	e7d5      	b.n	80087e6 <__d2b+0x2e>
 800883a:	6161      	str	r1, [r4, #20]
 800883c:	e7e5      	b.n	800880a <__d2b+0x52>
 800883e:	a801      	add	r0, sp, #4
 8008840:	f7ff fd5a 	bl	80082f8 <__lo0bits>
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	6163      	str	r3, [r4, #20]
 8008848:	2201      	movs	r2, #1
 800884a:	6122      	str	r2, [r4, #16]
 800884c:	3020      	adds	r0, #32
 800884e:	e7e3      	b.n	8008818 <__d2b+0x60>
 8008850:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008854:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008858:	f8c9 0000 	str.w	r0, [r9]
 800885c:	6918      	ldr	r0, [r3, #16]
 800885e:	f7ff fd2b 	bl	80082b8 <__hi0bits>
 8008862:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008866:	e7df      	b.n	8008828 <__d2b+0x70>
 8008868:	0800b10f 	.word	0x0800b10f
 800886c:	0800b180 	.word	0x0800b180

08008870 <_calloc_r>:
 8008870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008872:	fba1 2402 	umull	r2, r4, r1, r2
 8008876:	b94c      	cbnz	r4, 800888c <_calloc_r+0x1c>
 8008878:	4611      	mov	r1, r2
 800887a:	9201      	str	r2, [sp, #4]
 800887c:	f000 f87a 	bl	8008974 <_malloc_r>
 8008880:	9a01      	ldr	r2, [sp, #4]
 8008882:	4605      	mov	r5, r0
 8008884:	b930      	cbnz	r0, 8008894 <_calloc_r+0x24>
 8008886:	4628      	mov	r0, r5
 8008888:	b003      	add	sp, #12
 800888a:	bd30      	pop	{r4, r5, pc}
 800888c:	220c      	movs	r2, #12
 800888e:	6002      	str	r2, [r0, #0]
 8008890:	2500      	movs	r5, #0
 8008892:	e7f8      	b.n	8008886 <_calloc_r+0x16>
 8008894:	4621      	mov	r1, r4
 8008896:	f7fd fdf1 	bl	800647c <memset>
 800889a:	e7f4      	b.n	8008886 <_calloc_r+0x16>

0800889c <_free_r>:
 800889c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800889e:	2900      	cmp	r1, #0
 80088a0:	d044      	beq.n	800892c <_free_r+0x90>
 80088a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a6:	9001      	str	r0, [sp, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f1a1 0404 	sub.w	r4, r1, #4
 80088ae:	bfb8      	it	lt
 80088b0:	18e4      	addlt	r4, r4, r3
 80088b2:	f000 fb19 	bl	8008ee8 <__malloc_lock>
 80088b6:	4a1e      	ldr	r2, [pc, #120]	; (8008930 <_free_r+0x94>)
 80088b8:	9801      	ldr	r0, [sp, #4]
 80088ba:	6813      	ldr	r3, [r2, #0]
 80088bc:	b933      	cbnz	r3, 80088cc <_free_r+0x30>
 80088be:	6063      	str	r3, [r4, #4]
 80088c0:	6014      	str	r4, [r2, #0]
 80088c2:	b003      	add	sp, #12
 80088c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088c8:	f000 bb14 	b.w	8008ef4 <__malloc_unlock>
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d908      	bls.n	80088e2 <_free_r+0x46>
 80088d0:	6825      	ldr	r5, [r4, #0]
 80088d2:	1961      	adds	r1, r4, r5
 80088d4:	428b      	cmp	r3, r1
 80088d6:	bf01      	itttt	eq
 80088d8:	6819      	ldreq	r1, [r3, #0]
 80088da:	685b      	ldreq	r3, [r3, #4]
 80088dc:	1949      	addeq	r1, r1, r5
 80088de:	6021      	streq	r1, [r4, #0]
 80088e0:	e7ed      	b.n	80088be <_free_r+0x22>
 80088e2:	461a      	mov	r2, r3
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b10b      	cbz	r3, 80088ec <_free_r+0x50>
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	d9fa      	bls.n	80088e2 <_free_r+0x46>
 80088ec:	6811      	ldr	r1, [r2, #0]
 80088ee:	1855      	adds	r5, r2, r1
 80088f0:	42a5      	cmp	r5, r4
 80088f2:	d10b      	bne.n	800890c <_free_r+0x70>
 80088f4:	6824      	ldr	r4, [r4, #0]
 80088f6:	4421      	add	r1, r4
 80088f8:	1854      	adds	r4, r2, r1
 80088fa:	42a3      	cmp	r3, r4
 80088fc:	6011      	str	r1, [r2, #0]
 80088fe:	d1e0      	bne.n	80088c2 <_free_r+0x26>
 8008900:	681c      	ldr	r4, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	6053      	str	r3, [r2, #4]
 8008906:	4421      	add	r1, r4
 8008908:	6011      	str	r1, [r2, #0]
 800890a:	e7da      	b.n	80088c2 <_free_r+0x26>
 800890c:	d902      	bls.n	8008914 <_free_r+0x78>
 800890e:	230c      	movs	r3, #12
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	e7d6      	b.n	80088c2 <_free_r+0x26>
 8008914:	6825      	ldr	r5, [r4, #0]
 8008916:	1961      	adds	r1, r4, r5
 8008918:	428b      	cmp	r3, r1
 800891a:	bf04      	itt	eq
 800891c:	6819      	ldreq	r1, [r3, #0]
 800891e:	685b      	ldreq	r3, [r3, #4]
 8008920:	6063      	str	r3, [r4, #4]
 8008922:	bf04      	itt	eq
 8008924:	1949      	addeq	r1, r1, r5
 8008926:	6021      	streq	r1, [r4, #0]
 8008928:	6054      	str	r4, [r2, #4]
 800892a:	e7ca      	b.n	80088c2 <_free_r+0x26>
 800892c:	b003      	add	sp, #12
 800892e:	bd30      	pop	{r4, r5, pc}
 8008930:	20000538 	.word	0x20000538

08008934 <sbrk_aligned>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	4e0e      	ldr	r6, [pc, #56]	; (8008970 <sbrk_aligned+0x3c>)
 8008938:	460c      	mov	r4, r1
 800893a:	6831      	ldr	r1, [r6, #0]
 800893c:	4605      	mov	r5, r0
 800893e:	b911      	cbnz	r1, 8008946 <sbrk_aligned+0x12>
 8008940:	f000 f9e6 	bl	8008d10 <_sbrk_r>
 8008944:	6030      	str	r0, [r6, #0]
 8008946:	4621      	mov	r1, r4
 8008948:	4628      	mov	r0, r5
 800894a:	f000 f9e1 	bl	8008d10 <_sbrk_r>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	d00a      	beq.n	8008968 <sbrk_aligned+0x34>
 8008952:	1cc4      	adds	r4, r0, #3
 8008954:	f024 0403 	bic.w	r4, r4, #3
 8008958:	42a0      	cmp	r0, r4
 800895a:	d007      	beq.n	800896c <sbrk_aligned+0x38>
 800895c:	1a21      	subs	r1, r4, r0
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f9d6 	bl	8008d10 <_sbrk_r>
 8008964:	3001      	adds	r0, #1
 8008966:	d101      	bne.n	800896c <sbrk_aligned+0x38>
 8008968:	f04f 34ff 	mov.w	r4, #4294967295
 800896c:	4620      	mov	r0, r4
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	2000053c 	.word	0x2000053c

08008974 <_malloc_r>:
 8008974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008978:	1ccd      	adds	r5, r1, #3
 800897a:	f025 0503 	bic.w	r5, r5, #3
 800897e:	3508      	adds	r5, #8
 8008980:	2d0c      	cmp	r5, #12
 8008982:	bf38      	it	cc
 8008984:	250c      	movcc	r5, #12
 8008986:	2d00      	cmp	r5, #0
 8008988:	4607      	mov	r7, r0
 800898a:	db01      	blt.n	8008990 <_malloc_r+0x1c>
 800898c:	42a9      	cmp	r1, r5
 800898e:	d905      	bls.n	800899c <_malloc_r+0x28>
 8008990:	230c      	movs	r3, #12
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	2600      	movs	r6, #0
 8008996:	4630      	mov	r0, r6
 8008998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899c:	4e2e      	ldr	r6, [pc, #184]	; (8008a58 <_malloc_r+0xe4>)
 800899e:	f000 faa3 	bl	8008ee8 <__malloc_lock>
 80089a2:	6833      	ldr	r3, [r6, #0]
 80089a4:	461c      	mov	r4, r3
 80089a6:	bb34      	cbnz	r4, 80089f6 <_malloc_r+0x82>
 80089a8:	4629      	mov	r1, r5
 80089aa:	4638      	mov	r0, r7
 80089ac:	f7ff ffc2 	bl	8008934 <sbrk_aligned>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	4604      	mov	r4, r0
 80089b4:	d14d      	bne.n	8008a52 <_malloc_r+0xde>
 80089b6:	6834      	ldr	r4, [r6, #0]
 80089b8:	4626      	mov	r6, r4
 80089ba:	2e00      	cmp	r6, #0
 80089bc:	d140      	bne.n	8008a40 <_malloc_r+0xcc>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	4631      	mov	r1, r6
 80089c2:	4638      	mov	r0, r7
 80089c4:	eb04 0803 	add.w	r8, r4, r3
 80089c8:	f000 f9a2 	bl	8008d10 <_sbrk_r>
 80089cc:	4580      	cmp	r8, r0
 80089ce:	d13a      	bne.n	8008a46 <_malloc_r+0xd2>
 80089d0:	6821      	ldr	r1, [r4, #0]
 80089d2:	3503      	adds	r5, #3
 80089d4:	1a6d      	subs	r5, r5, r1
 80089d6:	f025 0503 	bic.w	r5, r5, #3
 80089da:	3508      	adds	r5, #8
 80089dc:	2d0c      	cmp	r5, #12
 80089de:	bf38      	it	cc
 80089e0:	250c      	movcc	r5, #12
 80089e2:	4629      	mov	r1, r5
 80089e4:	4638      	mov	r0, r7
 80089e6:	f7ff ffa5 	bl	8008934 <sbrk_aligned>
 80089ea:	3001      	adds	r0, #1
 80089ec:	d02b      	beq.n	8008a46 <_malloc_r+0xd2>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	442b      	add	r3, r5
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	e00e      	b.n	8008a14 <_malloc_r+0xa0>
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	1b52      	subs	r2, r2, r5
 80089fa:	d41e      	bmi.n	8008a3a <_malloc_r+0xc6>
 80089fc:	2a0b      	cmp	r2, #11
 80089fe:	d916      	bls.n	8008a2e <_malloc_r+0xba>
 8008a00:	1961      	adds	r1, r4, r5
 8008a02:	42a3      	cmp	r3, r4
 8008a04:	6025      	str	r5, [r4, #0]
 8008a06:	bf18      	it	ne
 8008a08:	6059      	strne	r1, [r3, #4]
 8008a0a:	6863      	ldr	r3, [r4, #4]
 8008a0c:	bf08      	it	eq
 8008a0e:	6031      	streq	r1, [r6, #0]
 8008a10:	5162      	str	r2, [r4, r5]
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	4638      	mov	r0, r7
 8008a16:	f104 060b 	add.w	r6, r4, #11
 8008a1a:	f000 fa6b 	bl	8008ef4 <__malloc_unlock>
 8008a1e:	f026 0607 	bic.w	r6, r6, #7
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	1af2      	subs	r2, r6, r3
 8008a26:	d0b6      	beq.n	8008996 <_malloc_r+0x22>
 8008a28:	1b9b      	subs	r3, r3, r6
 8008a2a:	50a3      	str	r3, [r4, r2]
 8008a2c:	e7b3      	b.n	8008996 <_malloc_r+0x22>
 8008a2e:	6862      	ldr	r2, [r4, #4]
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	bf0c      	ite	eq
 8008a34:	6032      	streq	r2, [r6, #0]
 8008a36:	605a      	strne	r2, [r3, #4]
 8008a38:	e7ec      	b.n	8008a14 <_malloc_r+0xa0>
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	6864      	ldr	r4, [r4, #4]
 8008a3e:	e7b2      	b.n	80089a6 <_malloc_r+0x32>
 8008a40:	4634      	mov	r4, r6
 8008a42:	6876      	ldr	r6, [r6, #4]
 8008a44:	e7b9      	b.n	80089ba <_malloc_r+0x46>
 8008a46:	230c      	movs	r3, #12
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	f000 fa52 	bl	8008ef4 <__malloc_unlock>
 8008a50:	e7a1      	b.n	8008996 <_malloc_r+0x22>
 8008a52:	6025      	str	r5, [r4, #0]
 8008a54:	e7de      	b.n	8008a14 <_malloc_r+0xa0>
 8008a56:	bf00      	nop
 8008a58:	20000538 	.word	0x20000538

08008a5c <__sfputc_r>:
 8008a5c:	6893      	ldr	r3, [r2, #8]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	b410      	push	{r4}
 8008a64:	6093      	str	r3, [r2, #8]
 8008a66:	da08      	bge.n	8008a7a <__sfputc_r+0x1e>
 8008a68:	6994      	ldr	r4, [r2, #24]
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	db01      	blt.n	8008a72 <__sfputc_r+0x16>
 8008a6e:	290a      	cmp	r1, #10
 8008a70:	d103      	bne.n	8008a7a <__sfputc_r+0x1e>
 8008a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a76:	f7fe ba01 	b.w	8006e7c <__swbuf_r>
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	1c58      	adds	r0, r3, #1
 8008a7e:	6010      	str	r0, [r2, #0]
 8008a80:	7019      	strb	r1, [r3, #0]
 8008a82:	4608      	mov	r0, r1
 8008a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <__sfputs_r>:
 8008a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	460f      	mov	r7, r1
 8008a90:	4614      	mov	r4, r2
 8008a92:	18d5      	adds	r5, r2, r3
 8008a94:	42ac      	cmp	r4, r5
 8008a96:	d101      	bne.n	8008a9c <__sfputs_r+0x12>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	e007      	b.n	8008aac <__sfputs_r+0x22>
 8008a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa0:	463a      	mov	r2, r7
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ffda 	bl	8008a5c <__sfputc_r>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d1f3      	bne.n	8008a94 <__sfputs_r+0xa>
 8008aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ab0 <_vfiprintf_r>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	b09d      	sub	sp, #116	; 0x74
 8008ab8:	4614      	mov	r4, r2
 8008aba:	4698      	mov	r8, r3
 8008abc:	4606      	mov	r6, r0
 8008abe:	b118      	cbz	r0, 8008ac8 <_vfiprintf_r+0x18>
 8008ac0:	6983      	ldr	r3, [r0, #24]
 8008ac2:	b90b      	cbnz	r3, 8008ac8 <_vfiprintf_r+0x18>
 8008ac4:	f7ff fa30 	bl	8007f28 <__sinit>
 8008ac8:	4b89      	ldr	r3, [pc, #548]	; (8008cf0 <_vfiprintf_r+0x240>)
 8008aca:	429d      	cmp	r5, r3
 8008acc:	d11b      	bne.n	8008b06 <_vfiprintf_r+0x56>
 8008ace:	6875      	ldr	r5, [r6, #4]
 8008ad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad2:	07d9      	lsls	r1, r3, #31
 8008ad4:	d405      	bmi.n	8008ae2 <_vfiprintf_r+0x32>
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	059a      	lsls	r2, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_vfiprintf_r+0x32>
 8008adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ade:	f7ff fac6 	bl	800806e <__retarget_lock_acquire_recursive>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	071b      	lsls	r3, r3, #28
 8008ae6:	d501      	bpl.n	8008aec <_vfiprintf_r+0x3c>
 8008ae8:	692b      	ldr	r3, [r5, #16]
 8008aea:	b9eb      	cbnz	r3, 8008b28 <_vfiprintf_r+0x78>
 8008aec:	4629      	mov	r1, r5
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7fe fa16 	bl	8006f20 <__swsetup_r>
 8008af4:	b1c0      	cbz	r0, 8008b28 <_vfiprintf_r+0x78>
 8008af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008af8:	07dc      	lsls	r4, r3, #31
 8008afa:	d50e      	bpl.n	8008b1a <_vfiprintf_r+0x6a>
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	b01d      	add	sp, #116	; 0x74
 8008b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b06:	4b7b      	ldr	r3, [pc, #492]	; (8008cf4 <_vfiprintf_r+0x244>)
 8008b08:	429d      	cmp	r5, r3
 8008b0a:	d101      	bne.n	8008b10 <_vfiprintf_r+0x60>
 8008b0c:	68b5      	ldr	r5, [r6, #8]
 8008b0e:	e7df      	b.n	8008ad0 <_vfiprintf_r+0x20>
 8008b10:	4b79      	ldr	r3, [pc, #484]	; (8008cf8 <_vfiprintf_r+0x248>)
 8008b12:	429d      	cmp	r5, r3
 8008b14:	bf08      	it	eq
 8008b16:	68f5      	ldreq	r5, [r6, #12]
 8008b18:	e7da      	b.n	8008ad0 <_vfiprintf_r+0x20>
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	0598      	lsls	r0, r3, #22
 8008b1e:	d4ed      	bmi.n	8008afc <_vfiprintf_r+0x4c>
 8008b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b22:	f7ff faa5 	bl	8008070 <__retarget_lock_release_recursive>
 8008b26:	e7e9      	b.n	8008afc <_vfiprintf_r+0x4c>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b36:	2330      	movs	r3, #48	; 0x30
 8008b38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cfc <_vfiprintf_r+0x24c>
 8008b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b40:	f04f 0901 	mov.w	r9, #1
 8008b44:	4623      	mov	r3, r4
 8008b46:	469a      	mov	sl, r3
 8008b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4c:	b10a      	cbz	r2, 8008b52 <_vfiprintf_r+0xa2>
 8008b4e:	2a25      	cmp	r2, #37	; 0x25
 8008b50:	d1f9      	bne.n	8008b46 <_vfiprintf_r+0x96>
 8008b52:	ebba 0b04 	subs.w	fp, sl, r4
 8008b56:	d00b      	beq.n	8008b70 <_vfiprintf_r+0xc0>
 8008b58:	465b      	mov	r3, fp
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ff93 	bl	8008a8a <__sfputs_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	f000 80aa 	beq.w	8008cbe <_vfiprintf_r+0x20e>
 8008b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6c:	445a      	add	r2, fp
 8008b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 80a2 	beq.w	8008cbe <_vfiprintf_r+0x20e>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b84:	f10a 0a01 	add.w	sl, sl, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	9307      	str	r3, [sp, #28]
 8008b8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b90:	931a      	str	r3, [sp, #104]	; 0x68
 8008b92:	4654      	mov	r4, sl
 8008b94:	2205      	movs	r2, #5
 8008b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9a:	4858      	ldr	r0, [pc, #352]	; (8008cfc <_vfiprintf_r+0x24c>)
 8008b9c:	f7f7 fb28 	bl	80001f0 <memchr>
 8008ba0:	9a04      	ldr	r2, [sp, #16]
 8008ba2:	b9d8      	cbnz	r0, 8008bdc <_vfiprintf_r+0x12c>
 8008ba4:	06d1      	lsls	r1, r2, #27
 8008ba6:	bf44      	itt	mi
 8008ba8:	2320      	movmi	r3, #32
 8008baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bae:	0713      	lsls	r3, r2, #28
 8008bb0:	bf44      	itt	mi
 8008bb2:	232b      	movmi	r3, #43	; 0x2b
 8008bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbe:	d015      	beq.n	8008bec <_vfiprintf_r+0x13c>
 8008bc0:	9a07      	ldr	r2, [sp, #28]
 8008bc2:	4654      	mov	r4, sl
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f04f 0c0a 	mov.w	ip, #10
 8008bca:	4621      	mov	r1, r4
 8008bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd0:	3b30      	subs	r3, #48	; 0x30
 8008bd2:	2b09      	cmp	r3, #9
 8008bd4:	d94e      	bls.n	8008c74 <_vfiprintf_r+0x1c4>
 8008bd6:	b1b0      	cbz	r0, 8008c06 <_vfiprintf_r+0x156>
 8008bd8:	9207      	str	r2, [sp, #28]
 8008bda:	e014      	b.n	8008c06 <_vfiprintf_r+0x156>
 8008bdc:	eba0 0308 	sub.w	r3, r0, r8
 8008be0:	fa09 f303 	lsl.w	r3, r9, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	9304      	str	r3, [sp, #16]
 8008be8:	46a2      	mov	sl, r4
 8008bea:	e7d2      	b.n	8008b92 <_vfiprintf_r+0xe2>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	1d19      	adds	r1, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	9103      	str	r1, [sp, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbb      	ittet	lt
 8008bf8:	425b      	neglt	r3, r3
 8008bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfe:	9307      	strge	r3, [sp, #28]
 8008c00:	9307      	strlt	r3, [sp, #28]
 8008c02:	bfb8      	it	lt
 8008c04:	9204      	strlt	r2, [sp, #16]
 8008c06:	7823      	ldrb	r3, [r4, #0]
 8008c08:	2b2e      	cmp	r3, #46	; 0x2e
 8008c0a:	d10c      	bne.n	8008c26 <_vfiprintf_r+0x176>
 8008c0c:	7863      	ldrb	r3, [r4, #1]
 8008c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c10:	d135      	bne.n	8008c7e <_vfiprintf_r+0x1ce>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	1d1a      	adds	r2, r3, #4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	9203      	str	r2, [sp, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	bfb8      	it	lt
 8008c1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c22:	3402      	adds	r4, #2
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d0c <_vfiprintf_r+0x25c>
 8008c2a:	7821      	ldrb	r1, [r4, #0]
 8008c2c:	2203      	movs	r2, #3
 8008c2e:	4650      	mov	r0, sl
 8008c30:	f7f7 fade 	bl	80001f0 <memchr>
 8008c34:	b140      	cbz	r0, 8008c48 <_vfiprintf_r+0x198>
 8008c36:	2340      	movs	r3, #64	; 0x40
 8008c38:	eba0 000a 	sub.w	r0, r0, sl
 8008c3c:	fa03 f000 	lsl.w	r0, r3, r0
 8008c40:	9b04      	ldr	r3, [sp, #16]
 8008c42:	4303      	orrs	r3, r0
 8008c44:	3401      	adds	r4, #1
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4c:	482c      	ldr	r0, [pc, #176]	; (8008d00 <_vfiprintf_r+0x250>)
 8008c4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c52:	2206      	movs	r2, #6
 8008c54:	f7f7 facc 	bl	80001f0 <memchr>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d03f      	beq.n	8008cdc <_vfiprintf_r+0x22c>
 8008c5c:	4b29      	ldr	r3, [pc, #164]	; (8008d04 <_vfiprintf_r+0x254>)
 8008c5e:	bb1b      	cbnz	r3, 8008ca8 <_vfiprintf_r+0x1f8>
 8008c60:	9b03      	ldr	r3, [sp, #12]
 8008c62:	3307      	adds	r3, #7
 8008c64:	f023 0307 	bic.w	r3, r3, #7
 8008c68:	3308      	adds	r3, #8
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6e:	443b      	add	r3, r7
 8008c70:	9309      	str	r3, [sp, #36]	; 0x24
 8008c72:	e767      	b.n	8008b44 <_vfiprintf_r+0x94>
 8008c74:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c78:	460c      	mov	r4, r1
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	e7a5      	b.n	8008bca <_vfiprintf_r+0x11a>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	3401      	adds	r4, #1
 8008c82:	9305      	str	r3, [sp, #20]
 8008c84:	4619      	mov	r1, r3
 8008c86:	f04f 0c0a 	mov.w	ip, #10
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c90:	3a30      	subs	r2, #48	; 0x30
 8008c92:	2a09      	cmp	r2, #9
 8008c94:	d903      	bls.n	8008c9e <_vfiprintf_r+0x1ee>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0c5      	beq.n	8008c26 <_vfiprintf_r+0x176>
 8008c9a:	9105      	str	r1, [sp, #20]
 8008c9c:	e7c3      	b.n	8008c26 <_vfiprintf_r+0x176>
 8008c9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e7f0      	b.n	8008c8a <_vfiprintf_r+0x1da>
 8008ca8:	ab03      	add	r3, sp, #12
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	462a      	mov	r2, r5
 8008cae:	4b16      	ldr	r3, [pc, #88]	; (8008d08 <_vfiprintf_r+0x258>)
 8008cb0:	a904      	add	r1, sp, #16
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7fd fc8a 	bl	80065cc <_printf_float>
 8008cb8:	4607      	mov	r7, r0
 8008cba:	1c78      	adds	r0, r7, #1
 8008cbc:	d1d6      	bne.n	8008c6c <_vfiprintf_r+0x1bc>
 8008cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cc0:	07d9      	lsls	r1, r3, #31
 8008cc2:	d405      	bmi.n	8008cd0 <_vfiprintf_r+0x220>
 8008cc4:	89ab      	ldrh	r3, [r5, #12]
 8008cc6:	059a      	lsls	r2, r3, #22
 8008cc8:	d402      	bmi.n	8008cd0 <_vfiprintf_r+0x220>
 8008cca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ccc:	f7ff f9d0 	bl	8008070 <__retarget_lock_release_recursive>
 8008cd0:	89ab      	ldrh	r3, [r5, #12]
 8008cd2:	065b      	lsls	r3, r3, #25
 8008cd4:	f53f af12 	bmi.w	8008afc <_vfiprintf_r+0x4c>
 8008cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cda:	e711      	b.n	8008b00 <_vfiprintf_r+0x50>
 8008cdc:	ab03      	add	r3, sp, #12
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <_vfiprintf_r+0x258>)
 8008ce4:	a904      	add	r1, sp, #16
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7fd ff14 	bl	8006b14 <_printf_i>
 8008cec:	e7e4      	b.n	8008cb8 <_vfiprintf_r+0x208>
 8008cee:	bf00      	nop
 8008cf0:	0800b140 	.word	0x0800b140
 8008cf4:	0800b160 	.word	0x0800b160
 8008cf8:	0800b120 	.word	0x0800b120
 8008cfc:	0800b2dc 	.word	0x0800b2dc
 8008d00:	0800b2e6 	.word	0x0800b2e6
 8008d04:	080065cd 	.word	0x080065cd
 8008d08:	08008a8b 	.word	0x08008a8b
 8008d0c:	0800b2e2 	.word	0x0800b2e2

08008d10 <_sbrk_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d06      	ldr	r5, [pc, #24]	; (8008d2c <_sbrk_r+0x1c>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	602b      	str	r3, [r5, #0]
 8008d1c:	f7f8 ffb2 	bl	8001c84 <_sbrk>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_sbrk_r+0x1a>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_sbrk_r+0x1a>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20000540 	.word	0x20000540

08008d30 <__sread>:
 8008d30:	b510      	push	{r4, lr}
 8008d32:	460c      	mov	r4, r1
 8008d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d38:	f000 f8e2 	bl	8008f00 <_read_r>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	bfab      	itete	ge
 8008d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d42:	89a3      	ldrhlt	r3, [r4, #12]
 8008d44:	181b      	addge	r3, r3, r0
 8008d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d4a:	bfac      	ite	ge
 8008d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d4e:	81a3      	strhlt	r3, [r4, #12]
 8008d50:	bd10      	pop	{r4, pc}

08008d52 <__swrite>:
 8008d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d56:	461f      	mov	r7, r3
 8008d58:	898b      	ldrh	r3, [r1, #12]
 8008d5a:	05db      	lsls	r3, r3, #23
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	460c      	mov	r4, r1
 8008d60:	4616      	mov	r6, r2
 8008d62:	d505      	bpl.n	8008d70 <__swrite+0x1e>
 8008d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d68:	2302      	movs	r3, #2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f000 f898 	bl	8008ea0 <_lseek_r>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	4628      	mov	r0, r5
 8008d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d86:	f000 b817 	b.w	8008db8 <_write_r>

08008d8a <__sseek>:
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d92:	f000 f885 	bl	8008ea0 <_lseek_r>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	bf15      	itete	ne
 8008d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008da6:	81a3      	strheq	r3, [r4, #12]
 8008da8:	bf18      	it	ne
 8008daa:	81a3      	strhne	r3, [r4, #12]
 8008dac:	bd10      	pop	{r4, pc}

08008dae <__sclose>:
 8008dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db2:	f000 b831 	b.w	8008e18 <_close_r>
	...

08008db8 <_write_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4d07      	ldr	r5, [pc, #28]	; (8008dd8 <_write_r+0x20>)
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	4608      	mov	r0, r1
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	602a      	str	r2, [r5, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f7f8 ff0b 	bl	8001be2 <_write>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d102      	bne.n	8008dd6 <_write_r+0x1e>
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	b103      	cbz	r3, 8008dd6 <_write_r+0x1e>
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
 8008dd8:	20000540 	.word	0x20000540

08008ddc <__assert_func>:
 8008ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dde:	4614      	mov	r4, r2
 8008de0:	461a      	mov	r2, r3
 8008de2:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <__assert_func+0x2c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4605      	mov	r5, r0
 8008de8:	68d8      	ldr	r0, [r3, #12]
 8008dea:	b14c      	cbz	r4, 8008e00 <__assert_func+0x24>
 8008dec:	4b07      	ldr	r3, [pc, #28]	; (8008e0c <__assert_func+0x30>)
 8008dee:	9100      	str	r1, [sp, #0]
 8008df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008df4:	4906      	ldr	r1, [pc, #24]	; (8008e10 <__assert_func+0x34>)
 8008df6:	462b      	mov	r3, r5
 8008df8:	f000 f81e 	bl	8008e38 <fiprintf>
 8008dfc:	f000 f89f 	bl	8008f3e <abort>
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <__assert_func+0x38>)
 8008e02:	461c      	mov	r4, r3
 8008e04:	e7f3      	b.n	8008dee <__assert_func+0x12>
 8008e06:	bf00      	nop
 8008e08:	20000010 	.word	0x20000010
 8008e0c:	0800b2ed 	.word	0x0800b2ed
 8008e10:	0800b2fa 	.word	0x0800b2fa
 8008e14:	0800b328 	.word	0x0800b328

08008e18 <_close_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_close_r+0x1c>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	602b      	str	r3, [r5, #0]
 8008e24:	f7f8 fef9 	bl	8001c1a <_close>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_close_r+0x1a>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_close_r+0x1a>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	20000540 	.word	0x20000540

08008e38 <fiprintf>:
 8008e38:	b40e      	push	{r1, r2, r3}
 8008e3a:	b503      	push	{r0, r1, lr}
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	ab03      	add	r3, sp, #12
 8008e40:	4805      	ldr	r0, [pc, #20]	; (8008e58 <fiprintf+0x20>)
 8008e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e46:	6800      	ldr	r0, [r0, #0]
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	f7ff fe31 	bl	8008ab0 <_vfiprintf_r>
 8008e4e:	b002      	add	sp, #8
 8008e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e54:	b003      	add	sp, #12
 8008e56:	4770      	bx	lr
 8008e58:	20000010 	.word	0x20000010

08008e5c <_fstat_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4d07      	ldr	r5, [pc, #28]	; (8008e7c <_fstat_r+0x20>)
 8008e60:	2300      	movs	r3, #0
 8008e62:	4604      	mov	r4, r0
 8008e64:	4608      	mov	r0, r1
 8008e66:	4611      	mov	r1, r2
 8008e68:	602b      	str	r3, [r5, #0]
 8008e6a:	f7f8 fee2 	bl	8001c32 <_fstat>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	d102      	bne.n	8008e78 <_fstat_r+0x1c>
 8008e72:	682b      	ldr	r3, [r5, #0]
 8008e74:	b103      	cbz	r3, 8008e78 <_fstat_r+0x1c>
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	bd38      	pop	{r3, r4, r5, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000540 	.word	0x20000540

08008e80 <_isatty_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4d06      	ldr	r5, [pc, #24]	; (8008e9c <_isatty_r+0x1c>)
 8008e84:	2300      	movs	r3, #0
 8008e86:	4604      	mov	r4, r0
 8008e88:	4608      	mov	r0, r1
 8008e8a:	602b      	str	r3, [r5, #0]
 8008e8c:	f7f8 fee1 	bl	8001c52 <_isatty>
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	d102      	bne.n	8008e9a <_isatty_r+0x1a>
 8008e94:	682b      	ldr	r3, [r5, #0]
 8008e96:	b103      	cbz	r3, 8008e9a <_isatty_r+0x1a>
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	20000540 	.word	0x20000540

08008ea0 <_lseek_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4d07      	ldr	r5, [pc, #28]	; (8008ec0 <_lseek_r+0x20>)
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	602a      	str	r2, [r5, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f7f8 feda 	bl	8001c68 <_lseek>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_lseek_r+0x1e>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_lseek_r+0x1e>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	20000540 	.word	0x20000540

08008ec4 <__ascii_mbtowc>:
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	b901      	cbnz	r1, 8008eca <__ascii_mbtowc+0x6>
 8008ec8:	a901      	add	r1, sp, #4
 8008eca:	b142      	cbz	r2, 8008ede <__ascii_mbtowc+0x1a>
 8008ecc:	b14b      	cbz	r3, 8008ee2 <__ascii_mbtowc+0x1e>
 8008ece:	7813      	ldrb	r3, [r2, #0]
 8008ed0:	600b      	str	r3, [r1, #0]
 8008ed2:	7812      	ldrb	r2, [r2, #0]
 8008ed4:	1e10      	subs	r0, r2, #0
 8008ed6:	bf18      	it	ne
 8008ed8:	2001      	movne	r0, #1
 8008eda:	b002      	add	sp, #8
 8008edc:	4770      	bx	lr
 8008ede:	4610      	mov	r0, r2
 8008ee0:	e7fb      	b.n	8008eda <__ascii_mbtowc+0x16>
 8008ee2:	f06f 0001 	mvn.w	r0, #1
 8008ee6:	e7f8      	b.n	8008eda <__ascii_mbtowc+0x16>

08008ee8 <__malloc_lock>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	; (8008ef0 <__malloc_lock+0x8>)
 8008eea:	f7ff b8c0 	b.w	800806e <__retarget_lock_acquire_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20000534 	.word	0x20000534

08008ef4 <__malloc_unlock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	; (8008efc <__malloc_unlock+0x8>)
 8008ef6:	f7ff b8bb 	b.w	8008070 <__retarget_lock_release_recursive>
 8008efa:	bf00      	nop
 8008efc:	20000534 	.word	0x20000534

08008f00 <_read_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	; (8008f20 <_read_r+0x20>)
 8008f04:	4604      	mov	r4, r0
 8008f06:	4608      	mov	r0, r1
 8008f08:	4611      	mov	r1, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7f8 fe4a 	bl	8001ba8 <_read>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_read_r+0x1e>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_read_r+0x1e>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20000540 	.word	0x20000540

08008f24 <__ascii_wctomb>:
 8008f24:	b149      	cbz	r1, 8008f3a <__ascii_wctomb+0x16>
 8008f26:	2aff      	cmp	r2, #255	; 0xff
 8008f28:	bf85      	ittet	hi
 8008f2a:	238a      	movhi	r3, #138	; 0x8a
 8008f2c:	6003      	strhi	r3, [r0, #0]
 8008f2e:	700a      	strbls	r2, [r1, #0]
 8008f30:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f34:	bf98      	it	ls
 8008f36:	2001      	movls	r0, #1
 8008f38:	4770      	bx	lr
 8008f3a:	4608      	mov	r0, r1
 8008f3c:	4770      	bx	lr

08008f3e <abort>:
 8008f3e:	b508      	push	{r3, lr}
 8008f40:	2006      	movs	r0, #6
 8008f42:	f000 f82b 	bl	8008f9c <raise>
 8008f46:	2001      	movs	r0, #1
 8008f48:	f7f8 fe24 	bl	8001b94 <_exit>

08008f4c <_raise_r>:
 8008f4c:	291f      	cmp	r1, #31
 8008f4e:	b538      	push	{r3, r4, r5, lr}
 8008f50:	4604      	mov	r4, r0
 8008f52:	460d      	mov	r5, r1
 8008f54:	d904      	bls.n	8008f60 <_raise_r+0x14>
 8008f56:	2316      	movs	r3, #22
 8008f58:	6003      	str	r3, [r0, #0]
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f62:	b112      	cbz	r2, 8008f6a <_raise_r+0x1e>
 8008f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f68:	b94b      	cbnz	r3, 8008f7e <_raise_r+0x32>
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 f830 	bl	8008fd0 <_getpid_r>
 8008f70:	462a      	mov	r2, r5
 8008f72:	4601      	mov	r1, r0
 8008f74:	4620      	mov	r0, r4
 8008f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f7a:	f000 b817 	b.w	8008fac <_kill_r>
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d00a      	beq.n	8008f98 <_raise_r+0x4c>
 8008f82:	1c59      	adds	r1, r3, #1
 8008f84:	d103      	bne.n	8008f8e <_raise_r+0x42>
 8008f86:	2316      	movs	r3, #22
 8008f88:	6003      	str	r3, [r0, #0]
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	e7e7      	b.n	8008f5e <_raise_r+0x12>
 8008f8e:	2400      	movs	r4, #0
 8008f90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f94:	4628      	mov	r0, r5
 8008f96:	4798      	blx	r3
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e7e0      	b.n	8008f5e <_raise_r+0x12>

08008f9c <raise>:
 8008f9c:	4b02      	ldr	r3, [pc, #8]	; (8008fa8 <raise+0xc>)
 8008f9e:	4601      	mov	r1, r0
 8008fa0:	6818      	ldr	r0, [r3, #0]
 8008fa2:	f7ff bfd3 	b.w	8008f4c <_raise_r>
 8008fa6:	bf00      	nop
 8008fa8:	20000010 	.word	0x20000010

08008fac <_kill_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_kill_r+0x20>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	f7f8 fddb 	bl	8001b74 <_kill>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d102      	bne.n	8008fc8 <_kill_r+0x1c>
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	b103      	cbz	r3, 8008fc8 <_kill_r+0x1c>
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	bd38      	pop	{r3, r4, r5, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000540 	.word	0x20000540

08008fd0 <_getpid_r>:
 8008fd0:	f7f8 bdc8 	b.w	8001b64 <_getpid>

08008fd4 <atanf>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	ee10 5a10 	vmov	r5, s0
 8008fda:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008fde:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008fe2:	eef0 7a40 	vmov.f32	s15, s0
 8008fe6:	db10      	blt.n	800900a <atanf+0x36>
 8008fe8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008fec:	dd04      	ble.n	8008ff8 <atanf+0x24>
 8008fee:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009130 <atanf+0x15c>
 8008ffc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009134 <atanf+0x160>
 8009000:	2d00      	cmp	r5, #0
 8009002:	bfd8      	it	le
 8009004:	eef0 7a40 	vmovle.f32	s15, s0
 8009008:	e7f3      	b.n	8008ff2 <atanf+0x1e>
 800900a:	4b4b      	ldr	r3, [pc, #300]	; (8009138 <atanf+0x164>)
 800900c:	429c      	cmp	r4, r3
 800900e:	dc10      	bgt.n	8009032 <atanf+0x5e>
 8009010:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009014:	da0a      	bge.n	800902c <atanf+0x58>
 8009016:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800913c <atanf+0x168>
 800901a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800901e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009022:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902a:	dce2      	bgt.n	8008ff2 <atanf+0x1e>
 800902c:	f04f 33ff 	mov.w	r3, #4294967295
 8009030:	e013      	b.n	800905a <atanf+0x86>
 8009032:	f000 f8e7 	bl	8009204 <fabsf>
 8009036:	4b42      	ldr	r3, [pc, #264]	; (8009140 <atanf+0x16c>)
 8009038:	429c      	cmp	r4, r3
 800903a:	dc4f      	bgt.n	80090dc <atanf+0x108>
 800903c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009040:	429c      	cmp	r4, r3
 8009042:	dc41      	bgt.n	80090c8 <atanf+0xf4>
 8009044:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009048:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800904c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009050:	2300      	movs	r3, #0
 8009052:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009056:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009060:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009144 <atanf+0x170>
 8009064:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009148 <atanf+0x174>
 8009068:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800914c <atanf+0x178>
 800906c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009070:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009074:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009150 <atanf+0x17c>
 8009078:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800907c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009154 <atanf+0x180>
 8009080:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009084:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009158 <atanf+0x184>
 8009088:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800908c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800915c <atanf+0x188>
 8009090:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009094:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009160 <atanf+0x18c>
 8009098:	eea6 5a87 	vfma.f32	s10, s13, s14
 800909c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009164 <atanf+0x190>
 80090a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80090a4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009168 <atanf+0x194>
 80090a8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80090ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800916c <atanf+0x198>
 80090b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80090b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80090b8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80090bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80090c0:	d121      	bne.n	8009106 <atanf+0x132>
 80090c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090c6:	e794      	b.n	8008ff2 <atanf+0x1e>
 80090c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80090cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80090d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090d4:	2301      	movs	r3, #1
 80090d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80090da:	e7be      	b.n	800905a <atanf+0x86>
 80090dc:	4b24      	ldr	r3, [pc, #144]	; (8009170 <atanf+0x19c>)
 80090de:	429c      	cmp	r4, r3
 80090e0:	dc0b      	bgt.n	80090fa <atanf+0x126>
 80090e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80090e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80090ee:	2302      	movs	r3, #2
 80090f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80090f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f8:	e7af      	b.n	800905a <atanf+0x86>
 80090fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80090fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009102:	2303      	movs	r3, #3
 8009104:	e7a9      	b.n	800905a <atanf+0x86>
 8009106:	4a1b      	ldr	r2, [pc, #108]	; (8009174 <atanf+0x1a0>)
 8009108:	491b      	ldr	r1, [pc, #108]	; (8009178 <atanf+0x1a4>)
 800910a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800910e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009112:	ed93 0a00 	vldr	s0, [r3]
 8009116:	ee37 7a40 	vsub.f32	s14, s14, s0
 800911a:	ed92 0a00 	vldr	s0, [r2]
 800911e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009122:	2d00      	cmp	r5, #0
 8009124:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009128:	bfb8      	it	lt
 800912a:	eef1 7a67 	vneglt.f32	s15, s15
 800912e:	e760      	b.n	8008ff2 <atanf+0x1e>
 8009130:	3fc90fdb 	.word	0x3fc90fdb
 8009134:	bfc90fdb 	.word	0xbfc90fdb
 8009138:	3edfffff 	.word	0x3edfffff
 800913c:	7149f2ca 	.word	0x7149f2ca
 8009140:	3f97ffff 	.word	0x3f97ffff
 8009144:	3c8569d7 	.word	0x3c8569d7
 8009148:	3d4bda59 	.word	0x3d4bda59
 800914c:	bd6ef16b 	.word	0xbd6ef16b
 8009150:	3d886b35 	.word	0x3d886b35
 8009154:	3dba2e6e 	.word	0x3dba2e6e
 8009158:	3e124925 	.word	0x3e124925
 800915c:	3eaaaaab 	.word	0x3eaaaaab
 8009160:	bd15a221 	.word	0xbd15a221
 8009164:	bd9d8795 	.word	0xbd9d8795
 8009168:	bde38e38 	.word	0xbde38e38
 800916c:	be4ccccd 	.word	0xbe4ccccd
 8009170:	401bffff 	.word	0x401bffff
 8009174:	0800b434 	.word	0x0800b434
 8009178:	0800b444 	.word	0x0800b444

0800917c <cosf>:
 800917c:	ee10 3a10 	vmov	r3, s0
 8009180:	b507      	push	{r0, r1, r2, lr}
 8009182:	4a1e      	ldr	r2, [pc, #120]	; (80091fc <cosf+0x80>)
 8009184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009188:	4293      	cmp	r3, r2
 800918a:	dc06      	bgt.n	800919a <cosf+0x1e>
 800918c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009200 <cosf+0x84>
 8009190:	b003      	add	sp, #12
 8009192:	f85d eb04 	ldr.w	lr, [sp], #4
 8009196:	f001 b97d 	b.w	800a494 <__kernel_cosf>
 800919a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800919e:	db04      	blt.n	80091aa <cosf+0x2e>
 80091a0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80091a4:	b003      	add	sp, #12
 80091a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80091aa:	4668      	mov	r0, sp
 80091ac:	f001 f832 	bl	800a214 <__ieee754_rem_pio2f>
 80091b0:	f000 0003 	and.w	r0, r0, #3
 80091b4:	2801      	cmp	r0, #1
 80091b6:	d009      	beq.n	80091cc <cosf+0x50>
 80091b8:	2802      	cmp	r0, #2
 80091ba:	d010      	beq.n	80091de <cosf+0x62>
 80091bc:	b9b0      	cbnz	r0, 80091ec <cosf+0x70>
 80091be:	eddd 0a01 	vldr	s1, [sp, #4]
 80091c2:	ed9d 0a00 	vldr	s0, [sp]
 80091c6:	f001 f965 	bl	800a494 <__kernel_cosf>
 80091ca:	e7eb      	b.n	80091a4 <cosf+0x28>
 80091cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80091d0:	ed9d 0a00 	vldr	s0, [sp]
 80091d4:	f001 fc34 	bl	800aa40 <__kernel_sinf>
 80091d8:	eeb1 0a40 	vneg.f32	s0, s0
 80091dc:	e7e2      	b.n	80091a4 <cosf+0x28>
 80091de:	eddd 0a01 	vldr	s1, [sp, #4]
 80091e2:	ed9d 0a00 	vldr	s0, [sp]
 80091e6:	f001 f955 	bl	800a494 <__kernel_cosf>
 80091ea:	e7f5      	b.n	80091d8 <cosf+0x5c>
 80091ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80091f0:	ed9d 0a00 	vldr	s0, [sp]
 80091f4:	2001      	movs	r0, #1
 80091f6:	f001 fc23 	bl	800aa40 <__kernel_sinf>
 80091fa:	e7d3      	b.n	80091a4 <cosf+0x28>
 80091fc:	3f490fd8 	.word	0x3f490fd8
 8009200:	00000000 	.word	0x00000000

08009204 <fabsf>:
 8009204:	ee10 3a10 	vmov	r3, s0
 8009208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800920c:	ee00 3a10 	vmov	s0, r3
 8009210:	4770      	bx	lr
	...

08009214 <sinf>:
 8009214:	ee10 3a10 	vmov	r3, s0
 8009218:	b507      	push	{r0, r1, r2, lr}
 800921a:	4a1f      	ldr	r2, [pc, #124]	; (8009298 <sinf+0x84>)
 800921c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009220:	4293      	cmp	r3, r2
 8009222:	dc07      	bgt.n	8009234 <sinf+0x20>
 8009224:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800929c <sinf+0x88>
 8009228:	2000      	movs	r0, #0
 800922a:	b003      	add	sp, #12
 800922c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009230:	f001 bc06 	b.w	800aa40 <__kernel_sinf>
 8009234:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009238:	db04      	blt.n	8009244 <sinf+0x30>
 800923a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800923e:	b003      	add	sp, #12
 8009240:	f85d fb04 	ldr.w	pc, [sp], #4
 8009244:	4668      	mov	r0, sp
 8009246:	f000 ffe5 	bl	800a214 <__ieee754_rem_pio2f>
 800924a:	f000 0003 	and.w	r0, r0, #3
 800924e:	2801      	cmp	r0, #1
 8009250:	d00a      	beq.n	8009268 <sinf+0x54>
 8009252:	2802      	cmp	r0, #2
 8009254:	d00f      	beq.n	8009276 <sinf+0x62>
 8009256:	b9c0      	cbnz	r0, 800928a <sinf+0x76>
 8009258:	eddd 0a01 	vldr	s1, [sp, #4]
 800925c:	ed9d 0a00 	vldr	s0, [sp]
 8009260:	2001      	movs	r0, #1
 8009262:	f001 fbed 	bl	800aa40 <__kernel_sinf>
 8009266:	e7ea      	b.n	800923e <sinf+0x2a>
 8009268:	eddd 0a01 	vldr	s1, [sp, #4]
 800926c:	ed9d 0a00 	vldr	s0, [sp]
 8009270:	f001 f910 	bl	800a494 <__kernel_cosf>
 8009274:	e7e3      	b.n	800923e <sinf+0x2a>
 8009276:	eddd 0a01 	vldr	s1, [sp, #4]
 800927a:	ed9d 0a00 	vldr	s0, [sp]
 800927e:	2001      	movs	r0, #1
 8009280:	f001 fbde 	bl	800aa40 <__kernel_sinf>
 8009284:	eeb1 0a40 	vneg.f32	s0, s0
 8009288:	e7d9      	b.n	800923e <sinf+0x2a>
 800928a:	eddd 0a01 	vldr	s1, [sp, #4]
 800928e:	ed9d 0a00 	vldr	s0, [sp]
 8009292:	f001 f8ff 	bl	800a494 <__kernel_cosf>
 8009296:	e7f5      	b.n	8009284 <sinf+0x70>
 8009298:	3f490fd8 	.word	0x3f490fd8
 800929c:	00000000 	.word	0x00000000

080092a0 <tanf>:
 80092a0:	ee10 3a10 	vmov	r3, s0
 80092a4:	b507      	push	{r0, r1, r2, lr}
 80092a6:	4a12      	ldr	r2, [pc, #72]	; (80092f0 <tanf+0x50>)
 80092a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092ac:	4293      	cmp	r3, r2
 80092ae:	dc07      	bgt.n	80092c0 <tanf+0x20>
 80092b0:	eddf 0a10 	vldr	s1, [pc, #64]	; 80092f4 <tanf+0x54>
 80092b4:	2001      	movs	r0, #1
 80092b6:	b003      	add	sp, #12
 80092b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092bc:	f001 bc08 	b.w	800aad0 <__kernel_tanf>
 80092c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80092c4:	db04      	blt.n	80092d0 <tanf+0x30>
 80092c6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80092ca:	b003      	add	sp, #12
 80092cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80092d0:	4668      	mov	r0, sp
 80092d2:	f000 ff9f 	bl	800a214 <__ieee754_rem_pio2f>
 80092d6:	0040      	lsls	r0, r0, #1
 80092d8:	f000 0002 	and.w	r0, r0, #2
 80092dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80092e0:	ed9d 0a00 	vldr	s0, [sp]
 80092e4:	f1c0 0001 	rsb	r0, r0, #1
 80092e8:	f001 fbf2 	bl	800aad0 <__kernel_tanf>
 80092ec:	e7ed      	b.n	80092ca <tanf+0x2a>
 80092ee:	bf00      	nop
 80092f0:	3f490fda 	.word	0x3f490fda
 80092f4:	00000000 	.word	0x00000000

080092f8 <pow>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	ed2d 8b02 	vpush	{d8}
 80092fe:	eeb0 8a40 	vmov.f32	s16, s0
 8009302:	eef0 8a60 	vmov.f32	s17, s1
 8009306:	ec55 4b11 	vmov	r4, r5, d1
 800930a:	f000 f8bd 	bl	8009488 <__ieee754_pow>
 800930e:	4622      	mov	r2, r4
 8009310:	462b      	mov	r3, r5
 8009312:	4620      	mov	r0, r4
 8009314:	4629      	mov	r1, r5
 8009316:	ec57 6b10 	vmov	r6, r7, d0
 800931a:	f7f7 fc0f 	bl	8000b3c <__aeabi_dcmpun>
 800931e:	2800      	cmp	r0, #0
 8009320:	d13b      	bne.n	800939a <pow+0xa2>
 8009322:	ec51 0b18 	vmov	r0, r1, d8
 8009326:	2200      	movs	r2, #0
 8009328:	2300      	movs	r3, #0
 800932a:	f7f7 fbd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800932e:	b1b8      	cbz	r0, 8009360 <pow+0x68>
 8009330:	2200      	movs	r2, #0
 8009332:	2300      	movs	r3, #0
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f7f7 fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 800933c:	2800      	cmp	r0, #0
 800933e:	d146      	bne.n	80093ce <pow+0xd6>
 8009340:	ec45 4b10 	vmov	d0, r4, r5
 8009344:	f001 fcdd 	bl	800ad02 <finite>
 8009348:	b338      	cbz	r0, 800939a <pow+0xa2>
 800934a:	2200      	movs	r2, #0
 800934c:	2300      	movs	r3, #0
 800934e:	4620      	mov	r0, r4
 8009350:	4629      	mov	r1, r5
 8009352:	f7f7 fbcb 	bl	8000aec <__aeabi_dcmplt>
 8009356:	b300      	cbz	r0, 800939a <pow+0xa2>
 8009358:	f7fd f866 	bl	8006428 <__errno>
 800935c:	2322      	movs	r3, #34	; 0x22
 800935e:	e01b      	b.n	8009398 <pow+0xa0>
 8009360:	ec47 6b10 	vmov	d0, r6, r7
 8009364:	f001 fccd 	bl	800ad02 <finite>
 8009368:	b9e0      	cbnz	r0, 80093a4 <pow+0xac>
 800936a:	eeb0 0a48 	vmov.f32	s0, s16
 800936e:	eef0 0a68 	vmov.f32	s1, s17
 8009372:	f001 fcc6 	bl	800ad02 <finite>
 8009376:	b1a8      	cbz	r0, 80093a4 <pow+0xac>
 8009378:	ec45 4b10 	vmov	d0, r4, r5
 800937c:	f001 fcc1 	bl	800ad02 <finite>
 8009380:	b180      	cbz	r0, 80093a4 <pow+0xac>
 8009382:	4632      	mov	r2, r6
 8009384:	463b      	mov	r3, r7
 8009386:	4630      	mov	r0, r6
 8009388:	4639      	mov	r1, r7
 800938a:	f7f7 fbd7 	bl	8000b3c <__aeabi_dcmpun>
 800938e:	2800      	cmp	r0, #0
 8009390:	d0e2      	beq.n	8009358 <pow+0x60>
 8009392:	f7fd f849 	bl	8006428 <__errno>
 8009396:	2321      	movs	r3, #33	; 0x21
 8009398:	6003      	str	r3, [r0, #0]
 800939a:	ecbd 8b02 	vpop	{d8}
 800939e:	ec47 6b10 	vmov	d0, r6, r7
 80093a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a4:	2200      	movs	r2, #0
 80093a6:	2300      	movs	r3, #0
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d0f2      	beq.n	800939a <pow+0xa2>
 80093b4:	eeb0 0a48 	vmov.f32	s0, s16
 80093b8:	eef0 0a68 	vmov.f32	s1, s17
 80093bc:	f001 fca1 	bl	800ad02 <finite>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d0ea      	beq.n	800939a <pow+0xa2>
 80093c4:	ec45 4b10 	vmov	d0, r4, r5
 80093c8:	f001 fc9b 	bl	800ad02 <finite>
 80093cc:	e7c3      	b.n	8009356 <pow+0x5e>
 80093ce:	4f01      	ldr	r7, [pc, #4]	; (80093d4 <pow+0xdc>)
 80093d0:	2600      	movs	r6, #0
 80093d2:	e7e2      	b.n	800939a <pow+0xa2>
 80093d4:	3ff00000 	.word	0x3ff00000

080093d8 <sqrt>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	ed2d 8b02 	vpush	{d8}
 80093de:	ec55 4b10 	vmov	r4, r5, d0
 80093e2:	f000 fd7f 	bl	8009ee4 <__ieee754_sqrt>
 80093e6:	4622      	mov	r2, r4
 80093e8:	462b      	mov	r3, r5
 80093ea:	4620      	mov	r0, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	eeb0 8a40 	vmov.f32	s16, s0
 80093f2:	eef0 8a60 	vmov.f32	s17, s1
 80093f6:	f7f7 fba1 	bl	8000b3c <__aeabi_dcmpun>
 80093fa:	b990      	cbnz	r0, 8009422 <sqrt+0x4a>
 80093fc:	2200      	movs	r2, #0
 80093fe:	2300      	movs	r3, #0
 8009400:	4620      	mov	r0, r4
 8009402:	4629      	mov	r1, r5
 8009404:	f7f7 fb72 	bl	8000aec <__aeabi_dcmplt>
 8009408:	b158      	cbz	r0, 8009422 <sqrt+0x4a>
 800940a:	f7fd f80d 	bl	8006428 <__errno>
 800940e:	2321      	movs	r3, #33	; 0x21
 8009410:	6003      	str	r3, [r0, #0]
 8009412:	2200      	movs	r2, #0
 8009414:	2300      	movs	r3, #0
 8009416:	4610      	mov	r0, r2
 8009418:	4619      	mov	r1, r3
 800941a:	f7f7 fa1f 	bl	800085c <__aeabi_ddiv>
 800941e:	ec41 0b18 	vmov	d8, r0, r1
 8009422:	eeb0 0a48 	vmov.f32	s0, s16
 8009426:	eef0 0a68 	vmov.f32	s1, s17
 800942a:	ecbd 8b02 	vpop	{d8}
 800942e:	bd38      	pop	{r3, r4, r5, pc}

08009430 <asinf>:
 8009430:	b508      	push	{r3, lr}
 8009432:	ed2d 8b02 	vpush	{d8}
 8009436:	eeb0 8a40 	vmov.f32	s16, s0
 800943a:	f000 fe05 	bl	800a048 <__ieee754_asinf>
 800943e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009446:	eef0 8a40 	vmov.f32	s17, s0
 800944a:	d615      	bvs.n	8009478 <asinf+0x48>
 800944c:	eeb0 0a48 	vmov.f32	s0, s16
 8009450:	f7ff fed8 	bl	8009204 <fabsf>
 8009454:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009458:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800945c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009460:	dd0a      	ble.n	8009478 <asinf+0x48>
 8009462:	f7fc ffe1 	bl	8006428 <__errno>
 8009466:	ecbd 8b02 	vpop	{d8}
 800946a:	2321      	movs	r3, #33	; 0x21
 800946c:	6003      	str	r3, [r0, #0]
 800946e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009472:	4804      	ldr	r0, [pc, #16]	; (8009484 <asinf+0x54>)
 8009474:	f001 bd18 	b.w	800aea8 <nanf>
 8009478:	eeb0 0a68 	vmov.f32	s0, s17
 800947c:	ecbd 8b02 	vpop	{d8}
 8009480:	bd08      	pop	{r3, pc}
 8009482:	bf00      	nop
 8009484:	0800b328 	.word	0x0800b328

08009488 <__ieee754_pow>:
 8009488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	ed2d 8b06 	vpush	{d8-d10}
 8009490:	b089      	sub	sp, #36	; 0x24
 8009492:	ed8d 1b00 	vstr	d1, [sp]
 8009496:	e9dd 2900 	ldrd	r2, r9, [sp]
 800949a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800949e:	ea58 0102 	orrs.w	r1, r8, r2
 80094a2:	ec57 6b10 	vmov	r6, r7, d0
 80094a6:	d115      	bne.n	80094d4 <__ieee754_pow+0x4c>
 80094a8:	19b3      	adds	r3, r6, r6
 80094aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80094ae:	4152      	adcs	r2, r2
 80094b0:	4299      	cmp	r1, r3
 80094b2:	4b89      	ldr	r3, [pc, #548]	; (80096d8 <__ieee754_pow+0x250>)
 80094b4:	4193      	sbcs	r3, r2
 80094b6:	f080 84d2 	bcs.w	8009e5e <__ieee754_pow+0x9d6>
 80094ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f6 feeb 	bl	800029c <__adddf3>
 80094c6:	ec41 0b10 	vmov	d0, r0, r1
 80094ca:	b009      	add	sp, #36	; 0x24
 80094cc:	ecbd 8b06 	vpop	{d8-d10}
 80094d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d4:	4b81      	ldr	r3, [pc, #516]	; (80096dc <__ieee754_pow+0x254>)
 80094d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80094da:	429c      	cmp	r4, r3
 80094dc:	ee10 aa10 	vmov	sl, s0
 80094e0:	463d      	mov	r5, r7
 80094e2:	dc06      	bgt.n	80094f2 <__ieee754_pow+0x6a>
 80094e4:	d101      	bne.n	80094ea <__ieee754_pow+0x62>
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	d1e7      	bne.n	80094ba <__ieee754_pow+0x32>
 80094ea:	4598      	cmp	r8, r3
 80094ec:	dc01      	bgt.n	80094f2 <__ieee754_pow+0x6a>
 80094ee:	d10f      	bne.n	8009510 <__ieee754_pow+0x88>
 80094f0:	b172      	cbz	r2, 8009510 <__ieee754_pow+0x88>
 80094f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80094f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80094fa:	ea55 050a 	orrs.w	r5, r5, sl
 80094fe:	d1dc      	bne.n	80094ba <__ieee754_pow+0x32>
 8009500:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009504:	18db      	adds	r3, r3, r3
 8009506:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800950a:	4152      	adcs	r2, r2
 800950c:	429d      	cmp	r5, r3
 800950e:	e7d0      	b.n	80094b2 <__ieee754_pow+0x2a>
 8009510:	2d00      	cmp	r5, #0
 8009512:	da3b      	bge.n	800958c <__ieee754_pow+0x104>
 8009514:	4b72      	ldr	r3, [pc, #456]	; (80096e0 <__ieee754_pow+0x258>)
 8009516:	4598      	cmp	r8, r3
 8009518:	dc51      	bgt.n	80095be <__ieee754_pow+0x136>
 800951a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800951e:	4598      	cmp	r8, r3
 8009520:	f340 84ac 	ble.w	8009e7c <__ieee754_pow+0x9f4>
 8009524:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009528:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800952c:	2b14      	cmp	r3, #20
 800952e:	dd0f      	ble.n	8009550 <__ieee754_pow+0xc8>
 8009530:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009534:	fa22 f103 	lsr.w	r1, r2, r3
 8009538:	fa01 f303 	lsl.w	r3, r1, r3
 800953c:	4293      	cmp	r3, r2
 800953e:	f040 849d 	bne.w	8009e7c <__ieee754_pow+0x9f4>
 8009542:	f001 0101 	and.w	r1, r1, #1
 8009546:	f1c1 0302 	rsb	r3, r1, #2
 800954a:	9304      	str	r3, [sp, #16]
 800954c:	b182      	cbz	r2, 8009570 <__ieee754_pow+0xe8>
 800954e:	e05f      	b.n	8009610 <__ieee754_pow+0x188>
 8009550:	2a00      	cmp	r2, #0
 8009552:	d15b      	bne.n	800960c <__ieee754_pow+0x184>
 8009554:	f1c3 0314 	rsb	r3, r3, #20
 8009558:	fa48 f103 	asr.w	r1, r8, r3
 800955c:	fa01 f303 	lsl.w	r3, r1, r3
 8009560:	4543      	cmp	r3, r8
 8009562:	f040 8488 	bne.w	8009e76 <__ieee754_pow+0x9ee>
 8009566:	f001 0101 	and.w	r1, r1, #1
 800956a:	f1c1 0302 	rsb	r3, r1, #2
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	4b5c      	ldr	r3, [pc, #368]	; (80096e4 <__ieee754_pow+0x25c>)
 8009572:	4598      	cmp	r8, r3
 8009574:	d132      	bne.n	80095dc <__ieee754_pow+0x154>
 8009576:	f1b9 0f00 	cmp.w	r9, #0
 800957a:	f280 8478 	bge.w	8009e6e <__ieee754_pow+0x9e6>
 800957e:	4959      	ldr	r1, [pc, #356]	; (80096e4 <__ieee754_pow+0x25c>)
 8009580:	4632      	mov	r2, r6
 8009582:	463b      	mov	r3, r7
 8009584:	2000      	movs	r0, #0
 8009586:	f7f7 f969 	bl	800085c <__aeabi_ddiv>
 800958a:	e79c      	b.n	80094c6 <__ieee754_pow+0x3e>
 800958c:	2300      	movs	r3, #0
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	2a00      	cmp	r2, #0
 8009592:	d13d      	bne.n	8009610 <__ieee754_pow+0x188>
 8009594:	4b51      	ldr	r3, [pc, #324]	; (80096dc <__ieee754_pow+0x254>)
 8009596:	4598      	cmp	r8, r3
 8009598:	d1ea      	bne.n	8009570 <__ieee754_pow+0xe8>
 800959a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800959e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80095a2:	ea53 030a 	orrs.w	r3, r3, sl
 80095a6:	f000 845a 	beq.w	8009e5e <__ieee754_pow+0x9d6>
 80095aa:	4b4f      	ldr	r3, [pc, #316]	; (80096e8 <__ieee754_pow+0x260>)
 80095ac:	429c      	cmp	r4, r3
 80095ae:	dd08      	ble.n	80095c2 <__ieee754_pow+0x13a>
 80095b0:	f1b9 0f00 	cmp.w	r9, #0
 80095b4:	f2c0 8457 	blt.w	8009e66 <__ieee754_pow+0x9de>
 80095b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095bc:	e783      	b.n	80094c6 <__ieee754_pow+0x3e>
 80095be:	2302      	movs	r3, #2
 80095c0:	e7e5      	b.n	800958e <__ieee754_pow+0x106>
 80095c2:	f1b9 0f00 	cmp.w	r9, #0
 80095c6:	f04f 0000 	mov.w	r0, #0
 80095ca:	f04f 0100 	mov.w	r1, #0
 80095ce:	f6bf af7a 	bge.w	80094c6 <__ieee754_pow+0x3e>
 80095d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80095d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80095da:	e774      	b.n	80094c6 <__ieee754_pow+0x3e>
 80095dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80095e0:	d106      	bne.n	80095f0 <__ieee754_pow+0x168>
 80095e2:	4632      	mov	r2, r6
 80095e4:	463b      	mov	r3, r7
 80095e6:	4630      	mov	r0, r6
 80095e8:	4639      	mov	r1, r7
 80095ea:	f7f7 f80d 	bl	8000608 <__aeabi_dmul>
 80095ee:	e76a      	b.n	80094c6 <__ieee754_pow+0x3e>
 80095f0:	4b3e      	ldr	r3, [pc, #248]	; (80096ec <__ieee754_pow+0x264>)
 80095f2:	4599      	cmp	r9, r3
 80095f4:	d10c      	bne.n	8009610 <__ieee754_pow+0x188>
 80095f6:	2d00      	cmp	r5, #0
 80095f8:	db0a      	blt.n	8009610 <__ieee754_pow+0x188>
 80095fa:	ec47 6b10 	vmov	d0, r6, r7
 80095fe:	b009      	add	sp, #36	; 0x24
 8009600:	ecbd 8b06 	vpop	{d8-d10}
 8009604:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	f000 bc6c 	b.w	8009ee4 <__ieee754_sqrt>
 800960c:	2300      	movs	r3, #0
 800960e:	9304      	str	r3, [sp, #16]
 8009610:	ec47 6b10 	vmov	d0, r6, r7
 8009614:	f001 fb6c 	bl	800acf0 <fabs>
 8009618:	ec51 0b10 	vmov	r0, r1, d0
 800961c:	f1ba 0f00 	cmp.w	sl, #0
 8009620:	d129      	bne.n	8009676 <__ieee754_pow+0x1ee>
 8009622:	b124      	cbz	r4, 800962e <__ieee754_pow+0x1a6>
 8009624:	4b2f      	ldr	r3, [pc, #188]	; (80096e4 <__ieee754_pow+0x25c>)
 8009626:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800962a:	429a      	cmp	r2, r3
 800962c:	d123      	bne.n	8009676 <__ieee754_pow+0x1ee>
 800962e:	f1b9 0f00 	cmp.w	r9, #0
 8009632:	da05      	bge.n	8009640 <__ieee754_pow+0x1b8>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	2000      	movs	r0, #0
 800963a:	492a      	ldr	r1, [pc, #168]	; (80096e4 <__ieee754_pow+0x25c>)
 800963c:	f7f7 f90e 	bl	800085c <__aeabi_ddiv>
 8009640:	2d00      	cmp	r5, #0
 8009642:	f6bf af40 	bge.w	80094c6 <__ieee754_pow+0x3e>
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800964c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009650:	4323      	orrs	r3, r4
 8009652:	d108      	bne.n	8009666 <__ieee754_pow+0x1de>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4610      	mov	r0, r2
 800965a:	4619      	mov	r1, r3
 800965c:	f7f6 fe1c 	bl	8000298 <__aeabi_dsub>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	e78f      	b.n	8009586 <__ieee754_pow+0xfe>
 8009666:	9b04      	ldr	r3, [sp, #16]
 8009668:	2b01      	cmp	r3, #1
 800966a:	f47f af2c 	bne.w	80094c6 <__ieee754_pow+0x3e>
 800966e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009672:	4619      	mov	r1, r3
 8009674:	e727      	b.n	80094c6 <__ieee754_pow+0x3e>
 8009676:	0feb      	lsrs	r3, r5, #31
 8009678:	3b01      	subs	r3, #1
 800967a:	9306      	str	r3, [sp, #24]
 800967c:	9a06      	ldr	r2, [sp, #24]
 800967e:	9b04      	ldr	r3, [sp, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	d102      	bne.n	800968a <__ieee754_pow+0x202>
 8009684:	4632      	mov	r2, r6
 8009686:	463b      	mov	r3, r7
 8009688:	e7e6      	b.n	8009658 <__ieee754_pow+0x1d0>
 800968a:	4b19      	ldr	r3, [pc, #100]	; (80096f0 <__ieee754_pow+0x268>)
 800968c:	4598      	cmp	r8, r3
 800968e:	f340 80fb 	ble.w	8009888 <__ieee754_pow+0x400>
 8009692:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009696:	4598      	cmp	r8, r3
 8009698:	4b13      	ldr	r3, [pc, #76]	; (80096e8 <__ieee754_pow+0x260>)
 800969a:	dd0c      	ble.n	80096b6 <__ieee754_pow+0x22e>
 800969c:	429c      	cmp	r4, r3
 800969e:	dc0f      	bgt.n	80096c0 <__ieee754_pow+0x238>
 80096a0:	f1b9 0f00 	cmp.w	r9, #0
 80096a4:	da0f      	bge.n	80096c6 <__ieee754_pow+0x23e>
 80096a6:	2000      	movs	r0, #0
 80096a8:	b009      	add	sp, #36	; 0x24
 80096aa:	ecbd 8b06 	vpop	{d8-d10}
 80096ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b2:	f001 bb14 	b.w	800acde <__math_oflow>
 80096b6:	429c      	cmp	r4, r3
 80096b8:	dbf2      	blt.n	80096a0 <__ieee754_pow+0x218>
 80096ba:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <__ieee754_pow+0x25c>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	dd19      	ble.n	80096f4 <__ieee754_pow+0x26c>
 80096c0:	f1b9 0f00 	cmp.w	r9, #0
 80096c4:	dcef      	bgt.n	80096a6 <__ieee754_pow+0x21e>
 80096c6:	2000      	movs	r0, #0
 80096c8:	b009      	add	sp, #36	; 0x24
 80096ca:	ecbd 8b06 	vpop	{d8-d10}
 80096ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d2:	f001 bafb 	b.w	800accc <__math_uflow>
 80096d6:	bf00      	nop
 80096d8:	fff00000 	.word	0xfff00000
 80096dc:	7ff00000 	.word	0x7ff00000
 80096e0:	433fffff 	.word	0x433fffff
 80096e4:	3ff00000 	.word	0x3ff00000
 80096e8:	3fefffff 	.word	0x3fefffff
 80096ec:	3fe00000 	.word	0x3fe00000
 80096f0:	41e00000 	.word	0x41e00000
 80096f4:	4b60      	ldr	r3, [pc, #384]	; (8009878 <__ieee754_pow+0x3f0>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	f7f6 fdce 	bl	8000298 <__aeabi_dsub>
 80096fc:	a354      	add	r3, pc, #336	; (adr r3, 8009850 <__ieee754_pow+0x3c8>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	4604      	mov	r4, r0
 8009704:	460d      	mov	r5, r1
 8009706:	f7f6 ff7f 	bl	8000608 <__aeabi_dmul>
 800970a:	a353      	add	r3, pc, #332	; (adr r3, 8009858 <__ieee754_pow+0x3d0>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	4620      	mov	r0, r4
 8009716:	4629      	mov	r1, r5
 8009718:	f7f6 ff76 	bl	8000608 <__aeabi_dmul>
 800971c:	4b57      	ldr	r3, [pc, #348]	; (800987c <__ieee754_pow+0x3f4>)
 800971e:	4682      	mov	sl, r0
 8009720:	468b      	mov	fp, r1
 8009722:	2200      	movs	r2, #0
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f7f6 ff6e 	bl	8000608 <__aeabi_dmul>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	a14b      	add	r1, pc, #300	; (adr r1, 8009860 <__ieee754_pow+0x3d8>)
 8009732:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009736:	f7f6 fdaf 	bl	8000298 <__aeabi_dsub>
 800973a:	4622      	mov	r2, r4
 800973c:	462b      	mov	r3, r5
 800973e:	f7f6 ff63 	bl	8000608 <__aeabi_dmul>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	2000      	movs	r0, #0
 8009748:	494d      	ldr	r1, [pc, #308]	; (8009880 <__ieee754_pow+0x3f8>)
 800974a:	f7f6 fda5 	bl	8000298 <__aeabi_dsub>
 800974e:	4622      	mov	r2, r4
 8009750:	4680      	mov	r8, r0
 8009752:	4689      	mov	r9, r1
 8009754:	462b      	mov	r3, r5
 8009756:	4620      	mov	r0, r4
 8009758:	4629      	mov	r1, r5
 800975a:	f7f6 ff55 	bl	8000608 <__aeabi_dmul>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4640      	mov	r0, r8
 8009764:	4649      	mov	r1, r9
 8009766:	f7f6 ff4f 	bl	8000608 <__aeabi_dmul>
 800976a:	a33f      	add	r3, pc, #252	; (adr r3, 8009868 <__ieee754_pow+0x3e0>)
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f7f6 ff4a 	bl	8000608 <__aeabi_dmul>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4650      	mov	r0, sl
 800977a:	4659      	mov	r1, fp
 800977c:	f7f6 fd8c 	bl	8000298 <__aeabi_dsub>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4680      	mov	r8, r0
 8009786:	4689      	mov	r9, r1
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f6 fd86 	bl	800029c <__adddf3>
 8009790:	2000      	movs	r0, #0
 8009792:	4632      	mov	r2, r6
 8009794:	463b      	mov	r3, r7
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
 800979a:	f7f6 fd7d 	bl	8000298 <__aeabi_dsub>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4640      	mov	r0, r8
 80097a4:	4649      	mov	r1, r9
 80097a6:	f7f6 fd77 	bl	8000298 <__aeabi_dsub>
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	9a06      	ldr	r2, [sp, #24]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	4313      	orrs	r3, r2
 80097b2:	4682      	mov	sl, r0
 80097b4:	468b      	mov	fp, r1
 80097b6:	f040 81e7 	bne.w	8009b88 <__ieee754_pow+0x700>
 80097ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009870 <__ieee754_pow+0x3e8>
 80097be:	eeb0 8a47 	vmov.f32	s16, s14
 80097c2:	eef0 8a67 	vmov.f32	s17, s15
 80097c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80097ca:	2600      	movs	r6, #0
 80097cc:	4632      	mov	r2, r6
 80097ce:	463b      	mov	r3, r7
 80097d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097d4:	f7f6 fd60 	bl	8000298 <__aeabi_dsub>
 80097d8:	4622      	mov	r2, r4
 80097da:	462b      	mov	r3, r5
 80097dc:	f7f6 ff14 	bl	8000608 <__aeabi_dmul>
 80097e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097e4:	4680      	mov	r8, r0
 80097e6:	4689      	mov	r9, r1
 80097e8:	4650      	mov	r0, sl
 80097ea:	4659      	mov	r1, fp
 80097ec:	f7f6 ff0c 	bl	8000608 <__aeabi_dmul>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4640      	mov	r0, r8
 80097f6:	4649      	mov	r1, r9
 80097f8:	f7f6 fd50 	bl	800029c <__adddf3>
 80097fc:	4632      	mov	r2, r6
 80097fe:	463b      	mov	r3, r7
 8009800:	4680      	mov	r8, r0
 8009802:	4689      	mov	r9, r1
 8009804:	4620      	mov	r0, r4
 8009806:	4629      	mov	r1, r5
 8009808:	f7f6 fefe 	bl	8000608 <__aeabi_dmul>
 800980c:	460b      	mov	r3, r1
 800980e:	4604      	mov	r4, r0
 8009810:	460d      	mov	r5, r1
 8009812:	4602      	mov	r2, r0
 8009814:	4649      	mov	r1, r9
 8009816:	4640      	mov	r0, r8
 8009818:	f7f6 fd40 	bl	800029c <__adddf3>
 800981c:	4b19      	ldr	r3, [pc, #100]	; (8009884 <__ieee754_pow+0x3fc>)
 800981e:	4299      	cmp	r1, r3
 8009820:	ec45 4b19 	vmov	d9, r4, r5
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	468b      	mov	fp, r1
 800982a:	f340 82f1 	ble.w	8009e10 <__ieee754_pow+0x988>
 800982e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009832:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009836:	4303      	orrs	r3, r0
 8009838:	f000 81e4 	beq.w	8009c04 <__ieee754_pow+0x77c>
 800983c:	ec51 0b18 	vmov	r0, r1, d8
 8009840:	2200      	movs	r2, #0
 8009842:	2300      	movs	r3, #0
 8009844:	f7f7 f952 	bl	8000aec <__aeabi_dcmplt>
 8009848:	3800      	subs	r0, #0
 800984a:	bf18      	it	ne
 800984c:	2001      	movne	r0, #1
 800984e:	e72b      	b.n	80096a8 <__ieee754_pow+0x220>
 8009850:	60000000 	.word	0x60000000
 8009854:	3ff71547 	.word	0x3ff71547
 8009858:	f85ddf44 	.word	0xf85ddf44
 800985c:	3e54ae0b 	.word	0x3e54ae0b
 8009860:	55555555 	.word	0x55555555
 8009864:	3fd55555 	.word	0x3fd55555
 8009868:	652b82fe 	.word	0x652b82fe
 800986c:	3ff71547 	.word	0x3ff71547
 8009870:	00000000 	.word	0x00000000
 8009874:	bff00000 	.word	0xbff00000
 8009878:	3ff00000 	.word	0x3ff00000
 800987c:	3fd00000 	.word	0x3fd00000
 8009880:	3fe00000 	.word	0x3fe00000
 8009884:	408fffff 	.word	0x408fffff
 8009888:	4bd5      	ldr	r3, [pc, #852]	; (8009be0 <__ieee754_pow+0x758>)
 800988a:	402b      	ands	r3, r5
 800988c:	2200      	movs	r2, #0
 800988e:	b92b      	cbnz	r3, 800989c <__ieee754_pow+0x414>
 8009890:	4bd4      	ldr	r3, [pc, #848]	; (8009be4 <__ieee754_pow+0x75c>)
 8009892:	f7f6 feb9 	bl	8000608 <__aeabi_dmul>
 8009896:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800989a:	460c      	mov	r4, r1
 800989c:	1523      	asrs	r3, r4, #20
 800989e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098a2:	4413      	add	r3, r2
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	4bd0      	ldr	r3, [pc, #832]	; (8009be8 <__ieee754_pow+0x760>)
 80098a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80098ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80098b0:	429c      	cmp	r4, r3
 80098b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80098b6:	dd08      	ble.n	80098ca <__ieee754_pow+0x442>
 80098b8:	4bcc      	ldr	r3, [pc, #816]	; (8009bec <__ieee754_pow+0x764>)
 80098ba:	429c      	cmp	r4, r3
 80098bc:	f340 8162 	ble.w	8009b84 <__ieee754_pow+0x6fc>
 80098c0:	9b05      	ldr	r3, [sp, #20]
 80098c2:	3301      	adds	r3, #1
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80098ca:	2400      	movs	r4, #0
 80098cc:	00e3      	lsls	r3, r4, #3
 80098ce:	9307      	str	r3, [sp, #28]
 80098d0:	4bc7      	ldr	r3, [pc, #796]	; (8009bf0 <__ieee754_pow+0x768>)
 80098d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098d6:	ed93 7b00 	vldr	d7, [r3]
 80098da:	4629      	mov	r1, r5
 80098dc:	ec53 2b17 	vmov	r2, r3, d7
 80098e0:	eeb0 9a47 	vmov.f32	s18, s14
 80098e4:	eef0 9a67 	vmov.f32	s19, s15
 80098e8:	4682      	mov	sl, r0
 80098ea:	f7f6 fcd5 	bl	8000298 <__aeabi_dsub>
 80098ee:	4652      	mov	r2, sl
 80098f0:	4606      	mov	r6, r0
 80098f2:	460f      	mov	r7, r1
 80098f4:	462b      	mov	r3, r5
 80098f6:	ec51 0b19 	vmov	r0, r1, d9
 80098fa:	f7f6 fccf 	bl	800029c <__adddf3>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	2000      	movs	r0, #0
 8009904:	49bb      	ldr	r1, [pc, #748]	; (8009bf4 <__ieee754_pow+0x76c>)
 8009906:	f7f6 ffa9 	bl	800085c <__aeabi_ddiv>
 800990a:	ec41 0b1a 	vmov	d10, r0, r1
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4630      	mov	r0, r6
 8009914:	4639      	mov	r1, r7
 8009916:	f7f6 fe77 	bl	8000608 <__aeabi_dmul>
 800991a:	2300      	movs	r3, #0
 800991c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009920:	9302      	str	r3, [sp, #8]
 8009922:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009926:	46ab      	mov	fp, r5
 8009928:	106d      	asrs	r5, r5, #1
 800992a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800992e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009932:	ec41 0b18 	vmov	d8, r0, r1
 8009936:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800993a:	2200      	movs	r2, #0
 800993c:	4640      	mov	r0, r8
 800993e:	4649      	mov	r1, r9
 8009940:	4614      	mov	r4, r2
 8009942:	461d      	mov	r5, r3
 8009944:	f7f6 fe60 	bl	8000608 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f7f6 fca2 	bl	8000298 <__aeabi_dsub>
 8009954:	ec53 2b19 	vmov	r2, r3, d9
 8009958:	4606      	mov	r6, r0
 800995a:	460f      	mov	r7, r1
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fc9a 	bl	8000298 <__aeabi_dsub>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4650      	mov	r0, sl
 800996a:	4659      	mov	r1, fp
 800996c:	f7f6 fc94 	bl	8000298 <__aeabi_dsub>
 8009970:	4642      	mov	r2, r8
 8009972:	464b      	mov	r3, r9
 8009974:	f7f6 fe48 	bl	8000608 <__aeabi_dmul>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4630      	mov	r0, r6
 800997e:	4639      	mov	r1, r7
 8009980:	f7f6 fc8a 	bl	8000298 <__aeabi_dsub>
 8009984:	ec53 2b1a 	vmov	r2, r3, d10
 8009988:	f7f6 fe3e 	bl	8000608 <__aeabi_dmul>
 800998c:	ec53 2b18 	vmov	r2, r3, d8
 8009990:	ec41 0b19 	vmov	d9, r0, r1
 8009994:	ec51 0b18 	vmov	r0, r1, d8
 8009998:	f7f6 fe36 	bl	8000608 <__aeabi_dmul>
 800999c:	a37c      	add	r3, pc, #496	; (adr r3, 8009b90 <__ieee754_pow+0x708>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	4604      	mov	r4, r0
 80099a4:	460d      	mov	r5, r1
 80099a6:	f7f6 fe2f 	bl	8000608 <__aeabi_dmul>
 80099aa:	a37b      	add	r3, pc, #492	; (adr r3, 8009b98 <__ieee754_pow+0x710>)
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f7f6 fc74 	bl	800029c <__adddf3>
 80099b4:	4622      	mov	r2, r4
 80099b6:	462b      	mov	r3, r5
 80099b8:	f7f6 fe26 	bl	8000608 <__aeabi_dmul>
 80099bc:	a378      	add	r3, pc, #480	; (adr r3, 8009ba0 <__ieee754_pow+0x718>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fc6b 	bl	800029c <__adddf3>
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	f7f6 fe1d 	bl	8000608 <__aeabi_dmul>
 80099ce:	a376      	add	r3, pc, #472	; (adr r3, 8009ba8 <__ieee754_pow+0x720>)
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	f7f6 fc62 	bl	800029c <__adddf3>
 80099d8:	4622      	mov	r2, r4
 80099da:	462b      	mov	r3, r5
 80099dc:	f7f6 fe14 	bl	8000608 <__aeabi_dmul>
 80099e0:	a373      	add	r3, pc, #460	; (adr r3, 8009bb0 <__ieee754_pow+0x728>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 fc59 	bl	800029c <__adddf3>
 80099ea:	4622      	mov	r2, r4
 80099ec:	462b      	mov	r3, r5
 80099ee:	f7f6 fe0b 	bl	8000608 <__aeabi_dmul>
 80099f2:	a371      	add	r3, pc, #452	; (adr r3, 8009bb8 <__ieee754_pow+0x730>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f7f6 fc50 	bl	800029c <__adddf3>
 80099fc:	4622      	mov	r2, r4
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	462b      	mov	r3, r5
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fdfe 	bl	8000608 <__aeabi_dmul>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f6 fdf8 	bl	8000608 <__aeabi_dmul>
 8009a18:	4642      	mov	r2, r8
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	460d      	mov	r5, r1
 8009a1e:	464b      	mov	r3, r9
 8009a20:	ec51 0b18 	vmov	r0, r1, d8
 8009a24:	f7f6 fc3a 	bl	800029c <__adddf3>
 8009a28:	ec53 2b19 	vmov	r2, r3, d9
 8009a2c:	f7f6 fdec 	bl	8000608 <__aeabi_dmul>
 8009a30:	4622      	mov	r2, r4
 8009a32:	462b      	mov	r3, r5
 8009a34:	f7f6 fc32 	bl	800029c <__adddf3>
 8009a38:	4642      	mov	r2, r8
 8009a3a:	4682      	mov	sl, r0
 8009a3c:	468b      	mov	fp, r1
 8009a3e:	464b      	mov	r3, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	4649      	mov	r1, r9
 8009a44:	f7f6 fde0 	bl	8000608 <__aeabi_dmul>
 8009a48:	4b6b      	ldr	r3, [pc, #428]	; (8009bf8 <__ieee754_pow+0x770>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	460f      	mov	r7, r1
 8009a50:	f7f6 fc24 	bl	800029c <__adddf3>
 8009a54:	4652      	mov	r2, sl
 8009a56:	465b      	mov	r3, fp
 8009a58:	f7f6 fc20 	bl	800029c <__adddf3>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4640      	mov	r0, r8
 8009a68:	4649      	mov	r1, r9
 8009a6a:	f7f6 fdcd 	bl	8000608 <__aeabi_dmul>
 8009a6e:	4b62      	ldr	r3, [pc, #392]	; (8009bf8 <__ieee754_pow+0x770>)
 8009a70:	4680      	mov	r8, r0
 8009a72:	4689      	mov	r9, r1
 8009a74:	2200      	movs	r2, #0
 8009a76:	4620      	mov	r0, r4
 8009a78:	4629      	mov	r1, r5
 8009a7a:	f7f6 fc0d 	bl	8000298 <__aeabi_dsub>
 8009a7e:	4632      	mov	r2, r6
 8009a80:	463b      	mov	r3, r7
 8009a82:	f7f6 fc09 	bl	8000298 <__aeabi_dsub>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	4659      	mov	r1, fp
 8009a8e:	f7f6 fc03 	bl	8000298 <__aeabi_dsub>
 8009a92:	ec53 2b18 	vmov	r2, r3, d8
 8009a96:	f7f6 fdb7 	bl	8000608 <__aeabi_dmul>
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	ec51 0b19 	vmov	r0, r1, d9
 8009aa6:	f7f6 fdaf 	bl	8000608 <__aeabi_dmul>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	f7f6 fbf3 	bl	800029c <__adddf3>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4640      	mov	r0, r8
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	f7f6 fbeb 	bl	800029c <__adddf3>
 8009ac6:	a33e      	add	r3, pc, #248	; (adr r3, 8009bc0 <__ieee754_pow+0x738>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	2000      	movs	r0, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	f7f6 fd99 	bl	8000608 <__aeabi_dmul>
 8009ad6:	4642      	mov	r2, r8
 8009ad8:	ec41 0b18 	vmov	d8, r0, r1
 8009adc:	464b      	mov	r3, r9
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f6 fbd9 	bl	8000298 <__aeabi_dsub>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	f7f6 fbd3 	bl	8000298 <__aeabi_dsub>
 8009af2:	a335      	add	r3, pc, #212	; (adr r3, 8009bc8 <__ieee754_pow+0x740>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f7f6 fd86 	bl	8000608 <__aeabi_dmul>
 8009afc:	a334      	add	r3, pc, #208	; (adr r3, 8009bd0 <__ieee754_pow+0x748>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	4606      	mov	r6, r0
 8009b04:	460f      	mov	r7, r1
 8009b06:	4620      	mov	r0, r4
 8009b08:	4629      	mov	r1, r5
 8009b0a:	f7f6 fd7d 	bl	8000608 <__aeabi_dmul>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4630      	mov	r0, r6
 8009b14:	4639      	mov	r1, r7
 8009b16:	f7f6 fbc1 	bl	800029c <__adddf3>
 8009b1a:	9a07      	ldr	r2, [sp, #28]
 8009b1c:	4b37      	ldr	r3, [pc, #220]	; (8009bfc <__ieee754_pow+0x774>)
 8009b1e:	4413      	add	r3, r2
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fbba 	bl	800029c <__adddf3>
 8009b28:	4682      	mov	sl, r0
 8009b2a:	9805      	ldr	r0, [sp, #20]
 8009b2c:	468b      	mov	fp, r1
 8009b2e:	f7f6 fd01 	bl	8000534 <__aeabi_i2d>
 8009b32:	9a07      	ldr	r2, [sp, #28]
 8009b34:	4b32      	ldr	r3, [pc, #200]	; (8009c00 <__ieee754_pow+0x778>)
 8009b36:	4413      	add	r3, r2
 8009b38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460f      	mov	r7, r1
 8009b40:	4652      	mov	r2, sl
 8009b42:	465b      	mov	r3, fp
 8009b44:	ec51 0b18 	vmov	r0, r1, d8
 8009b48:	f7f6 fba8 	bl	800029c <__adddf3>
 8009b4c:	4642      	mov	r2, r8
 8009b4e:	464b      	mov	r3, r9
 8009b50:	f7f6 fba4 	bl	800029c <__adddf3>
 8009b54:	4632      	mov	r2, r6
 8009b56:	463b      	mov	r3, r7
 8009b58:	f7f6 fba0 	bl	800029c <__adddf3>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4632      	mov	r2, r6
 8009b60:	463b      	mov	r3, r7
 8009b62:	4604      	mov	r4, r0
 8009b64:	460d      	mov	r5, r1
 8009b66:	f7f6 fb97 	bl	8000298 <__aeabi_dsub>
 8009b6a:	4642      	mov	r2, r8
 8009b6c:	464b      	mov	r3, r9
 8009b6e:	f7f6 fb93 	bl	8000298 <__aeabi_dsub>
 8009b72:	ec53 2b18 	vmov	r2, r3, d8
 8009b76:	f7f6 fb8f 	bl	8000298 <__aeabi_dsub>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4650      	mov	r0, sl
 8009b80:	4659      	mov	r1, fp
 8009b82:	e610      	b.n	80097a6 <__ieee754_pow+0x31e>
 8009b84:	2401      	movs	r4, #1
 8009b86:	e6a1      	b.n	80098cc <__ieee754_pow+0x444>
 8009b88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009bd8 <__ieee754_pow+0x750>
 8009b8c:	e617      	b.n	80097be <__ieee754_pow+0x336>
 8009b8e:	bf00      	nop
 8009b90:	4a454eef 	.word	0x4a454eef
 8009b94:	3fca7e28 	.word	0x3fca7e28
 8009b98:	93c9db65 	.word	0x93c9db65
 8009b9c:	3fcd864a 	.word	0x3fcd864a
 8009ba0:	a91d4101 	.word	0xa91d4101
 8009ba4:	3fd17460 	.word	0x3fd17460
 8009ba8:	518f264d 	.word	0x518f264d
 8009bac:	3fd55555 	.word	0x3fd55555
 8009bb0:	db6fabff 	.word	0xdb6fabff
 8009bb4:	3fdb6db6 	.word	0x3fdb6db6
 8009bb8:	33333303 	.word	0x33333303
 8009bbc:	3fe33333 	.word	0x3fe33333
 8009bc0:	e0000000 	.word	0xe0000000
 8009bc4:	3feec709 	.word	0x3feec709
 8009bc8:	dc3a03fd 	.word	0xdc3a03fd
 8009bcc:	3feec709 	.word	0x3feec709
 8009bd0:	145b01f5 	.word	0x145b01f5
 8009bd4:	be3e2fe0 	.word	0xbe3e2fe0
 8009bd8:	00000000 	.word	0x00000000
 8009bdc:	3ff00000 	.word	0x3ff00000
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	43400000 	.word	0x43400000
 8009be8:	0003988e 	.word	0x0003988e
 8009bec:	000bb679 	.word	0x000bb679
 8009bf0:	0800b458 	.word	0x0800b458
 8009bf4:	3ff00000 	.word	0x3ff00000
 8009bf8:	40080000 	.word	0x40080000
 8009bfc:	0800b478 	.word	0x0800b478
 8009c00:	0800b468 	.word	0x0800b468
 8009c04:	a3b5      	add	r3, pc, #724	; (adr r3, 8009edc <__ieee754_pow+0xa54>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	f7f6 fb45 	bl	800029c <__adddf3>
 8009c12:	4622      	mov	r2, r4
 8009c14:	ec41 0b1a 	vmov	d10, r0, r1
 8009c18:	462b      	mov	r3, r5
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	f7f6 fb3b 	bl	8000298 <__aeabi_dsub>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	ec51 0b1a 	vmov	r0, r1, d10
 8009c2a:	f7f6 ff7d 	bl	8000b28 <__aeabi_dcmpgt>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f47f ae04 	bne.w	800983c <__ieee754_pow+0x3b4>
 8009c34:	4aa4      	ldr	r2, [pc, #656]	; (8009ec8 <__ieee754_pow+0xa40>)
 8009c36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	f340 8108 	ble.w	8009e50 <__ieee754_pow+0x9c8>
 8009c40:	151b      	asrs	r3, r3, #20
 8009c42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c4a:	fa4a f303 	asr.w	r3, sl, r3
 8009c4e:	445b      	add	r3, fp
 8009c50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009c54:	4e9d      	ldr	r6, [pc, #628]	; (8009ecc <__ieee754_pow+0xa44>)
 8009c56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009c5a:	4116      	asrs	r6, r2
 8009c5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009c60:	2000      	movs	r0, #0
 8009c62:	ea23 0106 	bic.w	r1, r3, r6
 8009c66:	f1c2 0214 	rsb	r2, r2, #20
 8009c6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009c6e:	fa4a fa02 	asr.w	sl, sl, r2
 8009c72:	f1bb 0f00 	cmp.w	fp, #0
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	bfb8      	it	lt
 8009c80:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c84:	f7f6 fb08 	bl	8000298 <__aeabi_dsub>
 8009c88:	ec41 0b19 	vmov	d9, r0, r1
 8009c8c:	4642      	mov	r2, r8
 8009c8e:	464b      	mov	r3, r9
 8009c90:	ec51 0b19 	vmov	r0, r1, d9
 8009c94:	f7f6 fb02 	bl	800029c <__adddf3>
 8009c98:	a37b      	add	r3, pc, #492	; (adr r3, 8009e88 <__ieee754_pow+0xa00>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	f7f6 fcb0 	bl	8000608 <__aeabi_dmul>
 8009ca8:	ec53 2b19 	vmov	r2, r3, d9
 8009cac:	4606      	mov	r6, r0
 8009cae:	460f      	mov	r7, r1
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f7f6 faf0 	bl	8000298 <__aeabi_dsub>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	f7f6 faea 	bl	8000298 <__aeabi_dsub>
 8009cc4:	a372      	add	r3, pc, #456	; (adr r3, 8009e90 <__ieee754_pow+0xa08>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fc9d 	bl	8000608 <__aeabi_dmul>
 8009cce:	a372      	add	r3, pc, #456	; (adr r3, 8009e98 <__ieee754_pow+0xa10>)
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	4689      	mov	r9, r1
 8009cd8:	4620      	mov	r0, r4
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f7f6 fc94 	bl	8000608 <__aeabi_dmul>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	f7f6 fad8 	bl	800029c <__adddf3>
 8009cec:	4604      	mov	r4, r0
 8009cee:	460d      	mov	r5, r1
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 fad0 	bl	800029c <__adddf3>
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	463b      	mov	r3, r7
 8009d00:	4680      	mov	r8, r0
 8009d02:	4689      	mov	r9, r1
 8009d04:	f7f6 fac8 	bl	8000298 <__aeabi_dsub>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	4629      	mov	r1, r5
 8009d10:	f7f6 fac2 	bl	8000298 <__aeabi_dsub>
 8009d14:	4642      	mov	r2, r8
 8009d16:	4606      	mov	r6, r0
 8009d18:	460f      	mov	r7, r1
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	4649      	mov	r1, r9
 8009d20:	f7f6 fc72 	bl	8000608 <__aeabi_dmul>
 8009d24:	a35e      	add	r3, pc, #376	; (adr r3, 8009ea0 <__ieee754_pow+0xa18>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	460d      	mov	r5, r1
 8009d2e:	f7f6 fc6b 	bl	8000608 <__aeabi_dmul>
 8009d32:	a35d      	add	r3, pc, #372	; (adr r3, 8009ea8 <__ieee754_pow+0xa20>)
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f7f6 faae 	bl	8000298 <__aeabi_dsub>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	462b      	mov	r3, r5
 8009d40:	f7f6 fc62 	bl	8000608 <__aeabi_dmul>
 8009d44:	a35a      	add	r3, pc, #360	; (adr r3, 8009eb0 <__ieee754_pow+0xa28>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f7f6 faa7 	bl	800029c <__adddf3>
 8009d4e:	4622      	mov	r2, r4
 8009d50:	462b      	mov	r3, r5
 8009d52:	f7f6 fc59 	bl	8000608 <__aeabi_dmul>
 8009d56:	a358      	add	r3, pc, #352	; (adr r3, 8009eb8 <__ieee754_pow+0xa30>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	f7f6 fa9c 	bl	8000298 <__aeabi_dsub>
 8009d60:	4622      	mov	r2, r4
 8009d62:	462b      	mov	r3, r5
 8009d64:	f7f6 fc50 	bl	8000608 <__aeabi_dmul>
 8009d68:	a355      	add	r3, pc, #340	; (adr r3, 8009ec0 <__ieee754_pow+0xa38>)
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	f7f6 fa95 	bl	800029c <__adddf3>
 8009d72:	4622      	mov	r2, r4
 8009d74:	462b      	mov	r3, r5
 8009d76:	f7f6 fc47 	bl	8000608 <__aeabi_dmul>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4640      	mov	r0, r8
 8009d80:	4649      	mov	r1, r9
 8009d82:	f7f6 fa89 	bl	8000298 <__aeabi_dsub>
 8009d86:	4604      	mov	r4, r0
 8009d88:	460d      	mov	r5, r1
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4640      	mov	r0, r8
 8009d90:	4649      	mov	r1, r9
 8009d92:	f7f6 fc39 	bl	8000608 <__aeabi_dmul>
 8009d96:	2200      	movs	r2, #0
 8009d98:	ec41 0b19 	vmov	d9, r0, r1
 8009d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009da0:	4620      	mov	r0, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	f7f6 fa78 	bl	8000298 <__aeabi_dsub>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	ec51 0b19 	vmov	r0, r1, d9
 8009db0:	f7f6 fd54 	bl	800085c <__aeabi_ddiv>
 8009db4:	4632      	mov	r2, r6
 8009db6:	4604      	mov	r4, r0
 8009db8:	460d      	mov	r5, r1
 8009dba:	463b      	mov	r3, r7
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	f7f6 fc22 	bl	8000608 <__aeabi_dmul>
 8009dc4:	4632      	mov	r2, r6
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	f7f6 fa68 	bl	800029c <__adddf3>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	f7f6 fa60 	bl	8000298 <__aeabi_dsub>
 8009dd8:	4642      	mov	r2, r8
 8009dda:	464b      	mov	r3, r9
 8009ddc:	f7f6 fa5c 	bl	8000298 <__aeabi_dsub>
 8009de0:	460b      	mov	r3, r1
 8009de2:	4602      	mov	r2, r0
 8009de4:	493a      	ldr	r1, [pc, #232]	; (8009ed0 <__ieee754_pow+0xa48>)
 8009de6:	2000      	movs	r0, #0
 8009de8:	f7f6 fa56 	bl	8000298 <__aeabi_dsub>
 8009dec:	ec41 0b10 	vmov	d0, r0, r1
 8009df0:	ee10 3a90 	vmov	r3, s1
 8009df4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dfc:	da2b      	bge.n	8009e56 <__ieee754_pow+0x9ce>
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f000 ff8a 	bl	800ad18 <scalbn>
 8009e04:	ec51 0b10 	vmov	r0, r1, d0
 8009e08:	ec53 2b18 	vmov	r2, r3, d8
 8009e0c:	f7ff bbed 	b.w	80095ea <__ieee754_pow+0x162>
 8009e10:	4b30      	ldr	r3, [pc, #192]	; (8009ed4 <__ieee754_pow+0xa4c>)
 8009e12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e16:	429e      	cmp	r6, r3
 8009e18:	f77f af0c 	ble.w	8009c34 <__ieee754_pow+0x7ac>
 8009e1c:	4b2e      	ldr	r3, [pc, #184]	; (8009ed8 <__ieee754_pow+0xa50>)
 8009e1e:	440b      	add	r3, r1
 8009e20:	4303      	orrs	r3, r0
 8009e22:	d009      	beq.n	8009e38 <__ieee754_pow+0x9b0>
 8009e24:	ec51 0b18 	vmov	r0, r1, d8
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f7f6 fe5e 	bl	8000aec <__aeabi_dcmplt>
 8009e30:	3800      	subs	r0, #0
 8009e32:	bf18      	it	ne
 8009e34:	2001      	movne	r0, #1
 8009e36:	e447      	b.n	80096c8 <__ieee754_pow+0x240>
 8009e38:	4622      	mov	r2, r4
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	f7f6 fa2c 	bl	8000298 <__aeabi_dsub>
 8009e40:	4642      	mov	r2, r8
 8009e42:	464b      	mov	r3, r9
 8009e44:	f7f6 fe66 	bl	8000b14 <__aeabi_dcmpge>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f43f aef3 	beq.w	8009c34 <__ieee754_pow+0x7ac>
 8009e4e:	e7e9      	b.n	8009e24 <__ieee754_pow+0x99c>
 8009e50:	f04f 0a00 	mov.w	sl, #0
 8009e54:	e71a      	b.n	8009c8c <__ieee754_pow+0x804>
 8009e56:	ec51 0b10 	vmov	r0, r1, d0
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	e7d4      	b.n	8009e08 <__ieee754_pow+0x980>
 8009e5e:	491c      	ldr	r1, [pc, #112]	; (8009ed0 <__ieee754_pow+0xa48>)
 8009e60:	2000      	movs	r0, #0
 8009e62:	f7ff bb30 	b.w	80094c6 <__ieee754_pow+0x3e>
 8009e66:	2000      	movs	r0, #0
 8009e68:	2100      	movs	r1, #0
 8009e6a:	f7ff bb2c 	b.w	80094c6 <__ieee754_pow+0x3e>
 8009e6e:	4630      	mov	r0, r6
 8009e70:	4639      	mov	r1, r7
 8009e72:	f7ff bb28 	b.w	80094c6 <__ieee754_pow+0x3e>
 8009e76:	9204      	str	r2, [sp, #16]
 8009e78:	f7ff bb7a 	b.w	8009570 <__ieee754_pow+0xe8>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f7ff bb64 	b.w	800954a <__ieee754_pow+0xc2>
 8009e82:	bf00      	nop
 8009e84:	f3af 8000 	nop.w
 8009e88:	00000000 	.word	0x00000000
 8009e8c:	3fe62e43 	.word	0x3fe62e43
 8009e90:	fefa39ef 	.word	0xfefa39ef
 8009e94:	3fe62e42 	.word	0x3fe62e42
 8009e98:	0ca86c39 	.word	0x0ca86c39
 8009e9c:	be205c61 	.word	0xbe205c61
 8009ea0:	72bea4d0 	.word	0x72bea4d0
 8009ea4:	3e663769 	.word	0x3e663769
 8009ea8:	c5d26bf1 	.word	0xc5d26bf1
 8009eac:	3ebbbd41 	.word	0x3ebbbd41
 8009eb0:	af25de2c 	.word	0xaf25de2c
 8009eb4:	3f11566a 	.word	0x3f11566a
 8009eb8:	16bebd93 	.word	0x16bebd93
 8009ebc:	3f66c16c 	.word	0x3f66c16c
 8009ec0:	5555553e 	.word	0x5555553e
 8009ec4:	3fc55555 	.word	0x3fc55555
 8009ec8:	3fe00000 	.word	0x3fe00000
 8009ecc:	000fffff 	.word	0x000fffff
 8009ed0:	3ff00000 	.word	0x3ff00000
 8009ed4:	4090cbff 	.word	0x4090cbff
 8009ed8:	3f6f3400 	.word	0x3f6f3400
 8009edc:	652b82fe 	.word	0x652b82fe
 8009ee0:	3c971547 	.word	0x3c971547

08009ee4 <__ieee754_sqrt>:
 8009ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee8:	ec55 4b10 	vmov	r4, r5, d0
 8009eec:	4e55      	ldr	r6, [pc, #340]	; (800a044 <__ieee754_sqrt+0x160>)
 8009eee:	43ae      	bics	r6, r5
 8009ef0:	ee10 0a10 	vmov	r0, s0
 8009ef4:	ee10 3a10 	vmov	r3, s0
 8009ef8:	462a      	mov	r2, r5
 8009efa:	4629      	mov	r1, r5
 8009efc:	d110      	bne.n	8009f20 <__ieee754_sqrt+0x3c>
 8009efe:	ee10 2a10 	vmov	r2, s0
 8009f02:	462b      	mov	r3, r5
 8009f04:	f7f6 fb80 	bl	8000608 <__aeabi_dmul>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	4629      	mov	r1, r5
 8009f10:	f7f6 f9c4 	bl	800029c <__adddf3>
 8009f14:	4604      	mov	r4, r0
 8009f16:	460d      	mov	r5, r1
 8009f18:	ec45 4b10 	vmov	d0, r4, r5
 8009f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	dc10      	bgt.n	8009f46 <__ieee754_sqrt+0x62>
 8009f24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f28:	4330      	orrs	r0, r6
 8009f2a:	d0f5      	beq.n	8009f18 <__ieee754_sqrt+0x34>
 8009f2c:	b15d      	cbz	r5, 8009f46 <__ieee754_sqrt+0x62>
 8009f2e:	ee10 2a10 	vmov	r2, s0
 8009f32:	462b      	mov	r3, r5
 8009f34:	ee10 0a10 	vmov	r0, s0
 8009f38:	f7f6 f9ae 	bl	8000298 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	f7f6 fc8c 	bl	800085c <__aeabi_ddiv>
 8009f44:	e7e6      	b.n	8009f14 <__ieee754_sqrt+0x30>
 8009f46:	1512      	asrs	r2, r2, #20
 8009f48:	d074      	beq.n	800a034 <__ieee754_sqrt+0x150>
 8009f4a:	07d4      	lsls	r4, r2, #31
 8009f4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009f50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009f54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009f58:	bf5e      	ittt	pl
 8009f5a:	0fda      	lsrpl	r2, r3, #31
 8009f5c:	005b      	lslpl	r3, r3, #1
 8009f5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009f62:	2400      	movs	r4, #0
 8009f64:	0fda      	lsrs	r2, r3, #31
 8009f66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009f6a:	107f      	asrs	r7, r7, #1
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	2516      	movs	r5, #22
 8009f70:	4620      	mov	r0, r4
 8009f72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009f76:	1886      	adds	r6, r0, r2
 8009f78:	428e      	cmp	r6, r1
 8009f7a:	bfde      	ittt	le
 8009f7c:	1b89      	suble	r1, r1, r6
 8009f7e:	18b0      	addle	r0, r6, r2
 8009f80:	18a4      	addle	r4, r4, r2
 8009f82:	0049      	lsls	r1, r1, #1
 8009f84:	3d01      	subs	r5, #1
 8009f86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009f8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009f8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f92:	d1f0      	bne.n	8009f76 <__ieee754_sqrt+0x92>
 8009f94:	462a      	mov	r2, r5
 8009f96:	f04f 0e20 	mov.w	lr, #32
 8009f9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009f9e:	4281      	cmp	r1, r0
 8009fa0:	eb06 0c05 	add.w	ip, r6, r5
 8009fa4:	dc02      	bgt.n	8009fac <__ieee754_sqrt+0xc8>
 8009fa6:	d113      	bne.n	8009fd0 <__ieee754_sqrt+0xec>
 8009fa8:	459c      	cmp	ip, r3
 8009faa:	d811      	bhi.n	8009fd0 <__ieee754_sqrt+0xec>
 8009fac:	f1bc 0f00 	cmp.w	ip, #0
 8009fb0:	eb0c 0506 	add.w	r5, ip, r6
 8009fb4:	da43      	bge.n	800a03e <__ieee754_sqrt+0x15a>
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	db41      	blt.n	800a03e <__ieee754_sqrt+0x15a>
 8009fba:	f100 0801 	add.w	r8, r0, #1
 8009fbe:	1a09      	subs	r1, r1, r0
 8009fc0:	459c      	cmp	ip, r3
 8009fc2:	bf88      	it	hi
 8009fc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009fc8:	eba3 030c 	sub.w	r3, r3, ip
 8009fcc:	4432      	add	r2, r6
 8009fce:	4640      	mov	r0, r8
 8009fd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009fd4:	f1be 0e01 	subs.w	lr, lr, #1
 8009fd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009fdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fe0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009fe4:	d1db      	bne.n	8009f9e <__ieee754_sqrt+0xba>
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	d006      	beq.n	8009ff8 <__ieee754_sqrt+0x114>
 8009fea:	1c50      	adds	r0, r2, #1
 8009fec:	bf13      	iteet	ne
 8009fee:	3201      	addne	r2, #1
 8009ff0:	3401      	addeq	r4, #1
 8009ff2:	4672      	moveq	r2, lr
 8009ff4:	f022 0201 	bicne.w	r2, r2, #1
 8009ff8:	1063      	asrs	r3, r4, #1
 8009ffa:	0852      	lsrs	r2, r2, #1
 8009ffc:	07e1      	lsls	r1, r4, #31
 8009ffe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a002:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a006:	bf48      	it	mi
 800a008:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a00c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a010:	4614      	mov	r4, r2
 800a012:	e781      	b.n	8009f18 <__ieee754_sqrt+0x34>
 800a014:	0ad9      	lsrs	r1, r3, #11
 800a016:	3815      	subs	r0, #21
 800a018:	055b      	lsls	r3, r3, #21
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d0fa      	beq.n	800a014 <__ieee754_sqrt+0x130>
 800a01e:	02cd      	lsls	r5, r1, #11
 800a020:	d50a      	bpl.n	800a038 <__ieee754_sqrt+0x154>
 800a022:	f1c2 0420 	rsb	r4, r2, #32
 800a026:	fa23 f404 	lsr.w	r4, r3, r4
 800a02a:	1e55      	subs	r5, r2, #1
 800a02c:	4093      	lsls	r3, r2
 800a02e:	4321      	orrs	r1, r4
 800a030:	1b42      	subs	r2, r0, r5
 800a032:	e78a      	b.n	8009f4a <__ieee754_sqrt+0x66>
 800a034:	4610      	mov	r0, r2
 800a036:	e7f0      	b.n	800a01a <__ieee754_sqrt+0x136>
 800a038:	0049      	lsls	r1, r1, #1
 800a03a:	3201      	adds	r2, #1
 800a03c:	e7ef      	b.n	800a01e <__ieee754_sqrt+0x13a>
 800a03e:	4680      	mov	r8, r0
 800a040:	e7bd      	b.n	8009fbe <__ieee754_sqrt+0xda>
 800a042:	bf00      	nop
 800a044:	7ff00000 	.word	0x7ff00000

0800a048 <__ieee754_asinf>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	ee10 5a10 	vmov	r5, s0
 800a04e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a052:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a056:	ed2d 8b04 	vpush	{d8-d9}
 800a05a:	d10c      	bne.n	800a076 <__ieee754_asinf+0x2e>
 800a05c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a1d4 <__ieee754_asinf+0x18c>
 800a060:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a1d8 <__ieee754_asinf+0x190>
 800a064:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a068:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a06c:	eeb0 0a67 	vmov.f32	s0, s15
 800a070:	ecbd 8b04 	vpop	{d8-d9}
 800a074:	bd38      	pop	{r3, r4, r5, pc}
 800a076:	dd04      	ble.n	800a082 <__ieee754_asinf+0x3a>
 800a078:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a07c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a080:	e7f6      	b.n	800a070 <__ieee754_asinf+0x28>
 800a082:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a086:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a08a:	da0b      	bge.n	800a0a4 <__ieee754_asinf+0x5c>
 800a08c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a090:	da52      	bge.n	800a138 <__ieee754_asinf+0xf0>
 800a092:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a1dc <__ieee754_asinf+0x194>
 800a096:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a09a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a2:	dce5      	bgt.n	800a070 <__ieee754_asinf+0x28>
 800a0a4:	f7ff f8ae 	bl	8009204 <fabsf>
 800a0a8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a0ac:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a0b0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a0b4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a1e0 <__ieee754_asinf+0x198>
 800a0b8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a1e4 <__ieee754_asinf+0x19c>
 800a0bc:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a1e8 <__ieee754_asinf+0x1a0>
 800a0c0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a0c4:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a1ec <__ieee754_asinf+0x1a4>
 800a0c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0cc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a1f0 <__ieee754_asinf+0x1a8>
 800a0d0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a0d4:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a1f4 <__ieee754_asinf+0x1ac>
 800a0d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0dc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a1f8 <__ieee754_asinf+0x1b0>
 800a0e0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a0e4:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a1fc <__ieee754_asinf+0x1b4>
 800a0e8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a0ec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a200 <__ieee754_asinf+0x1b8>
 800a0f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a0f4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a204 <__ieee754_asinf+0x1bc>
 800a0f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a100:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a104:	f000 f9c2 	bl	800a48c <__ieee754_sqrtf>
 800a108:	4b3f      	ldr	r3, [pc, #252]	; (800a208 <__ieee754_asinf+0x1c0>)
 800a10a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a10e:	429c      	cmp	r4, r3
 800a110:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a114:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a118:	dd3d      	ble.n	800a196 <__ieee754_asinf+0x14e>
 800a11a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a11e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a20c <__ieee754_asinf+0x1c4>
 800a122:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a126:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a1d8 <__ieee754_asinf+0x190>
 800a12a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a12e:	2d00      	cmp	r5, #0
 800a130:	bfd8      	it	le
 800a132:	eeb1 0a40 	vnegle.f32	s0, s0
 800a136:	e79b      	b.n	800a070 <__ieee754_asinf+0x28>
 800a138:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a13c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a1e0 <__ieee754_asinf+0x198>
 800a140:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a1e4 <__ieee754_asinf+0x19c>
 800a144:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a1f8 <__ieee754_asinf+0x1b0>
 800a148:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a14c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a1ec <__ieee754_asinf+0x1a4>
 800a150:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a154:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a1f0 <__ieee754_asinf+0x1a8>
 800a158:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a15c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a1f4 <__ieee754_asinf+0x1ac>
 800a160:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a164:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a1e8 <__ieee754_asinf+0x1a0>
 800a168:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a16c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a1fc <__ieee754_asinf+0x1b4>
 800a170:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a174:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a200 <__ieee754_asinf+0x1b8>
 800a178:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a17c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a204 <__ieee754_asinf+0x1bc>
 800a180:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a184:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a188:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a18c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a190:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a194:	e76c      	b.n	800a070 <__ieee754_asinf+0x28>
 800a196:	ee10 3a10 	vmov	r3, s0
 800a19a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a19e:	f023 030f 	bic.w	r3, r3, #15
 800a1a2:	ee07 3a10 	vmov	s14, r3
 800a1a6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a1aa:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a1ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1b2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a1b6:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a1d4 <__ieee754_asinf+0x18c>
 800a1ba:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a1be:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a1c2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a210 <__ieee754_asinf+0x1c8>
 800a1c6:	eeb0 6a40 	vmov.f32	s12, s0
 800a1ca:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a1ce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a1d2:	e7aa      	b.n	800a12a <__ieee754_asinf+0xe2>
 800a1d4:	b33bbd2e 	.word	0xb33bbd2e
 800a1d8:	3fc90fdb 	.word	0x3fc90fdb
 800a1dc:	7149f2ca 	.word	0x7149f2ca
 800a1e0:	3811ef08 	.word	0x3811ef08
 800a1e4:	3a4f7f04 	.word	0x3a4f7f04
 800a1e8:	3e2aaaab 	.word	0x3e2aaaab
 800a1ec:	bd241146 	.word	0xbd241146
 800a1f0:	3e4e0aa8 	.word	0x3e4e0aa8
 800a1f4:	bea6b090 	.word	0xbea6b090
 800a1f8:	3d9dc62e 	.word	0x3d9dc62e
 800a1fc:	bf303361 	.word	0xbf303361
 800a200:	4001572d 	.word	0x4001572d
 800a204:	c019d139 	.word	0xc019d139
 800a208:	3f799999 	.word	0x3f799999
 800a20c:	333bbd2e 	.word	0x333bbd2e
 800a210:	3f490fdb 	.word	0x3f490fdb

0800a214 <__ieee754_rem_pio2f>:
 800a214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a216:	ee10 6a10 	vmov	r6, s0
 800a21a:	4b8e      	ldr	r3, [pc, #568]	; (800a454 <__ieee754_rem_pio2f+0x240>)
 800a21c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a220:	429d      	cmp	r5, r3
 800a222:	b087      	sub	sp, #28
 800a224:	eef0 7a40 	vmov.f32	s15, s0
 800a228:	4604      	mov	r4, r0
 800a22a:	dc05      	bgt.n	800a238 <__ieee754_rem_pio2f+0x24>
 800a22c:	2300      	movs	r3, #0
 800a22e:	ed80 0a00 	vstr	s0, [r0]
 800a232:	6043      	str	r3, [r0, #4]
 800a234:	2000      	movs	r0, #0
 800a236:	e01a      	b.n	800a26e <__ieee754_rem_pio2f+0x5a>
 800a238:	4b87      	ldr	r3, [pc, #540]	; (800a458 <__ieee754_rem_pio2f+0x244>)
 800a23a:	429d      	cmp	r5, r3
 800a23c:	dc46      	bgt.n	800a2cc <__ieee754_rem_pio2f+0xb8>
 800a23e:	2e00      	cmp	r6, #0
 800a240:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a45c <__ieee754_rem_pio2f+0x248>
 800a244:	4b86      	ldr	r3, [pc, #536]	; (800a460 <__ieee754_rem_pio2f+0x24c>)
 800a246:	f025 050f 	bic.w	r5, r5, #15
 800a24a:	dd1f      	ble.n	800a28c <__ieee754_rem_pio2f+0x78>
 800a24c:	429d      	cmp	r5, r3
 800a24e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a252:	d00e      	beq.n	800a272 <__ieee754_rem_pio2f+0x5e>
 800a254:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a464 <__ieee754_rem_pio2f+0x250>
 800a258:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a25c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a260:	ed80 0a00 	vstr	s0, [r0]
 800a264:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a268:	2001      	movs	r0, #1
 800a26a:	edc4 7a01 	vstr	s15, [r4, #4]
 800a26e:	b007      	add	sp, #28
 800a270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a272:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a468 <__ieee754_rem_pio2f+0x254>
 800a276:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a46c <__ieee754_rem_pio2f+0x258>
 800a27a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a27e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a282:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a286:	edc0 6a00 	vstr	s13, [r0]
 800a28a:	e7eb      	b.n	800a264 <__ieee754_rem_pio2f+0x50>
 800a28c:	429d      	cmp	r5, r3
 800a28e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a292:	d00e      	beq.n	800a2b2 <__ieee754_rem_pio2f+0x9e>
 800a294:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a464 <__ieee754_rem_pio2f+0x250>
 800a298:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a29c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2a0:	ed80 0a00 	vstr	s0, [r0]
 800a2a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	edc4 7a01 	vstr	s15, [r4, #4]
 800a2b0:	e7dd      	b.n	800a26e <__ieee754_rem_pio2f+0x5a>
 800a2b2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a468 <__ieee754_rem_pio2f+0x254>
 800a2b6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a46c <__ieee754_rem_pio2f+0x258>
 800a2ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2be:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a2c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a2c6:	edc0 6a00 	vstr	s13, [r0]
 800a2ca:	e7eb      	b.n	800a2a4 <__ieee754_rem_pio2f+0x90>
 800a2cc:	4b68      	ldr	r3, [pc, #416]	; (800a470 <__ieee754_rem_pio2f+0x25c>)
 800a2ce:	429d      	cmp	r5, r3
 800a2d0:	dc72      	bgt.n	800a3b8 <__ieee754_rem_pio2f+0x1a4>
 800a2d2:	f7fe ff97 	bl	8009204 <fabsf>
 800a2d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a474 <__ieee754_rem_pio2f+0x260>
 800a2da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a2de:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a2e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a2ea:	ee17 0a90 	vmov	r0, s15
 800a2ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a45c <__ieee754_rem_pio2f+0x248>
 800a2f2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a2f6:	281f      	cmp	r0, #31
 800a2f8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a464 <__ieee754_rem_pio2f+0x250>
 800a2fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a300:	eeb1 6a47 	vneg.f32	s12, s14
 800a304:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a308:	ee16 2a90 	vmov	r2, s13
 800a30c:	dc1c      	bgt.n	800a348 <__ieee754_rem_pio2f+0x134>
 800a30e:	495a      	ldr	r1, [pc, #360]	; (800a478 <__ieee754_rem_pio2f+0x264>)
 800a310:	1e47      	subs	r7, r0, #1
 800a312:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a316:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a31a:	428b      	cmp	r3, r1
 800a31c:	d014      	beq.n	800a348 <__ieee754_rem_pio2f+0x134>
 800a31e:	6022      	str	r2, [r4, #0]
 800a320:	ed94 7a00 	vldr	s14, [r4]
 800a324:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a328:	2e00      	cmp	r6, #0
 800a32a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a32e:	ed84 0a01 	vstr	s0, [r4, #4]
 800a332:	da9c      	bge.n	800a26e <__ieee754_rem_pio2f+0x5a>
 800a334:	eeb1 7a47 	vneg.f32	s14, s14
 800a338:	eeb1 0a40 	vneg.f32	s0, s0
 800a33c:	ed84 7a00 	vstr	s14, [r4]
 800a340:	ed84 0a01 	vstr	s0, [r4, #4]
 800a344:	4240      	negs	r0, r0
 800a346:	e792      	b.n	800a26e <__ieee754_rem_pio2f+0x5a>
 800a348:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a34c:	15eb      	asrs	r3, r5, #23
 800a34e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a352:	2d08      	cmp	r5, #8
 800a354:	dde3      	ble.n	800a31e <__ieee754_rem_pio2f+0x10a>
 800a356:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a468 <__ieee754_rem_pio2f+0x254>
 800a35a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a46c <__ieee754_rem_pio2f+0x258>
 800a35e:	eef0 6a40 	vmov.f32	s13, s0
 800a362:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a366:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a36a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a36e:	eef0 7a40 	vmov.f32	s15, s0
 800a372:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a376:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a37a:	ee15 2a90 	vmov	r2, s11
 800a37e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a382:	1a5b      	subs	r3, r3, r1
 800a384:	2b19      	cmp	r3, #25
 800a386:	dc04      	bgt.n	800a392 <__ieee754_rem_pio2f+0x17e>
 800a388:	edc4 5a00 	vstr	s11, [r4]
 800a38c:	eeb0 0a66 	vmov.f32	s0, s13
 800a390:	e7c6      	b.n	800a320 <__ieee754_rem_pio2f+0x10c>
 800a392:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a47c <__ieee754_rem_pio2f+0x268>
 800a396:	eeb0 0a66 	vmov.f32	s0, s13
 800a39a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a39e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a3a2:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a480 <__ieee754_rem_pio2f+0x26c>
 800a3a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a3aa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a3ae:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a3b2:	ed84 7a00 	vstr	s14, [r4]
 800a3b6:	e7b3      	b.n	800a320 <__ieee754_rem_pio2f+0x10c>
 800a3b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a3bc:	db06      	blt.n	800a3cc <__ieee754_rem_pio2f+0x1b8>
 800a3be:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a3c2:	edc0 7a01 	vstr	s15, [r0, #4]
 800a3c6:	edc0 7a00 	vstr	s15, [r0]
 800a3ca:	e733      	b.n	800a234 <__ieee754_rem_pio2f+0x20>
 800a3cc:	15ea      	asrs	r2, r5, #23
 800a3ce:	3a86      	subs	r2, #134	; 0x86
 800a3d0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a3d4:	ee07 3a90 	vmov	s15, r3
 800a3d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a3dc:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a484 <__ieee754_rem_pio2f+0x270>
 800a3e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a3e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3e8:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a3ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a3f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a3f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a3f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3fc:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a400:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a404:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	edcd 7a05 	vstr	s15, [sp, #20]
 800a410:	d11e      	bne.n	800a450 <__ieee754_rem_pio2f+0x23c>
 800a412:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41a:	bf14      	ite	ne
 800a41c:	2302      	movne	r3, #2
 800a41e:	2301      	moveq	r3, #1
 800a420:	4919      	ldr	r1, [pc, #100]	; (800a488 <__ieee754_rem_pio2f+0x274>)
 800a422:	9101      	str	r1, [sp, #4]
 800a424:	2102      	movs	r1, #2
 800a426:	9100      	str	r1, [sp, #0]
 800a428:	a803      	add	r0, sp, #12
 800a42a:	4621      	mov	r1, r4
 800a42c:	f000 f892 	bl	800a554 <__kernel_rem_pio2f>
 800a430:	2e00      	cmp	r6, #0
 800a432:	f6bf af1c 	bge.w	800a26e <__ieee754_rem_pio2f+0x5a>
 800a436:	edd4 7a00 	vldr	s15, [r4]
 800a43a:	eef1 7a67 	vneg.f32	s15, s15
 800a43e:	edc4 7a00 	vstr	s15, [r4]
 800a442:	edd4 7a01 	vldr	s15, [r4, #4]
 800a446:	eef1 7a67 	vneg.f32	s15, s15
 800a44a:	edc4 7a01 	vstr	s15, [r4, #4]
 800a44e:	e779      	b.n	800a344 <__ieee754_rem_pio2f+0x130>
 800a450:	2303      	movs	r3, #3
 800a452:	e7e5      	b.n	800a420 <__ieee754_rem_pio2f+0x20c>
 800a454:	3f490fd8 	.word	0x3f490fd8
 800a458:	4016cbe3 	.word	0x4016cbe3
 800a45c:	3fc90f80 	.word	0x3fc90f80
 800a460:	3fc90fd0 	.word	0x3fc90fd0
 800a464:	37354443 	.word	0x37354443
 800a468:	37354400 	.word	0x37354400
 800a46c:	2e85a308 	.word	0x2e85a308
 800a470:	43490f80 	.word	0x43490f80
 800a474:	3f22f984 	.word	0x3f22f984
 800a478:	0800b488 	.word	0x0800b488
 800a47c:	2e85a300 	.word	0x2e85a300
 800a480:	248d3132 	.word	0x248d3132
 800a484:	43800000 	.word	0x43800000
 800a488:	0800b508 	.word	0x0800b508

0800a48c <__ieee754_sqrtf>:
 800a48c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a490:	4770      	bx	lr
	...

0800a494 <__kernel_cosf>:
 800a494:	ee10 3a10 	vmov	r3, s0
 800a498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a49c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a4a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4a4:	da05      	bge.n	800a4b2 <__kernel_cosf+0x1e>
 800a4a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a4aa:	ee17 2a90 	vmov	r2, s15
 800a4ae:	2a00      	cmp	r2, #0
 800a4b0:	d03d      	beq.n	800a52e <__kernel_cosf+0x9a>
 800a4b2:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a4b6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a534 <__kernel_cosf+0xa0>
 800a4ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a538 <__kernel_cosf+0xa4>
 800a4be:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a53c <__kernel_cosf+0xa8>
 800a4c2:	4a1f      	ldr	r2, [pc, #124]	; (800a540 <__kernel_cosf+0xac>)
 800a4c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a544 <__kernel_cosf+0xb0>
 800a4ce:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a4d2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a548 <__kernel_cosf+0xb4>
 800a4d6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a4da:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a54c <__kernel_cosf+0xb8>
 800a4de:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a4e2:	eeb0 7a66 	vmov.f32	s14, s13
 800a4e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a4ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a4ee:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a4f2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a4f6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a4fa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a4fe:	dc04      	bgt.n	800a50a <__kernel_cosf+0x76>
 800a500:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a504:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a508:	4770      	bx	lr
 800a50a:	4a11      	ldr	r2, [pc, #68]	; (800a550 <__kernel_cosf+0xbc>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	bfda      	itte	le
 800a510:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a514:	ee06 3a90 	vmovle	s13, r3
 800a518:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a51c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a520:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a528:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a52c:	4770      	bx	lr
 800a52e:	eeb0 0a46 	vmov.f32	s0, s12
 800a532:	4770      	bx	lr
 800a534:	ad47d74e 	.word	0xad47d74e
 800a538:	310f74f6 	.word	0x310f74f6
 800a53c:	3d2aaaab 	.word	0x3d2aaaab
 800a540:	3e999999 	.word	0x3e999999
 800a544:	b493f27c 	.word	0xb493f27c
 800a548:	37d00d01 	.word	0x37d00d01
 800a54c:	bab60b61 	.word	0xbab60b61
 800a550:	3f480000 	.word	0x3f480000

0800a554 <__kernel_rem_pio2f>:
 800a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a558:	ed2d 8b04 	vpush	{d8-d9}
 800a55c:	b0d9      	sub	sp, #356	; 0x164
 800a55e:	4688      	mov	r8, r1
 800a560:	9002      	str	r0, [sp, #8]
 800a562:	49bb      	ldr	r1, [pc, #748]	; (800a850 <__kernel_rem_pio2f+0x2fc>)
 800a564:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a56c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a570:	1e59      	subs	r1, r3, #1
 800a572:	1d13      	adds	r3, r2, #4
 800a574:	db27      	blt.n	800a5c6 <__kernel_rem_pio2f+0x72>
 800a576:	f1b2 0b03 	subs.w	fp, r2, #3
 800a57a:	bf48      	it	mi
 800a57c:	f102 0b04 	addmi.w	fp, r2, #4
 800a580:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a584:	1c45      	adds	r5, r0, #1
 800a586:	00ec      	lsls	r4, r5, #3
 800a588:	1a47      	subs	r7, r0, r1
 800a58a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a860 <__kernel_rem_pio2f+0x30c>
 800a58e:	9403      	str	r4, [sp, #12]
 800a590:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a594:	eb0a 0c01 	add.w	ip, sl, r1
 800a598:	ae1c      	add	r6, sp, #112	; 0x70
 800a59a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a59e:	2400      	movs	r4, #0
 800a5a0:	4564      	cmp	r4, ip
 800a5a2:	dd12      	ble.n	800a5ca <__kernel_rem_pio2f+0x76>
 800a5a4:	9b01      	ldr	r3, [sp, #4]
 800a5a6:	ac1c      	add	r4, sp, #112	; 0x70
 800a5a8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a5ac:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a5b0:	f04f 0c00 	mov.w	ip, #0
 800a5b4:	45d4      	cmp	ip, sl
 800a5b6:	dc27      	bgt.n	800a608 <__kernel_rem_pio2f+0xb4>
 800a5b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a5bc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a860 <__kernel_rem_pio2f+0x30c>
 800a5c0:	4627      	mov	r7, r4
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	e016      	b.n	800a5f4 <__kernel_rem_pio2f+0xa0>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	e7dc      	b.n	800a584 <__kernel_rem_pio2f+0x30>
 800a5ca:	42e7      	cmn	r7, r4
 800a5cc:	bf5d      	ittte	pl
 800a5ce:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a5d2:	ee07 3a90 	vmovpl	s15, r3
 800a5d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a5da:	eef0 7a47 	vmovmi.f32	s15, s14
 800a5de:	ece6 7a01 	vstmia	r6!, {s15}
 800a5e2:	3401      	adds	r4, #1
 800a5e4:	e7dc      	b.n	800a5a0 <__kernel_rem_pio2f+0x4c>
 800a5e6:	ecf9 6a01 	vldmia	r9!, {s13}
 800a5ea:	ed97 7a00 	vldr	s14, [r7]
 800a5ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a5f2:	3601      	adds	r6, #1
 800a5f4:	428e      	cmp	r6, r1
 800a5f6:	f1a7 0704 	sub.w	r7, r7, #4
 800a5fa:	ddf4      	ble.n	800a5e6 <__kernel_rem_pio2f+0x92>
 800a5fc:	eceb 7a01 	vstmia	fp!, {s15}
 800a600:	f10c 0c01 	add.w	ip, ip, #1
 800a604:	3404      	adds	r4, #4
 800a606:	e7d5      	b.n	800a5b4 <__kernel_rem_pio2f+0x60>
 800a608:	ab08      	add	r3, sp, #32
 800a60a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a60e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a85c <__kernel_rem_pio2f+0x308>
 800a612:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a858 <__kernel_rem_pio2f+0x304>
 800a616:	9304      	str	r3, [sp, #16]
 800a618:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a61c:	4656      	mov	r6, sl
 800a61e:	00b3      	lsls	r3, r6, #2
 800a620:	9305      	str	r3, [sp, #20]
 800a622:	ab58      	add	r3, sp, #352	; 0x160
 800a624:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a628:	ac08      	add	r4, sp, #32
 800a62a:	ab44      	add	r3, sp, #272	; 0x110
 800a62c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a630:	46a4      	mov	ip, r4
 800a632:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a636:	4637      	mov	r7, r6
 800a638:	2f00      	cmp	r7, #0
 800a63a:	f1a0 0004 	sub.w	r0, r0, #4
 800a63e:	dc4f      	bgt.n	800a6e0 <__kernel_rem_pio2f+0x18c>
 800a640:	4628      	mov	r0, r5
 800a642:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a646:	f000 fc35 	bl	800aeb4 <scalbnf>
 800a64a:	eeb0 8a40 	vmov.f32	s16, s0
 800a64e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a652:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a656:	f000 fbe5 	bl	800ae24 <floorf>
 800a65a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a65e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a662:	2d00      	cmp	r5, #0
 800a664:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a668:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a66c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a670:	ee17 9a90 	vmov	r9, s15
 800a674:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a678:	dd44      	ble.n	800a704 <__kernel_rem_pio2f+0x1b0>
 800a67a:	f106 3cff 	add.w	ip, r6, #4294967295
 800a67e:	ab08      	add	r3, sp, #32
 800a680:	f1c5 0e08 	rsb	lr, r5, #8
 800a684:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a688:	fa47 f00e 	asr.w	r0, r7, lr
 800a68c:	4481      	add	r9, r0
 800a68e:	fa00 f00e 	lsl.w	r0, r0, lr
 800a692:	1a3f      	subs	r7, r7, r0
 800a694:	f1c5 0007 	rsb	r0, r5, #7
 800a698:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a69c:	4107      	asrs	r7, r0
 800a69e:	2f00      	cmp	r7, #0
 800a6a0:	dd3f      	ble.n	800a722 <__kernel_rem_pio2f+0x1ce>
 800a6a2:	f04f 0e00 	mov.w	lr, #0
 800a6a6:	f109 0901 	add.w	r9, r9, #1
 800a6aa:	4673      	mov	r3, lr
 800a6ac:	4576      	cmp	r6, lr
 800a6ae:	dc6b      	bgt.n	800a788 <__kernel_rem_pio2f+0x234>
 800a6b0:	2d00      	cmp	r5, #0
 800a6b2:	dd04      	ble.n	800a6be <__kernel_rem_pio2f+0x16a>
 800a6b4:	2d01      	cmp	r5, #1
 800a6b6:	d078      	beq.n	800a7aa <__kernel_rem_pio2f+0x256>
 800a6b8:	2d02      	cmp	r5, #2
 800a6ba:	f000 8081 	beq.w	800a7c0 <__kernel_rem_pio2f+0x26c>
 800a6be:	2f02      	cmp	r7, #2
 800a6c0:	d12f      	bne.n	800a722 <__kernel_rem_pio2f+0x1ce>
 800a6c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a6c6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a6ca:	b353      	cbz	r3, 800a722 <__kernel_rem_pio2f+0x1ce>
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a6d2:	f000 fbef 	bl	800aeb4 <scalbnf>
 800a6d6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a6da:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a6de:	e020      	b.n	800a722 <__kernel_rem_pio2f+0x1ce>
 800a6e0:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a6e4:	3f01      	subs	r7, #1
 800a6e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6ee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a6f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a6f6:	ecac 0a01 	vstmia	ip!, {s0}
 800a6fa:	ed90 0a00 	vldr	s0, [r0]
 800a6fe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a702:	e799      	b.n	800a638 <__kernel_rem_pio2f+0xe4>
 800a704:	d105      	bne.n	800a712 <__kernel_rem_pio2f+0x1be>
 800a706:	1e70      	subs	r0, r6, #1
 800a708:	ab08      	add	r3, sp, #32
 800a70a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a70e:	11ff      	asrs	r7, r7, #7
 800a710:	e7c5      	b.n	800a69e <__kernel_rem_pio2f+0x14a>
 800a712:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a716:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a71e:	da31      	bge.n	800a784 <__kernel_rem_pio2f+0x230>
 800a720:	2700      	movs	r7, #0
 800a722:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72a:	f040 809b 	bne.w	800a864 <__kernel_rem_pio2f+0x310>
 800a72e:	1e74      	subs	r4, r6, #1
 800a730:	46a4      	mov	ip, r4
 800a732:	2000      	movs	r0, #0
 800a734:	45d4      	cmp	ip, sl
 800a736:	da4a      	bge.n	800a7ce <__kernel_rem_pio2f+0x27a>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d07a      	beq.n	800a832 <__kernel_rem_pio2f+0x2de>
 800a73c:	ab08      	add	r3, sp, #32
 800a73e:	3d08      	subs	r5, #8
 800a740:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 8081 	beq.w	800a84c <__kernel_rem_pio2f+0x2f8>
 800a74a:	4628      	mov	r0, r5
 800a74c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a750:	00a5      	lsls	r5, r4, #2
 800a752:	f000 fbaf 	bl	800aeb4 <scalbnf>
 800a756:	aa44      	add	r2, sp, #272	; 0x110
 800a758:	1d2b      	adds	r3, r5, #4
 800a75a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a85c <__kernel_rem_pio2f+0x308>
 800a75e:	18d1      	adds	r1, r2, r3
 800a760:	4622      	mov	r2, r4
 800a762:	2a00      	cmp	r2, #0
 800a764:	f280 80ae 	bge.w	800a8c4 <__kernel_rem_pio2f+0x370>
 800a768:	4622      	mov	r2, r4
 800a76a:	2a00      	cmp	r2, #0
 800a76c:	f2c0 80cc 	blt.w	800a908 <__kernel_rem_pio2f+0x3b4>
 800a770:	a944      	add	r1, sp, #272	; 0x110
 800a772:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a776:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a854 <__kernel_rem_pio2f+0x300>
 800a77a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a860 <__kernel_rem_pio2f+0x30c>
 800a77e:	2000      	movs	r0, #0
 800a780:	1aa1      	subs	r1, r4, r2
 800a782:	e0b6      	b.n	800a8f2 <__kernel_rem_pio2f+0x39e>
 800a784:	2702      	movs	r7, #2
 800a786:	e78c      	b.n	800a6a2 <__kernel_rem_pio2f+0x14e>
 800a788:	6820      	ldr	r0, [r4, #0]
 800a78a:	b94b      	cbnz	r3, 800a7a0 <__kernel_rem_pio2f+0x24c>
 800a78c:	b118      	cbz	r0, 800a796 <__kernel_rem_pio2f+0x242>
 800a78e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a792:	6020      	str	r0, [r4, #0]
 800a794:	2001      	movs	r0, #1
 800a796:	f10e 0e01 	add.w	lr, lr, #1
 800a79a:	3404      	adds	r4, #4
 800a79c:	4603      	mov	r3, r0
 800a79e:	e785      	b.n	800a6ac <__kernel_rem_pio2f+0x158>
 800a7a0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a7a4:	6020      	str	r0, [r4, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	e7f5      	b.n	800a796 <__kernel_rem_pio2f+0x242>
 800a7aa:	1e74      	subs	r4, r6, #1
 800a7ac:	a808      	add	r0, sp, #32
 800a7ae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a7b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a7b6:	f10d 0c20 	add.w	ip, sp, #32
 800a7ba:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a7be:	e77e      	b.n	800a6be <__kernel_rem_pio2f+0x16a>
 800a7c0:	1e74      	subs	r4, r6, #1
 800a7c2:	a808      	add	r0, sp, #32
 800a7c4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a7c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a7cc:	e7f3      	b.n	800a7b6 <__kernel_rem_pio2f+0x262>
 800a7ce:	ab08      	add	r3, sp, #32
 800a7d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a7d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a7d8:	4318      	orrs	r0, r3
 800a7da:	e7ab      	b.n	800a734 <__kernel_rem_pio2f+0x1e0>
 800a7dc:	f10c 0c01 	add.w	ip, ip, #1
 800a7e0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a7e4:	2c00      	cmp	r4, #0
 800a7e6:	d0f9      	beq.n	800a7dc <__kernel_rem_pio2f+0x288>
 800a7e8:	9b05      	ldr	r3, [sp, #20]
 800a7ea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a7ee:	eb0d 0003 	add.w	r0, sp, r3
 800a7f2:	9b01      	ldr	r3, [sp, #4]
 800a7f4:	18f4      	adds	r4, r6, r3
 800a7f6:	ab1c      	add	r3, sp, #112	; 0x70
 800a7f8:	1c77      	adds	r7, r6, #1
 800a7fa:	384c      	subs	r0, #76	; 0x4c
 800a7fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a800:	4466      	add	r6, ip
 800a802:	42be      	cmp	r6, r7
 800a804:	f6ff af0b 	blt.w	800a61e <__kernel_rem_pio2f+0xca>
 800a808:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a80c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a810:	ee07 3a90 	vmov	s15, r3
 800a814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a818:	f04f 0c00 	mov.w	ip, #0
 800a81c:	ece4 7a01 	vstmia	r4!, {s15}
 800a820:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a860 <__kernel_rem_pio2f+0x30c>
 800a824:	46a1      	mov	r9, r4
 800a826:	458c      	cmp	ip, r1
 800a828:	dd07      	ble.n	800a83a <__kernel_rem_pio2f+0x2e6>
 800a82a:	ece0 7a01 	vstmia	r0!, {s15}
 800a82e:	3701      	adds	r7, #1
 800a830:	e7e7      	b.n	800a802 <__kernel_rem_pio2f+0x2ae>
 800a832:	9804      	ldr	r0, [sp, #16]
 800a834:	f04f 0c01 	mov.w	ip, #1
 800a838:	e7d2      	b.n	800a7e0 <__kernel_rem_pio2f+0x28c>
 800a83a:	ecfe 6a01 	vldmia	lr!, {s13}
 800a83e:	ed39 7a01 	vldmdb	r9!, {s14}
 800a842:	f10c 0c01 	add.w	ip, ip, #1
 800a846:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a84a:	e7ec      	b.n	800a826 <__kernel_rem_pio2f+0x2d2>
 800a84c:	3c01      	subs	r4, #1
 800a84e:	e775      	b.n	800a73c <__kernel_rem_pio2f+0x1e8>
 800a850:	0800b84c 	.word	0x0800b84c
 800a854:	0800b820 	.word	0x0800b820
 800a858:	43800000 	.word	0x43800000
 800a85c:	3b800000 	.word	0x3b800000
 800a860:	00000000 	.word	0x00000000
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	eeb0 0a48 	vmov.f32	s0, s16
 800a86a:	1a98      	subs	r0, r3, r2
 800a86c:	f000 fb22 	bl	800aeb4 <scalbnf>
 800a870:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a858 <__kernel_rem_pio2f+0x304>
 800a874:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a87c:	db19      	blt.n	800a8b2 <__kernel_rem_pio2f+0x35e>
 800a87e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a85c <__kernel_rem_pio2f+0x308>
 800a882:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a886:	aa08      	add	r2, sp, #32
 800a888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a88c:	1c74      	adds	r4, r6, #1
 800a88e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a892:	3508      	adds	r5, #8
 800a894:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a89c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a8a0:	ee10 3a10 	vmov	r3, s0
 800a8a4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a8a8:	ee17 3a90 	vmov	r3, s15
 800a8ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a8b0:	e74b      	b.n	800a74a <__kernel_rem_pio2f+0x1f6>
 800a8b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a8b6:	aa08      	add	r2, sp, #32
 800a8b8:	ee10 3a10 	vmov	r3, s0
 800a8bc:	4634      	mov	r4, r6
 800a8be:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a8c2:	e742      	b.n	800a74a <__kernel_rem_pio2f+0x1f6>
 800a8c4:	a808      	add	r0, sp, #32
 800a8c6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a8ca:	9001      	str	r0, [sp, #4]
 800a8cc:	ee07 0a90 	vmov	s15, r0
 800a8d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8d4:	3a01      	subs	r2, #1
 800a8d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a8da:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a8de:	ed61 7a01 	vstmdb	r1!, {s15}
 800a8e2:	e73e      	b.n	800a762 <__kernel_rem_pio2f+0x20e>
 800a8e4:	ecfc 6a01 	vldmia	ip!, {s13}
 800a8e8:	ecb6 7a01 	vldmia	r6!, {s14}
 800a8ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	4550      	cmp	r0, sl
 800a8f4:	dc01      	bgt.n	800a8fa <__kernel_rem_pio2f+0x3a6>
 800a8f6:	4288      	cmp	r0, r1
 800a8f8:	ddf4      	ble.n	800a8e4 <__kernel_rem_pio2f+0x390>
 800a8fa:	a858      	add	r0, sp, #352	; 0x160
 800a8fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a900:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a904:	3a01      	subs	r2, #1
 800a906:	e730      	b.n	800a76a <__kernel_rem_pio2f+0x216>
 800a908:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800a90a:	2a02      	cmp	r2, #2
 800a90c:	dc09      	bgt.n	800a922 <__kernel_rem_pio2f+0x3ce>
 800a90e:	2a00      	cmp	r2, #0
 800a910:	dc2a      	bgt.n	800a968 <__kernel_rem_pio2f+0x414>
 800a912:	d043      	beq.n	800a99c <__kernel_rem_pio2f+0x448>
 800a914:	f009 0007 	and.w	r0, r9, #7
 800a918:	b059      	add	sp, #356	; 0x164
 800a91a:	ecbd 8b04 	vpop	{d8-d9}
 800a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a922:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a924:	2b03      	cmp	r3, #3
 800a926:	d1f5      	bne.n	800a914 <__kernel_rem_pio2f+0x3c0>
 800a928:	ab30      	add	r3, sp, #192	; 0xc0
 800a92a:	442b      	add	r3, r5
 800a92c:	461a      	mov	r2, r3
 800a92e:	4619      	mov	r1, r3
 800a930:	4620      	mov	r0, r4
 800a932:	2800      	cmp	r0, #0
 800a934:	f1a1 0104 	sub.w	r1, r1, #4
 800a938:	dc51      	bgt.n	800a9de <__kernel_rem_pio2f+0x48a>
 800a93a:	4621      	mov	r1, r4
 800a93c:	2901      	cmp	r1, #1
 800a93e:	f1a2 0204 	sub.w	r2, r2, #4
 800a942:	dc5c      	bgt.n	800a9fe <__kernel_rem_pio2f+0x4aa>
 800a944:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a860 <__kernel_rem_pio2f+0x30c>
 800a948:	3304      	adds	r3, #4
 800a94a:	2c01      	cmp	r4, #1
 800a94c:	dc67      	bgt.n	800aa1e <__kernel_rem_pio2f+0x4ca>
 800a94e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800a952:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800a956:	2f00      	cmp	r7, #0
 800a958:	d167      	bne.n	800aa2a <__kernel_rem_pio2f+0x4d6>
 800a95a:	edc8 6a00 	vstr	s13, [r8]
 800a95e:	ed88 7a01 	vstr	s14, [r8, #4]
 800a962:	edc8 7a02 	vstr	s15, [r8, #8]
 800a966:	e7d5      	b.n	800a914 <__kernel_rem_pio2f+0x3c0>
 800a968:	aa30      	add	r2, sp, #192	; 0xc0
 800a96a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a860 <__kernel_rem_pio2f+0x30c>
 800a96e:	4413      	add	r3, r2
 800a970:	4622      	mov	r2, r4
 800a972:	2a00      	cmp	r2, #0
 800a974:	da24      	bge.n	800a9c0 <__kernel_rem_pio2f+0x46c>
 800a976:	b34f      	cbz	r7, 800a9cc <__kernel_rem_pio2f+0x478>
 800a978:	eef1 7a47 	vneg.f32	s15, s14
 800a97c:	edc8 7a00 	vstr	s15, [r8]
 800a980:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800a984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a988:	aa31      	add	r2, sp, #196	; 0xc4
 800a98a:	2301      	movs	r3, #1
 800a98c:	429c      	cmp	r4, r3
 800a98e:	da20      	bge.n	800a9d2 <__kernel_rem_pio2f+0x47e>
 800a990:	b10f      	cbz	r7, 800a996 <__kernel_rem_pio2f+0x442>
 800a992:	eef1 7a67 	vneg.f32	s15, s15
 800a996:	edc8 7a01 	vstr	s15, [r8, #4]
 800a99a:	e7bb      	b.n	800a914 <__kernel_rem_pio2f+0x3c0>
 800a99c:	aa30      	add	r2, sp, #192	; 0xc0
 800a99e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a860 <__kernel_rem_pio2f+0x30c>
 800a9a2:	4413      	add	r3, r2
 800a9a4:	2c00      	cmp	r4, #0
 800a9a6:	da05      	bge.n	800a9b4 <__kernel_rem_pio2f+0x460>
 800a9a8:	b10f      	cbz	r7, 800a9ae <__kernel_rem_pio2f+0x45a>
 800a9aa:	eef1 7a67 	vneg.f32	s15, s15
 800a9ae:	edc8 7a00 	vstr	s15, [r8]
 800a9b2:	e7af      	b.n	800a914 <__kernel_rem_pio2f+0x3c0>
 800a9b4:	ed33 7a01 	vldmdb	r3!, {s14}
 800a9b8:	3c01      	subs	r4, #1
 800a9ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9be:	e7f1      	b.n	800a9a4 <__kernel_rem_pio2f+0x450>
 800a9c0:	ed73 7a01 	vldmdb	r3!, {s15}
 800a9c4:	3a01      	subs	r2, #1
 800a9c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9ca:	e7d2      	b.n	800a972 <__kernel_rem_pio2f+0x41e>
 800a9cc:	eef0 7a47 	vmov.f32	s15, s14
 800a9d0:	e7d4      	b.n	800a97c <__kernel_rem_pio2f+0x428>
 800a9d2:	ecb2 7a01 	vldmia	r2!, {s14}
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9dc:	e7d6      	b.n	800a98c <__kernel_rem_pio2f+0x438>
 800a9de:	edd1 7a00 	vldr	s15, [r1]
 800a9e2:	edd1 6a01 	vldr	s13, [r1, #4]
 800a9e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a9ea:	3801      	subs	r0, #1
 800a9ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9f0:	ed81 7a00 	vstr	s14, [r1]
 800a9f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f8:	edc1 7a01 	vstr	s15, [r1, #4]
 800a9fc:	e799      	b.n	800a932 <__kernel_rem_pio2f+0x3de>
 800a9fe:	edd2 7a00 	vldr	s15, [r2]
 800aa02:	edd2 6a01 	vldr	s13, [r2, #4]
 800aa06:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800aa0a:	3901      	subs	r1, #1
 800aa0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa10:	ed82 7a00 	vstr	s14, [r2]
 800aa14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa18:	edc2 7a01 	vstr	s15, [r2, #4]
 800aa1c:	e78e      	b.n	800a93c <__kernel_rem_pio2f+0x3e8>
 800aa1e:	ed33 7a01 	vldmdb	r3!, {s14}
 800aa22:	3c01      	subs	r4, #1
 800aa24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa28:	e78f      	b.n	800a94a <__kernel_rem_pio2f+0x3f6>
 800aa2a:	eef1 6a66 	vneg.f32	s13, s13
 800aa2e:	eeb1 7a47 	vneg.f32	s14, s14
 800aa32:	edc8 6a00 	vstr	s13, [r8]
 800aa36:	ed88 7a01 	vstr	s14, [r8, #4]
 800aa3a:	eef1 7a67 	vneg.f32	s15, s15
 800aa3e:	e790      	b.n	800a962 <__kernel_rem_pio2f+0x40e>

0800aa40 <__kernel_sinf>:
 800aa40:	ee10 3a10 	vmov	r3, s0
 800aa44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa48:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800aa4c:	da04      	bge.n	800aa58 <__kernel_sinf+0x18>
 800aa4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aa52:	ee17 3a90 	vmov	r3, s15
 800aa56:	b35b      	cbz	r3, 800aab0 <__kernel_sinf+0x70>
 800aa58:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aa5c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800aab4 <__kernel_sinf+0x74>
 800aa60:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800aab8 <__kernel_sinf+0x78>
 800aa64:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aa68:	eddf 7a14 	vldr	s15, [pc, #80]	; 800aabc <__kernel_sinf+0x7c>
 800aa6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa70:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800aac0 <__kernel_sinf+0x80>
 800aa74:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aa78:	eddf 7a12 	vldr	s15, [pc, #72]	; 800aac4 <__kernel_sinf+0x84>
 800aa7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800aa80:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa84:	b930      	cbnz	r0, 800aa94 <__kernel_sinf+0x54>
 800aa86:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800aac8 <__kernel_sinf+0x88>
 800aa8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aa8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800aa92:	4770      	bx	lr
 800aa94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800aa98:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800aa9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800aaa0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800aaa4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800aacc <__kernel_sinf+0x8c>
 800aaa8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800aaac:	ee30 0a60 	vsub.f32	s0, s0, s1
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	2f2ec9d3 	.word	0x2f2ec9d3
 800aab8:	b2d72f34 	.word	0xb2d72f34
 800aabc:	3638ef1b 	.word	0x3638ef1b
 800aac0:	b9500d01 	.word	0xb9500d01
 800aac4:	3c088889 	.word	0x3c088889
 800aac8:	be2aaaab 	.word	0xbe2aaaab
 800aacc:	3e2aaaab 	.word	0x3e2aaaab

0800aad0 <__kernel_tanf>:
 800aad0:	b508      	push	{r3, lr}
 800aad2:	ee10 3a10 	vmov	r3, s0
 800aad6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aada:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800aade:	eef0 7a40 	vmov.f32	s15, s0
 800aae2:	da17      	bge.n	800ab14 <__kernel_tanf+0x44>
 800aae4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800aae8:	ee17 1a10 	vmov	r1, s14
 800aaec:	bb41      	cbnz	r1, 800ab40 <__kernel_tanf+0x70>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	d108      	bne.n	800ab06 <__kernel_tanf+0x36>
 800aaf4:	f7fe fb86 	bl	8009204 <fabsf>
 800aaf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aafc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab00:	eeb0 0a67 	vmov.f32	s0, s15
 800ab04:	bd08      	pop	{r3, pc}
 800ab06:	2801      	cmp	r0, #1
 800ab08:	d0fa      	beq.n	800ab00 <__kernel_tanf+0x30>
 800ab0a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab12:	e7f5      	b.n	800ab00 <__kernel_tanf+0x30>
 800ab14:	494c      	ldr	r1, [pc, #304]	; (800ac48 <__kernel_tanf+0x178>)
 800ab16:	428a      	cmp	r2, r1
 800ab18:	db12      	blt.n	800ab40 <__kernel_tanf+0x70>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bfb8      	it	lt
 800ab1e:	eef1 7a40 	vneglt.f32	s15, s0
 800ab22:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800ac4c <__kernel_tanf+0x17c>
 800ab26:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ab2a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800ac50 <__kernel_tanf+0x180>
 800ab2e:	bfb8      	it	lt
 800ab30:	eef1 0a60 	vneglt.f32	s1, s1
 800ab34:	ee70 0a60 	vsub.f32	s1, s0, s1
 800ab38:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800ab3c:	eddf 0a45 	vldr	s1, [pc, #276]	; 800ac54 <__kernel_tanf+0x184>
 800ab40:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac58 <__kernel_tanf+0x188>
 800ab44:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800ac5c <__kernel_tanf+0x18c>
 800ab48:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800ac60 <__kernel_tanf+0x190>
 800ab4c:	493e      	ldr	r1, [pc, #248]	; (800ac48 <__kernel_tanf+0x178>)
 800ab4e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ab52:	428a      	cmp	r2, r1
 800ab54:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ab58:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ab5c:	eddf 5a41 	vldr	s11, [pc, #260]	; 800ac64 <__kernel_tanf+0x194>
 800ab60:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ab64:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ac68 <__kernel_tanf+0x198>
 800ab68:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ab6c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ac6c <__kernel_tanf+0x19c>
 800ab70:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ab74:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800ac70 <__kernel_tanf+0x1a0>
 800ab78:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ab7c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800ac74 <__kernel_tanf+0x1a4>
 800ab80:	eee7 5a05 	vfma.f32	s11, s14, s10
 800ab84:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800ac78 <__kernel_tanf+0x1a8>
 800ab88:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ab8c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800ac7c <__kernel_tanf+0x1ac>
 800ab90:	eee5 5a07 	vfma.f32	s11, s10, s14
 800ab94:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800ac80 <__kernel_tanf+0x1b0>
 800ab98:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ab9c:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ac84 <__kernel_tanf+0x1b4>
 800aba0:	eee5 5a07 	vfma.f32	s11, s10, s14
 800aba4:	eeb0 7a46 	vmov.f32	s14, s12
 800aba8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800abac:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800abb0:	eeb0 6a60 	vmov.f32	s12, s1
 800abb4:	eea7 6a05 	vfma.f32	s12, s14, s10
 800abb8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ac88 <__kernel_tanf+0x1b8>
 800abbc:	eee6 0a26 	vfma.f32	s1, s12, s13
 800abc0:	eee5 0a07 	vfma.f32	s1, s10, s14
 800abc4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800abc8:	db1d      	blt.n	800ac06 <__kernel_tanf+0x136>
 800abca:	ee06 0a90 	vmov	s13, r0
 800abce:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800abd2:	ee27 6a07 	vmul.f32	s12, s14, s14
 800abd6:	ee37 7a00 	vadd.f32	s14, s14, s0
 800abda:	179b      	asrs	r3, r3, #30
 800abdc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	f1c3 0301 	rsb	r3, r3, #1
 800abe8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800abec:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800abf0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800abf4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800abf8:	ee07 3a90 	vmov	s15, r3
 800abfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac00:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ac04:	e77c      	b.n	800ab00 <__kernel_tanf+0x30>
 800ac06:	2801      	cmp	r0, #1
 800ac08:	d01b      	beq.n	800ac42 <__kernel_tanf+0x172>
 800ac0a:	4b20      	ldr	r3, [pc, #128]	; (800ac8c <__kernel_tanf+0x1bc>)
 800ac0c:	ee17 2a10 	vmov	r2, s14
 800ac10:	401a      	ands	r2, r3
 800ac12:	ee06 2a10 	vmov	s12, r2
 800ac16:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ac1a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ac1e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ac22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ac26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac2a:	ee16 2a90 	vmov	r2, s13
 800ac2e:	4013      	ands	r3, r2
 800ac30:	ee07 3a90 	vmov	s15, r3
 800ac34:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ac38:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800ac3c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ac40:	e75e      	b.n	800ab00 <__kernel_tanf+0x30>
 800ac42:	eef0 7a47 	vmov.f32	s15, s14
 800ac46:	e75b      	b.n	800ab00 <__kernel_tanf+0x30>
 800ac48:	3f2ca140 	.word	0x3f2ca140
 800ac4c:	3f490fda 	.word	0x3f490fda
 800ac50:	33222168 	.word	0x33222168
 800ac54:	00000000 	.word	0x00000000
 800ac58:	b79bae5f 	.word	0xb79bae5f
 800ac5c:	38a3f445 	.word	0x38a3f445
 800ac60:	37d95384 	.word	0x37d95384
 800ac64:	3a1a26c8 	.word	0x3a1a26c8
 800ac68:	3b6b6916 	.word	0x3b6b6916
 800ac6c:	3cb327a4 	.word	0x3cb327a4
 800ac70:	3e088889 	.word	0x3e088889
 800ac74:	3895c07a 	.word	0x3895c07a
 800ac78:	398137b9 	.word	0x398137b9
 800ac7c:	3abede48 	.word	0x3abede48
 800ac80:	3c11371f 	.word	0x3c11371f
 800ac84:	3d5d0dd1 	.word	0x3d5d0dd1
 800ac88:	3eaaaaab 	.word	0x3eaaaaab
 800ac8c:	fffff000 	.word	0xfffff000

0800ac90 <with_errno>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	4616      	mov	r6, r2
 800ac98:	f7fb fbc6 	bl	8006428 <__errno>
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	6006      	str	r6, [r0, #0]
 800aca0:	4620      	mov	r0, r4
 800aca2:	bd70      	pop	{r4, r5, r6, pc}

0800aca4 <xflow>:
 800aca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aca6:	4614      	mov	r4, r2
 800aca8:	461d      	mov	r5, r3
 800acaa:	b108      	cbz	r0, 800acb0 <xflow+0xc>
 800acac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acb0:	e9cd 2300 	strd	r2, r3, [sp]
 800acb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acb8:	4620      	mov	r0, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	f7f5 fca4 	bl	8000608 <__aeabi_dmul>
 800acc0:	2222      	movs	r2, #34	; 0x22
 800acc2:	b003      	add	sp, #12
 800acc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acc8:	f7ff bfe2 	b.w	800ac90 <with_errno>

0800accc <__math_uflow>:
 800accc:	b508      	push	{r3, lr}
 800acce:	2200      	movs	r2, #0
 800acd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acd4:	f7ff ffe6 	bl	800aca4 <xflow>
 800acd8:	ec41 0b10 	vmov	d0, r0, r1
 800acdc:	bd08      	pop	{r3, pc}

0800acde <__math_oflow>:
 800acde:	b508      	push	{r3, lr}
 800ace0:	2200      	movs	r2, #0
 800ace2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ace6:	f7ff ffdd 	bl	800aca4 <xflow>
 800acea:	ec41 0b10 	vmov	d0, r0, r1
 800acee:	bd08      	pop	{r3, pc}

0800acf0 <fabs>:
 800acf0:	ec51 0b10 	vmov	r0, r1, d0
 800acf4:	ee10 2a10 	vmov	r2, s0
 800acf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acfc:	ec43 2b10 	vmov	d0, r2, r3
 800ad00:	4770      	bx	lr

0800ad02 <finite>:
 800ad02:	b082      	sub	sp, #8
 800ad04:	ed8d 0b00 	vstr	d0, [sp]
 800ad08:	9801      	ldr	r0, [sp, #4]
 800ad0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ad0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad12:	0fc0      	lsrs	r0, r0, #31
 800ad14:	b002      	add	sp, #8
 800ad16:	4770      	bx	lr

0800ad18 <scalbn>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	ec55 4b10 	vmov	r4, r5, d0
 800ad1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad22:	4606      	mov	r6, r0
 800ad24:	462b      	mov	r3, r5
 800ad26:	b99a      	cbnz	r2, 800ad50 <scalbn+0x38>
 800ad28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad2c:	4323      	orrs	r3, r4
 800ad2e:	d036      	beq.n	800ad9e <scalbn+0x86>
 800ad30:	4b39      	ldr	r3, [pc, #228]	; (800ae18 <scalbn+0x100>)
 800ad32:	4629      	mov	r1, r5
 800ad34:	ee10 0a10 	vmov	r0, s0
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f7f5 fc65 	bl	8000608 <__aeabi_dmul>
 800ad3e:	4b37      	ldr	r3, [pc, #220]	; (800ae1c <scalbn+0x104>)
 800ad40:	429e      	cmp	r6, r3
 800ad42:	4604      	mov	r4, r0
 800ad44:	460d      	mov	r5, r1
 800ad46:	da10      	bge.n	800ad6a <scalbn+0x52>
 800ad48:	a32b      	add	r3, pc, #172	; (adr r3, 800adf8 <scalbn+0xe0>)
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	e03a      	b.n	800adc6 <scalbn+0xae>
 800ad50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad54:	428a      	cmp	r2, r1
 800ad56:	d10c      	bne.n	800ad72 <scalbn+0x5a>
 800ad58:	ee10 2a10 	vmov	r2, s0
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	4629      	mov	r1, r5
 800ad60:	f7f5 fa9c 	bl	800029c <__adddf3>
 800ad64:	4604      	mov	r4, r0
 800ad66:	460d      	mov	r5, r1
 800ad68:	e019      	b.n	800ad9e <scalbn+0x86>
 800ad6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad6e:	460b      	mov	r3, r1
 800ad70:	3a36      	subs	r2, #54	; 0x36
 800ad72:	4432      	add	r2, r6
 800ad74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ad78:	428a      	cmp	r2, r1
 800ad7a:	dd08      	ble.n	800ad8e <scalbn+0x76>
 800ad7c:	2d00      	cmp	r5, #0
 800ad7e:	a120      	add	r1, pc, #128	; (adr r1, 800ae00 <scalbn+0xe8>)
 800ad80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad84:	da1c      	bge.n	800adc0 <scalbn+0xa8>
 800ad86:	a120      	add	r1, pc, #128	; (adr r1, 800ae08 <scalbn+0xf0>)
 800ad88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad8c:	e018      	b.n	800adc0 <scalbn+0xa8>
 800ad8e:	2a00      	cmp	r2, #0
 800ad90:	dd08      	ble.n	800ada4 <scalbn+0x8c>
 800ad92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad9e:	ec45 4b10 	vmov	d0, r4, r5
 800ada2:	bd70      	pop	{r4, r5, r6, pc}
 800ada4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ada8:	da19      	bge.n	800adde <scalbn+0xc6>
 800adaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800adae:	429e      	cmp	r6, r3
 800adb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800adb4:	dd0a      	ble.n	800adcc <scalbn+0xb4>
 800adb6:	a112      	add	r1, pc, #72	; (adr r1, 800ae00 <scalbn+0xe8>)
 800adb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e2      	bne.n	800ad86 <scalbn+0x6e>
 800adc0:	a30f      	add	r3, pc, #60	; (adr r3, 800ae00 <scalbn+0xe8>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f7f5 fc1f 	bl	8000608 <__aeabi_dmul>
 800adca:	e7cb      	b.n	800ad64 <scalbn+0x4c>
 800adcc:	a10a      	add	r1, pc, #40	; (adr r1, 800adf8 <scalbn+0xe0>)
 800adce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0b8      	beq.n	800ad48 <scalbn+0x30>
 800add6:	a10e      	add	r1, pc, #56	; (adr r1, 800ae10 <scalbn+0xf8>)
 800add8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800addc:	e7b4      	b.n	800ad48 <scalbn+0x30>
 800adde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ade2:	3236      	adds	r2, #54	; 0x36
 800ade4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ade8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800adec:	4620      	mov	r0, r4
 800adee:	4b0c      	ldr	r3, [pc, #48]	; (800ae20 <scalbn+0x108>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	e7e8      	b.n	800adc6 <scalbn+0xae>
 800adf4:	f3af 8000 	nop.w
 800adf8:	c2f8f359 	.word	0xc2f8f359
 800adfc:	01a56e1f 	.word	0x01a56e1f
 800ae00:	8800759c 	.word	0x8800759c
 800ae04:	7e37e43c 	.word	0x7e37e43c
 800ae08:	8800759c 	.word	0x8800759c
 800ae0c:	fe37e43c 	.word	0xfe37e43c
 800ae10:	c2f8f359 	.word	0xc2f8f359
 800ae14:	81a56e1f 	.word	0x81a56e1f
 800ae18:	43500000 	.word	0x43500000
 800ae1c:	ffff3cb0 	.word	0xffff3cb0
 800ae20:	3c900000 	.word	0x3c900000

0800ae24 <floorf>:
 800ae24:	ee10 3a10 	vmov	r3, s0
 800ae28:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae2c:	3a7f      	subs	r2, #127	; 0x7f
 800ae2e:	2a16      	cmp	r2, #22
 800ae30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae34:	dc2a      	bgt.n	800ae8c <floorf+0x68>
 800ae36:	2a00      	cmp	r2, #0
 800ae38:	da11      	bge.n	800ae5e <floorf+0x3a>
 800ae3a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ae9c <floorf+0x78>
 800ae3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ae46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4a:	dd05      	ble.n	800ae58 <floorf+0x34>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	da23      	bge.n	800ae98 <floorf+0x74>
 800ae50:	4a13      	ldr	r2, [pc, #76]	; (800aea0 <floorf+0x7c>)
 800ae52:	2900      	cmp	r1, #0
 800ae54:	bf18      	it	ne
 800ae56:	4613      	movne	r3, r2
 800ae58:	ee00 3a10 	vmov	s0, r3
 800ae5c:	4770      	bx	lr
 800ae5e:	4911      	ldr	r1, [pc, #68]	; (800aea4 <floorf+0x80>)
 800ae60:	4111      	asrs	r1, r2
 800ae62:	420b      	tst	r3, r1
 800ae64:	d0fa      	beq.n	800ae5c <floorf+0x38>
 800ae66:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ae9c <floorf+0x78>
 800ae6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	ddef      	ble.n	800ae58 <floorf+0x34>
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	bfbe      	ittt	lt
 800ae7c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800ae80:	fa40 f202 	asrlt.w	r2, r0, r2
 800ae84:	189b      	addlt	r3, r3, r2
 800ae86:	ea23 0301 	bic.w	r3, r3, r1
 800ae8a:	e7e5      	b.n	800ae58 <floorf+0x34>
 800ae8c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ae90:	d3e4      	bcc.n	800ae5c <floorf+0x38>
 800ae92:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae96:	4770      	bx	lr
 800ae98:	2300      	movs	r3, #0
 800ae9a:	e7dd      	b.n	800ae58 <floorf+0x34>
 800ae9c:	7149f2ca 	.word	0x7149f2ca
 800aea0:	bf800000 	.word	0xbf800000
 800aea4:	007fffff 	.word	0x007fffff

0800aea8 <nanf>:
 800aea8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aeb0 <nanf+0x8>
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	7fc00000 	.word	0x7fc00000

0800aeb4 <scalbnf>:
 800aeb4:	ee10 3a10 	vmov	r3, s0
 800aeb8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800aebc:	d025      	beq.n	800af0a <scalbnf+0x56>
 800aebe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aec2:	d302      	bcc.n	800aeca <scalbnf+0x16>
 800aec4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aec8:	4770      	bx	lr
 800aeca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800aece:	d122      	bne.n	800af16 <scalbnf+0x62>
 800aed0:	4b2a      	ldr	r3, [pc, #168]	; (800af7c <scalbnf+0xc8>)
 800aed2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800af80 <scalbnf+0xcc>
 800aed6:	4298      	cmp	r0, r3
 800aed8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aedc:	db16      	blt.n	800af0c <scalbnf+0x58>
 800aede:	ee10 3a10 	vmov	r3, s0
 800aee2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aee6:	3a19      	subs	r2, #25
 800aee8:	4402      	add	r2, r0
 800aeea:	2afe      	cmp	r2, #254	; 0xfe
 800aeec:	dd15      	ble.n	800af1a <scalbnf+0x66>
 800aeee:	ee10 3a10 	vmov	r3, s0
 800aef2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800af84 <scalbnf+0xd0>
 800aef6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800af88 <scalbnf+0xd4>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	eeb0 7a67 	vmov.f32	s14, s15
 800af00:	bfb8      	it	lt
 800af02:	eef0 7a66 	vmovlt.f32	s15, s13
 800af06:	ee27 0a27 	vmul.f32	s0, s14, s15
 800af0a:	4770      	bx	lr
 800af0c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800af8c <scalbnf+0xd8>
 800af10:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af14:	4770      	bx	lr
 800af16:	0dd2      	lsrs	r2, r2, #23
 800af18:	e7e6      	b.n	800aee8 <scalbnf+0x34>
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	dd06      	ble.n	800af2c <scalbnf+0x78>
 800af1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af22:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800af26:	ee00 3a10 	vmov	s0, r3
 800af2a:	4770      	bx	lr
 800af2c:	f112 0f16 	cmn.w	r2, #22
 800af30:	da1a      	bge.n	800af68 <scalbnf+0xb4>
 800af32:	f24c 3350 	movw	r3, #50000	; 0xc350
 800af36:	4298      	cmp	r0, r3
 800af38:	ee10 3a10 	vmov	r3, s0
 800af3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af40:	dd0a      	ble.n	800af58 <scalbnf+0xa4>
 800af42:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800af84 <scalbnf+0xd0>
 800af46:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800af88 <scalbnf+0xd4>
 800af4a:	eef0 7a40 	vmov.f32	s15, s0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bf18      	it	ne
 800af52:	eeb0 0a47 	vmovne.f32	s0, s14
 800af56:	e7db      	b.n	800af10 <scalbnf+0x5c>
 800af58:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800af8c <scalbnf+0xd8>
 800af5c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800af90 <scalbnf+0xdc>
 800af60:	eef0 7a40 	vmov.f32	s15, s0
 800af64:	2b00      	cmp	r3, #0
 800af66:	e7f3      	b.n	800af50 <scalbnf+0x9c>
 800af68:	3219      	adds	r2, #25
 800af6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800af72:	eddf 7a08 	vldr	s15, [pc, #32]	; 800af94 <scalbnf+0xe0>
 800af76:	ee07 3a10 	vmov	s14, r3
 800af7a:	e7c4      	b.n	800af06 <scalbnf+0x52>
 800af7c:	ffff3cb0 	.word	0xffff3cb0
 800af80:	4c000000 	.word	0x4c000000
 800af84:	7149f2ca 	.word	0x7149f2ca
 800af88:	f149f2ca 	.word	0xf149f2ca
 800af8c:	0da24260 	.word	0x0da24260
 800af90:	8da24260 	.word	0x8da24260
 800af94:	33000000 	.word	0x33000000

0800af98 <_init>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	bf00      	nop
 800af9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9e:	bc08      	pop	{r3}
 800afa0:	469e      	mov	lr, r3
 800afa2:	4770      	bx	lr

0800afa4 <_fini>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	bf00      	nop
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr
