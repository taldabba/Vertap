
Vertap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007594  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007738  08007738  00017738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b8c  08007b8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007b8c  08007b8c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b8c  08007b8c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000148  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfd2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b52  00000000  00000000  0002d1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000988  00000000  00000000  0002f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ac1  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e152  00000000  00000000  00050bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c28d7  00000000  00000000  0005ed13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001215ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ae0  00000000  00000000  0012163c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800771c 	.word	0x0800771c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800771c 	.word	0x0800771c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <MPU6050_Init>:
float Gyx_raw;
float Gyy_raw;
float Gyz_raw;


void MPU6050_Init(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af04      	add	r7, sp, #16
	uint8_t check=0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_WHO_AM_I, 1, &check, 1, 1000);
 8000c62:	23d0      	movs	r3, #208	; 0xd0
 8000c64:	b299      	uxth	r1, r3
 8000c66:	2375      	movs	r3, #117	; 0x75
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	2301      	movs	r3, #1
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2301      	movs	r3, #1
 8000c7a:	4827      	ldr	r0, [pc, #156]	; (8000d18 <MPU6050_Init+0xc0>)
 8000c7c:	f001 f9a6 	bl	8001fcc <HAL_I2C_Mem_Read>

	if (check != VAL_WHO_AM_I) {
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MPU6050_Init+0xc4>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d003      	beq.n	8000c92 <MPU6050_Init+0x3a>
		printf("Could not find MPU6050!\r\n");
 8000c8a:	4825      	ldr	r0, [pc, #148]	; (8000d20 <MPU6050_Init+0xc8>)
 8000c8c:	f004 fc94 	bl	80055b8 <puts>
 8000c90:	e03e      	b.n	8000d10 <MPU6050_Init+0xb8>
		return;
	}

	printf("Found!\r\n");
 8000c92:	4824      	ldr	r0, [pc, #144]	; (8000d24 <MPU6050_Init+0xcc>)
 8000c94:	f004 fc90 	bl	80055b8 <puts>

	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_PWR_MGMT_1, 1, &VAL_PWR_MGMT_1, 1, 1000);
 8000c98:	23d0      	movs	r3, #208	; 0xd0
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	236b      	movs	r3, #107	; 0x6b
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MPU6050_Init+0xd0>)
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	4819      	ldr	r0, [pc, #100]	; (8000d18 <MPU6050_Init+0xc0>)
 8000cb2:	f001 f877 	bl	8001da4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_SMPRT_DIV, 1, &VAL_SMPRT_DIV, 1, 1000);
 8000cb6:	23d0      	movs	r3, #208	; 0xd0
 8000cb8:	b299      	uxth	r1, r3
 8000cba:	2319      	movs	r3, #25
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MPU6050_Init+0xd4>)
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <MPU6050_Init+0xc0>)
 8000cd0:	f001 f868 	bl	8001da4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_GYRO_CONFIG, 1, &VAL_GYRO_CONFIG, 1, 1000);
 8000cd4:	23d0      	movs	r3, #208	; 0xd0
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	231b      	movs	r3, #27
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce0:	9302      	str	r3, [sp, #8]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MPU6050_Init+0xd8>)
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2301      	movs	r3, #1
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <MPU6050_Init+0xc0>)
 8000cee:	f001 f859 	bl	8001da4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, REG_ACCEL_CONFIG, 1, &VAL_ACCEL_CONFIG, 1, 1000);
 8000cf2:	23d0      	movs	r3, #208	; 0xd0
 8000cf4:	b299      	uxth	r1, r3
 8000cf6:	231c      	movs	r3, #28
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	2301      	movs	r3, #1
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MPU6050_Init+0xdc>)
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MPU6050_Init+0xc0>)
 8000d0c:	f001 f84a 	bl	8001da4 <HAL_I2C_Mem_Write>

}
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200001fc 	.word	0x200001fc
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	08007738 	.word	0x08007738
 8000d24:	08007754 	.word	0x08007754
 8000d28:	200002d8 	.word	0x200002d8
 8000d2c:	20000001 	.word	0x20000001
 8000d30:	200002d9 	.word	0x200002d9
 8000d34:	200002da 	.word	0x200002da

08000d38 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_ACCEL_XOUT_H, 1, Raw_Accel_Buffer, 6, 1000);
 8000d3e:	23d0      	movs	r3, #208	; 0xd0
 8000d40:	b299      	uxth	r1, r3
 8000d42:	233b      	movs	r3, #59	; 0x3b
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <MPU6050_Read_Accel+0x128>)
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	4843      	ldr	r0, [pc, #268]	; (8000e64 <MPU6050_Read_Accel+0x12c>)
 8000d58:	f001 f938 	bl	8001fcc <HAL_I2C_Mem_Read>

	Raw_Accel_X = (int16_t)(Raw_Accel_Buffer[0]<<8 | Raw_Accel_Buffer[1]);
 8000d5c:	4b40      	ldr	r3, [pc, #256]	; (8000e60 <MPU6050_Read_Accel+0x128>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <MPU6050_Read_Accel+0x128>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <MPU6050_Read_Accel+0x130>)
 8000d70:	801a      	strh	r2, [r3, #0]
	Raw_Accel_Y = (int16_t)(Raw_Accel_Buffer[2]<<8 | Raw_Accel_Buffer[3]);
 8000d72:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <MPU6050_Read_Accel+0x128>)
 8000d74:	789b      	ldrb	r3, [r3, #2]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <MPU6050_Read_Accel+0x128>)
 8000d7c:	78db      	ldrb	r3, [r3, #3]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <MPU6050_Read_Accel+0x134>)
 8000d86:	801a      	strh	r2, [r3, #0]
	Raw_Accel_Z = (int16_t)(Raw_Accel_Buffer[4]<<8 | Raw_Accel_Buffer[5]);
 8000d88:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <MPU6050_Read_Accel+0x128>)
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <MPU6050_Read_Accel+0x128>)
 8000d92:	795b      	ldrb	r3, [r3, #5]
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21a      	sxth	r2, r3
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <MPU6050_Read_Accel+0x138>)
 8000d9c:	801a      	strh	r2, [r3, #0]

	Ax_raw = (Raw_Accel_X / 16384.0f)*g_TO_MPS2;
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <MPU6050_Read_Accel+0x130>)
 8000da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dac:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000e74 <MPU6050_Read_Accel+0x13c>
 8000db0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000db4:	ee16 0a90 	vmov	r0, s13
 8000db8:	f7ff fbce 	bl	8000558 <__aeabi_f2d>
 8000dbc:	a326      	add	r3, pc, #152	; (adr r3, 8000e58 <MPU6050_Read_Accel+0x120>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fc21 	bl	8000608 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fef3 	bl	8000bb8 <__aeabi_d2f>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a28      	ldr	r2, [pc, #160]	; (8000e78 <MPU6050_Read_Accel+0x140>)
 8000dd6:	6013      	str	r3, [r2, #0]
	Ay_raw = (Raw_Accel_Y / 16384.0f)*g_TO_MPS2;
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <MPU6050_Read_Accel+0x134>)
 8000dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000e74 <MPU6050_Read_Accel+0x13c>
 8000dea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000dee:	ee16 0a90 	vmov	r0, s13
 8000df2:	f7ff fbb1 	bl	8000558 <__aeabi_f2d>
 8000df6:	a318      	add	r3, pc, #96	; (adr r3, 8000e58 <MPU6050_Read_Accel+0x120>)
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	f7ff fc04 	bl	8000608 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fed6 	bl	8000bb8 <__aeabi_d2f>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <MPU6050_Read_Accel+0x144>)
 8000e10:	6013      	str	r3, [r2, #0]
	Az_raw = (Raw_Accel_Z / 16384.0f)*g_TO_MPS2;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MPU6050_Read_Accel+0x138>)
 8000e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e20:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000e74 <MPU6050_Read_Accel+0x13c>
 8000e24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e28:	ee16 0a90 	vmov	r0, s13
 8000e2c:	f7ff fb94 	bl	8000558 <__aeabi_f2d>
 8000e30:	a309      	add	r3, pc, #36	; (adr r3, 8000e58 <MPU6050_Read_Accel+0x120>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fbe7 	bl	8000608 <__aeabi_dmul>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff feb9 	bl	8000bb8 <__aeabi_d2f>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <MPU6050_Read_Accel+0x148>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	f3af 8000 	nop.w
 8000e58:	51eb851f 	.word	0x51eb851f
 8000e5c:	40239eb8 	.word	0x40239eb8
 8000e60:	200002dc 	.word	0x200002dc
 8000e64:	200001fc 	.word	0x200001fc
 8000e68:	200002ea 	.word	0x200002ea
 8000e6c:	200002ec 	.word	0x200002ec
 8000e70:	200002ee 	.word	0x200002ee
 8000e74:	46800000 	.word	0x46800000
 8000e78:	200002f8 	.word	0x200002f8
 8000e7c:	200002fc 	.word	0x200002fc
 8000e80:	20000300 	.word	0x20000300

08000e84 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, REG_GYRO_XOUT_H, 1, Raw_Gyro_Buffer, 6, 1000);
 8000e8a:	23d0      	movs	r3, #208	; 0xd0
 8000e8c:	b299      	uxth	r1, r3
 8000e8e:	2343      	movs	r3, #67	; 0x43
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2306      	movs	r3, #6
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MPU6050_Read_Gyro+0xc0>)
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	4829      	ldr	r0, [pc, #164]	; (8000f48 <MPU6050_Read_Gyro+0xc4>)
 8000ea4:	f001 f892 	bl	8001fcc <HAL_I2C_Mem_Read>

	Raw_Gyro_X = (int16_t)(Raw_Gyro_Buffer[0]<<8 | Raw_Gyro_Buffer[1]);
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MPU6050_Read_Gyro+0xc0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MPU6050_Read_Gyro+0xc0>)
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MPU6050_Read_Gyro+0xc8>)
 8000ebc:	801a      	strh	r2, [r3, #0]
	Raw_Gyro_Y = (int16_t)(Raw_Gyro_Buffer[2]<<8 | Raw_Gyro_Buffer[3]);
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MPU6050_Read_Gyro+0xc0>)
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MPU6050_Read_Gyro+0xc0>)
 8000ec8:	78db      	ldrb	r3, [r3, #3]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MPU6050_Read_Gyro+0xcc>)
 8000ed2:	801a      	strh	r2, [r3, #0]
	Raw_Gyro_Z = (int16_t)(Raw_Gyro_Buffer[4]<<8 | Raw_Gyro_Buffer[5]);
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MPU6050_Read_Gyro+0xc0>)
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MPU6050_Read_Gyro+0xc0>)
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MPU6050_Read_Gyro+0xd0>)
 8000ee8:	801a      	strh	r2, [r3, #0]

	Gyx_raw = Raw_Gyro_X / 131.0f;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MPU6050_Read_Gyro+0xc8>)
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000f58 <MPU6050_Read_Gyro+0xd4>
 8000efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MPU6050_Read_Gyro+0xd8>)
 8000f02:	edc3 7a00 	vstr	s15, [r3]
	Gyy_raw = Raw_Gyro_Y / 131.0f;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MPU6050_Read_Gyro+0xcc>)
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f14:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000f58 <MPU6050_Read_Gyro+0xd4>
 8000f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <MPU6050_Read_Gyro+0xdc>)
 8000f1e:	edc3 7a00 	vstr	s15, [r3]
	Gyz_raw = Raw_Gyro_Z / 131.0f;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MPU6050_Read_Gyro+0xd0>)
 8000f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f58 <MPU6050_Read_Gyro+0xd4>
 8000f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MPU6050_Read_Gyro+0xe0>)
 8000f3a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200002e4 	.word	0x200002e4
 8000f48:	200001fc 	.word	0x200001fc
 8000f4c:	200002f0 	.word	0x200002f0
 8000f50:	200002f2 	.word	0x200002f2
 8000f54:	200002f4 	.word	0x200002f4
 8000f58:	43030000 	.word	0x43030000
 8000f5c:	20000304 	.word	0x20000304
 8000f60:	20000308 	.word	0x20000308
 8000f64:	2000030c 	.word	0x2000030c

08000f68 <__io_putchar>:

int __io_putchar(int ch)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000f70:	1d39      	adds	r1, r7, #4
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	2201      	movs	r2, #1
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <__io_putchar+0x20>)
 8000f7a:	f003 f987 	bl	800428c <HAL_UART_Transmit>
  return ch;
 8000f7e:	687b      	ldr	r3, [r7, #4]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000250 	.word	0x20000250

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f90:	b08e      	sub	sp, #56	; 0x38
 8000f92:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 fb88 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f856 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 f924 	bl	80011e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa0:	f000 f8f2 	bl	8001188 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fa4:	f000 f8b0 	bl	8001108 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000fa8:	f7ff fe56 	bl	8000c58 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 8000fac:	f7ff fec4 	bl	8000d38 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8000fb0:	f7ff ff68 	bl	8000e84 <MPU6050_Read_Gyro>
	  printf("%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n", Ax_raw,Ay_raw,Az_raw,Gyx_raw,Gyy_raw,Gyz_raw);
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <main+0xa0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff facd 	bl	8000558 <__aeabi_f2d>
 8000fbe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <main+0xa4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fac6 	bl	8000558 <__aeabi_f2d>
 8000fcc:	4604      	mov	r4, r0
 8000fce:	460d      	mov	r5, r1
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <main+0xa8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fabf 	bl	8000558 <__aeabi_f2d>
 8000fda:	4680      	mov	r8, r0
 8000fdc:	4689      	mov	r9, r1
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <main+0xac>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fab8 	bl	8000558 <__aeabi_f2d>
 8000fe8:	4682      	mov	sl, r0
 8000fea:	468b      	mov	fp, r1
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <main+0xb0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fab1 	bl	8000558 <__aeabi_f2d>
 8000ff6:	e9c7 0100 	strd	r0, r1, [r7]
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <main+0xb4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faaa 	bl	8000558 <__aeabi_f2d>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800100c:	ed97 7b00 	vldr	d7, [r7]
 8001010:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001014:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001018:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800101c:	e9cd 4500 	strd	r4, r5, [sp]
 8001020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <main+0xb8>)
 8001026:	f004 fa41 	bl	80054ac <iprintf>
	  MPU6050_Read_Accel();
 800102a:	e7bf      	b.n	8000fac <main+0x20>
 800102c:	200002f8 	.word	0x200002f8
 8001030:	200002fc 	.word	0x200002fc
 8001034:	20000300 	.word	0x20000300
 8001038:	20000304 	.word	0x20000304
 800103c:	20000308 	.word	0x20000308
 8001040:	2000030c 	.word	0x2000030c
 8001044:	0800775c 	.word	0x0800775c

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0a6      	sub	sp, #152	; 0x98
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001052:	2228      	movs	r2, #40	; 0x28
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fdb6 	bl	8004bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2258      	movs	r2, #88	; 0x58
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fda8 	bl	8004bc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001080:	2310      	movs	r3, #16
 8001082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001094:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001098:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fbfa 	bl	80028a0 <HAL_RCC_OscConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010b2:	f000 f8ff 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2302      	movs	r3, #2
 80010bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010d0:	2102      	movs	r1, #2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fc38 	bl	8003948 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010de:	f000 f8e9 	bl	80012b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010e2:	2322      	movs	r3, #34	; 0x22
 80010e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fe5f 	bl	8003db4 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010fc:	f000 f8da 	bl	80012b4 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3798      	adds	r7, #152	; 0x98
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_I2C1_Init+0x74>)
 800110e:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <MX_I2C1_Init+0x78>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_I2C1_Init+0x74>)
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <MX_I2C1_Init+0x7c>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_I2C1_Init+0x74>)
 8001120:	2201      	movs	r2, #1
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_I2C1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001142:	480e      	ldr	r0, [pc, #56]	; (800117c <MX_I2C1_Init+0x74>)
 8001144:	f000 fd9e 	bl	8001c84 <HAL_I2C_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800114e:	f000 f8b1 	bl	80012b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <MX_I2C1_Init+0x74>)
 8001156:	f001 fb0b 	bl	8002770 <HAL_I2CEx_ConfigAnalogFilter>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001160:	f000 f8a8 	bl	80012b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_I2C1_Init+0x74>)
 8001168:	f001 fb4d 	bl	8002806 <HAL_I2CEx_ConfigDigitalFilter>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001172:	f000 f89f 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001fc 	.word	0x200001fc
 8001180:	40005400 	.word	0x40005400
 8001184:	2000090e 	.word	0x2000090e

08001188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <MX_USART2_UART_Init+0x5c>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011cc:	f003 f810 	bl	80041f0 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011d6:	f000 f86d 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000250 	.word	0x20000250
 80011e4:	40004400 	.word	0x40004400

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_GPIO_Init+0xc4>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <MX_GPIO_Init+0xc4>)
 8001204:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_GPIO_Init+0xc4>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_GPIO_Init+0xc4>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a24      	ldr	r2, [pc, #144]	; (80012ac <MX_GPIO_Init+0xc4>)
 800121c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_GPIO_Init+0xc4>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_GPIO_Init+0xc4>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <MX_GPIO_Init+0xc4>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_GPIO_Init+0xc4>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_GPIO_Init+0xc4>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a18      	ldr	r2, [pc, #96]	; (80012ac <MX_GPIO_Init+0xc4>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6153      	str	r3, [r2, #20]
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_GPIO_Init+0xc4>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2120      	movs	r1, #32
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f000 fcf5 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800126a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001270:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MX_GPIO_Init+0xc8>)
 8001282:	f000 fb5d 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001286:	2320      	movs	r3, #32
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f000 fb4e 	bl	8001940 <HAL_GPIO_Init>

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000800 	.word	0x48000800

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	e7fe      	b.n	80012bc <Error_Handler+0x8>
	...

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x44>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_MspInit+0x44>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6193      	str	r3, [r2, #24]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x44>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x44>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x44>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x44>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f6:	2007      	movs	r0, #7
 80012f8:	f000 faee 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_I2C_MspInit+0xb8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d145      	bne.n	80013b6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800135a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001360:	2312      	movs	r3, #18
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800136c:	2304      	movs	r3, #4
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137a:	f000 fae1 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001382:	2312      	movs	r3, #18
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800138e:	2304      	movs	r3, #4
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <HAL_I2C_MspInit+0xc0>)
 800139a:	f000 fad1 	bl	8001940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 80013a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_I2C_MspInit+0xbc>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40005400 	.word	0x40005400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000400 	.word	0x48000400

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_UART_MspInit+0x7c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d128      	bne.n	8001440 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_UART_MspInit+0x80>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <HAL_UART_MspInit+0x80>)
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_UART_MspInit+0x80>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_UART_MspInit+0x80>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_UART_MspInit+0x80>)
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	6153      	str	r3, [r2, #20]
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_UART_MspInit+0x80>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800141e:	230c      	movs	r3, #12
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800142e:	2307      	movs	r3, #7
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f000 fa80 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40004400 	.word	0x40004400
 800144c:	40021000 	.word	0x40021000

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149c:	f000 f94a 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014be:	f003 fb59 	bl	8004b74 <__errno>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2216      	movs	r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
	return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffe7 	bl	80014b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014e6:	e7fe      	b.n	80014e6 <_exit+0x12>

080014e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014fa:	f3af 8000 	nop.w
 80014fe:	4601      	mov	r1, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf0      	blt.n	80014fa <_read+0x12>
	}

return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e009      	b.n	8001548 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fd13 	bl	8000f68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf1      	blt.n	8001534 <_write+0x12>
	}
	return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_close>:

int _close(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001582:	605a      	str	r2, [r3, #4]
	return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_isatty>:

int _isatty(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	return 1;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
	return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f003 fabe 	bl	8004b74 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20010000 	.word	0x20010000
 8001624:	00000400 	.word	0x00000400
 8001628:	20000310 	.word	0x20000310
 800162c:	20000328 	.word	0x20000328

08001630 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001658:	f7ff ffea 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <LoopForever+0x6>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	; (8001694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <LoopForever+0xe>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	; (80016a0 <LoopForever+0x16>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f003 fa7d 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001686:	f7ff fc81 	bl	8000f8c <main>

0800168a <LoopForever>:

LoopForever:
    b LoopForever
 800168a:	e7fe      	b.n	800168a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800168c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001698:	08007b94 	.word	0x08007b94
  ldr r2, =_sbss
 800169c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80016a0:	20000328 	.word	0x20000328

080016a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC1_2_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x28>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x28>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f90d 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fdfc 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40022000 	.word	0x40022000

080016d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f917 	bl	8001926 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f8ed 	bl	80018ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000004 	.word	0x20000004
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000000c 	.word	0x2000000c
 8001758:	20000314 	.word	0x20000314

0800175c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000314 	.word	0x20000314

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	; (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	; (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff8e 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff47 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001900:	f7ff ff5c 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ff8e 	bl	800182c <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5d 	bl	80017d8 <__NVIC_SetPriority>
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffb0 	bl	8001894 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e160      	b.n	8001c12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8152 	beq.w	8001c0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d005      	beq.n	8001980 <HAL_GPIO_Init+0x40>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 0201 	and.w	r2, r3, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d017      	beq.n	8001a1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	6939      	ldr	r1, [r7, #16]
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0203 	and.w	r2, r3, #3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80ac 	beq.w	8001c0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a5d      	ldr	r2, [pc, #372]	; (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001acc:	4a59      	ldr	r2, [pc, #356]	; (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001af6:	d025      	beq.n	8001b44 <HAL_GPIO_Init+0x204>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4f      	ldr	r2, [pc, #316]	; (8001c38 <HAL_GPIO_Init+0x2f8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d01f      	beq.n	8001b40 <HAL_GPIO_Init+0x200>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4e      	ldr	r2, [pc, #312]	; (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d019      	beq.n	8001b3c <HAL_GPIO_Init+0x1fc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d013      	beq.n	8001b38 <HAL_GPIO_Init+0x1f8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <HAL_GPIO_Init+0x304>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00d      	beq.n	8001b34 <HAL_GPIO_Init+0x1f4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4b      	ldr	r2, [pc, #300]	; (8001c48 <HAL_GPIO_Init+0x308>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <HAL_GPIO_Init+0x1f0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <HAL_GPIO_Init+0x30c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_GPIO_Init+0x1ec>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	e00c      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	e00a      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b30:	2305      	movs	r3, #5
 8001b32:	e008      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b34:	2304      	movs	r3, #4
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e004      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_Init+0x206>
 8001b44:	2300      	movs	r3, #0
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	f002 0203 	and.w	r2, r2, #3
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b56:	4937      	ldr	r1, [pc, #220]	; (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b64:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b88:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bb2:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f47f ae97 	bne.w	8001950 <HAL_GPIO_Init+0x10>
  }
}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010000 	.word	0x40010000
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	48000c00 	.word	0x48000c00
 8001c44:	48001000 	.word	0x48001000
 8001c48:	48001400 	.word	0x48001400
 8001c4c:	48001800 	.word	0x48001800
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e081      	b.n	8001d9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fb2c 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2224      	movs	r2, #36	; 0x24
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	e006      	b.n	8001d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d104      	bne.n	8001d1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69d9      	ldr	r1, [r3, #28]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1a      	ldr	r2, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	817b      	strh	r3, [r7, #10]
 8001db6:	460b      	mov	r3, r1
 8001db8:	813b      	strh	r3, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	f040 80f9 	bne.w	8001fbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_I2C_Mem_Write+0x34>
 8001dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0ed      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_I2C_Mem_Write+0x4e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e0e6      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dfa:	f7ff fcaf 	bl	800175c <HAL_GetTick>
 8001dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2319      	movs	r3, #25
 8001e06:	2201      	movs	r2, #1
 8001e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fac3 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d1      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2221      	movs	r2, #33	; 0x21
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2240      	movs	r2, #64	; 0x40
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a3a      	ldr	r2, [r7, #32]
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e44:	88f8      	ldrh	r0, [r7, #6]
 8001e46:	893a      	ldrh	r2, [r7, #8]
 8001e48:	8979      	ldrh	r1, [r7, #10]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4603      	mov	r3, r0
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 f9d3 	bl	8002200 <I2C_RequestMemoryWrite>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0a9      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d90e      	bls.n	8001e94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	22ff      	movs	r2, #255	; 0xff
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	2300      	movs	r3, #0
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fc3d 	bl	800270c <I2C_TransferConfig>
 8001e92:	e00f      	b.n	8001eb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	8979      	ldrh	r1, [r7, #10]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fc2c 	bl	800270c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fabc 	bl	8002436 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e07b      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d034      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d130      	bne.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fa3f 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04d      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d90e      	bls.n	8001f4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	22ff      	movs	r2, #255	; 0xff
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	8979      	ldrh	r1, [r7, #10]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fbe1 	bl	800270c <I2C_TransferConfig>
 8001f4a:	e00f      	b.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fbd0 	bl	800270c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d19e      	bne.n	8001eb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 faa2 	bl	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e01a      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_I2C_Mem_Write+0x224>)
 8001f9e:	400b      	ands	r3, r1
 8001fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
  }
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	fe00e800 	.word	0xfe00e800

08001fcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	f040 80fd 	bne.w	80021ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_I2C_Mem_Read+0x34>
 8001ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0f1      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2C_Mem_Read+0x4e>
 8002016:	2302      	movs	r3, #2
 8002018:	e0ea      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002022:	f7ff fb9b 	bl	800175c <HAL_GetTick>
 8002026:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2319      	movs	r3, #25
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f9af 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d5      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2222      	movs	r2, #34	; 0x22
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800206c:	88f8      	ldrh	r0, [r7, #6]
 800206e:	893a      	ldrh	r2, [r7, #8]
 8002070:	8979      	ldrh	r1, [r7, #10]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	4603      	mov	r3, r0
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f913 	bl	80022a8 <I2C_RequestMemoryRead>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0ad      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2bff      	cmp	r3, #255	; 0xff
 800209c:	d90e      	bls.n	80020bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	22ff      	movs	r2, #255	; 0xff
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <HAL_I2C_Mem_Read+0x22c>)
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fb29 	bl	800270c <I2C_TransferConfig>
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	8979      	ldrh	r1, [r7, #10]
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_I2C_Mem_Read+0x22c>)
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fb18 	bl	800270c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	2104      	movs	r1, #4
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f956 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07c      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d034      	beq.n	800219c <HAL_I2C_Mem_Read+0x1d0>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d130      	bne.n	800219c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	2200      	movs	r2, #0
 8002142:	2180      	movs	r1, #128	; 0x80
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f927 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e04d      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2bff      	cmp	r3, #255	; 0xff
 800215c:	d90e      	bls.n	800217c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	22ff      	movs	r2, #255	; 0xff
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	b2da      	uxtb	r2, r3
 800216a:	8979      	ldrh	r1, [r7, #10]
 800216c:	2300      	movs	r3, #0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fac9 	bl	800270c <I2C_TransferConfig>
 800217a:	e00f      	b.n	800219c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	b2da      	uxtb	r2, r3
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fab8 	bl	800270c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d19a      	bne.n	80020dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f98a 	bl	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e01a      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2220      	movs	r2, #32
 80021c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_I2C_Mem_Read+0x230>)
 80021ce:	400b      	ands	r3, r1
 80021d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	80002400 	.word	0x80002400
 80021fc:	fe00e800 	.word	0xfe00e800

08002200 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4603      	mov	r3, r0
 8002210:	817b      	strh	r3, [r7, #10]
 8002212:	460b      	mov	r3, r1
 8002214:	813b      	strh	r3, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	8979      	ldrh	r1, [r7, #10]
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <I2C_RequestMemoryWrite+0xa4>)
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fa6f 	bl	800270c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8ff 	bl	8002436 <I2C_WaitOnTXISFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e02c      	b.n	800229c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002248:	893b      	ldrh	r3, [r7, #8]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
 8002252:	e015      	b.n	8002280 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002254:	893b      	ldrh	r3, [r7, #8]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	b29b      	uxth	r3, r3
 800225a:	b2da      	uxtb	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8e5 	bl	8002436 <I2C_WaitOnTXISFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e012      	b.n	800229c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002276:	893b      	ldrh	r3, [r7, #8]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2200      	movs	r2, #0
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f884 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	80002000 	.word	0x80002000

080022a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	8979      	ldrh	r1, [r7, #10]
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <I2C_RequestMemoryRead+0xa4>)
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2300      	movs	r3, #0
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fa1c 	bl	800270c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f8ac 	bl	8002436 <I2C_WaitOnTXISFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e02c      	b.n	8002342 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ee:	893b      	ldrh	r3, [r7, #8]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
 80022f8:	e015      	b.n	8002326 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022fa:	893b      	ldrh	r3, [r7, #8]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b29b      	uxth	r3, r3
 8002300:	b2da      	uxtb	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f892 	bl	8002436 <I2C_WaitOnTXISFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e012      	b.n	8002342 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800231c:	893b      	ldrh	r3, [r7, #8]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2200      	movs	r2, #0
 800232e:	2140      	movs	r1, #64	; 0x40
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f831 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	80002000 	.word	0x80002000

08002350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d103      	bne.n	800236e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d007      	beq.n	800238c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	619a      	str	r2, [r3, #24]
  }
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a8:	e031      	b.n	800240e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d02d      	beq.n	800240e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7ff f9d3 	bl	800175c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d122      	bne.n	800240e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4013      	ands	r3, r2
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d113      	bne.n	800240e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4013      	ands	r3, r2
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	429a      	cmp	r2, r3
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	429a      	cmp	r2, r3
 800242a:	d0be      	beq.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002442:	e033      	b.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f87f 	bl	800254c <I2C_IsErrorOccurred>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e031      	b.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245e:	d025      	beq.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7ff f97c 	bl	800175c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11a      	bne.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b02      	cmp	r3, #2
 8002482:	d013      	beq.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e007      	b.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d1c4      	bne.n	8002444 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d0:	e02f      	b.n	8002532 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f838 	bl	800254c <I2C_IsErrorOccurred>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e02d      	b.n	8002542 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7ff f939 	bl	800175c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11a      	bne.n	8002532 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b20      	cmp	r3, #32
 8002508:	d013      	beq.n	8002532 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e007      	b.n	8002542 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b20      	cmp	r3, #32
 800253e:	d1c8      	bne.n	80024d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d068      	beq.n	800264a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2210      	movs	r2, #16
 800257e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002580:	e049      	b.n	8002616 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d045      	beq.n	8002616 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800258a:	f7ff f8e7 	bl	800175c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	d302      	bcc.n	80025a0 <I2C_IsErrorOccurred+0x54>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d13a      	bne.n	8002616 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c2:	d121      	bne.n	8002608 <I2C_IsErrorOccurred+0xbc>
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ca:	d01d      	beq.n	8002608 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d01a      	beq.n	8002608 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025e2:	f7ff f8bb 	bl	800175c <HAL_GetTick>
 80025e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025e8:	e00e      	b.n	8002608 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025ea:	f7ff f8b7 	bl	800175c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b19      	cmp	r3, #25
 80025f6:	d907      	bls.n	8002608 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f043 0320 	orr.w	r3, r3, #32
 80025fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002606:	e006      	b.n	8002616 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b20      	cmp	r3, #32
 8002614:	d1e9      	bne.n	80025ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b20      	cmp	r3, #32
 8002622:	d003      	beq.n	800262c <I2C_IsErrorOccurred+0xe0>
 8002624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0aa      	beq.n	8002582 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800262c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2220      	movs	r2, #32
 800263a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f043 0304 	orr.w	r3, r3, #4
 8002642:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00b      	beq.n	8002674 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f043 0308 	orr.w	r3, r3, #8
 8002684:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800268e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01c      	beq.n	80026fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fe45 	bl	8002350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <I2C_IsErrorOccurred+0x1bc>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3728      	adds	r7, #40	; 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	fe00e800 	.word	0xfe00e800

0800270c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	4613      	mov	r3, r2
 800271c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002724:	7a7b      	ldrb	r3, [r7, #9]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800272c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	4313      	orrs	r3, r2
 8002736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800273a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	0d5b      	lsrs	r3, r3, #21
 8002746:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <I2C_TransferConfig+0x60>)
 800274c:	430b      	orrs	r3, r1
 800274e:	43db      	mvns	r3, r3
 8002750:	ea02 0103 	and.w	r1, r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	03ff63ff 	.word	0x03ff63ff

08002770 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	d138      	bne.n	80027f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002790:	2302      	movs	r3, #2
 8002792:	e032      	b.n	80027fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	d139      	bne.n	8002890 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002826:	2302      	movs	r3, #2
 8002828:	e033      	b.n	8002892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2224      	movs	r2, #36	; 0x24
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002858:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002890:	2302      	movs	r3, #2
  }
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f001 b83a 	b.w	800393a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 816f 	beq.w	8002bba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028dc:	4bb5      	ldr	r3, [pc, #724]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d00c      	beq.n	8002902 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028e8:	4bb2      	ldr	r3, [pc, #712]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d15c      	bne.n	80029ae <HAL_RCC_OscConfig+0x10e>
 80028f4:	4baf      	ldr	r3, [pc, #700]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d155      	bne.n	80029ae <HAL_RCC_OscConfig+0x10e>
 8002902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002906:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002916:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_RCC_OscConfig+0x94>
 800292e:	4ba1      	ldr	r3, [pc, #644]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e015      	b.n	8002960 <HAL_RCC_OscConfig+0xc0>
 8002934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002938:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002950:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800295c:	4b95      	ldr	r3, [pc, #596]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002964:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002968:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800296c:	fa92 f2a2 	rbit	r2, r2
 8002970:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002974:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f002 021f 	and.w	r2, r2, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8111 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x318>
 8002996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 8108 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f000 bfc6 	b.w	800393a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x12e>
 80029c0:	4b7c      	ldr	r3, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a7b      	ldr	r2, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e036      	b.n	8002a3c <HAL_RCC_OscConfig+0x19c>
 80029ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x158>
 80029de:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a74      	ldr	r2, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a71      	ldr	r2, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 80029f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e021      	b.n	8002a3c <HAL_RCC_OscConfig+0x19c>
 80029f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x184>
 8002a0a:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0x19c>
 8002a24:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a62      	ldr	r2, [pc, #392]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5f      	ldr	r2, [pc, #380]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d059      	beq.n	8002b00 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fe86 	bl	800175c <HAL_GetTick>
 8002a50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a56:	f7fe fe81 	bl	800175c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d902      	bls.n	8002a6c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	f000 bf67 	b.w	800393a <HAL_RCC_OscConfig+0x109a>
 8002a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a70:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002a80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_OscConfig+0x1fe>
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x22a>
 8002a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002aba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ace:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002ad2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002ad6:	fa92 f2a2 	rbit	r2, r2
 8002ada:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002ade:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0220 	orr.w	r2, r2, #32
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ab      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1b6>
 8002afe:	e05c      	b.n	8002bba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fe2c 	bl	800175c <HAL_GetTick>
 8002b04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fe27 	bl	800175c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d902      	bls.n	8002b20 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	f000 bf0d 	b.w	800393a <HAL_RCC_OscConfig+0x109a>
 8002b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002b34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2b2>
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x2de>
 8002b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RCC_OscConfig+0x314>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b82:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002b86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002b8a:	fa92 f2a2 	rbit	r2, r2
 8002b8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002b92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ab      	bne.n	8002b0a <HAL_RCC_OscConfig+0x26a>
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_OscConfig+0x31a>
 8002bb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 817f 	beq.w	8002ece <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bd0:	4ba7      	ldr	r3, [pc, #668]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bdc:	4ba4      	ldr	r3, [pc, #656]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d173      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x430>
 8002be8:	4ba1      	ldr	r3, [pc, #644]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf4:	d16c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x430>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002c08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HAL_RCC_OscConfig+0x386>
 8002c20:	4b93      	ldr	r3, [pc, #588]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	e013      	b.n	8002c4e <HAL_RCC_OscConfig+0x3ae>
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c3e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c4a:	4b89      	ldr	r3, [pc, #548]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002c54:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002c58:	fa92 f2a2 	rbit	r2, r2
 8002c5c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002c60:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c64:	fab2 f282 	clz	r2, r2
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	f042 0220 	orr.w	r2, r2, #32
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f002 021f 	and.w	r2, r2, #31
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCC_OscConfig+0x3f6>
 8002c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d002      	beq.n	8002c96 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f000 be52 	b.w	800393a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	21f8      	movs	r1, #248	; 0xf8
 8002cac:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002cb4:	fa91 f1a1 	rbit	r1, r1
 8002cb8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002cbc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cc0:	fab1 f181 	clz	r1, r1
 8002cc4:	b2c9      	uxtb	r1, r1
 8002cc6:	408b      	lsls	r3, r1
 8002cc8:	4969      	ldr	r1, [pc, #420]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	e0fe      	b.n	8002ece <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8088 	beq.w	8002df2 <HAL_RCC_OscConfig+0x552>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002cf4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fd25 	bl	800175c <HAL_GetTick>
 8002d12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d18:	f7fe fd20 	bl	800175c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d902      	bls.n	8002d2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	f000 be06 	b.w	800393a <HAL_RCC_OscConfig+0x109a>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002d40:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d102      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4be>
 8002d58:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	e013      	b.n	8002d86 <HAL_RCC_OscConfig+0x4e6>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d70:	2302      	movs	r3, #2
 8002d72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d82:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2202      	movs	r2, #2
 8002d88:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002d8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002d90:	fa92 f2a2 	rbit	r2, r2
 8002d94:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002d98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f042 0220 	orr.w	r2, r2, #32
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f002 021f 	and.w	r2, r2, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f202 	lsl.w	r2, r1, r2
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0af      	beq.n	8002d18 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	21f8      	movs	r1, #248	; 0xf8
 8002dce:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002dd6:	fa91 f1a1 	rbit	r1, r1
 8002dda:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002dde:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002de2:	fab1 f181 	clz	r1, r1
 8002de6:	b2c9      	uxtb	r1, r1
 8002de8:	408b      	lsls	r3, r1
 8002dea:	4921      	ldr	r1, [pc, #132]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	e06d      	b.n	8002ece <HAL_RCC_OscConfig+0x62e>
 8002df2:	2301      	movs	r3, #1
 8002df4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002e04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fc9d 	bl	800175c <HAL_GetTick>
 8002e22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e28:	f7fe fc98 	bl	800175c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d902      	bls.n	8002e3e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	f000 bd7e 	b.w	800393a <HAL_RCC_OscConfig+0x109a>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002e50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCC_OscConfig+0x5d4>
 8002e68:	4b01      	ldr	r3, [pc, #4]	; (8002e70 <HAL_RCC_OscConfig+0x5d0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	e016      	b.n	8002e9c <HAL_RCC_OscConfig+0x5fc>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e86:	2302      	movs	r3, #2
 8002e88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e98:	4bbf      	ldr	r3, [pc, #764]	; (8003198 <HAL_RCC_OscConfig+0x8f8>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002ea2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002ea6:	fa92 f2a2 	rbit	r2, r2
 8002eaa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002eae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002eb2:	fab2 f282 	clz	r2, r2
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f042 0220 	orr.w	r2, r2, #32
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 021f 	and.w	r2, r2, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1ac      	bne.n	8002e28 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8113 	beq.w	800310a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d07c      	beq.n	8002fee <HAL_RCC_OscConfig+0x74e>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4ba2      	ldr	r3, [pc, #648]	; (800319c <HAL_RCC_OscConfig+0x8fc>)
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fc1d 	bl	800175c <HAL_GetTick>
 8002f22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f28:	f7fe fc18 	bl	800175c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d902      	bls.n	8002f3e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	f000 bcfe 	b.w	800393a <HAL_RCC_OscConfig+0x109a>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f82:	2202      	movs	r2, #2
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f2a3 	rbit	r2, r3
 8002f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	4b7e      	ldr	r3, [pc, #504]	; (8003198 <HAL_RCC_OscConfig+0x8f8>)
 8002fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002faa:	2102      	movs	r1, #2
 8002fac:	6019      	str	r1, [r3, #0]
 8002fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f1a3 	rbit	r1, r3
 8002fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fc4:	6019      	str	r1, [r3, #0]
  return result;
 8002fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d09d      	beq.n	8002f28 <HAL_RCC_OscConfig+0x688>
 8002fec:	e08d      	b.n	800310a <HAL_RCC_OscConfig+0x86a>
 8002fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fa93 f2a3 	rbit	r2, r3
 8003008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800300c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003010:	601a      	str	r2, [r3, #0]
  return result;
 8003012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003016:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800301a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	4b5d      	ldr	r3, [pc, #372]	; (800319c <HAL_RCC_OscConfig+0x8fc>)
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	461a      	mov	r2, r3
 800302c:	2300      	movs	r3, #0
 800302e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fe fb94 	bl	800175c <HAL_GetTick>
 8003034:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe fb8f 	bl	800175c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	f000 bc75 	b.w	800393a <HAL_RCC_OscConfig+0x109a>
 8003050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003054:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003058:	2202      	movs	r2, #2
 800305a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003060:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003078:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800307c:	2202      	movs	r2, #2
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003084:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030a0:	2202      	movs	r2, #2
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_OscConfig+0x8f8>)
 80030be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030c8:	2102      	movs	r1, #2
 80030ca:	6019      	str	r1, [r3, #0]
 80030cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f1a3 	rbit	r1, r3
 80030da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030e2:	6019      	str	r1, [r3, #0]
  return result;
 80030e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d197      	bne.n	800303a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800310e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 81a5 	beq.w	800346a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCC_OscConfig+0x8f8>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_RCC_OscConfig+0x8f8>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <HAL_RCC_OscConfig+0x8f8>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	61d3      	str	r3, [r2, #28]
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <HAL_RCC_OscConfig+0x8f8>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800314a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003158:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_RCC_OscConfig+0x900>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d121      	bne.n	80031b0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_RCC_OscConfig+0x900>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x900>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003176:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003178:	f7fe faf0 	bl	800175c <HAL_GetTick>
 800317c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	e010      	b.n	80031a4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003182:	f7fe faeb 	bl	800175c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d908      	bls.n	80031a4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e3d1      	b.n	800393a <HAL_RCC_OscConfig+0x109a>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	10908120 	.word	0x10908120
 80031a0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b8d      	ldr	r3, [pc, #564]	; (80033dc <HAL_RCC_OscConfig+0xb3c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0e8      	beq.n	8003182 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x92e>
 80031c0:	4b87      	ldr	r3, [pc, #540]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a86      	ldr	r2, [pc, #536]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	e035      	b.n	800323a <HAL_RCC_OscConfig+0x99a>
 80031ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x958>
 80031de:	4b80      	ldr	r3, [pc, #512]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a7f      	ldr	r2, [pc, #508]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b7d      	ldr	r3, [pc, #500]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a7c      	ldr	r2, [pc, #496]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	e020      	b.n	800323a <HAL_RCC_OscConfig+0x99a>
 80031f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x982>
 8003208:	4b75      	ldr	r3, [pc, #468]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a74      	ldr	r2, [pc, #464]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	4b72      	ldr	r3, [pc, #456]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a71      	ldr	r2, [pc, #452]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e00b      	b.n	800323a <HAL_RCC_OscConfig+0x99a>
 8003222:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a6e      	ldr	r2, [pc, #440]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	4b6c      	ldr	r3, [pc, #432]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a6b      	ldr	r2, [pc, #428]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8081 	beq.w	800334e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7fe fa86 	bl	800175c <HAL_GetTick>
 8003250:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fe fa81 	bl	800175c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e365      	b.n	800393a <HAL_RCC_OscConfig+0x109a>
 800326e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003272:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800327e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003296:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800329a:	2202      	movs	r2, #2
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032b4:	601a      	str	r2, [r3, #0]
  return result;
 80032b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d102      	bne.n	80032da <HAL_RCC_OscConfig+0xa3a>
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	e013      	b.n	8003302 <HAL_RCC_OscConfig+0xa62>
 80032da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032e2:	2202      	movs	r2, #2
 80032e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003306:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800330a:	2102      	movs	r1, #2
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003312:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	fa92 f1a2 	rbit	r1, r2
 800331c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003320:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003324:	6011      	str	r1, [r2, #0]
  return result;
 8003326:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800332a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	fab2 f282 	clz	r2, r2
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f002 021f 	and.w	r2, r2, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d084      	beq.n	8003256 <HAL_RCC_OscConfig+0x9b6>
 800334c:	e083      	b.n	8003456 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7fe fa05 	bl	800175c <HAL_GetTick>
 8003352:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fe fa00 	bl	800175c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e2e4      	b.n	800393a <HAL_RCC_OscConfig+0x109a>
 8003370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003374:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003378:	2202      	movs	r2, #2
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003380:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800338e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003398:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800339c:	2202      	movs	r2, #2
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033b6:	601a      	str	r2, [r3, #0]
  return result;
 80033b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033bc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0xb44>
 80033d6:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <HAL_RCC_OscConfig+0xb40>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	e017      	b.n	800340c <HAL_RCC_OscConfig+0xb6c>
 80033dc:	40007000 	.word	0x40007000
 80033e0:	40021000 	.word	0x40021000
 80033e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80033ec:	2202      	movs	r2, #2
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	fa93 f2a3 	rbit	r2, r3
 80033fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003402:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	4bb3      	ldr	r3, [pc, #716]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003410:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003414:	2102      	movs	r1, #2
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800341c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	fa92 f1a2 	rbit	r1, r2
 8003426:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800342a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800342e:	6011      	str	r1, [r2, #0]
  return result;
 8003430:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003434:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	fab2 f282 	clz	r2, r2
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	f002 021f 	and.w	r2, r2, #31
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d180      	bne.n	8003358 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003456:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b9e      	ldr	r3, [pc, #632]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4a9d      	ldr	r2, [pc, #628]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 825e 	beq.w	8003938 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800347c:	4b96      	ldr	r3, [pc, #600]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	f000 821f 	beq.w	80038c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b02      	cmp	r3, #2
 8003498:	f040 8170 	bne.w	800377c <HAL_RCC_OscConfig+0xedc>
 800349c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034c0:	601a      	str	r2, [r3, #0]
  return result;
 80034c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034ca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	461a      	mov	r2, r3
 80034de:	2300      	movs	r3, #0
 80034e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fe f93b 	bl	800175c <HAL_GetTick>
 80034e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	e009      	b.n	8003500 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe f936 	bl	800175c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e21c      	b.n	800393a <HAL_RCC_OscConfig+0x109a>
 8003500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003504:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003512:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fa93 f2a3 	rbit	r2, r3
 800351c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003520:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003524:	601a      	str	r2, [r3, #0]
  return result;
 8003526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800352a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800352e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d102      	bne.n	800354a <HAL_RCC_OscConfig+0xcaa>
 8003544:	4b64      	ldr	r3, [pc, #400]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	e027      	b.n	800359a <HAL_RCC_OscConfig+0xcfa>
 800354a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800356a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003574:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003582:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f2a3 	rbit	r2, r3
 800358c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003590:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800359e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035a6:	6011      	str	r1, [r2, #0]
 80035a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	fa92 f1a2 	rbit	r1, r2
 80035b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035ba:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035be:	6011      	str	r1, [r2, #0]
  return result;
 80035c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035c4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f042 0220 	orr.w	r2, r2, #32
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	f002 021f 	and.w	r2, r2, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d182      	bne.n	80034ec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e6:	4b3c      	ldr	r3, [pc, #240]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	f023 020f 	bic.w	r2, r3, #15
 80035ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	4937      	ldr	r1, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003600:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800360c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a19      	ldr	r1, [r3, #32]
 8003614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003618:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	430b      	orrs	r3, r1
 8003622:	492d      	ldr	r1, [pc, #180]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
 8003628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800363a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	fa93 f2a3 	rbit	r2, r3
 8003644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003648:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800364c:	601a      	str	r2, [r3, #0]
  return result;
 800364e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003652:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003656:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003662:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	461a      	mov	r2, r3
 800366a:	2301      	movs	r3, #1
 800366c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7fe f875 	bl	800175c <HAL_GetTick>
 8003672:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003676:	e009      	b.n	800368c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe f870 	bl	800175c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e156      	b.n	800393a <HAL_RCC_OscConfig+0x109a>
 800368c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003690:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800369e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036b0:	601a      	str	r2, [r3, #0]
  return result;
 80036b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d105      	bne.n	80036dc <HAL_RCC_OscConfig+0xe3c>
 80036d0:	4b01      	ldr	r3, [pc, #4]	; (80036d8 <HAL_RCC_OscConfig+0xe38>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	e02a      	b.n	800372c <HAL_RCC_OscConfig+0xe8c>
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
 80036dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	fa93 f2a3 	rbit	r2, r3
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003706:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800370a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003714:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003722:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	4b86      	ldr	r3, [pc, #536]	; (8003944 <HAL_RCC_OscConfig+0x10a4>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003730:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003734:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003738:	6011      	str	r1, [r2, #0]
 800373a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800373e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	fa92 f1a2 	rbit	r1, r2
 8003748:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800374c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003750:	6011      	str	r1, [r2, #0]
  return result;
 8003752:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003756:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	fab2 f282 	clz	r2, r2
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	f042 0220 	orr.w	r2, r2, #32
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	f002 021f 	and.w	r2, r2, #31
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f202 	lsl.w	r2, r1, r2
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	f43f af7f 	beq.w	8003678 <HAL_RCC_OscConfig+0xdd8>
 800377a:	e0dd      	b.n	8003938 <HAL_RCC_OscConfig+0x1098>
 800377c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003780:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	fa93 f2a3 	rbit	r2, r3
 8003798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037a0:	601a      	str	r2, [r3, #0]
  return result;
 80037a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	461a      	mov	r2, r3
 80037be:	2300      	movs	r3, #0
 80037c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fd ffcb 	bl	800175c <HAL_GetTick>
 80037c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	e009      	b.n	80037e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd ffc6 	bl	800175c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0ac      	b.n	800393a <HAL_RCC_OscConfig+0x109a>
 80037e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	fa93 f2a3 	rbit	r2, r3
 80037fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003800:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003804:	601a      	str	r2, [r3, #0]
  return result;
 8003806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800380e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003810:	fab3 f383 	clz	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d102      	bne.n	800382a <HAL_RCC_OscConfig+0xf8a>
 8003824:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_OscConfig+0x10a4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	e027      	b.n	800387a <HAL_RCC_OscConfig+0xfda>
 800382a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	fa93 f2a3 	rbit	r2, r3
 8003846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003854:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003862:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	fa93 f2a3 	rbit	r2, r3
 800386c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003870:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_RCC_OscConfig+0x10a4>)
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800387e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003882:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003886:	6011      	str	r1, [r2, #0]
 8003888:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800388c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	fa92 f1a2 	rbit	r1, r2
 8003896:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800389a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800389e:	6011      	str	r1, [r2, #0]
  return result;
 80038a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038a4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f042 0220 	orr.w	r2, r2, #32
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	f002 021f 	and.w	r2, r2, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d182      	bne.n	80037cc <HAL_RCC_OscConfig+0xf2c>
 80038c6:	e037      	b.n	8003938 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e02e      	b.n	800393a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_RCC_OscConfig+0x10a4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80038e4:	4b17      	ldr	r3, [pc, #92]	; (8003944 <HAL_RCC_OscConfig+0x10a4>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80038f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	429a      	cmp	r2, r3
 8003902:	d117      	bne.n	8003934 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003904:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003908:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003918:	429a      	cmp	r2, r3
 800391a:	d10b      	bne.n	8003934 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800391c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003928:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000

08003948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b09e      	sub	sp, #120	; 0x78
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e162      	b.n	8003c26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003960:	4b90      	ldr	r3, [pc, #576]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d910      	bls.n	8003990 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 0207 	bic.w	r2, r3, #7
 8003976:	498b      	ldr	r1, [pc, #556]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b89      	ldr	r3, [pc, #548]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e14a      	b.n	8003c26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b82      	ldr	r3, [pc, #520]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	497f      	ldr	r1, [pc, #508]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80dc 	beq.w	8003b74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d13c      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xf6>
 80039c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d102      	bne.n	80039ee <HAL_RCC_ClockConfig+0xa6>
 80039e8:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	e00f      	b.n	8003a0e <HAL_RCC_ClockConfig+0xc6>
 80039ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	667b      	str	r3, [r7, #100]	; 0x64
 80039fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a00:	663b      	str	r3, [r7, #96]	; 0x60
 8003a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a0a:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a12:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a16:	fa92 f2a2 	rbit	r2, r2
 8003a1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a1e:	fab2 f282 	clz	r2, r2
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	f042 0220 	orr.w	r2, r2, #32
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	f002 021f 	and.w	r2, r2, #31
 8003a2e:	2101      	movs	r1, #1
 8003a30:	fa01 f202 	lsl.w	r2, r1, r2
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d17b      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0f3      	b.n	8003c26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d13c      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x178>
 8003a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x128>
 8003a6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	e00f      	b.n	8003a90 <HAL_RCC_ClockConfig+0x148>
 8003a70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40
 8003a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8c:	4b46      	ldr	r3, [pc, #280]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a94:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a98:	fa92 f2a2 	rbit	r2, r2
 8003a9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aa0:	fab2 f282 	clz	r2, r2
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	f042 0220 	orr.w	r2, r2, #32
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	f002 021f 	and.w	r2, r2, #31
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d13a      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0b2      	b.n	8003c26 <HAL_RCC_ClockConfig+0x2de>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d102      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
 8003ae2:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	e00d      	b.n	8003b04 <HAL_RCC_ClockConfig+0x1bc>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
 8003af4:	2302      	movs	r3, #2
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	4b29      	ldr	r3, [pc, #164]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2202      	movs	r2, #2
 8003b06:	61ba      	str	r2, [r7, #24]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	fa92 f2a2 	rbit	r2, r2
 8003b0e:	617a      	str	r2, [r7, #20]
  return result;
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	fab2 f282 	clz	r2, r2
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f042 0220 	orr.w	r2, r2, #32
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f002 021f 	and.w	r2, r2, #31
 8003b22:	2101      	movs	r1, #1
 8003b24:	fa01 f202 	lsl.w	r2, r1, r2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e079      	b.n	8003c26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	491a      	ldr	r1, [pc, #104]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b44:	f7fd fe0a 	bl	800175c <HAL_GetTick>
 8003b48:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fd fe06 	bl	800175c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e061      	b.n	8003c26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d214      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	4906      	ldr	r1, [pc, #24]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e040      	b.n	8003c26 <HAL_RCC_ClockConfig+0x2de>
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb8:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <HAL_RCC_ClockConfig+0x2e8>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	491a      	ldr	r1, [pc, #104]	; (8003c30 <HAL_RCC_ClockConfig+0x2e8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_RCC_ClockConfig+0x2e8>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4912      	ldr	r1, [pc, #72]	; (8003c30 <HAL_RCC_ClockConfig+0x2e8>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bea:	f000 f829 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003bee:	4601      	mov	r1, r0
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <HAL_RCC_ClockConfig+0x2e8>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf8:	22f0      	movs	r2, #240	; 0xf0
 8003bfa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	fa92 f2a2 	rbit	r2, r2
 8003c02:	60fa      	str	r2, [r7, #12]
  return result;
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	fab2 f282 	clz	r2, r2
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	40d3      	lsrs	r3, r2
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x2ec>)
 8003c10:	5cd3      	ldrb	r3, [r2, r3]
 8003c12:	fa21 f303 	lsr.w	r3, r1, r3
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <HAL_RCC_ClockConfig+0x2f0>)
 8003c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <HAL_RCC_ClockConfig+0x2f4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd fd58 	bl	80016d4 <HAL_InitTick>
  
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3778      	adds	r7, #120	; 0x78
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	0800777c 	.word	0x0800777c
 8003c38:	20000004 	.word	0x20000004
 8003c3c:	20000008 	.word	0x20000008

08003c40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b08b      	sub	sp, #44	; 0x2c
 8003c44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	; (8003d04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x30>
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x36>
 8003c6e:	e03f      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c72:	623b      	str	r3, [r7, #32]
      break;
 8003c74:	e03f      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c7c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c80:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	fa92 f2a2 	rbit	r2, r2
 8003c88:	607a      	str	r2, [r7, #4]
  return result;
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	fab2 f282 	clz	r2, r2
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	40d3      	lsrs	r3, r2
 8003c94:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	fa92 f2a2 	rbit	r2, r2
 8003cac:	60fa      	str	r2, [r7, #12]
  return result;
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	fab2 f282 	clz	r2, r2
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	40d3      	lsrs	r3, r2
 8003cb8:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd8:	e007      	b.n	8003cea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cda:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	623b      	str	r3, [r7, #32]
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cf2:	623b      	str	r3, [r7, #32]
      break;
 8003cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	372c      	adds	r7, #44	; 0x2c
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40021000 	.word	0x40021000
 8003d08:	007a1200 	.word	0x007a1200
 8003d0c:	08007794 	.word	0x08007794
 8003d10:	080077a4 	.word	0x080077a4

08003d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d18:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000004 	.word	0x20000004

08003d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d32:	f7ff ffef 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d36:	4601      	mov	r1, r0
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d40:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	fa92 f2a2 	rbit	r2, r2
 8003d4c:	603a      	str	r2, [r7, #0]
  return result;
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	fab2 f282 	clz	r2, r2
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	40d3      	lsrs	r3, r2
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d5a:	5cd3      	ldrb	r3, [r2, r3]
 8003d5c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	0800778c 	.word	0x0800778c

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d76:	f7ff ffcd 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d7a:	4601      	mov	r1, r0
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d84:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	fa92 f2a2 	rbit	r2, r2
 8003d90:	603a      	str	r2, [r7, #0]
  return result;
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	fab2 f282 	clz	r2, r2
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	40d3      	lsrs	r3, r2
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	0800778c 	.word	0x0800778c

08003db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b092      	sub	sp, #72	; 0x48
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80d4 	beq.w	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd8:	4b4e      	ldr	r3, [pc, #312]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10e      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de4:	4b4b      	ldr	r3, [pc, #300]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4a4a      	ldr	r2, [pc, #296]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dee:	61d3      	str	r3, [r2, #28]
 8003df0:	4b48      	ldr	r3, [pc, #288]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b45      	ldr	r3, [pc, #276]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d118      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0e:	4b42      	ldr	r3, [pc, #264]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a41      	ldr	r2, [pc, #260]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1a:	f7fd fc9f 	bl	800175c <HAL_GetTick>
 8003e1e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	e008      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e22:	f7fd fc9b 	bl	800175c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b64      	cmp	r3, #100	; 0x64
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1d6      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e40:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8084 	beq.w	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d07c      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e60:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	461a      	mov	r2, r3
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eb2:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04b      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fd fc4b 	bl	800175c <HAL_GetTick>
 8003ec6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eca:	f7fd fc47 	bl	800175c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e180      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
 8003eec:	2302      	movs	r3, #2
 8003eee:	623b      	str	r3, [r7, #32]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d108      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f0e:	4b01      	ldr	r3, [pc, #4]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	e00d      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	10908100 	.word	0x10908100
 8003f20:	2302      	movs	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	4b9a      	ldr	r3, [pc, #616]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2202      	movs	r2, #2
 8003f32:	613a      	str	r2, [r7, #16]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	fa92 f2a2 	rbit	r2, r2
 8003f3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	fab2 f282 	clz	r2, r2
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	f002 021f 	and.w	r2, r2, #31
 8003f4e:	2101      	movs	r1, #1
 8003f50:	fa01 f202 	lsl.w	r2, r1, r2
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0b7      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f5a:	4b8f      	ldr	r3, [pc, #572]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	498c      	ldr	r1, [pc, #560]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d105      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f74:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4a87      	ldr	r2, [pc, #540]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f8c:	4b82      	ldr	r3, [pc, #520]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	f023 0203 	bic.w	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	497f      	ldr	r1, [pc, #508]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003faa:	4b7b      	ldr	r3, [pc, #492]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	4978      	ldr	r1, [pc, #480]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fc8:	4b73      	ldr	r3, [pc, #460]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	4970      	ldr	r1, [pc, #448]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe6:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f023 0210 	bic.w	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4969      	ldr	r1, [pc, #420]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004004:	4b64      	ldr	r3, [pc, #400]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	4961      	ldr	r1, [pc, #388]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004022:	4b5d      	ldr	r3, [pc, #372]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f023 0220 	bic.w	r2, r3, #32
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	495a      	ldr	r1, [pc, #360]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004040:	4b55      	ldr	r3, [pc, #340]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	4952      	ldr	r1, [pc, #328]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800405e:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	494b      	ldr	r1, [pc, #300]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800406c:	4313      	orrs	r3, r2
 800406e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800407c:	4b46      	ldr	r3, [pc, #280]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	4943      	ldr	r1, [pc, #268]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800409a:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	493c      	ldr	r1, [pc, #240]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040b8:	4b37      	ldr	r3, [pc, #220]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	4934      	ldr	r1, [pc, #208]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	492d      	ldr	r1, [pc, #180]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040f4:	4b28      	ldr	r3, [pc, #160]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	4925      	ldr	r1, [pc, #148]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004112:	4b21      	ldr	r3, [pc, #132]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	491e      	ldr	r1, [pc, #120]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	4916      	ldr	r1, [pc, #88]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	490f      	ldr	r1, [pc, #60]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800415c:	4313      	orrs	r3, r2
 800415e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	4907      	ldr	r1, [pc, #28]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00c      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800418a:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	e002      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419e:	4913      	ldr	r1, [pc, #76]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	490b      	ldr	r1, [pc, #44]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	4904      	ldr	r1, [pc, #16]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3748      	adds	r7, #72	; 0x48
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000

080041f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e040      	b.n	8004284 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd f8da 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2224      	movs	r2, #36	; 0x24
 800421c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8b6 	bl	80043a0 <UART_SetConfig>
 8004234:	4603      	mov	r3, r0
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e022      	b.n	8004284 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa7e 	bl	8004748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800425a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800426a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fb05 	bl	800488c <UART_CheckIdleState>
 8004282:	4603      	mov	r3, r0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d178      	bne.n	8004396 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Transmit+0x24>
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e071      	b.n	8004398 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2221      	movs	r2, #33	; 0x21
 80042c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c2:	f7fd fa4b 	bl	800175c <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d108      	bne.n	80042f4 <HAL_UART_Transmit+0x68>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e003      	b.n	80042fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042fc:	e030      	b.n	8004360 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fb67 	bl	80049dc <UART_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e03c      	b.n	8004398 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	881a      	ldrh	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004330:	b292      	uxth	r2, r2
 8004332:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	3302      	adds	r3, #2
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e008      	b.n	800434e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	781a      	ldrb	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b292      	uxth	r2, r2
 8004346:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	3301      	adds	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1c8      	bne.n	80042fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2200      	movs	r2, #0
 8004374:	2140      	movs	r1, #64	; 0x40
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fb30 	bl	80049dc <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d004      	beq.n	800438c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e005      	b.n	8004398 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b92      	ldr	r3, [pc, #584]	; (8004614 <UART_SetConfig+0x274>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	6979      	ldr	r1, [r7, #20]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	430a      	orrs	r2, r1
 8004410:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a80      	ldr	r2, [pc, #512]	; (8004618 <UART_SetConfig+0x278>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d120      	bne.n	800445e <UART_SetConfig+0xbe>
 800441c:	4b7f      	ldr	r3, [pc, #508]	; (800461c <UART_SetConfig+0x27c>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d817      	bhi.n	8004458 <UART_SetConfig+0xb8>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <UART_SetConfig+0x90>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004441 	.word	0x08004441
 8004434:	0800444d 	.word	0x0800444d
 8004438:	08004453 	.word	0x08004453
 800443c:	08004447 	.word	0x08004447
 8004440:	2301      	movs	r3, #1
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e0b5      	b.n	80045b2 <UART_SetConfig+0x212>
 8004446:	2302      	movs	r3, #2
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e0b2      	b.n	80045b2 <UART_SetConfig+0x212>
 800444c:	2304      	movs	r3, #4
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e0af      	b.n	80045b2 <UART_SetConfig+0x212>
 8004452:	2308      	movs	r3, #8
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e0ac      	b.n	80045b2 <UART_SetConfig+0x212>
 8004458:	2310      	movs	r3, #16
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e0a9      	b.n	80045b2 <UART_SetConfig+0x212>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a6f      	ldr	r2, [pc, #444]	; (8004620 <UART_SetConfig+0x280>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d124      	bne.n	80044b2 <UART_SetConfig+0x112>
 8004468:	4b6c      	ldr	r3, [pc, #432]	; (800461c <UART_SetConfig+0x27c>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004470:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004474:	d011      	beq.n	800449a <UART_SetConfig+0xfa>
 8004476:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800447a:	d817      	bhi.n	80044ac <UART_SetConfig+0x10c>
 800447c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004480:	d011      	beq.n	80044a6 <UART_SetConfig+0x106>
 8004482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004486:	d811      	bhi.n	80044ac <UART_SetConfig+0x10c>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <UART_SetConfig+0xf4>
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d006      	beq.n	80044a0 <UART_SetConfig+0x100>
 8004492:	e00b      	b.n	80044ac <UART_SetConfig+0x10c>
 8004494:	2300      	movs	r3, #0
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e08b      	b.n	80045b2 <UART_SetConfig+0x212>
 800449a:	2302      	movs	r3, #2
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e088      	b.n	80045b2 <UART_SetConfig+0x212>
 80044a0:	2304      	movs	r3, #4
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e085      	b.n	80045b2 <UART_SetConfig+0x212>
 80044a6:	2308      	movs	r3, #8
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e082      	b.n	80045b2 <UART_SetConfig+0x212>
 80044ac:	2310      	movs	r3, #16
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e07f      	b.n	80045b2 <UART_SetConfig+0x212>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a5b      	ldr	r2, [pc, #364]	; (8004624 <UART_SetConfig+0x284>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d124      	bne.n	8004506 <UART_SetConfig+0x166>
 80044bc:	4b57      	ldr	r3, [pc, #348]	; (800461c <UART_SetConfig+0x27c>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80044c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044c8:	d011      	beq.n	80044ee <UART_SetConfig+0x14e>
 80044ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044ce:	d817      	bhi.n	8004500 <UART_SetConfig+0x160>
 80044d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044d4:	d011      	beq.n	80044fa <UART_SetConfig+0x15a>
 80044d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044da:	d811      	bhi.n	8004500 <UART_SetConfig+0x160>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <UART_SetConfig+0x148>
 80044e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044e4:	d006      	beq.n	80044f4 <UART_SetConfig+0x154>
 80044e6:	e00b      	b.n	8004500 <UART_SetConfig+0x160>
 80044e8:	2300      	movs	r3, #0
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e061      	b.n	80045b2 <UART_SetConfig+0x212>
 80044ee:	2302      	movs	r3, #2
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e05e      	b.n	80045b2 <UART_SetConfig+0x212>
 80044f4:	2304      	movs	r3, #4
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e05b      	b.n	80045b2 <UART_SetConfig+0x212>
 80044fa:	2308      	movs	r3, #8
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e058      	b.n	80045b2 <UART_SetConfig+0x212>
 8004500:	2310      	movs	r3, #16
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e055      	b.n	80045b2 <UART_SetConfig+0x212>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a47      	ldr	r2, [pc, #284]	; (8004628 <UART_SetConfig+0x288>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d124      	bne.n	800455a <UART_SetConfig+0x1ba>
 8004510:	4b42      	ldr	r3, [pc, #264]	; (800461c <UART_SetConfig+0x27c>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004518:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800451c:	d011      	beq.n	8004542 <UART_SetConfig+0x1a2>
 800451e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004522:	d817      	bhi.n	8004554 <UART_SetConfig+0x1b4>
 8004524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004528:	d011      	beq.n	800454e <UART_SetConfig+0x1ae>
 800452a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800452e:	d811      	bhi.n	8004554 <UART_SetConfig+0x1b4>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <UART_SetConfig+0x19c>
 8004534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004538:	d006      	beq.n	8004548 <UART_SetConfig+0x1a8>
 800453a:	e00b      	b.n	8004554 <UART_SetConfig+0x1b4>
 800453c:	2300      	movs	r3, #0
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e037      	b.n	80045b2 <UART_SetConfig+0x212>
 8004542:	2302      	movs	r3, #2
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e034      	b.n	80045b2 <UART_SetConfig+0x212>
 8004548:	2304      	movs	r3, #4
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e031      	b.n	80045b2 <UART_SetConfig+0x212>
 800454e:	2308      	movs	r3, #8
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e02e      	b.n	80045b2 <UART_SetConfig+0x212>
 8004554:	2310      	movs	r3, #16
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e02b      	b.n	80045b2 <UART_SetConfig+0x212>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a33      	ldr	r2, [pc, #204]	; (800462c <UART_SetConfig+0x28c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d124      	bne.n	80045ae <UART_SetConfig+0x20e>
 8004564:	4b2d      	ldr	r3, [pc, #180]	; (800461c <UART_SetConfig+0x27c>)
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800456c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004570:	d011      	beq.n	8004596 <UART_SetConfig+0x1f6>
 8004572:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004576:	d817      	bhi.n	80045a8 <UART_SetConfig+0x208>
 8004578:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800457c:	d011      	beq.n	80045a2 <UART_SetConfig+0x202>
 800457e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004582:	d811      	bhi.n	80045a8 <UART_SetConfig+0x208>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <UART_SetConfig+0x1f0>
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458c:	d006      	beq.n	800459c <UART_SetConfig+0x1fc>
 800458e:	e00b      	b.n	80045a8 <UART_SetConfig+0x208>
 8004590:	2300      	movs	r3, #0
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e00d      	b.n	80045b2 <UART_SetConfig+0x212>
 8004596:	2302      	movs	r3, #2
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e00a      	b.n	80045b2 <UART_SetConfig+0x212>
 800459c:	2304      	movs	r3, #4
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e007      	b.n	80045b2 <UART_SetConfig+0x212>
 80045a2:	2308      	movs	r3, #8
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e004      	b.n	80045b2 <UART_SetConfig+0x212>
 80045a8:	2310      	movs	r3, #16
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e001      	b.n	80045b2 <UART_SetConfig+0x212>
 80045ae:	2310      	movs	r3, #16
 80045b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ba:	d16b      	bne.n	8004694 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80045bc:	7ffb      	ldrb	r3, [r7, #31]
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d838      	bhi.n	8004634 <UART_SetConfig+0x294>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <UART_SetConfig+0x228>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	08004635 	.word	0x08004635
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004635 	.word	0x08004635
 80045e0:	08004635 	.word	0x08004635
 80045e4:	08004635 	.word	0x08004635
 80045e8:	0800460b 	.word	0x0800460b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7ff fb9e 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 80045f0:	61b8      	str	r0, [r7, #24]
        break;
 80045f2:	e024      	b.n	800463e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7ff fbbc 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 80045f8:	61b8      	str	r0, [r7, #24]
        break;
 80045fa:	e020      	b.n	800463e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <UART_SetConfig+0x290>)
 80045fe:	61bb      	str	r3, [r7, #24]
        break;
 8004600:	e01d      	b.n	800463e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004602:	f7ff fb1d 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8004606:	61b8      	str	r0, [r7, #24]
        break;
 8004608:	e019      	b.n	800463e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460e:	61bb      	str	r3, [r7, #24]
        break;
 8004610:	e015      	b.n	800463e <UART_SetConfig+0x29e>
 8004612:	bf00      	nop
 8004614:	efff69f3 	.word	0xefff69f3
 8004618:	40013800 	.word	0x40013800
 800461c:	40021000 	.word	0x40021000
 8004620:	40004400 	.word	0x40004400
 8004624:	40004800 	.word	0x40004800
 8004628:	40004c00 	.word	0x40004c00
 800462c:	40005000 	.word	0x40005000
 8004630:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	77bb      	strb	r3, [r7, #30]
        break;
 800463c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d073      	beq.n	800472c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	005a      	lsls	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	441a      	add	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b0f      	cmp	r3, #15
 800465e:	d916      	bls.n	800468e <UART_SetConfig+0x2ee>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004666:	d212      	bcs.n	800468e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f023 030f 	bic.w	r3, r3, #15
 8004670:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	b29a      	uxth	r2, r3
 800467e:	89fb      	ldrh	r3, [r7, #14]
 8004680:	4313      	orrs	r3, r2
 8004682:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	89fa      	ldrh	r2, [r7, #14]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e04e      	b.n	800472c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	77bb      	strb	r3, [r7, #30]
 8004692:	e04b      	b.n	800472c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004694:	7ffb      	ldrb	r3, [r7, #31]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d827      	bhi.n	80046ea <UART_SetConfig+0x34a>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x300>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046eb 	.word	0x080046eb
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c4:	f7ff fb32 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 80046c8:	61b8      	str	r0, [r7, #24]
        break;
 80046ca:	e013      	b.n	80046f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046cc:	f7ff fb50 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 80046d0:	61b8      	str	r0, [r7, #24]
        break;
 80046d2:	e00f      	b.n	80046f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <UART_SetConfig+0x3a4>)
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e00c      	b.n	80046f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7ff fab1 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 80046de:	61b8      	str	r0, [r7, #24]
        break;
 80046e0:	e008      	b.n	80046f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e6:	61bb      	str	r3, [r7, #24]
        break;
 80046e8:	e004      	b.n	80046f4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	77bb      	strb	r3, [r7, #30]
        break;
 80046f2:	bf00      	nop
    }

    if (pclk != 0U)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d018      	beq.n	800472c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	085a      	lsrs	r2, r3, #1
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	441a      	add	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b0f      	cmp	r3, #15
 8004712:	d909      	bls.n	8004728 <UART_SetConfig+0x388>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471a:	d205      	bcs.n	8004728 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	e001      	b.n	800472c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004738:	7fbb      	ldrb	r3, [r7, #30]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	007a1200 	.word	0x007a1200

08004748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01a      	beq.n	800485e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004846:	d10a      	bne.n	800485e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	605a      	str	r2, [r3, #4]
  }
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b098      	sub	sp, #96	; 0x60
 8004890:	af02      	add	r7, sp, #8
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800489c:	f7fc ff5e 	bl	800175c <HAL_GetTick>
 80048a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d12e      	bne.n	800490e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b8:	2200      	movs	r2, #0
 80048ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f88c 	bl	80049dc <UART_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d021      	beq.n	800490e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048de:	653b      	str	r3, [r7, #80]	; 0x50
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e6      	bne.n	80048ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e062      	b.n	80049d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d149      	bne.n	80049b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800491c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004924:	2200      	movs	r2, #0
 8004926:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f856 	bl	80049dc <UART_WaitOnFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d03c      	beq.n	80049b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	623b      	str	r3, [r7, #32]
   return(result);
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004954:	633b      	str	r3, [r7, #48]	; 0x30
 8004956:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800495a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e6      	bne.n	8004936 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	60fb      	str	r3, [r7, #12]
   return(result);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004988:	61fa      	str	r2, [r7, #28]
 800498a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	69b9      	ldr	r1, [r7, #24]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	617b      	str	r3, [r7, #20]
   return(result);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e011      	b.n	80049d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3758      	adds	r7, #88	; 0x58
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ec:	e049      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f4:	d045      	beq.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7fc feb1 	bl	800175c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e048      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d031      	beq.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d110      	bne.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2208      	movs	r2, #8
 8004a32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f838 	bl	8004aaa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e029      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5c:	d111      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f81e 	bl	8004aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e00f      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d0a6      	beq.n	80049ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b095      	sub	sp, #84	; 0x54
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e6      	bne.n	8004ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d118      	bne.n	8004b52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f023 0310 	bic.w	r3, r3, #16
 8004b34:	647b      	str	r3, [r7, #68]	; 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6979      	ldr	r1, [r7, #20]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e6      	bne.n	8004b20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b66:	bf00      	nop
 8004b68:	3754      	adds	r7, #84	; 0x54
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <__errno>:
 8004b74:	4b01      	ldr	r3, [pc, #4]	; (8004b7c <__errno+0x8>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000010 	.word	0x20000010

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4d0d      	ldr	r5, [pc, #52]	; (8004bb8 <__libc_init_array+0x38>)
 8004b84:	4c0d      	ldr	r4, [pc, #52]	; (8004bbc <__libc_init_array+0x3c>)
 8004b86:	1b64      	subs	r4, r4, r5
 8004b88:	10a4      	asrs	r4, r4, #2
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	4d0b      	ldr	r5, [pc, #44]	; (8004bc0 <__libc_init_array+0x40>)
 8004b92:	4c0c      	ldr	r4, [pc, #48]	; (8004bc4 <__libc_init_array+0x44>)
 8004b94:	f002 fdc2 	bl	800771c <_init>
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	08007b8c 	.word	0x08007b8c
 8004bbc:	08007b8c 	.word	0x08007b8c
 8004bc0:	08007b8c 	.word	0x08007b8c
 8004bc4:	08007b90 	.word	0x08007b90

08004bc8 <memset>:
 8004bc8:	4402      	add	r2, r0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <memset+0xa>
 8004bd0:	4770      	bx	lr
 8004bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd6:	e7f9      	b.n	8004bcc <memset+0x4>

08004bd8 <__cvt>:
 8004bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bdc:	ec55 4b10 	vmov	r4, r5, d0
 8004be0:	2d00      	cmp	r5, #0
 8004be2:	460e      	mov	r6, r1
 8004be4:	4619      	mov	r1, r3
 8004be6:	462b      	mov	r3, r5
 8004be8:	bfbb      	ittet	lt
 8004bea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bee:	461d      	movlt	r5, r3
 8004bf0:	2300      	movge	r3, #0
 8004bf2:	232d      	movlt	r3, #45	; 0x2d
 8004bf4:	700b      	strb	r3, [r1, #0]
 8004bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bfc:	4691      	mov	r9, r2
 8004bfe:	f023 0820 	bic.w	r8, r3, #32
 8004c02:	bfbc      	itt	lt
 8004c04:	4622      	movlt	r2, r4
 8004c06:	4614      	movlt	r4, r2
 8004c08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c0c:	d005      	beq.n	8004c1a <__cvt+0x42>
 8004c0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c12:	d100      	bne.n	8004c16 <__cvt+0x3e>
 8004c14:	3601      	adds	r6, #1
 8004c16:	2102      	movs	r1, #2
 8004c18:	e000      	b.n	8004c1c <__cvt+0x44>
 8004c1a:	2103      	movs	r1, #3
 8004c1c:	ab03      	add	r3, sp, #12
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	ab02      	add	r3, sp, #8
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	ec45 4b10 	vmov	d0, r4, r5
 8004c28:	4653      	mov	r3, sl
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	f000 fe18 	bl	8005860 <_dtoa_r>
 8004c30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c34:	4607      	mov	r7, r0
 8004c36:	d102      	bne.n	8004c3e <__cvt+0x66>
 8004c38:	f019 0f01 	tst.w	r9, #1
 8004c3c:	d022      	beq.n	8004c84 <__cvt+0xac>
 8004c3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c42:	eb07 0906 	add.w	r9, r7, r6
 8004c46:	d110      	bne.n	8004c6a <__cvt+0x92>
 8004c48:	783b      	ldrb	r3, [r7, #0]
 8004c4a:	2b30      	cmp	r3, #48	; 0x30
 8004c4c:	d10a      	bne.n	8004c64 <__cvt+0x8c>
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2300      	movs	r3, #0
 8004c52:	4620      	mov	r0, r4
 8004c54:	4629      	mov	r1, r5
 8004c56:	f7fb ff3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c5a:	b918      	cbnz	r0, 8004c64 <__cvt+0x8c>
 8004c5c:	f1c6 0601 	rsb	r6, r6, #1
 8004c60:	f8ca 6000 	str.w	r6, [sl]
 8004c64:	f8da 3000 	ldr.w	r3, [sl]
 8004c68:	4499      	add	r9, r3
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4620      	mov	r0, r4
 8004c70:	4629      	mov	r1, r5
 8004c72:	f7fb ff31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c76:	b108      	cbz	r0, 8004c7c <__cvt+0xa4>
 8004c78:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c7c:	2230      	movs	r2, #48	; 0x30
 8004c7e:	9b03      	ldr	r3, [sp, #12]
 8004c80:	454b      	cmp	r3, r9
 8004c82:	d307      	bcc.n	8004c94 <__cvt+0xbc>
 8004c84:	9b03      	ldr	r3, [sp, #12]
 8004c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c88:	1bdb      	subs	r3, r3, r7
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	b004      	add	sp, #16
 8004c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c94:	1c59      	adds	r1, r3, #1
 8004c96:	9103      	str	r1, [sp, #12]
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e7f0      	b.n	8004c7e <__cvt+0xa6>

08004c9c <__exponent>:
 8004c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	bfb8      	it	lt
 8004ca4:	4249      	neglt	r1, r1
 8004ca6:	f803 2b02 	strb.w	r2, [r3], #2
 8004caa:	bfb4      	ite	lt
 8004cac:	222d      	movlt	r2, #45	; 0x2d
 8004cae:	222b      	movge	r2, #43	; 0x2b
 8004cb0:	2909      	cmp	r1, #9
 8004cb2:	7042      	strb	r2, [r0, #1]
 8004cb4:	dd2a      	ble.n	8004d0c <__exponent+0x70>
 8004cb6:	f10d 0407 	add.w	r4, sp, #7
 8004cba:	46a4      	mov	ip, r4
 8004cbc:	270a      	movs	r7, #10
 8004cbe:	46a6      	mov	lr, r4
 8004cc0:	460a      	mov	r2, r1
 8004cc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cc6:	fb07 1516 	mls	r5, r7, r6, r1
 8004cca:	3530      	adds	r5, #48	; 0x30
 8004ccc:	2a63      	cmp	r2, #99	; 0x63
 8004cce:	f104 34ff 	add.w	r4, r4, #4294967295
 8004cd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	dcf1      	bgt.n	8004cbe <__exponent+0x22>
 8004cda:	3130      	adds	r1, #48	; 0x30
 8004cdc:	f1ae 0502 	sub.w	r5, lr, #2
 8004ce0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ce4:	1c44      	adds	r4, r0, #1
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4561      	cmp	r1, ip
 8004cea:	d30a      	bcc.n	8004d02 <__exponent+0x66>
 8004cec:	f10d 0209 	add.w	r2, sp, #9
 8004cf0:	eba2 020e 	sub.w	r2, r2, lr
 8004cf4:	4565      	cmp	r5, ip
 8004cf6:	bf88      	it	hi
 8004cf8:	2200      	movhi	r2, #0
 8004cfa:	4413      	add	r3, r2
 8004cfc:	1a18      	subs	r0, r3, r0
 8004cfe:	b003      	add	sp, #12
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d0a:	e7ed      	b.n	8004ce8 <__exponent+0x4c>
 8004d0c:	2330      	movs	r3, #48	; 0x30
 8004d0e:	3130      	adds	r1, #48	; 0x30
 8004d10:	7083      	strb	r3, [r0, #2]
 8004d12:	70c1      	strb	r1, [r0, #3]
 8004d14:	1d03      	adds	r3, r0, #4
 8004d16:	e7f1      	b.n	8004cfc <__exponent+0x60>

08004d18 <_printf_float>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	ed2d 8b02 	vpush	{d8}
 8004d20:	b08d      	sub	sp, #52	; 0x34
 8004d22:	460c      	mov	r4, r1
 8004d24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d28:	4616      	mov	r6, r2
 8004d2a:	461f      	mov	r7, r3
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	f001 fd3d 	bl	80067ac <_localeconv_r>
 8004d32:	f8d0 a000 	ldr.w	sl, [r0]
 8004d36:	4650      	mov	r0, sl
 8004d38:	f7fb fa52 	bl	80001e0 <strlen>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	f8d8 3000 	ldr.w	r3, [r8]
 8004d48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d4c:	3307      	adds	r3, #7
 8004d4e:	f023 0307 	bic.w	r3, r3, #7
 8004d52:	f103 0208 	add.w	r2, r3, #8
 8004d56:	f8c8 2000 	str.w	r2, [r8]
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d6a:	9307      	str	r3, [sp, #28]
 8004d6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d70:	ee08 0a10 	vmov	s16, r0
 8004d74:	4b9f      	ldr	r3, [pc, #636]	; (8004ff4 <_printf_float+0x2dc>)
 8004d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7e:	f7fb fedd 	bl	8000b3c <__aeabi_dcmpun>
 8004d82:	bb88      	cbnz	r0, 8004de8 <_printf_float+0xd0>
 8004d84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d88:	4b9a      	ldr	r3, [pc, #616]	; (8004ff4 <_printf_float+0x2dc>)
 8004d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8e:	f7fb feb7 	bl	8000b00 <__aeabi_dcmple>
 8004d92:	bb48      	cbnz	r0, 8004de8 <_printf_float+0xd0>
 8004d94:	2200      	movs	r2, #0
 8004d96:	2300      	movs	r3, #0
 8004d98:	4640      	mov	r0, r8
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	f7fb fea6 	bl	8000aec <__aeabi_dcmplt>
 8004da0:	b110      	cbz	r0, 8004da8 <_printf_float+0x90>
 8004da2:	232d      	movs	r3, #45	; 0x2d
 8004da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da8:	4b93      	ldr	r3, [pc, #588]	; (8004ff8 <_printf_float+0x2e0>)
 8004daa:	4894      	ldr	r0, [pc, #592]	; (8004ffc <_printf_float+0x2e4>)
 8004dac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004db0:	bf94      	ite	ls
 8004db2:	4698      	movls	r8, r3
 8004db4:	4680      	movhi	r8, r0
 8004db6:	2303      	movs	r3, #3
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	9b05      	ldr	r3, [sp, #20]
 8004dbc:	f023 0204 	bic.w	r2, r3, #4
 8004dc0:	6022      	str	r2, [r4, #0]
 8004dc2:	f04f 0900 	mov.w	r9, #0
 8004dc6:	9700      	str	r7, [sp, #0]
 8004dc8:	4633      	mov	r3, r6
 8004dca:	aa0b      	add	r2, sp, #44	; 0x2c
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f9d8 	bl	8005184 <_printf_common>
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f040 8090 	bne.w	8004efa <_printf_float+0x1e2>
 8004dda:	f04f 30ff 	mov.w	r0, #4294967295
 8004dde:	b00d      	add	sp, #52	; 0x34
 8004de0:	ecbd 8b02 	vpop	{d8}
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	4642      	mov	r2, r8
 8004dea:	464b      	mov	r3, r9
 8004dec:	4640      	mov	r0, r8
 8004dee:	4649      	mov	r1, r9
 8004df0:	f7fb fea4 	bl	8000b3c <__aeabi_dcmpun>
 8004df4:	b140      	cbz	r0, 8004e08 <_printf_float+0xf0>
 8004df6:	464b      	mov	r3, r9
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bfbc      	itt	lt
 8004dfc:	232d      	movlt	r3, #45	; 0x2d
 8004dfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e02:	487f      	ldr	r0, [pc, #508]	; (8005000 <_printf_float+0x2e8>)
 8004e04:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <_printf_float+0x2ec>)
 8004e06:	e7d1      	b.n	8004dac <_printf_float+0x94>
 8004e08:	6863      	ldr	r3, [r4, #4]
 8004e0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e0e:	9206      	str	r2, [sp, #24]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	d13f      	bne.n	8004e94 <_printf_float+0x17c>
 8004e14:	2306      	movs	r3, #6
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	9b05      	ldr	r3, [sp, #20]
 8004e1a:	6861      	ldr	r1, [r4, #4]
 8004e1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e20:	2300      	movs	r3, #0
 8004e22:	9303      	str	r3, [sp, #12]
 8004e24:	ab0a      	add	r3, sp, #40	; 0x28
 8004e26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e2a:	ab09      	add	r3, sp, #36	; 0x24
 8004e2c:	ec49 8b10 	vmov	d0, r8, r9
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	6022      	str	r2, [r4, #0]
 8004e34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f7ff fecd 	bl	8004bd8 <__cvt>
 8004e3e:	9b06      	ldr	r3, [sp, #24]
 8004e40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e42:	2b47      	cmp	r3, #71	; 0x47
 8004e44:	4680      	mov	r8, r0
 8004e46:	d108      	bne.n	8004e5a <_printf_float+0x142>
 8004e48:	1cc8      	adds	r0, r1, #3
 8004e4a:	db02      	blt.n	8004e52 <_printf_float+0x13a>
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	dd41      	ble.n	8004ed6 <_printf_float+0x1be>
 8004e52:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e56:	fa5f fb8b 	uxtb.w	fp, fp
 8004e5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e5e:	d820      	bhi.n	8004ea2 <_printf_float+0x18a>
 8004e60:	3901      	subs	r1, #1
 8004e62:	465a      	mov	r2, fp
 8004e64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e68:	9109      	str	r1, [sp, #36]	; 0x24
 8004e6a:	f7ff ff17 	bl	8004c9c <__exponent>
 8004e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e70:	1813      	adds	r3, r2, r0
 8004e72:	2a01      	cmp	r2, #1
 8004e74:	4681      	mov	r9, r0
 8004e76:	6123      	str	r3, [r4, #16]
 8004e78:	dc02      	bgt.n	8004e80 <_printf_float+0x168>
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	07d2      	lsls	r2, r2, #31
 8004e7e:	d501      	bpl.n	8004e84 <_printf_float+0x16c>
 8004e80:	3301      	adds	r3, #1
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d09c      	beq.n	8004dc6 <_printf_float+0xae>
 8004e8c:	232d      	movs	r3, #45	; 0x2d
 8004e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e92:	e798      	b.n	8004dc6 <_printf_float+0xae>
 8004e94:	9a06      	ldr	r2, [sp, #24]
 8004e96:	2a47      	cmp	r2, #71	; 0x47
 8004e98:	d1be      	bne.n	8004e18 <_printf_float+0x100>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1bc      	bne.n	8004e18 <_printf_float+0x100>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e7b9      	b.n	8004e16 <_printf_float+0xfe>
 8004ea2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ea6:	d118      	bne.n	8004eda <_printf_float+0x1c2>
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	6863      	ldr	r3, [r4, #4]
 8004eac:	dd0b      	ble.n	8004ec6 <_printf_float+0x1ae>
 8004eae:	6121      	str	r1, [r4, #16]
 8004eb0:	b913      	cbnz	r3, 8004eb8 <_printf_float+0x1a0>
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	07d0      	lsls	r0, r2, #31
 8004eb6:	d502      	bpl.n	8004ebe <_printf_float+0x1a6>
 8004eb8:	3301      	adds	r3, #1
 8004eba:	440b      	add	r3, r1
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ec0:	f04f 0900 	mov.w	r9, #0
 8004ec4:	e7de      	b.n	8004e84 <_printf_float+0x16c>
 8004ec6:	b913      	cbnz	r3, 8004ece <_printf_float+0x1b6>
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	07d2      	lsls	r2, r2, #31
 8004ecc:	d501      	bpl.n	8004ed2 <_printf_float+0x1ba>
 8004ece:	3302      	adds	r3, #2
 8004ed0:	e7f4      	b.n	8004ebc <_printf_float+0x1a4>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e7f2      	b.n	8004ebc <_printf_float+0x1a4>
 8004ed6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004edc:	4299      	cmp	r1, r3
 8004ede:	db05      	blt.n	8004eec <_printf_float+0x1d4>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	6121      	str	r1, [r4, #16]
 8004ee4:	07d8      	lsls	r0, r3, #31
 8004ee6:	d5ea      	bpl.n	8004ebe <_printf_float+0x1a6>
 8004ee8:	1c4b      	adds	r3, r1, #1
 8004eea:	e7e7      	b.n	8004ebc <_printf_float+0x1a4>
 8004eec:	2900      	cmp	r1, #0
 8004eee:	bfd4      	ite	le
 8004ef0:	f1c1 0202 	rsble	r2, r1, #2
 8004ef4:	2201      	movgt	r2, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	e7e0      	b.n	8004ebc <_printf_float+0x1a4>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	055a      	lsls	r2, r3, #21
 8004efe:	d407      	bmi.n	8004f10 <_printf_float+0x1f8>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	4642      	mov	r2, r8
 8004f04:	4631      	mov	r1, r6
 8004f06:	4628      	mov	r0, r5
 8004f08:	47b8      	blx	r7
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d12c      	bne.n	8004f68 <_printf_float+0x250>
 8004f0e:	e764      	b.n	8004dda <_printf_float+0xc2>
 8004f10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f14:	f240 80e0 	bls.w	80050d8 <_printf_float+0x3c0>
 8004f18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f7fb fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d034      	beq.n	8004f92 <_printf_float+0x27a>
 8004f28:	4a37      	ldr	r2, [pc, #220]	; (8005008 <_printf_float+0x2f0>)
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4628      	mov	r0, r5
 8004f30:	47b8      	blx	r7
 8004f32:	3001      	adds	r0, #1
 8004f34:	f43f af51 	beq.w	8004dda <_printf_float+0xc2>
 8004f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	db02      	blt.n	8004f46 <_printf_float+0x22e>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	07d8      	lsls	r0, r3, #31
 8004f44:	d510      	bpl.n	8004f68 <_printf_float+0x250>
 8004f46:	ee18 3a10 	vmov	r3, s16
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f af41 	beq.w	8004dda <_printf_float+0xc2>
 8004f58:	f04f 0800 	mov.w	r8, #0
 8004f5c:	f104 091a 	add.w	r9, r4, #26
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	3b01      	subs	r3, #1
 8004f64:	4543      	cmp	r3, r8
 8004f66:	dc09      	bgt.n	8004f7c <_printf_float+0x264>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	079b      	lsls	r3, r3, #30
 8004f6c:	f100 8105 	bmi.w	800517a <_printf_float+0x462>
 8004f70:	68e0      	ldr	r0, [r4, #12]
 8004f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f74:	4298      	cmp	r0, r3
 8004f76:	bfb8      	it	lt
 8004f78:	4618      	movlt	r0, r3
 8004f7a:	e730      	b.n	8004dde <_printf_float+0xc6>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	464a      	mov	r2, r9
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f af27 	beq.w	8004dda <_printf_float+0xc2>
 8004f8c:	f108 0801 	add.w	r8, r8, #1
 8004f90:	e7e6      	b.n	8004f60 <_printf_float+0x248>
 8004f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	dc39      	bgt.n	800500c <_printf_float+0x2f4>
 8004f98:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <_printf_float+0x2f0>)
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f43f af19 	beq.w	8004dda <_printf_float+0xc2>
 8004fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fac:	4313      	orrs	r3, r2
 8004fae:	d102      	bne.n	8004fb6 <_printf_float+0x29e>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	07d9      	lsls	r1, r3, #31
 8004fb4:	d5d8      	bpl.n	8004f68 <_printf_float+0x250>
 8004fb6:	ee18 3a10 	vmov	r3, s16
 8004fba:	4652      	mov	r2, sl
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	47b8      	blx	r7
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	f43f af09 	beq.w	8004dda <_printf_float+0xc2>
 8004fc8:	f04f 0900 	mov.w	r9, #0
 8004fcc:	f104 0a1a 	add.w	sl, r4, #26
 8004fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd2:	425b      	negs	r3, r3
 8004fd4:	454b      	cmp	r3, r9
 8004fd6:	dc01      	bgt.n	8004fdc <_printf_float+0x2c4>
 8004fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fda:	e792      	b.n	8004f02 <_printf_float+0x1ea>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4652      	mov	r2, sl
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b8      	blx	r7
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f43f aef7 	beq.w	8004dda <_printf_float+0xc2>
 8004fec:	f109 0901 	add.w	r9, r9, #1
 8004ff0:	e7ee      	b.n	8004fd0 <_printf_float+0x2b8>
 8004ff2:	bf00      	nop
 8004ff4:	7fefffff 	.word	0x7fefffff
 8004ff8:	080077b8 	.word	0x080077b8
 8004ffc:	080077bc 	.word	0x080077bc
 8005000:	080077c4 	.word	0x080077c4
 8005004:	080077c0 	.word	0x080077c0
 8005008:	080077c8 	.word	0x080077c8
 800500c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800500e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005010:	429a      	cmp	r2, r3
 8005012:	bfa8      	it	ge
 8005014:	461a      	movge	r2, r3
 8005016:	2a00      	cmp	r2, #0
 8005018:	4691      	mov	r9, r2
 800501a:	dc37      	bgt.n	800508c <_printf_float+0x374>
 800501c:	f04f 0b00 	mov.w	fp, #0
 8005020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005024:	f104 021a 	add.w	r2, r4, #26
 8005028:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800502a:	9305      	str	r3, [sp, #20]
 800502c:	eba3 0309 	sub.w	r3, r3, r9
 8005030:	455b      	cmp	r3, fp
 8005032:	dc33      	bgt.n	800509c <_printf_float+0x384>
 8005034:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005038:	429a      	cmp	r2, r3
 800503a:	db3b      	blt.n	80050b4 <_printf_float+0x39c>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	07da      	lsls	r2, r3, #31
 8005040:	d438      	bmi.n	80050b4 <_printf_float+0x39c>
 8005042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005044:	9a05      	ldr	r2, [sp, #20]
 8005046:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005048:	1a9a      	subs	r2, r3, r2
 800504a:	eba3 0901 	sub.w	r9, r3, r1
 800504e:	4591      	cmp	r9, r2
 8005050:	bfa8      	it	ge
 8005052:	4691      	movge	r9, r2
 8005054:	f1b9 0f00 	cmp.w	r9, #0
 8005058:	dc35      	bgt.n	80050c6 <_printf_float+0x3ae>
 800505a:	f04f 0800 	mov.w	r8, #0
 800505e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005062:	f104 0a1a 	add.w	sl, r4, #26
 8005066:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	eba3 0309 	sub.w	r3, r3, r9
 8005070:	4543      	cmp	r3, r8
 8005072:	f77f af79 	ble.w	8004f68 <_printf_float+0x250>
 8005076:	2301      	movs	r3, #1
 8005078:	4652      	mov	r2, sl
 800507a:	4631      	mov	r1, r6
 800507c:	4628      	mov	r0, r5
 800507e:	47b8      	blx	r7
 8005080:	3001      	adds	r0, #1
 8005082:	f43f aeaa 	beq.w	8004dda <_printf_float+0xc2>
 8005086:	f108 0801 	add.w	r8, r8, #1
 800508a:	e7ec      	b.n	8005066 <_printf_float+0x34e>
 800508c:	4613      	mov	r3, r2
 800508e:	4631      	mov	r1, r6
 8005090:	4642      	mov	r2, r8
 8005092:	4628      	mov	r0, r5
 8005094:	47b8      	blx	r7
 8005096:	3001      	adds	r0, #1
 8005098:	d1c0      	bne.n	800501c <_printf_float+0x304>
 800509a:	e69e      	b.n	8004dda <_printf_float+0xc2>
 800509c:	2301      	movs	r3, #1
 800509e:	4631      	mov	r1, r6
 80050a0:	4628      	mov	r0, r5
 80050a2:	9205      	str	r2, [sp, #20]
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f ae97 	beq.w	8004dda <_printf_float+0xc2>
 80050ac:	9a05      	ldr	r2, [sp, #20]
 80050ae:	f10b 0b01 	add.w	fp, fp, #1
 80050b2:	e7b9      	b.n	8005028 <_printf_float+0x310>
 80050b4:	ee18 3a10 	vmov	r3, s16
 80050b8:	4652      	mov	r2, sl
 80050ba:	4631      	mov	r1, r6
 80050bc:	4628      	mov	r0, r5
 80050be:	47b8      	blx	r7
 80050c0:	3001      	adds	r0, #1
 80050c2:	d1be      	bne.n	8005042 <_printf_float+0x32a>
 80050c4:	e689      	b.n	8004dda <_printf_float+0xc2>
 80050c6:	9a05      	ldr	r2, [sp, #20]
 80050c8:	464b      	mov	r3, r9
 80050ca:	4442      	add	r2, r8
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	d1c1      	bne.n	800505a <_printf_float+0x342>
 80050d6:	e680      	b.n	8004dda <_printf_float+0xc2>
 80050d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050da:	2a01      	cmp	r2, #1
 80050dc:	dc01      	bgt.n	80050e2 <_printf_float+0x3ca>
 80050de:	07db      	lsls	r3, r3, #31
 80050e0:	d538      	bpl.n	8005154 <_printf_float+0x43c>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4642      	mov	r2, r8
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b8      	blx	r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	f43f ae74 	beq.w	8004dda <_printf_float+0xc2>
 80050f2:	ee18 3a10 	vmov	r3, s16
 80050f6:	4652      	mov	r2, sl
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	f43f ae6b 	beq.w	8004dda <_printf_float+0xc2>
 8005104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005108:	2200      	movs	r2, #0
 800510a:	2300      	movs	r3, #0
 800510c:	f7fb fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005110:	b9d8      	cbnz	r0, 800514a <_printf_float+0x432>
 8005112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005114:	f108 0201 	add.w	r2, r8, #1
 8005118:	3b01      	subs	r3, #1
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	d10e      	bne.n	8005142 <_printf_float+0x42a>
 8005124:	e659      	b.n	8004dda <_printf_float+0xc2>
 8005126:	2301      	movs	r3, #1
 8005128:	4652      	mov	r2, sl
 800512a:	4631      	mov	r1, r6
 800512c:	4628      	mov	r0, r5
 800512e:	47b8      	blx	r7
 8005130:	3001      	adds	r0, #1
 8005132:	f43f ae52 	beq.w	8004dda <_printf_float+0xc2>
 8005136:	f108 0801 	add.w	r8, r8, #1
 800513a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800513c:	3b01      	subs	r3, #1
 800513e:	4543      	cmp	r3, r8
 8005140:	dcf1      	bgt.n	8005126 <_printf_float+0x40e>
 8005142:	464b      	mov	r3, r9
 8005144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005148:	e6dc      	b.n	8004f04 <_printf_float+0x1ec>
 800514a:	f04f 0800 	mov.w	r8, #0
 800514e:	f104 0a1a 	add.w	sl, r4, #26
 8005152:	e7f2      	b.n	800513a <_printf_float+0x422>
 8005154:	2301      	movs	r3, #1
 8005156:	4642      	mov	r2, r8
 8005158:	e7df      	b.n	800511a <_printf_float+0x402>
 800515a:	2301      	movs	r3, #1
 800515c:	464a      	mov	r2, r9
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	47b8      	blx	r7
 8005164:	3001      	adds	r0, #1
 8005166:	f43f ae38 	beq.w	8004dda <_printf_float+0xc2>
 800516a:	f108 0801 	add.w	r8, r8, #1
 800516e:	68e3      	ldr	r3, [r4, #12]
 8005170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005172:	1a5b      	subs	r3, r3, r1
 8005174:	4543      	cmp	r3, r8
 8005176:	dcf0      	bgt.n	800515a <_printf_float+0x442>
 8005178:	e6fa      	b.n	8004f70 <_printf_float+0x258>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	f104 0919 	add.w	r9, r4, #25
 8005182:	e7f4      	b.n	800516e <_printf_float+0x456>

08005184 <_printf_common>:
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	4616      	mov	r6, r2
 800518a:	4699      	mov	r9, r3
 800518c:	688a      	ldr	r2, [r1, #8]
 800518e:	690b      	ldr	r3, [r1, #16]
 8005190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005194:	4293      	cmp	r3, r2
 8005196:	bfb8      	it	lt
 8005198:	4613      	movlt	r3, r2
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a0:	4607      	mov	r7, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	b10a      	cbz	r2, 80051aa <_printf_common+0x26>
 80051a6:	3301      	adds	r3, #1
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	0699      	lsls	r1, r3, #26
 80051ae:	bf42      	ittt	mi
 80051b0:	6833      	ldrmi	r3, [r6, #0]
 80051b2:	3302      	addmi	r3, #2
 80051b4:	6033      	strmi	r3, [r6, #0]
 80051b6:	6825      	ldr	r5, [r4, #0]
 80051b8:	f015 0506 	ands.w	r5, r5, #6
 80051bc:	d106      	bne.n	80051cc <_printf_common+0x48>
 80051be:	f104 0a19 	add.w	sl, r4, #25
 80051c2:	68e3      	ldr	r3, [r4, #12]
 80051c4:	6832      	ldr	r2, [r6, #0]
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	dc26      	bgt.n	800521a <_printf_common+0x96>
 80051cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d0:	1e13      	subs	r3, r2, #0
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	bf18      	it	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	0692      	lsls	r2, r2, #26
 80051da:	d42b      	bmi.n	8005234 <_printf_common+0xb0>
 80051dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e0:	4649      	mov	r1, r9
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d01e      	beq.n	8005228 <_printf_common+0xa4>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	68e5      	ldr	r5, [r4, #12]
 80051ee:	6832      	ldr	r2, [r6, #0]
 80051f0:	f003 0306 	and.w	r3, r3, #6
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	bf08      	it	eq
 80051f8:	1aad      	subeq	r5, r5, r2
 80051fa:	68a3      	ldr	r3, [r4, #8]
 80051fc:	6922      	ldr	r2, [r4, #16]
 80051fe:	bf0c      	ite	eq
 8005200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005204:	2500      	movne	r5, #0
 8005206:	4293      	cmp	r3, r2
 8005208:	bfc4      	itt	gt
 800520a:	1a9b      	subgt	r3, r3, r2
 800520c:	18ed      	addgt	r5, r5, r3
 800520e:	2600      	movs	r6, #0
 8005210:	341a      	adds	r4, #26
 8005212:	42b5      	cmp	r5, r6
 8005214:	d11a      	bne.n	800524c <_printf_common+0xc8>
 8005216:	2000      	movs	r0, #0
 8005218:	e008      	b.n	800522c <_printf_common+0xa8>
 800521a:	2301      	movs	r3, #1
 800521c:	4652      	mov	r2, sl
 800521e:	4649      	mov	r1, r9
 8005220:	4638      	mov	r0, r7
 8005222:	47c0      	blx	r8
 8005224:	3001      	adds	r0, #1
 8005226:	d103      	bne.n	8005230 <_printf_common+0xac>
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005230:	3501      	adds	r5, #1
 8005232:	e7c6      	b.n	80051c2 <_printf_common+0x3e>
 8005234:	18e1      	adds	r1, r4, r3
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	2030      	movs	r0, #48	; 0x30
 800523a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800523e:	4422      	add	r2, r4
 8005240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005248:	3302      	adds	r3, #2
 800524a:	e7c7      	b.n	80051dc <_printf_common+0x58>
 800524c:	2301      	movs	r3, #1
 800524e:	4622      	mov	r2, r4
 8005250:	4649      	mov	r1, r9
 8005252:	4638      	mov	r0, r7
 8005254:	47c0      	blx	r8
 8005256:	3001      	adds	r0, #1
 8005258:	d0e6      	beq.n	8005228 <_printf_common+0xa4>
 800525a:	3601      	adds	r6, #1
 800525c:	e7d9      	b.n	8005212 <_printf_common+0x8e>
	...

08005260 <_printf_i>:
 8005260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	7e0f      	ldrb	r7, [r1, #24]
 8005266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005268:	2f78      	cmp	r7, #120	; 0x78
 800526a:	4691      	mov	r9, r2
 800526c:	4680      	mov	r8, r0
 800526e:	460c      	mov	r4, r1
 8005270:	469a      	mov	sl, r3
 8005272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005276:	d807      	bhi.n	8005288 <_printf_i+0x28>
 8005278:	2f62      	cmp	r7, #98	; 0x62
 800527a:	d80a      	bhi.n	8005292 <_printf_i+0x32>
 800527c:	2f00      	cmp	r7, #0
 800527e:	f000 80d8 	beq.w	8005432 <_printf_i+0x1d2>
 8005282:	2f58      	cmp	r7, #88	; 0x58
 8005284:	f000 80a3 	beq.w	80053ce <_printf_i+0x16e>
 8005288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800528c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005290:	e03a      	b.n	8005308 <_printf_i+0xa8>
 8005292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005296:	2b15      	cmp	r3, #21
 8005298:	d8f6      	bhi.n	8005288 <_printf_i+0x28>
 800529a:	a101      	add	r1, pc, #4	; (adr r1, 80052a0 <_printf_i+0x40>)
 800529c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	0800530d 	.word	0x0800530d
 80052a8:	08005289 	.word	0x08005289
 80052ac:	08005289 	.word	0x08005289
 80052b0:	08005289 	.word	0x08005289
 80052b4:	08005289 	.word	0x08005289
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	08005289 	.word	0x08005289
 80052c0:	08005289 	.word	0x08005289
 80052c4:	08005289 	.word	0x08005289
 80052c8:	08005289 	.word	0x08005289
 80052cc:	08005419 	.word	0x08005419
 80052d0:	0800533d 	.word	0x0800533d
 80052d4:	080053fb 	.word	0x080053fb
 80052d8:	08005289 	.word	0x08005289
 80052dc:	08005289 	.word	0x08005289
 80052e0:	0800543b 	.word	0x0800543b
 80052e4:	08005289 	.word	0x08005289
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	08005289 	.word	0x08005289
 80052f0:	08005289 	.word	0x08005289
 80052f4:	08005403 	.word	0x08005403
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	602a      	str	r2, [r5, #0]
 8005300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005308:	2301      	movs	r3, #1
 800530a:	e0a3      	b.n	8005454 <_printf_i+0x1f4>
 800530c:	6820      	ldr	r0, [r4, #0]
 800530e:	6829      	ldr	r1, [r5, #0]
 8005310:	0606      	lsls	r6, r0, #24
 8005312:	f101 0304 	add.w	r3, r1, #4
 8005316:	d50a      	bpl.n	800532e <_printf_i+0xce>
 8005318:	680e      	ldr	r6, [r1, #0]
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	2e00      	cmp	r6, #0
 800531e:	da03      	bge.n	8005328 <_printf_i+0xc8>
 8005320:	232d      	movs	r3, #45	; 0x2d
 8005322:	4276      	negs	r6, r6
 8005324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005328:	485e      	ldr	r0, [pc, #376]	; (80054a4 <_printf_i+0x244>)
 800532a:	230a      	movs	r3, #10
 800532c:	e019      	b.n	8005362 <_printf_i+0x102>
 800532e:	680e      	ldr	r6, [r1, #0]
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005336:	bf18      	it	ne
 8005338:	b236      	sxthne	r6, r6
 800533a:	e7ef      	b.n	800531c <_printf_i+0xbc>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	1d19      	adds	r1, r3, #4
 8005342:	6029      	str	r1, [r5, #0]
 8005344:	0601      	lsls	r1, r0, #24
 8005346:	d501      	bpl.n	800534c <_printf_i+0xec>
 8005348:	681e      	ldr	r6, [r3, #0]
 800534a:	e002      	b.n	8005352 <_printf_i+0xf2>
 800534c:	0646      	lsls	r6, r0, #25
 800534e:	d5fb      	bpl.n	8005348 <_printf_i+0xe8>
 8005350:	881e      	ldrh	r6, [r3, #0]
 8005352:	4854      	ldr	r0, [pc, #336]	; (80054a4 <_printf_i+0x244>)
 8005354:	2f6f      	cmp	r7, #111	; 0x6f
 8005356:	bf0c      	ite	eq
 8005358:	2308      	moveq	r3, #8
 800535a:	230a      	movne	r3, #10
 800535c:	2100      	movs	r1, #0
 800535e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005362:	6865      	ldr	r5, [r4, #4]
 8005364:	60a5      	str	r5, [r4, #8]
 8005366:	2d00      	cmp	r5, #0
 8005368:	bfa2      	ittt	ge
 800536a:	6821      	ldrge	r1, [r4, #0]
 800536c:	f021 0104 	bicge.w	r1, r1, #4
 8005370:	6021      	strge	r1, [r4, #0]
 8005372:	b90e      	cbnz	r6, 8005378 <_printf_i+0x118>
 8005374:	2d00      	cmp	r5, #0
 8005376:	d04d      	beq.n	8005414 <_printf_i+0x1b4>
 8005378:	4615      	mov	r5, r2
 800537a:	fbb6 f1f3 	udiv	r1, r6, r3
 800537e:	fb03 6711 	mls	r7, r3, r1, r6
 8005382:	5dc7      	ldrb	r7, [r0, r7]
 8005384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005388:	4637      	mov	r7, r6
 800538a:	42bb      	cmp	r3, r7
 800538c:	460e      	mov	r6, r1
 800538e:	d9f4      	bls.n	800537a <_printf_i+0x11a>
 8005390:	2b08      	cmp	r3, #8
 8005392:	d10b      	bne.n	80053ac <_printf_i+0x14c>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07de      	lsls	r6, r3, #31
 8005398:	d508      	bpl.n	80053ac <_printf_i+0x14c>
 800539a:	6923      	ldr	r3, [r4, #16]
 800539c:	6861      	ldr	r1, [r4, #4]
 800539e:	4299      	cmp	r1, r3
 80053a0:	bfde      	ittt	le
 80053a2:	2330      	movle	r3, #48	; 0x30
 80053a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053ac:	1b52      	subs	r2, r2, r5
 80053ae:	6122      	str	r2, [r4, #16]
 80053b0:	f8cd a000 	str.w	sl, [sp]
 80053b4:	464b      	mov	r3, r9
 80053b6:	aa03      	add	r2, sp, #12
 80053b8:	4621      	mov	r1, r4
 80053ba:	4640      	mov	r0, r8
 80053bc:	f7ff fee2 	bl	8005184 <_printf_common>
 80053c0:	3001      	adds	r0, #1
 80053c2:	d14c      	bne.n	800545e <_printf_i+0x1fe>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	b004      	add	sp, #16
 80053ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ce:	4835      	ldr	r0, [pc, #212]	; (80054a4 <_printf_i+0x244>)
 80053d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053d4:	6829      	ldr	r1, [r5, #0]
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053dc:	6029      	str	r1, [r5, #0]
 80053de:	061d      	lsls	r5, r3, #24
 80053e0:	d514      	bpl.n	800540c <_printf_i+0x1ac>
 80053e2:	07df      	lsls	r7, r3, #31
 80053e4:	bf44      	itt	mi
 80053e6:	f043 0320 	orrmi.w	r3, r3, #32
 80053ea:	6023      	strmi	r3, [r4, #0]
 80053ec:	b91e      	cbnz	r6, 80053f6 <_printf_i+0x196>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f023 0320 	bic.w	r3, r3, #32
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	2310      	movs	r3, #16
 80053f8:	e7b0      	b.n	800535c <_printf_i+0xfc>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f043 0320 	orr.w	r3, r3, #32
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	2378      	movs	r3, #120	; 0x78
 8005404:	4828      	ldr	r0, [pc, #160]	; (80054a8 <_printf_i+0x248>)
 8005406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800540a:	e7e3      	b.n	80053d4 <_printf_i+0x174>
 800540c:	0659      	lsls	r1, r3, #25
 800540e:	bf48      	it	mi
 8005410:	b2b6      	uxthmi	r6, r6
 8005412:	e7e6      	b.n	80053e2 <_printf_i+0x182>
 8005414:	4615      	mov	r5, r2
 8005416:	e7bb      	b.n	8005390 <_printf_i+0x130>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	6826      	ldr	r6, [r4, #0]
 800541c:	6961      	ldr	r1, [r4, #20]
 800541e:	1d18      	adds	r0, r3, #4
 8005420:	6028      	str	r0, [r5, #0]
 8005422:	0635      	lsls	r5, r6, #24
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	d501      	bpl.n	800542c <_printf_i+0x1cc>
 8005428:	6019      	str	r1, [r3, #0]
 800542a:	e002      	b.n	8005432 <_printf_i+0x1d2>
 800542c:	0670      	lsls	r0, r6, #25
 800542e:	d5fb      	bpl.n	8005428 <_printf_i+0x1c8>
 8005430:	8019      	strh	r1, [r3, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	4615      	mov	r5, r2
 8005438:	e7ba      	b.n	80053b0 <_printf_i+0x150>
 800543a:	682b      	ldr	r3, [r5, #0]
 800543c:	1d1a      	adds	r2, r3, #4
 800543e:	602a      	str	r2, [r5, #0]
 8005440:	681d      	ldr	r5, [r3, #0]
 8005442:	6862      	ldr	r2, [r4, #4]
 8005444:	2100      	movs	r1, #0
 8005446:	4628      	mov	r0, r5
 8005448:	f7fa fed2 	bl	80001f0 <memchr>
 800544c:	b108      	cbz	r0, 8005452 <_printf_i+0x1f2>
 800544e:	1b40      	subs	r0, r0, r5
 8005450:	6060      	str	r0, [r4, #4]
 8005452:	6863      	ldr	r3, [r4, #4]
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	2300      	movs	r3, #0
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545c:	e7a8      	b.n	80053b0 <_printf_i+0x150>
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	462a      	mov	r2, r5
 8005462:	4649      	mov	r1, r9
 8005464:	4640      	mov	r0, r8
 8005466:	47d0      	blx	sl
 8005468:	3001      	adds	r0, #1
 800546a:	d0ab      	beq.n	80053c4 <_printf_i+0x164>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	079b      	lsls	r3, r3, #30
 8005470:	d413      	bmi.n	800549a <_printf_i+0x23a>
 8005472:	68e0      	ldr	r0, [r4, #12]
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	4298      	cmp	r0, r3
 8005478:	bfb8      	it	lt
 800547a:	4618      	movlt	r0, r3
 800547c:	e7a4      	b.n	80053c8 <_printf_i+0x168>
 800547e:	2301      	movs	r3, #1
 8005480:	4632      	mov	r2, r6
 8005482:	4649      	mov	r1, r9
 8005484:	4640      	mov	r0, r8
 8005486:	47d0      	blx	sl
 8005488:	3001      	adds	r0, #1
 800548a:	d09b      	beq.n	80053c4 <_printf_i+0x164>
 800548c:	3501      	adds	r5, #1
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	9903      	ldr	r1, [sp, #12]
 8005492:	1a5b      	subs	r3, r3, r1
 8005494:	42ab      	cmp	r3, r5
 8005496:	dcf2      	bgt.n	800547e <_printf_i+0x21e>
 8005498:	e7eb      	b.n	8005472 <_printf_i+0x212>
 800549a:	2500      	movs	r5, #0
 800549c:	f104 0619 	add.w	r6, r4, #25
 80054a0:	e7f5      	b.n	800548e <_printf_i+0x22e>
 80054a2:	bf00      	nop
 80054a4:	080077ca 	.word	0x080077ca
 80054a8:	080077db 	.word	0x080077db

080054ac <iprintf>:
 80054ac:	b40f      	push	{r0, r1, r2, r3}
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <iprintf+0x2c>)
 80054b0:	b513      	push	{r0, r1, r4, lr}
 80054b2:	681c      	ldr	r4, [r3, #0]
 80054b4:	b124      	cbz	r4, 80054c0 <iprintf+0x14>
 80054b6:	69a3      	ldr	r3, [r4, #24]
 80054b8:	b913      	cbnz	r3, 80054c0 <iprintf+0x14>
 80054ba:	4620      	mov	r0, r4
 80054bc:	f001 f8d8 	bl	8006670 <__sinit>
 80054c0:	ab05      	add	r3, sp, #20
 80054c2:	9a04      	ldr	r2, [sp, #16]
 80054c4:	68a1      	ldr	r1, [r4, #8]
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	4620      	mov	r0, r4
 80054ca:	f001 fe95 	bl	80071f8 <_vfiprintf_r>
 80054ce:	b002      	add	sp, #8
 80054d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d4:	b004      	add	sp, #16
 80054d6:	4770      	bx	lr
 80054d8:	20000010 	.word	0x20000010

080054dc <_puts_r>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	460e      	mov	r6, r1
 80054e0:	4605      	mov	r5, r0
 80054e2:	b118      	cbz	r0, 80054ec <_puts_r+0x10>
 80054e4:	6983      	ldr	r3, [r0, #24]
 80054e6:	b90b      	cbnz	r3, 80054ec <_puts_r+0x10>
 80054e8:	f001 f8c2 	bl	8006670 <__sinit>
 80054ec:	69ab      	ldr	r3, [r5, #24]
 80054ee:	68ac      	ldr	r4, [r5, #8]
 80054f0:	b913      	cbnz	r3, 80054f8 <_puts_r+0x1c>
 80054f2:	4628      	mov	r0, r5
 80054f4:	f001 f8bc 	bl	8006670 <__sinit>
 80054f8:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <_puts_r+0xd0>)
 80054fa:	429c      	cmp	r4, r3
 80054fc:	d120      	bne.n	8005540 <_puts_r+0x64>
 80054fe:	686c      	ldr	r4, [r5, #4]
 8005500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005502:	07db      	lsls	r3, r3, #31
 8005504:	d405      	bmi.n	8005512 <_puts_r+0x36>
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	0598      	lsls	r0, r3, #22
 800550a:	d402      	bmi.n	8005512 <_puts_r+0x36>
 800550c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800550e:	f001 f952 	bl	80067b6 <__retarget_lock_acquire_recursive>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	0719      	lsls	r1, r3, #28
 8005516:	d51d      	bpl.n	8005554 <_puts_r+0x78>
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	b1db      	cbz	r3, 8005554 <_puts_r+0x78>
 800551c:	3e01      	subs	r6, #1
 800551e:	68a3      	ldr	r3, [r4, #8]
 8005520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005524:	3b01      	subs	r3, #1
 8005526:	60a3      	str	r3, [r4, #8]
 8005528:	bb39      	cbnz	r1, 800557a <_puts_r+0x9e>
 800552a:	2b00      	cmp	r3, #0
 800552c:	da38      	bge.n	80055a0 <_puts_r+0xc4>
 800552e:	4622      	mov	r2, r4
 8005530:	210a      	movs	r1, #10
 8005532:	4628      	mov	r0, r5
 8005534:	f000 f848 	bl	80055c8 <__swbuf_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d011      	beq.n	8005560 <_puts_r+0x84>
 800553c:	250a      	movs	r5, #10
 800553e:	e011      	b.n	8005564 <_puts_r+0x88>
 8005540:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <_puts_r+0xd4>)
 8005542:	429c      	cmp	r4, r3
 8005544:	d101      	bne.n	800554a <_puts_r+0x6e>
 8005546:	68ac      	ldr	r4, [r5, #8]
 8005548:	e7da      	b.n	8005500 <_puts_r+0x24>
 800554a:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <_puts_r+0xd8>)
 800554c:	429c      	cmp	r4, r3
 800554e:	bf08      	it	eq
 8005550:	68ec      	ldreq	r4, [r5, #12]
 8005552:	e7d5      	b.n	8005500 <_puts_r+0x24>
 8005554:	4621      	mov	r1, r4
 8005556:	4628      	mov	r0, r5
 8005558:	f000 f888 	bl	800566c <__swsetup_r>
 800555c:	2800      	cmp	r0, #0
 800555e:	d0dd      	beq.n	800551c <_puts_r+0x40>
 8005560:	f04f 35ff 	mov.w	r5, #4294967295
 8005564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005566:	07da      	lsls	r2, r3, #31
 8005568:	d405      	bmi.n	8005576 <_puts_r+0x9a>
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	059b      	lsls	r3, r3, #22
 800556e:	d402      	bmi.n	8005576 <_puts_r+0x9a>
 8005570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005572:	f001 f921 	bl	80067b8 <__retarget_lock_release_recursive>
 8005576:	4628      	mov	r0, r5
 8005578:	bd70      	pop	{r4, r5, r6, pc}
 800557a:	2b00      	cmp	r3, #0
 800557c:	da04      	bge.n	8005588 <_puts_r+0xac>
 800557e:	69a2      	ldr	r2, [r4, #24]
 8005580:	429a      	cmp	r2, r3
 8005582:	dc06      	bgt.n	8005592 <_puts_r+0xb6>
 8005584:	290a      	cmp	r1, #10
 8005586:	d004      	beq.n	8005592 <_puts_r+0xb6>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	6022      	str	r2, [r4, #0]
 800558e:	7019      	strb	r1, [r3, #0]
 8005590:	e7c5      	b.n	800551e <_puts_r+0x42>
 8005592:	4622      	mov	r2, r4
 8005594:	4628      	mov	r0, r5
 8005596:	f000 f817 	bl	80055c8 <__swbuf_r>
 800559a:	3001      	adds	r0, #1
 800559c:	d1bf      	bne.n	800551e <_puts_r+0x42>
 800559e:	e7df      	b.n	8005560 <_puts_r+0x84>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	250a      	movs	r5, #10
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	6022      	str	r2, [r4, #0]
 80055a8:	701d      	strb	r5, [r3, #0]
 80055aa:	e7db      	b.n	8005564 <_puts_r+0x88>
 80055ac:	0800789c 	.word	0x0800789c
 80055b0:	080078bc 	.word	0x080078bc
 80055b4:	0800787c 	.word	0x0800787c

080055b8 <puts>:
 80055b8:	4b02      	ldr	r3, [pc, #8]	; (80055c4 <puts+0xc>)
 80055ba:	4601      	mov	r1, r0
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	f7ff bf8d 	b.w	80054dc <_puts_r>
 80055c2:	bf00      	nop
 80055c4:	20000010 	.word	0x20000010

080055c8 <__swbuf_r>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	460e      	mov	r6, r1
 80055cc:	4614      	mov	r4, r2
 80055ce:	4605      	mov	r5, r0
 80055d0:	b118      	cbz	r0, 80055da <__swbuf_r+0x12>
 80055d2:	6983      	ldr	r3, [r0, #24]
 80055d4:	b90b      	cbnz	r3, 80055da <__swbuf_r+0x12>
 80055d6:	f001 f84b 	bl	8006670 <__sinit>
 80055da:	4b21      	ldr	r3, [pc, #132]	; (8005660 <__swbuf_r+0x98>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	d12b      	bne.n	8005638 <__swbuf_r+0x70>
 80055e0:	686c      	ldr	r4, [r5, #4]
 80055e2:	69a3      	ldr	r3, [r4, #24]
 80055e4:	60a3      	str	r3, [r4, #8]
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	071a      	lsls	r2, r3, #28
 80055ea:	d52f      	bpl.n	800564c <__swbuf_r+0x84>
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	b36b      	cbz	r3, 800564c <__swbuf_r+0x84>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	6820      	ldr	r0, [r4, #0]
 80055f4:	1ac0      	subs	r0, r0, r3
 80055f6:	6963      	ldr	r3, [r4, #20]
 80055f8:	b2f6      	uxtb	r6, r6
 80055fa:	4283      	cmp	r3, r0
 80055fc:	4637      	mov	r7, r6
 80055fe:	dc04      	bgt.n	800560a <__swbuf_r+0x42>
 8005600:	4621      	mov	r1, r4
 8005602:	4628      	mov	r0, r5
 8005604:	f000 ffa0 	bl	8006548 <_fflush_r>
 8005608:	bb30      	cbnz	r0, 8005658 <__swbuf_r+0x90>
 800560a:	68a3      	ldr	r3, [r4, #8]
 800560c:	3b01      	subs	r3, #1
 800560e:	60a3      	str	r3, [r4, #8]
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	6022      	str	r2, [r4, #0]
 8005616:	701e      	strb	r6, [r3, #0]
 8005618:	6963      	ldr	r3, [r4, #20]
 800561a:	3001      	adds	r0, #1
 800561c:	4283      	cmp	r3, r0
 800561e:	d004      	beq.n	800562a <__swbuf_r+0x62>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	07db      	lsls	r3, r3, #31
 8005624:	d506      	bpl.n	8005634 <__swbuf_r+0x6c>
 8005626:	2e0a      	cmp	r6, #10
 8005628:	d104      	bne.n	8005634 <__swbuf_r+0x6c>
 800562a:	4621      	mov	r1, r4
 800562c:	4628      	mov	r0, r5
 800562e:	f000 ff8b 	bl	8006548 <_fflush_r>
 8005632:	b988      	cbnz	r0, 8005658 <__swbuf_r+0x90>
 8005634:	4638      	mov	r0, r7
 8005636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <__swbuf_r+0x9c>)
 800563a:	429c      	cmp	r4, r3
 800563c:	d101      	bne.n	8005642 <__swbuf_r+0x7a>
 800563e:	68ac      	ldr	r4, [r5, #8]
 8005640:	e7cf      	b.n	80055e2 <__swbuf_r+0x1a>
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <__swbuf_r+0xa0>)
 8005644:	429c      	cmp	r4, r3
 8005646:	bf08      	it	eq
 8005648:	68ec      	ldreq	r4, [r5, #12]
 800564a:	e7ca      	b.n	80055e2 <__swbuf_r+0x1a>
 800564c:	4621      	mov	r1, r4
 800564e:	4628      	mov	r0, r5
 8005650:	f000 f80c 	bl	800566c <__swsetup_r>
 8005654:	2800      	cmp	r0, #0
 8005656:	d0cb      	beq.n	80055f0 <__swbuf_r+0x28>
 8005658:	f04f 37ff 	mov.w	r7, #4294967295
 800565c:	e7ea      	b.n	8005634 <__swbuf_r+0x6c>
 800565e:	bf00      	nop
 8005660:	0800789c 	.word	0x0800789c
 8005664:	080078bc 	.word	0x080078bc
 8005668:	0800787c 	.word	0x0800787c

0800566c <__swsetup_r>:
 800566c:	4b32      	ldr	r3, [pc, #200]	; (8005738 <__swsetup_r+0xcc>)
 800566e:	b570      	push	{r4, r5, r6, lr}
 8005670:	681d      	ldr	r5, [r3, #0]
 8005672:	4606      	mov	r6, r0
 8005674:	460c      	mov	r4, r1
 8005676:	b125      	cbz	r5, 8005682 <__swsetup_r+0x16>
 8005678:	69ab      	ldr	r3, [r5, #24]
 800567a:	b913      	cbnz	r3, 8005682 <__swsetup_r+0x16>
 800567c:	4628      	mov	r0, r5
 800567e:	f000 fff7 	bl	8006670 <__sinit>
 8005682:	4b2e      	ldr	r3, [pc, #184]	; (800573c <__swsetup_r+0xd0>)
 8005684:	429c      	cmp	r4, r3
 8005686:	d10f      	bne.n	80056a8 <__swsetup_r+0x3c>
 8005688:	686c      	ldr	r4, [r5, #4]
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005690:	0719      	lsls	r1, r3, #28
 8005692:	d42c      	bmi.n	80056ee <__swsetup_r+0x82>
 8005694:	06dd      	lsls	r5, r3, #27
 8005696:	d411      	bmi.n	80056bc <__swsetup_r+0x50>
 8005698:	2309      	movs	r3, #9
 800569a:	6033      	str	r3, [r6, #0]
 800569c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	f04f 30ff 	mov.w	r0, #4294967295
 80056a6:	e03e      	b.n	8005726 <__swsetup_r+0xba>
 80056a8:	4b25      	ldr	r3, [pc, #148]	; (8005740 <__swsetup_r+0xd4>)
 80056aa:	429c      	cmp	r4, r3
 80056ac:	d101      	bne.n	80056b2 <__swsetup_r+0x46>
 80056ae:	68ac      	ldr	r4, [r5, #8]
 80056b0:	e7eb      	b.n	800568a <__swsetup_r+0x1e>
 80056b2:	4b24      	ldr	r3, [pc, #144]	; (8005744 <__swsetup_r+0xd8>)
 80056b4:	429c      	cmp	r4, r3
 80056b6:	bf08      	it	eq
 80056b8:	68ec      	ldreq	r4, [r5, #12]
 80056ba:	e7e6      	b.n	800568a <__swsetup_r+0x1e>
 80056bc:	0758      	lsls	r0, r3, #29
 80056be:	d512      	bpl.n	80056e6 <__swsetup_r+0x7a>
 80056c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056c2:	b141      	cbz	r1, 80056d6 <__swsetup_r+0x6a>
 80056c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c8:	4299      	cmp	r1, r3
 80056ca:	d002      	beq.n	80056d2 <__swsetup_r+0x66>
 80056cc:	4630      	mov	r0, r6
 80056ce:	f001 fc89 	bl	8006fe4 <_free_r>
 80056d2:	2300      	movs	r3, #0
 80056d4:	6363      	str	r3, [r4, #52]	; 0x34
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	2300      	movs	r3, #0
 80056e0:	6063      	str	r3, [r4, #4]
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	f043 0308 	orr.w	r3, r3, #8
 80056ec:	81a3      	strh	r3, [r4, #12]
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	b94b      	cbnz	r3, 8005706 <__swsetup_r+0x9a>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fc:	d003      	beq.n	8005706 <__swsetup_r+0x9a>
 80056fe:	4621      	mov	r1, r4
 8005700:	4630      	mov	r0, r6
 8005702:	f001 f87f 	bl	8006804 <__smakebuf_r>
 8005706:	89a0      	ldrh	r0, [r4, #12]
 8005708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800570c:	f010 0301 	ands.w	r3, r0, #1
 8005710:	d00a      	beq.n	8005728 <__swsetup_r+0xbc>
 8005712:	2300      	movs	r3, #0
 8005714:	60a3      	str	r3, [r4, #8]
 8005716:	6963      	ldr	r3, [r4, #20]
 8005718:	425b      	negs	r3, r3
 800571a:	61a3      	str	r3, [r4, #24]
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	b943      	cbnz	r3, 8005732 <__swsetup_r+0xc6>
 8005720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005724:	d1ba      	bne.n	800569c <__swsetup_r+0x30>
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	0781      	lsls	r1, r0, #30
 800572a:	bf58      	it	pl
 800572c:	6963      	ldrpl	r3, [r4, #20]
 800572e:	60a3      	str	r3, [r4, #8]
 8005730:	e7f4      	b.n	800571c <__swsetup_r+0xb0>
 8005732:	2000      	movs	r0, #0
 8005734:	e7f7      	b.n	8005726 <__swsetup_r+0xba>
 8005736:	bf00      	nop
 8005738:	20000010 	.word	0x20000010
 800573c:	0800789c 	.word	0x0800789c
 8005740:	080078bc 	.word	0x080078bc
 8005744:	0800787c 	.word	0x0800787c

08005748 <quorem>:
 8005748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	6903      	ldr	r3, [r0, #16]
 800574e:	690c      	ldr	r4, [r1, #16]
 8005750:	42a3      	cmp	r3, r4
 8005752:	4607      	mov	r7, r0
 8005754:	f2c0 8081 	blt.w	800585a <quorem+0x112>
 8005758:	3c01      	subs	r4, #1
 800575a:	f101 0814 	add.w	r8, r1, #20
 800575e:	f100 0514 	add.w	r5, r0, #20
 8005762:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800576c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005770:	3301      	adds	r3, #1
 8005772:	429a      	cmp	r2, r3
 8005774:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005778:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800577c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005780:	d331      	bcc.n	80057e6 <quorem+0x9e>
 8005782:	f04f 0e00 	mov.w	lr, #0
 8005786:	4640      	mov	r0, r8
 8005788:	46ac      	mov	ip, r5
 800578a:	46f2      	mov	sl, lr
 800578c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005790:	b293      	uxth	r3, r2
 8005792:	fb06 e303 	mla	r3, r6, r3, lr
 8005796:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800579a:	b29b      	uxth	r3, r3
 800579c:	ebaa 0303 	sub.w	r3, sl, r3
 80057a0:	f8dc a000 	ldr.w	sl, [ip]
 80057a4:	0c12      	lsrs	r2, r2, #16
 80057a6:	fa13 f38a 	uxtah	r3, r3, sl
 80057aa:	fb06 e202 	mla	r2, r6, r2, lr
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	9b00      	ldr	r3, [sp, #0]
 80057b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057b6:	b292      	uxth	r2, r2
 80057b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80057bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80057c4:	4581      	cmp	r9, r0
 80057c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057ca:	f84c 3b04 	str.w	r3, [ip], #4
 80057ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057d2:	d2db      	bcs.n	800578c <quorem+0x44>
 80057d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80057d8:	b92b      	cbnz	r3, 80057e6 <quorem+0x9e>
 80057da:	9b01      	ldr	r3, [sp, #4]
 80057dc:	3b04      	subs	r3, #4
 80057de:	429d      	cmp	r5, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	d32e      	bcc.n	8005842 <quorem+0xfa>
 80057e4:	613c      	str	r4, [r7, #16]
 80057e6:	4638      	mov	r0, r7
 80057e8:	f001 fae4 	bl	8006db4 <__mcmp>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	db24      	blt.n	800583a <quorem+0xf2>
 80057f0:	3601      	adds	r6, #1
 80057f2:	4628      	mov	r0, r5
 80057f4:	f04f 0c00 	mov.w	ip, #0
 80057f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80057fc:	f8d0 e000 	ldr.w	lr, [r0]
 8005800:	b293      	uxth	r3, r2
 8005802:	ebac 0303 	sub.w	r3, ip, r3
 8005806:	0c12      	lsrs	r2, r2, #16
 8005808:	fa13 f38e 	uxtah	r3, r3, lr
 800580c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005810:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005814:	b29b      	uxth	r3, r3
 8005816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800581a:	45c1      	cmp	r9, r8
 800581c:	f840 3b04 	str.w	r3, [r0], #4
 8005820:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005824:	d2e8      	bcs.n	80057f8 <quorem+0xb0>
 8005826:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800582a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800582e:	b922      	cbnz	r2, 800583a <quorem+0xf2>
 8005830:	3b04      	subs	r3, #4
 8005832:	429d      	cmp	r5, r3
 8005834:	461a      	mov	r2, r3
 8005836:	d30a      	bcc.n	800584e <quorem+0x106>
 8005838:	613c      	str	r4, [r7, #16]
 800583a:	4630      	mov	r0, r6
 800583c:	b003      	add	sp, #12
 800583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	3b04      	subs	r3, #4
 8005846:	2a00      	cmp	r2, #0
 8005848:	d1cc      	bne.n	80057e4 <quorem+0x9c>
 800584a:	3c01      	subs	r4, #1
 800584c:	e7c7      	b.n	80057de <quorem+0x96>
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	3b04      	subs	r3, #4
 8005852:	2a00      	cmp	r2, #0
 8005854:	d1f0      	bne.n	8005838 <quorem+0xf0>
 8005856:	3c01      	subs	r4, #1
 8005858:	e7eb      	b.n	8005832 <quorem+0xea>
 800585a:	2000      	movs	r0, #0
 800585c:	e7ee      	b.n	800583c <quorem+0xf4>
	...

08005860 <_dtoa_r>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	ed2d 8b04 	vpush	{d8-d9}
 8005868:	ec57 6b10 	vmov	r6, r7, d0
 800586c:	b093      	sub	sp, #76	; 0x4c
 800586e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005870:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005874:	9106      	str	r1, [sp, #24]
 8005876:	ee10 aa10 	vmov	sl, s0
 800587a:	4604      	mov	r4, r0
 800587c:	9209      	str	r2, [sp, #36]	; 0x24
 800587e:	930c      	str	r3, [sp, #48]	; 0x30
 8005880:	46bb      	mov	fp, r7
 8005882:	b975      	cbnz	r5, 80058a2 <_dtoa_r+0x42>
 8005884:	2010      	movs	r0, #16
 8005886:	f000 fffd 	bl	8006884 <malloc>
 800588a:	4602      	mov	r2, r0
 800588c:	6260      	str	r0, [r4, #36]	; 0x24
 800588e:	b920      	cbnz	r0, 800589a <_dtoa_r+0x3a>
 8005890:	4ba7      	ldr	r3, [pc, #668]	; (8005b30 <_dtoa_r+0x2d0>)
 8005892:	21ea      	movs	r1, #234	; 0xea
 8005894:	48a7      	ldr	r0, [pc, #668]	; (8005b34 <_dtoa_r+0x2d4>)
 8005896:	f001 fe45 	bl	8007524 <__assert_func>
 800589a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800589e:	6005      	str	r5, [r0, #0]
 80058a0:	60c5      	str	r5, [r0, #12]
 80058a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	b151      	cbz	r1, 80058be <_dtoa_r+0x5e>
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	604a      	str	r2, [r1, #4]
 80058ac:	2301      	movs	r3, #1
 80058ae:	4093      	lsls	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
 80058b2:	4620      	mov	r0, r4
 80058b4:	f001 f83c 	bl	8006930 <_Bfree>
 80058b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	1e3b      	subs	r3, r7, #0
 80058c0:	bfaa      	itet	ge
 80058c2:	2300      	movge	r3, #0
 80058c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80058c8:	f8c8 3000 	strge.w	r3, [r8]
 80058cc:	4b9a      	ldr	r3, [pc, #616]	; (8005b38 <_dtoa_r+0x2d8>)
 80058ce:	bfbc      	itt	lt
 80058d0:	2201      	movlt	r2, #1
 80058d2:	f8c8 2000 	strlt.w	r2, [r8]
 80058d6:	ea33 030b 	bics.w	r3, r3, fp
 80058da:	d11b      	bne.n	8005914 <_dtoa_r+0xb4>
 80058dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058de:	f242 730f 	movw	r3, #9999	; 0x270f
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058e8:	4333      	orrs	r3, r6
 80058ea:	f000 8592 	beq.w	8006412 <_dtoa_r+0xbb2>
 80058ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058f0:	b963      	cbnz	r3, 800590c <_dtoa_r+0xac>
 80058f2:	4b92      	ldr	r3, [pc, #584]	; (8005b3c <_dtoa_r+0x2dc>)
 80058f4:	e022      	b.n	800593c <_dtoa_r+0xdc>
 80058f6:	4b92      	ldr	r3, [pc, #584]	; (8005b40 <_dtoa_r+0x2e0>)
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	3308      	adds	r3, #8
 80058fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	9801      	ldr	r0, [sp, #4]
 8005902:	b013      	add	sp, #76	; 0x4c
 8005904:	ecbd 8b04 	vpop	{d8-d9}
 8005908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590c:	4b8b      	ldr	r3, [pc, #556]	; (8005b3c <_dtoa_r+0x2dc>)
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	3303      	adds	r3, #3
 8005912:	e7f3      	b.n	80058fc <_dtoa_r+0x9c>
 8005914:	2200      	movs	r2, #0
 8005916:	2300      	movs	r3, #0
 8005918:	4650      	mov	r0, sl
 800591a:	4659      	mov	r1, fp
 800591c:	f7fb f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005920:	ec4b ab19 	vmov	d9, sl, fp
 8005924:	4680      	mov	r8, r0
 8005926:	b158      	cbz	r0, 8005940 <_dtoa_r+0xe0>
 8005928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800592a:	2301      	movs	r3, #1
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 856b 	beq.w	800640c <_dtoa_r+0xbac>
 8005936:	4883      	ldr	r0, [pc, #524]	; (8005b44 <_dtoa_r+0x2e4>)
 8005938:	6018      	str	r0, [r3, #0]
 800593a:	1e43      	subs	r3, r0, #1
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	e7df      	b.n	8005900 <_dtoa_r+0xa0>
 8005940:	ec4b ab10 	vmov	d0, sl, fp
 8005944:	aa10      	add	r2, sp, #64	; 0x40
 8005946:	a911      	add	r1, sp, #68	; 0x44
 8005948:	4620      	mov	r0, r4
 800594a:	f001 fad9 	bl	8006f00 <__d2b>
 800594e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005952:	ee08 0a10 	vmov	s16, r0
 8005956:	2d00      	cmp	r5, #0
 8005958:	f000 8084 	beq.w	8005a64 <_dtoa_r+0x204>
 800595c:	ee19 3a90 	vmov	r3, s19
 8005960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005964:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005968:	4656      	mov	r6, sl
 800596a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800596e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005972:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005976:	4b74      	ldr	r3, [pc, #464]	; (8005b48 <_dtoa_r+0x2e8>)
 8005978:	2200      	movs	r2, #0
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fa fc8b 	bl	8000298 <__aeabi_dsub>
 8005982:	a365      	add	r3, pc, #404	; (adr r3, 8005b18 <_dtoa_r+0x2b8>)
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f7fa fe3e 	bl	8000608 <__aeabi_dmul>
 800598c:	a364      	add	r3, pc, #400	; (adr r3, 8005b20 <_dtoa_r+0x2c0>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f7fa fc83 	bl	800029c <__adddf3>
 8005996:	4606      	mov	r6, r0
 8005998:	4628      	mov	r0, r5
 800599a:	460f      	mov	r7, r1
 800599c:	f7fa fdca 	bl	8000534 <__aeabi_i2d>
 80059a0:	a361      	add	r3, pc, #388	; (adr r3, 8005b28 <_dtoa_r+0x2c8>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f7fa fe2f 	bl	8000608 <__aeabi_dmul>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4630      	mov	r0, r6
 80059b0:	4639      	mov	r1, r7
 80059b2:	f7fa fc73 	bl	800029c <__adddf3>
 80059b6:	4606      	mov	r6, r0
 80059b8:	460f      	mov	r7, r1
 80059ba:	f7fb f8d5 	bl	8000b68 <__aeabi_d2iz>
 80059be:	2200      	movs	r2, #0
 80059c0:	9000      	str	r0, [sp, #0]
 80059c2:	2300      	movs	r3, #0
 80059c4:	4630      	mov	r0, r6
 80059c6:	4639      	mov	r1, r7
 80059c8:	f7fb f890 	bl	8000aec <__aeabi_dcmplt>
 80059cc:	b150      	cbz	r0, 80059e4 <_dtoa_r+0x184>
 80059ce:	9800      	ldr	r0, [sp, #0]
 80059d0:	f7fa fdb0 	bl	8000534 <__aeabi_i2d>
 80059d4:	4632      	mov	r2, r6
 80059d6:	463b      	mov	r3, r7
 80059d8:	f7fb f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 80059dc:	b910      	cbnz	r0, 80059e4 <_dtoa_r+0x184>
 80059de:	9b00      	ldr	r3, [sp, #0]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	9b00      	ldr	r3, [sp, #0]
 80059e6:	2b16      	cmp	r3, #22
 80059e8:	d85a      	bhi.n	8005aa0 <_dtoa_r+0x240>
 80059ea:	9a00      	ldr	r2, [sp, #0]
 80059ec:	4b57      	ldr	r3, [pc, #348]	; (8005b4c <_dtoa_r+0x2ec>)
 80059ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	ec51 0b19 	vmov	r0, r1, d9
 80059fa:	f7fb f877 	bl	8000aec <__aeabi_dcmplt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d050      	beq.n	8005aa4 <_dtoa_r+0x244>
 8005a02:	9b00      	ldr	r3, [sp, #0]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a0e:	1b5d      	subs	r5, r3, r5
 8005a10:	1e6b      	subs	r3, r5, #1
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	bf45      	ittet	mi
 8005a16:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a1a:	9304      	strmi	r3, [sp, #16]
 8005a1c:	2300      	movpl	r3, #0
 8005a1e:	2300      	movmi	r3, #0
 8005a20:	bf4c      	ite	mi
 8005a22:	9305      	strmi	r3, [sp, #20]
 8005a24:	9304      	strpl	r3, [sp, #16]
 8005a26:	9b00      	ldr	r3, [sp, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	db3d      	blt.n	8005aa8 <_dtoa_r+0x248>
 8005a2c:	9b05      	ldr	r3, [sp, #20]
 8005a2e:	9a00      	ldr	r2, [sp, #0]
 8005a30:	920a      	str	r2, [sp, #40]	; 0x28
 8005a32:	4413      	add	r3, r2
 8005a34:	9305      	str	r3, [sp, #20]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9307      	str	r3, [sp, #28]
 8005a3a:	9b06      	ldr	r3, [sp, #24]
 8005a3c:	2b09      	cmp	r3, #9
 8005a3e:	f200 8089 	bhi.w	8005b54 <_dtoa_r+0x2f4>
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	bfc4      	itt	gt
 8005a46:	3b04      	subgt	r3, #4
 8005a48:	9306      	strgt	r3, [sp, #24]
 8005a4a:	9b06      	ldr	r3, [sp, #24]
 8005a4c:	f1a3 0302 	sub.w	r3, r3, #2
 8005a50:	bfcc      	ite	gt
 8005a52:	2500      	movgt	r5, #0
 8005a54:	2501      	movle	r5, #1
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	f200 8087 	bhi.w	8005b6a <_dtoa_r+0x30a>
 8005a5c:	e8df f003 	tbb	[pc, r3]
 8005a60:	59383a2d 	.word	0x59383a2d
 8005a64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a68:	441d      	add	r5, r3
 8005a6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	bfc1      	itttt	gt
 8005a72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005a7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005a7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a82:	bfda      	itte	le
 8005a84:	f1c3 0320 	rsble	r3, r3, #32
 8005a88:	fa06 f003 	lslle.w	r0, r6, r3
 8005a8c:	4318      	orrgt	r0, r3
 8005a8e:	f7fa fd41 	bl	8000514 <__aeabi_ui2d>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4606      	mov	r6, r0
 8005a96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005a9a:	3d01      	subs	r5, #1
 8005a9c:	930e      	str	r3, [sp, #56]	; 0x38
 8005a9e:	e76a      	b.n	8005976 <_dtoa_r+0x116>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e7b2      	b.n	8005a0a <_dtoa_r+0x1aa>
 8005aa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005aa6:	e7b1      	b.n	8005a0c <_dtoa_r+0x1ac>
 8005aa8:	9b04      	ldr	r3, [sp, #16]
 8005aaa:	9a00      	ldr	r2, [sp, #0]
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	9304      	str	r3, [sp, #16]
 8005ab0:	4253      	negs	r3, r2
 8005ab2:	9307      	str	r3, [sp, #28]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ab8:	e7bf      	b.n	8005a3a <_dtoa_r+0x1da>
 8005aba:	2300      	movs	r3, #0
 8005abc:	9308      	str	r3, [sp, #32]
 8005abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	dc55      	bgt.n	8005b70 <_dtoa_r+0x310>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005aca:	461a      	mov	r2, r3
 8005acc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ace:	e00c      	b.n	8005aea <_dtoa_r+0x28a>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e7f3      	b.n	8005abc <_dtoa_r+0x25c>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad8:	9308      	str	r3, [sp, #32]
 8005ada:	9b00      	ldr	r3, [sp, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	9302      	str	r3, [sp, #8]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	bfb8      	it	lt
 8005ae8:	2301      	movlt	r3, #1
 8005aea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005aec:	2200      	movs	r2, #0
 8005aee:	6042      	str	r2, [r0, #4]
 8005af0:	2204      	movs	r2, #4
 8005af2:	f102 0614 	add.w	r6, r2, #20
 8005af6:	429e      	cmp	r6, r3
 8005af8:	6841      	ldr	r1, [r0, #4]
 8005afa:	d93d      	bls.n	8005b78 <_dtoa_r+0x318>
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fed7 	bl	80068b0 <_Balloc>
 8005b02:	9001      	str	r0, [sp, #4]
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d13b      	bne.n	8005b80 <_dtoa_r+0x320>
 8005b08:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <_dtoa_r+0x2f0>)
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b10:	e6c0      	b.n	8005894 <_dtoa_r+0x34>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e7df      	b.n	8005ad6 <_dtoa_r+0x276>
 8005b16:	bf00      	nop
 8005b18:	636f4361 	.word	0x636f4361
 8005b1c:	3fd287a7 	.word	0x3fd287a7
 8005b20:	8b60c8b3 	.word	0x8b60c8b3
 8005b24:	3fc68a28 	.word	0x3fc68a28
 8005b28:	509f79fb 	.word	0x509f79fb
 8005b2c:	3fd34413 	.word	0x3fd34413
 8005b30:	080077f9 	.word	0x080077f9
 8005b34:	08007810 	.word	0x08007810
 8005b38:	7ff00000 	.word	0x7ff00000
 8005b3c:	080077f5 	.word	0x080077f5
 8005b40:	080077ec 	.word	0x080077ec
 8005b44:	080077c9 	.word	0x080077c9
 8005b48:	3ff80000 	.word	0x3ff80000
 8005b4c:	08007960 	.word	0x08007960
 8005b50:	0800786b 	.word	0x0800786b
 8005b54:	2501      	movs	r5, #1
 8005b56:	2300      	movs	r3, #0
 8005b58:	9306      	str	r3, [sp, #24]
 8005b5a:	9508      	str	r5, [sp, #32]
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2312      	movs	r3, #18
 8005b68:	e7b0      	b.n	8005acc <_dtoa_r+0x26c>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	9308      	str	r3, [sp, #32]
 8005b6e:	e7f5      	b.n	8005b5c <_dtoa_r+0x2fc>
 8005b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b76:	e7b8      	b.n	8005aea <_dtoa_r+0x28a>
 8005b78:	3101      	adds	r1, #1
 8005b7a:	6041      	str	r1, [r0, #4]
 8005b7c:	0052      	lsls	r2, r2, #1
 8005b7e:	e7b8      	b.n	8005af2 <_dtoa_r+0x292>
 8005b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b82:	9a01      	ldr	r2, [sp, #4]
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	2b0e      	cmp	r3, #14
 8005b8a:	f200 809d 	bhi.w	8005cc8 <_dtoa_r+0x468>
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	f000 809a 	beq.w	8005cc8 <_dtoa_r+0x468>
 8005b94:	9b00      	ldr	r3, [sp, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd32      	ble.n	8005c00 <_dtoa_r+0x3a0>
 8005b9a:	4ab7      	ldr	r2, [pc, #732]	; (8005e78 <_dtoa_r+0x618>)
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba8:	9b00      	ldr	r3, [sp, #0]
 8005baa:	05d8      	lsls	r0, r3, #23
 8005bac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005bb0:	d516      	bpl.n	8005be0 <_dtoa_r+0x380>
 8005bb2:	4bb2      	ldr	r3, [pc, #712]	; (8005e7c <_dtoa_r+0x61c>)
 8005bb4:	ec51 0b19 	vmov	r0, r1, d9
 8005bb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bbc:	f7fa fe4e 	bl	800085c <__aeabi_ddiv>
 8005bc0:	f007 070f 	and.w	r7, r7, #15
 8005bc4:	4682      	mov	sl, r0
 8005bc6:	468b      	mov	fp, r1
 8005bc8:	2503      	movs	r5, #3
 8005bca:	4eac      	ldr	r6, [pc, #688]	; (8005e7c <_dtoa_r+0x61c>)
 8005bcc:	b957      	cbnz	r7, 8005be4 <_dtoa_r+0x384>
 8005bce:	4642      	mov	r2, r8
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	f7fa fe41 	bl	800085c <__aeabi_ddiv>
 8005bda:	4682      	mov	sl, r0
 8005bdc:	468b      	mov	fp, r1
 8005bde:	e028      	b.n	8005c32 <_dtoa_r+0x3d2>
 8005be0:	2502      	movs	r5, #2
 8005be2:	e7f2      	b.n	8005bca <_dtoa_r+0x36a>
 8005be4:	07f9      	lsls	r1, r7, #31
 8005be6:	d508      	bpl.n	8005bfa <_dtoa_r+0x39a>
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bf0:	f7fa fd0a 	bl	8000608 <__aeabi_dmul>
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	4680      	mov	r8, r0
 8005bf8:	4689      	mov	r9, r1
 8005bfa:	107f      	asrs	r7, r7, #1
 8005bfc:	3608      	adds	r6, #8
 8005bfe:	e7e5      	b.n	8005bcc <_dtoa_r+0x36c>
 8005c00:	f000 809b 	beq.w	8005d3a <_dtoa_r+0x4da>
 8005c04:	9b00      	ldr	r3, [sp, #0]
 8005c06:	4f9d      	ldr	r7, [pc, #628]	; (8005e7c <_dtoa_r+0x61c>)
 8005c08:	425e      	negs	r6, r3
 8005c0a:	4b9b      	ldr	r3, [pc, #620]	; (8005e78 <_dtoa_r+0x618>)
 8005c0c:	f006 020f 	and.w	r2, r6, #15
 8005c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	ec51 0b19 	vmov	r0, r1, d9
 8005c1c:	f7fa fcf4 	bl	8000608 <__aeabi_dmul>
 8005c20:	1136      	asrs	r6, r6, #4
 8005c22:	4682      	mov	sl, r0
 8005c24:	468b      	mov	fp, r1
 8005c26:	2300      	movs	r3, #0
 8005c28:	2502      	movs	r5, #2
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	d17a      	bne.n	8005d24 <_dtoa_r+0x4c4>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1d3      	bne.n	8005bda <_dtoa_r+0x37a>
 8005c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8082 	beq.w	8005d3e <_dtoa_r+0x4de>
 8005c3a:	4b91      	ldr	r3, [pc, #580]	; (8005e80 <_dtoa_r+0x620>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4650      	mov	r0, sl
 8005c40:	4659      	mov	r1, fp
 8005c42:	f7fa ff53 	bl	8000aec <__aeabi_dcmplt>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d079      	beq.n	8005d3e <_dtoa_r+0x4de>
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d076      	beq.n	8005d3e <_dtoa_r+0x4de>
 8005c50:	9b02      	ldr	r3, [sp, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dd36      	ble.n	8005cc4 <_dtoa_r+0x464>
 8005c56:	9b00      	ldr	r3, [sp, #0]
 8005c58:	4650      	mov	r0, sl
 8005c5a:	4659      	mov	r1, fp
 8005c5c:	1e5f      	subs	r7, r3, #1
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4b88      	ldr	r3, [pc, #544]	; (8005e84 <_dtoa_r+0x624>)
 8005c62:	f7fa fcd1 	bl	8000608 <__aeabi_dmul>
 8005c66:	9e02      	ldr	r6, [sp, #8]
 8005c68:	4682      	mov	sl, r0
 8005c6a:	468b      	mov	fp, r1
 8005c6c:	3501      	adds	r5, #1
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f7fa fc60 	bl	8000534 <__aeabi_i2d>
 8005c74:	4652      	mov	r2, sl
 8005c76:	465b      	mov	r3, fp
 8005c78:	f7fa fcc6 	bl	8000608 <__aeabi_dmul>
 8005c7c:	4b82      	ldr	r3, [pc, #520]	; (8005e88 <_dtoa_r+0x628>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f7fa fb0c 	bl	800029c <__adddf3>
 8005c84:	46d0      	mov	r8, sl
 8005c86:	46d9      	mov	r9, fp
 8005c88:	4682      	mov	sl, r0
 8005c8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	d158      	bne.n	8005d44 <_dtoa_r+0x4e4>
 8005c92:	4b7e      	ldr	r3, [pc, #504]	; (8005e8c <_dtoa_r+0x62c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	4640      	mov	r0, r8
 8005c98:	4649      	mov	r1, r9
 8005c9a:	f7fa fafd 	bl	8000298 <__aeabi_dsub>
 8005c9e:	4652      	mov	r2, sl
 8005ca0:	465b      	mov	r3, fp
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	4689      	mov	r9, r1
 8005ca6:	f7fa ff3f 	bl	8000b28 <__aeabi_dcmpgt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f040 8295 	bne.w	80061da <_dtoa_r+0x97a>
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	4649      	mov	r1, r9
 8005cba:	f7fa ff17 	bl	8000aec <__aeabi_dcmplt>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f040 8289 	bne.w	80061d6 <_dtoa_r+0x976>
 8005cc4:	ec5b ab19 	vmov	sl, fp, d9
 8005cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f2c0 8148 	blt.w	8005f60 <_dtoa_r+0x700>
 8005cd0:	9a00      	ldr	r2, [sp, #0]
 8005cd2:	2a0e      	cmp	r2, #14
 8005cd4:	f300 8144 	bgt.w	8005f60 <_dtoa_r+0x700>
 8005cd8:	4b67      	ldr	r3, [pc, #412]	; (8005e78 <_dtoa_r+0x618>)
 8005cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f280 80d5 	bge.w	8005e94 <_dtoa_r+0x634>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f300 80d1 	bgt.w	8005e94 <_dtoa_r+0x634>
 8005cf2:	f040 826f 	bne.w	80061d4 <_dtoa_r+0x974>
 8005cf6:	4b65      	ldr	r3, [pc, #404]	; (8005e8c <_dtoa_r+0x62c>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fc83 	bl	8000608 <__aeabi_dmul>
 8005d02:	4652      	mov	r2, sl
 8005d04:	465b      	mov	r3, fp
 8005d06:	f7fa ff05 	bl	8000b14 <__aeabi_dcmpge>
 8005d0a:	9e03      	ldr	r6, [sp, #12]
 8005d0c:	4637      	mov	r7, r6
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f040 8245 	bne.w	800619e <_dtoa_r+0x93e>
 8005d14:	9d01      	ldr	r5, [sp, #4]
 8005d16:	2331      	movs	r3, #49	; 0x31
 8005d18:	f805 3b01 	strb.w	r3, [r5], #1
 8005d1c:	9b00      	ldr	r3, [sp, #0]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	e240      	b.n	80061a6 <_dtoa_r+0x946>
 8005d24:	07f2      	lsls	r2, r6, #31
 8005d26:	d505      	bpl.n	8005d34 <_dtoa_r+0x4d4>
 8005d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d2c:	f7fa fc6c 	bl	8000608 <__aeabi_dmul>
 8005d30:	3501      	adds	r5, #1
 8005d32:	2301      	movs	r3, #1
 8005d34:	1076      	asrs	r6, r6, #1
 8005d36:	3708      	adds	r7, #8
 8005d38:	e777      	b.n	8005c2a <_dtoa_r+0x3ca>
 8005d3a:	2502      	movs	r5, #2
 8005d3c:	e779      	b.n	8005c32 <_dtoa_r+0x3d2>
 8005d3e:	9f00      	ldr	r7, [sp, #0]
 8005d40:	9e03      	ldr	r6, [sp, #12]
 8005d42:	e794      	b.n	8005c6e <_dtoa_r+0x40e>
 8005d44:	9901      	ldr	r1, [sp, #4]
 8005d46:	4b4c      	ldr	r3, [pc, #304]	; (8005e78 <_dtoa_r+0x618>)
 8005d48:	4431      	add	r1, r6
 8005d4a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d4c:	9908      	ldr	r1, [sp, #32]
 8005d4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d043      	beq.n	8005de2 <_dtoa_r+0x582>
 8005d5a:	494d      	ldr	r1, [pc, #308]	; (8005e90 <_dtoa_r+0x630>)
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f7fa fd7d 	bl	800085c <__aeabi_ddiv>
 8005d62:	4652      	mov	r2, sl
 8005d64:	465b      	mov	r3, fp
 8005d66:	f7fa fa97 	bl	8000298 <__aeabi_dsub>
 8005d6a:	9d01      	ldr	r5, [sp, #4]
 8005d6c:	4682      	mov	sl, r0
 8005d6e:	468b      	mov	fp, r1
 8005d70:	4649      	mov	r1, r9
 8005d72:	4640      	mov	r0, r8
 8005d74:	f7fa fef8 	bl	8000b68 <__aeabi_d2iz>
 8005d78:	4606      	mov	r6, r0
 8005d7a:	f7fa fbdb 	bl	8000534 <__aeabi_i2d>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4640      	mov	r0, r8
 8005d84:	4649      	mov	r1, r9
 8005d86:	f7fa fa87 	bl	8000298 <__aeabi_dsub>
 8005d8a:	3630      	adds	r6, #48	; 0x30
 8005d8c:	f805 6b01 	strb.w	r6, [r5], #1
 8005d90:	4652      	mov	r2, sl
 8005d92:	465b      	mov	r3, fp
 8005d94:	4680      	mov	r8, r0
 8005d96:	4689      	mov	r9, r1
 8005d98:	f7fa fea8 	bl	8000aec <__aeabi_dcmplt>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d163      	bne.n	8005e68 <_dtoa_r+0x608>
 8005da0:	4642      	mov	r2, r8
 8005da2:	464b      	mov	r3, r9
 8005da4:	4936      	ldr	r1, [pc, #216]	; (8005e80 <_dtoa_r+0x620>)
 8005da6:	2000      	movs	r0, #0
 8005da8:	f7fa fa76 	bl	8000298 <__aeabi_dsub>
 8005dac:	4652      	mov	r2, sl
 8005dae:	465b      	mov	r3, fp
 8005db0:	f7fa fe9c 	bl	8000aec <__aeabi_dcmplt>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f040 80b5 	bne.w	8005f24 <_dtoa_r+0x6c4>
 8005dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dbc:	429d      	cmp	r5, r3
 8005dbe:	d081      	beq.n	8005cc4 <_dtoa_r+0x464>
 8005dc0:	4b30      	ldr	r3, [pc, #192]	; (8005e84 <_dtoa_r+0x624>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4650      	mov	r0, sl
 8005dc6:	4659      	mov	r1, fp
 8005dc8:	f7fa fc1e 	bl	8000608 <__aeabi_dmul>
 8005dcc:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <_dtoa_r+0x624>)
 8005dce:	4682      	mov	sl, r0
 8005dd0:	468b      	mov	fp, r1
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f7fa fc16 	bl	8000608 <__aeabi_dmul>
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4689      	mov	r9, r1
 8005de0:	e7c6      	b.n	8005d70 <_dtoa_r+0x510>
 8005de2:	4650      	mov	r0, sl
 8005de4:	4659      	mov	r1, fp
 8005de6:	f7fa fc0f 	bl	8000608 <__aeabi_dmul>
 8005dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dec:	9d01      	ldr	r5, [sp, #4]
 8005dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005df0:	4682      	mov	sl, r0
 8005df2:	468b      	mov	fp, r1
 8005df4:	4649      	mov	r1, r9
 8005df6:	4640      	mov	r0, r8
 8005df8:	f7fa feb6 	bl	8000b68 <__aeabi_d2iz>
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	f7fa fb99 	bl	8000534 <__aeabi_i2d>
 8005e02:	3630      	adds	r6, #48	; 0x30
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	f7fa fa44 	bl	8000298 <__aeabi_dsub>
 8005e10:	f805 6b01 	strb.w	r6, [r5], #1
 8005e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e16:	429d      	cmp	r5, r3
 8005e18:	4680      	mov	r8, r0
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	d124      	bne.n	8005e6c <_dtoa_r+0x60c>
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <_dtoa_r+0x630>)
 8005e24:	4650      	mov	r0, sl
 8005e26:	4659      	mov	r1, fp
 8005e28:	f7fa fa38 	bl	800029c <__adddf3>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fe78 	bl	8000b28 <__aeabi_dcmpgt>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d173      	bne.n	8005f24 <_dtoa_r+0x6c4>
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	465b      	mov	r3, fp
 8005e40:	4913      	ldr	r1, [pc, #76]	; (8005e90 <_dtoa_r+0x630>)
 8005e42:	2000      	movs	r0, #0
 8005e44:	f7fa fa28 	bl	8000298 <__aeabi_dsub>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	4649      	mov	r1, r9
 8005e50:	f7fa fe4c 	bl	8000aec <__aeabi_dcmplt>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f43f af35 	beq.w	8005cc4 <_dtoa_r+0x464>
 8005e5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e5c:	1e6b      	subs	r3, r5, #1
 8005e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e64:	2b30      	cmp	r3, #48	; 0x30
 8005e66:	d0f8      	beq.n	8005e5a <_dtoa_r+0x5fa>
 8005e68:	9700      	str	r7, [sp, #0]
 8005e6a:	e049      	b.n	8005f00 <_dtoa_r+0x6a0>
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <_dtoa_r+0x624>)
 8005e6e:	f7fa fbcb 	bl	8000608 <__aeabi_dmul>
 8005e72:	4680      	mov	r8, r0
 8005e74:	4689      	mov	r9, r1
 8005e76:	e7bd      	b.n	8005df4 <_dtoa_r+0x594>
 8005e78:	08007960 	.word	0x08007960
 8005e7c:	08007938 	.word	0x08007938
 8005e80:	3ff00000 	.word	0x3ff00000
 8005e84:	40240000 	.word	0x40240000
 8005e88:	401c0000 	.word	0x401c0000
 8005e8c:	40140000 	.word	0x40140000
 8005e90:	3fe00000 	.word	0x3fe00000
 8005e94:	9d01      	ldr	r5, [sp, #4]
 8005e96:	4656      	mov	r6, sl
 8005e98:	465f      	mov	r7, fp
 8005e9a:	4642      	mov	r2, r8
 8005e9c:	464b      	mov	r3, r9
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	f7fa fcdb 	bl	800085c <__aeabi_ddiv>
 8005ea6:	f7fa fe5f 	bl	8000b68 <__aeabi_d2iz>
 8005eaa:	4682      	mov	sl, r0
 8005eac:	f7fa fb42 	bl	8000534 <__aeabi_i2d>
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	f7fa fba8 	bl	8000608 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005ec4:	f7fa f9e8 	bl	8000298 <__aeabi_dsub>
 8005ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8005ecc:	9e01      	ldr	r6, [sp, #4]
 8005ece:	9f03      	ldr	r7, [sp, #12]
 8005ed0:	1bae      	subs	r6, r5, r6
 8005ed2:	42b7      	cmp	r7, r6
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	d135      	bne.n	8005f46 <_dtoa_r+0x6e6>
 8005eda:	f7fa f9df 	bl	800029c <__adddf3>
 8005ede:	4642      	mov	r2, r8
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	460f      	mov	r7, r1
 8005ee6:	f7fa fe1f 	bl	8000b28 <__aeabi_dcmpgt>
 8005eea:	b9d0      	cbnz	r0, 8005f22 <_dtoa_r+0x6c2>
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa fdf0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ef8:	b110      	cbz	r0, 8005f00 <_dtoa_r+0x6a0>
 8005efa:	f01a 0f01 	tst.w	sl, #1
 8005efe:	d110      	bne.n	8005f22 <_dtoa_r+0x6c2>
 8005f00:	4620      	mov	r0, r4
 8005f02:	ee18 1a10 	vmov	r1, s16
 8005f06:	f000 fd13 	bl	8006930 <_Bfree>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9800      	ldr	r0, [sp, #0]
 8005f0e:	702b      	strb	r3, [r5, #0]
 8005f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f12:	3001      	adds	r0, #1
 8005f14:	6018      	str	r0, [r3, #0]
 8005f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f43f acf1 	beq.w	8005900 <_dtoa_r+0xa0>
 8005f1e:	601d      	str	r5, [r3, #0]
 8005f20:	e4ee      	b.n	8005900 <_dtoa_r+0xa0>
 8005f22:	9f00      	ldr	r7, [sp, #0]
 8005f24:	462b      	mov	r3, r5
 8005f26:	461d      	mov	r5, r3
 8005f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f2c:	2a39      	cmp	r2, #57	; 0x39
 8005f2e:	d106      	bne.n	8005f3e <_dtoa_r+0x6de>
 8005f30:	9a01      	ldr	r2, [sp, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d1f7      	bne.n	8005f26 <_dtoa_r+0x6c6>
 8005f36:	9901      	ldr	r1, [sp, #4]
 8005f38:	2230      	movs	r2, #48	; 0x30
 8005f3a:	3701      	adds	r7, #1
 8005f3c:	700a      	strb	r2, [r1, #0]
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	3201      	adds	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e790      	b.n	8005e68 <_dtoa_r+0x608>
 8005f46:	4ba6      	ldr	r3, [pc, #664]	; (80061e0 <_dtoa_r+0x980>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f7fa fb5d 	bl	8000608 <__aeabi_dmul>
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2300      	movs	r3, #0
 8005f52:	4606      	mov	r6, r0
 8005f54:	460f      	mov	r7, r1
 8005f56:	f7fa fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d09d      	beq.n	8005e9a <_dtoa_r+0x63a>
 8005f5e:	e7cf      	b.n	8005f00 <_dtoa_r+0x6a0>
 8005f60:	9a08      	ldr	r2, [sp, #32]
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	f000 80d7 	beq.w	8006116 <_dtoa_r+0x8b6>
 8005f68:	9a06      	ldr	r2, [sp, #24]
 8005f6a:	2a01      	cmp	r2, #1
 8005f6c:	f300 80ba 	bgt.w	80060e4 <_dtoa_r+0x884>
 8005f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f72:	2a00      	cmp	r2, #0
 8005f74:	f000 80b2 	beq.w	80060dc <_dtoa_r+0x87c>
 8005f78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f7c:	9e07      	ldr	r6, [sp, #28]
 8005f7e:	9d04      	ldr	r5, [sp, #16]
 8005f80:	9a04      	ldr	r2, [sp, #16]
 8005f82:	441a      	add	r2, r3
 8005f84:	9204      	str	r2, [sp, #16]
 8005f86:	9a05      	ldr	r2, [sp, #20]
 8005f88:	2101      	movs	r1, #1
 8005f8a:	441a      	add	r2, r3
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	9205      	str	r2, [sp, #20]
 8005f90:	f000 fd86 	bl	8006aa0 <__i2b>
 8005f94:	4607      	mov	r7, r0
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	dd0c      	ble.n	8005fb4 <_dtoa_r+0x754>
 8005f9a:	9b05      	ldr	r3, [sp, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	dd09      	ble.n	8005fb4 <_dtoa_r+0x754>
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	9a04      	ldr	r2, [sp, #16]
 8005fa4:	bfa8      	it	ge
 8005fa6:	462b      	movge	r3, r5
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	9204      	str	r2, [sp, #16]
 8005fac:	9a05      	ldr	r2, [sp, #20]
 8005fae:	1aed      	subs	r5, r5, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	9305      	str	r3, [sp, #20]
 8005fb4:	9b07      	ldr	r3, [sp, #28]
 8005fb6:	b31b      	cbz	r3, 8006000 <_dtoa_r+0x7a0>
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80af 	beq.w	800611e <_dtoa_r+0x8be>
 8005fc0:	2e00      	cmp	r6, #0
 8005fc2:	dd13      	ble.n	8005fec <_dtoa_r+0x78c>
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fe29 	bl	8006c20 <__pow5mult>
 8005fce:	ee18 2a10 	vmov	r2, s16
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 fd78 	bl	8006acc <__multiply>
 8005fdc:	ee18 1a10 	vmov	r1, s16
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 fca4 	bl	8006930 <_Bfree>
 8005fe8:	ee08 8a10 	vmov	s16, r8
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	1b9a      	subs	r2, r3, r6
 8005ff0:	d006      	beq.n	8006000 <_dtoa_r+0x7a0>
 8005ff2:	ee18 1a10 	vmov	r1, s16
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 fe12 	bl	8006c20 <__pow5mult>
 8005ffc:	ee08 0a10 	vmov	s16, r0
 8006000:	2101      	movs	r1, #1
 8006002:	4620      	mov	r0, r4
 8006004:	f000 fd4c 	bl	8006aa0 <__i2b>
 8006008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	4606      	mov	r6, r0
 800600e:	f340 8088 	ble.w	8006122 <_dtoa_r+0x8c2>
 8006012:	461a      	mov	r2, r3
 8006014:	4601      	mov	r1, r0
 8006016:	4620      	mov	r0, r4
 8006018:	f000 fe02 	bl	8006c20 <__pow5mult>
 800601c:	9b06      	ldr	r3, [sp, #24]
 800601e:	2b01      	cmp	r3, #1
 8006020:	4606      	mov	r6, r0
 8006022:	f340 8081 	ble.w	8006128 <_dtoa_r+0x8c8>
 8006026:	f04f 0800 	mov.w	r8, #0
 800602a:	6933      	ldr	r3, [r6, #16]
 800602c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006030:	6918      	ldr	r0, [r3, #16]
 8006032:	f000 fce5 	bl	8006a00 <__hi0bits>
 8006036:	f1c0 0020 	rsb	r0, r0, #32
 800603a:	9b05      	ldr	r3, [sp, #20]
 800603c:	4418      	add	r0, r3
 800603e:	f010 001f 	ands.w	r0, r0, #31
 8006042:	f000 8092 	beq.w	800616a <_dtoa_r+0x90a>
 8006046:	f1c0 0320 	rsb	r3, r0, #32
 800604a:	2b04      	cmp	r3, #4
 800604c:	f340 808a 	ble.w	8006164 <_dtoa_r+0x904>
 8006050:	f1c0 001c 	rsb	r0, r0, #28
 8006054:	9b04      	ldr	r3, [sp, #16]
 8006056:	4403      	add	r3, r0
 8006058:	9304      	str	r3, [sp, #16]
 800605a:	9b05      	ldr	r3, [sp, #20]
 800605c:	4403      	add	r3, r0
 800605e:	4405      	add	r5, r0
 8006060:	9305      	str	r3, [sp, #20]
 8006062:	9b04      	ldr	r3, [sp, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dd07      	ble.n	8006078 <_dtoa_r+0x818>
 8006068:	ee18 1a10 	vmov	r1, s16
 800606c:	461a      	mov	r2, r3
 800606e:	4620      	mov	r0, r4
 8006070:	f000 fe30 	bl	8006cd4 <__lshift>
 8006074:	ee08 0a10 	vmov	s16, r0
 8006078:	9b05      	ldr	r3, [sp, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	dd05      	ble.n	800608a <_dtoa_r+0x82a>
 800607e:	4631      	mov	r1, r6
 8006080:	461a      	mov	r2, r3
 8006082:	4620      	mov	r0, r4
 8006084:	f000 fe26 	bl	8006cd4 <__lshift>
 8006088:	4606      	mov	r6, r0
 800608a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d06e      	beq.n	800616e <_dtoa_r+0x90e>
 8006090:	ee18 0a10 	vmov	r0, s16
 8006094:	4631      	mov	r1, r6
 8006096:	f000 fe8d 	bl	8006db4 <__mcmp>
 800609a:	2800      	cmp	r0, #0
 800609c:	da67      	bge.n	800616e <_dtoa_r+0x90e>
 800609e:	9b00      	ldr	r3, [sp, #0]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	ee18 1a10 	vmov	r1, s16
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	220a      	movs	r2, #10
 80060aa:	2300      	movs	r3, #0
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 fc61 	bl	8006974 <__multadd>
 80060b2:	9b08      	ldr	r3, [sp, #32]
 80060b4:	ee08 0a10 	vmov	s16, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 81b1 	beq.w	8006420 <_dtoa_r+0xbc0>
 80060be:	2300      	movs	r3, #0
 80060c0:	4639      	mov	r1, r7
 80060c2:	220a      	movs	r2, #10
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 fc55 	bl	8006974 <__multadd>
 80060ca:	9b02      	ldr	r3, [sp, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	4607      	mov	r7, r0
 80060d0:	f300 808e 	bgt.w	80061f0 <_dtoa_r+0x990>
 80060d4:	9b06      	ldr	r3, [sp, #24]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	dc51      	bgt.n	800617e <_dtoa_r+0x91e>
 80060da:	e089      	b.n	80061f0 <_dtoa_r+0x990>
 80060dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060e2:	e74b      	b.n	8005f7c <_dtoa_r+0x71c>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	1e5e      	subs	r6, r3, #1
 80060e8:	9b07      	ldr	r3, [sp, #28]
 80060ea:	42b3      	cmp	r3, r6
 80060ec:	bfbf      	itttt	lt
 80060ee:	9b07      	ldrlt	r3, [sp, #28]
 80060f0:	9607      	strlt	r6, [sp, #28]
 80060f2:	1af2      	sublt	r2, r6, r3
 80060f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060f6:	bfb6      	itet	lt
 80060f8:	189b      	addlt	r3, r3, r2
 80060fa:	1b9e      	subge	r6, r3, r6
 80060fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80060fe:	9b03      	ldr	r3, [sp, #12]
 8006100:	bfb8      	it	lt
 8006102:	2600      	movlt	r6, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfb7      	itett	lt
 8006108:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800610c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006110:	1a9d      	sublt	r5, r3, r2
 8006112:	2300      	movlt	r3, #0
 8006114:	e734      	b.n	8005f80 <_dtoa_r+0x720>
 8006116:	9e07      	ldr	r6, [sp, #28]
 8006118:	9d04      	ldr	r5, [sp, #16]
 800611a:	9f08      	ldr	r7, [sp, #32]
 800611c:	e73b      	b.n	8005f96 <_dtoa_r+0x736>
 800611e:	9a07      	ldr	r2, [sp, #28]
 8006120:	e767      	b.n	8005ff2 <_dtoa_r+0x792>
 8006122:	9b06      	ldr	r3, [sp, #24]
 8006124:	2b01      	cmp	r3, #1
 8006126:	dc18      	bgt.n	800615a <_dtoa_r+0x8fa>
 8006128:	f1ba 0f00 	cmp.w	sl, #0
 800612c:	d115      	bne.n	800615a <_dtoa_r+0x8fa>
 800612e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006132:	b993      	cbnz	r3, 800615a <_dtoa_r+0x8fa>
 8006134:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006138:	0d1b      	lsrs	r3, r3, #20
 800613a:	051b      	lsls	r3, r3, #20
 800613c:	b183      	cbz	r3, 8006160 <_dtoa_r+0x900>
 800613e:	9b04      	ldr	r3, [sp, #16]
 8006140:	3301      	adds	r3, #1
 8006142:	9304      	str	r3, [sp, #16]
 8006144:	9b05      	ldr	r3, [sp, #20]
 8006146:	3301      	adds	r3, #1
 8006148:	9305      	str	r3, [sp, #20]
 800614a:	f04f 0801 	mov.w	r8, #1
 800614e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006150:	2b00      	cmp	r3, #0
 8006152:	f47f af6a 	bne.w	800602a <_dtoa_r+0x7ca>
 8006156:	2001      	movs	r0, #1
 8006158:	e76f      	b.n	800603a <_dtoa_r+0x7da>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	e7f6      	b.n	800614e <_dtoa_r+0x8ee>
 8006160:	4698      	mov	r8, r3
 8006162:	e7f4      	b.n	800614e <_dtoa_r+0x8ee>
 8006164:	f43f af7d 	beq.w	8006062 <_dtoa_r+0x802>
 8006168:	4618      	mov	r0, r3
 800616a:	301c      	adds	r0, #28
 800616c:	e772      	b.n	8006054 <_dtoa_r+0x7f4>
 800616e:	9b03      	ldr	r3, [sp, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	dc37      	bgt.n	80061e4 <_dtoa_r+0x984>
 8006174:	9b06      	ldr	r3, [sp, #24]
 8006176:	2b02      	cmp	r3, #2
 8006178:	dd34      	ble.n	80061e4 <_dtoa_r+0x984>
 800617a:	9b03      	ldr	r3, [sp, #12]
 800617c:	9302      	str	r3, [sp, #8]
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	b96b      	cbnz	r3, 800619e <_dtoa_r+0x93e>
 8006182:	4631      	mov	r1, r6
 8006184:	2205      	movs	r2, #5
 8006186:	4620      	mov	r0, r4
 8006188:	f000 fbf4 	bl	8006974 <__multadd>
 800618c:	4601      	mov	r1, r0
 800618e:	4606      	mov	r6, r0
 8006190:	ee18 0a10 	vmov	r0, s16
 8006194:	f000 fe0e 	bl	8006db4 <__mcmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	f73f adbb 	bgt.w	8005d14 <_dtoa_r+0x4b4>
 800619e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a0:	9d01      	ldr	r5, [sp, #4]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	f04f 0800 	mov.w	r8, #0
 80061aa:	4631      	mov	r1, r6
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fbbf 	bl	8006930 <_Bfree>
 80061b2:	2f00      	cmp	r7, #0
 80061b4:	f43f aea4 	beq.w	8005f00 <_dtoa_r+0x6a0>
 80061b8:	f1b8 0f00 	cmp.w	r8, #0
 80061bc:	d005      	beq.n	80061ca <_dtoa_r+0x96a>
 80061be:	45b8      	cmp	r8, r7
 80061c0:	d003      	beq.n	80061ca <_dtoa_r+0x96a>
 80061c2:	4641      	mov	r1, r8
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fbb3 	bl	8006930 <_Bfree>
 80061ca:	4639      	mov	r1, r7
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 fbaf 	bl	8006930 <_Bfree>
 80061d2:	e695      	b.n	8005f00 <_dtoa_r+0x6a0>
 80061d4:	2600      	movs	r6, #0
 80061d6:	4637      	mov	r7, r6
 80061d8:	e7e1      	b.n	800619e <_dtoa_r+0x93e>
 80061da:	9700      	str	r7, [sp, #0]
 80061dc:	4637      	mov	r7, r6
 80061de:	e599      	b.n	8005d14 <_dtoa_r+0x4b4>
 80061e0:	40240000 	.word	0x40240000
 80061e4:	9b08      	ldr	r3, [sp, #32]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 80ca 	beq.w	8006380 <_dtoa_r+0xb20>
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	9302      	str	r3, [sp, #8]
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	dd05      	ble.n	8006200 <_dtoa_r+0x9a0>
 80061f4:	4639      	mov	r1, r7
 80061f6:	462a      	mov	r2, r5
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 fd6b 	bl	8006cd4 <__lshift>
 80061fe:	4607      	mov	r7, r0
 8006200:	f1b8 0f00 	cmp.w	r8, #0
 8006204:	d05b      	beq.n	80062be <_dtoa_r+0xa5e>
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fb51 	bl	80068b0 <_Balloc>
 800620e:	4605      	mov	r5, r0
 8006210:	b928      	cbnz	r0, 800621e <_dtoa_r+0x9be>
 8006212:	4b87      	ldr	r3, [pc, #540]	; (8006430 <_dtoa_r+0xbd0>)
 8006214:	4602      	mov	r2, r0
 8006216:	f240 21ea 	movw	r1, #746	; 0x2ea
 800621a:	f7ff bb3b 	b.w	8005894 <_dtoa_r+0x34>
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	3202      	adds	r2, #2
 8006222:	0092      	lsls	r2, r2, #2
 8006224:	f107 010c 	add.w	r1, r7, #12
 8006228:	300c      	adds	r0, #12
 800622a:	f000 fb33 	bl	8006894 <memcpy>
 800622e:	2201      	movs	r2, #1
 8006230:	4629      	mov	r1, r5
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fd4e 	bl	8006cd4 <__lshift>
 8006238:	9b01      	ldr	r3, [sp, #4]
 800623a:	f103 0901 	add.w	r9, r3, #1
 800623e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006242:	4413      	add	r3, r2
 8006244:	9305      	str	r3, [sp, #20]
 8006246:	f00a 0301 	and.w	r3, sl, #1
 800624a:	46b8      	mov	r8, r7
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	4607      	mov	r7, r0
 8006250:	4631      	mov	r1, r6
 8006252:	ee18 0a10 	vmov	r0, s16
 8006256:	f7ff fa77 	bl	8005748 <quorem>
 800625a:	4641      	mov	r1, r8
 800625c:	9002      	str	r0, [sp, #8]
 800625e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006262:	ee18 0a10 	vmov	r0, s16
 8006266:	f000 fda5 	bl	8006db4 <__mcmp>
 800626a:	463a      	mov	r2, r7
 800626c:	9003      	str	r0, [sp, #12]
 800626e:	4631      	mov	r1, r6
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fdbb 	bl	8006dec <__mdiff>
 8006276:	68c2      	ldr	r2, [r0, #12]
 8006278:	f109 3bff 	add.w	fp, r9, #4294967295
 800627c:	4605      	mov	r5, r0
 800627e:	bb02      	cbnz	r2, 80062c2 <_dtoa_r+0xa62>
 8006280:	4601      	mov	r1, r0
 8006282:	ee18 0a10 	vmov	r0, s16
 8006286:	f000 fd95 	bl	8006db4 <__mcmp>
 800628a:	4602      	mov	r2, r0
 800628c:	4629      	mov	r1, r5
 800628e:	4620      	mov	r0, r4
 8006290:	9207      	str	r2, [sp, #28]
 8006292:	f000 fb4d 	bl	8006930 <_Bfree>
 8006296:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800629a:	ea43 0102 	orr.w	r1, r3, r2
 800629e:	9b04      	ldr	r3, [sp, #16]
 80062a0:	430b      	orrs	r3, r1
 80062a2:	464d      	mov	r5, r9
 80062a4:	d10f      	bne.n	80062c6 <_dtoa_r+0xa66>
 80062a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062aa:	d02a      	beq.n	8006302 <_dtoa_r+0xaa2>
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dd02      	ble.n	80062b8 <_dtoa_r+0xa58>
 80062b2:	9b02      	ldr	r3, [sp, #8]
 80062b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80062b8:	f88b a000 	strb.w	sl, [fp]
 80062bc:	e775      	b.n	80061aa <_dtoa_r+0x94a>
 80062be:	4638      	mov	r0, r7
 80062c0:	e7ba      	b.n	8006238 <_dtoa_r+0x9d8>
 80062c2:	2201      	movs	r2, #1
 80062c4:	e7e2      	b.n	800628c <_dtoa_r+0xa2c>
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	db04      	blt.n	80062d6 <_dtoa_r+0xa76>
 80062cc:	9906      	ldr	r1, [sp, #24]
 80062ce:	430b      	orrs	r3, r1
 80062d0:	9904      	ldr	r1, [sp, #16]
 80062d2:	430b      	orrs	r3, r1
 80062d4:	d122      	bne.n	800631c <_dtoa_r+0xabc>
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	ddee      	ble.n	80062b8 <_dtoa_r+0xa58>
 80062da:	ee18 1a10 	vmov	r1, s16
 80062de:	2201      	movs	r2, #1
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fcf7 	bl	8006cd4 <__lshift>
 80062e6:	4631      	mov	r1, r6
 80062e8:	ee08 0a10 	vmov	s16, r0
 80062ec:	f000 fd62 	bl	8006db4 <__mcmp>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	dc03      	bgt.n	80062fc <_dtoa_r+0xa9c>
 80062f4:	d1e0      	bne.n	80062b8 <_dtoa_r+0xa58>
 80062f6:	f01a 0f01 	tst.w	sl, #1
 80062fa:	d0dd      	beq.n	80062b8 <_dtoa_r+0xa58>
 80062fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006300:	d1d7      	bne.n	80062b2 <_dtoa_r+0xa52>
 8006302:	2339      	movs	r3, #57	; 0x39
 8006304:	f88b 3000 	strb.w	r3, [fp]
 8006308:	462b      	mov	r3, r5
 800630a:	461d      	mov	r5, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006312:	2a39      	cmp	r2, #57	; 0x39
 8006314:	d071      	beq.n	80063fa <_dtoa_r+0xb9a>
 8006316:	3201      	adds	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e746      	b.n	80061aa <_dtoa_r+0x94a>
 800631c:	2a00      	cmp	r2, #0
 800631e:	dd07      	ble.n	8006330 <_dtoa_r+0xad0>
 8006320:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006324:	d0ed      	beq.n	8006302 <_dtoa_r+0xaa2>
 8006326:	f10a 0301 	add.w	r3, sl, #1
 800632a:	f88b 3000 	strb.w	r3, [fp]
 800632e:	e73c      	b.n	80061aa <_dtoa_r+0x94a>
 8006330:	9b05      	ldr	r3, [sp, #20]
 8006332:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006336:	4599      	cmp	r9, r3
 8006338:	d047      	beq.n	80063ca <_dtoa_r+0xb6a>
 800633a:	ee18 1a10 	vmov	r1, s16
 800633e:	2300      	movs	r3, #0
 8006340:	220a      	movs	r2, #10
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fb16 	bl	8006974 <__multadd>
 8006348:	45b8      	cmp	r8, r7
 800634a:	ee08 0a10 	vmov	s16, r0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	f04f 020a 	mov.w	r2, #10
 8006356:	4641      	mov	r1, r8
 8006358:	4620      	mov	r0, r4
 800635a:	d106      	bne.n	800636a <_dtoa_r+0xb0a>
 800635c:	f000 fb0a 	bl	8006974 <__multadd>
 8006360:	4680      	mov	r8, r0
 8006362:	4607      	mov	r7, r0
 8006364:	f109 0901 	add.w	r9, r9, #1
 8006368:	e772      	b.n	8006250 <_dtoa_r+0x9f0>
 800636a:	f000 fb03 	bl	8006974 <__multadd>
 800636e:	4639      	mov	r1, r7
 8006370:	4680      	mov	r8, r0
 8006372:	2300      	movs	r3, #0
 8006374:	220a      	movs	r2, #10
 8006376:	4620      	mov	r0, r4
 8006378:	f000 fafc 	bl	8006974 <__multadd>
 800637c:	4607      	mov	r7, r0
 800637e:	e7f1      	b.n	8006364 <_dtoa_r+0xb04>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	9302      	str	r3, [sp, #8]
 8006384:	9d01      	ldr	r5, [sp, #4]
 8006386:	ee18 0a10 	vmov	r0, s16
 800638a:	4631      	mov	r1, r6
 800638c:	f7ff f9dc 	bl	8005748 <quorem>
 8006390:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006394:	9b01      	ldr	r3, [sp, #4]
 8006396:	f805 ab01 	strb.w	sl, [r5], #1
 800639a:	1aea      	subs	r2, r5, r3
 800639c:	9b02      	ldr	r3, [sp, #8]
 800639e:	4293      	cmp	r3, r2
 80063a0:	dd09      	ble.n	80063b6 <_dtoa_r+0xb56>
 80063a2:	ee18 1a10 	vmov	r1, s16
 80063a6:	2300      	movs	r3, #0
 80063a8:	220a      	movs	r2, #10
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 fae2 	bl	8006974 <__multadd>
 80063b0:	ee08 0a10 	vmov	s16, r0
 80063b4:	e7e7      	b.n	8006386 <_dtoa_r+0xb26>
 80063b6:	9b02      	ldr	r3, [sp, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bfc8      	it	gt
 80063bc:	461d      	movgt	r5, r3
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	bfd8      	it	le
 80063c2:	2501      	movle	r5, #1
 80063c4:	441d      	add	r5, r3
 80063c6:	f04f 0800 	mov.w	r8, #0
 80063ca:	ee18 1a10 	vmov	r1, s16
 80063ce:	2201      	movs	r2, #1
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fc7f 	bl	8006cd4 <__lshift>
 80063d6:	4631      	mov	r1, r6
 80063d8:	ee08 0a10 	vmov	s16, r0
 80063dc:	f000 fcea 	bl	8006db4 <__mcmp>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dc91      	bgt.n	8006308 <_dtoa_r+0xaa8>
 80063e4:	d102      	bne.n	80063ec <_dtoa_r+0xb8c>
 80063e6:	f01a 0f01 	tst.w	sl, #1
 80063ea:	d18d      	bne.n	8006308 <_dtoa_r+0xaa8>
 80063ec:	462b      	mov	r3, r5
 80063ee:	461d      	mov	r5, r3
 80063f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f4:	2a30      	cmp	r2, #48	; 0x30
 80063f6:	d0fa      	beq.n	80063ee <_dtoa_r+0xb8e>
 80063f8:	e6d7      	b.n	80061aa <_dtoa_r+0x94a>
 80063fa:	9a01      	ldr	r2, [sp, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d184      	bne.n	800630a <_dtoa_r+0xaaa>
 8006400:	9b00      	ldr	r3, [sp, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	2331      	movs	r3, #49	; 0x31
 8006408:	7013      	strb	r3, [r2, #0]
 800640a:	e6ce      	b.n	80061aa <_dtoa_r+0x94a>
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <_dtoa_r+0xbd4>)
 800640e:	f7ff ba95 	b.w	800593c <_dtoa_r+0xdc>
 8006412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006414:	2b00      	cmp	r3, #0
 8006416:	f47f aa6e 	bne.w	80058f6 <_dtoa_r+0x96>
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <_dtoa_r+0xbd8>)
 800641c:	f7ff ba8e 	b.w	800593c <_dtoa_r+0xdc>
 8006420:	9b02      	ldr	r3, [sp, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	dcae      	bgt.n	8006384 <_dtoa_r+0xb24>
 8006426:	9b06      	ldr	r3, [sp, #24]
 8006428:	2b02      	cmp	r3, #2
 800642a:	f73f aea8 	bgt.w	800617e <_dtoa_r+0x91e>
 800642e:	e7a9      	b.n	8006384 <_dtoa_r+0xb24>
 8006430:	0800786b 	.word	0x0800786b
 8006434:	080077c8 	.word	0x080077c8
 8006438:	080077ec 	.word	0x080077ec

0800643c <__sflush_r>:
 800643c:	898a      	ldrh	r2, [r1, #12]
 800643e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006442:	4605      	mov	r5, r0
 8006444:	0710      	lsls	r0, r2, #28
 8006446:	460c      	mov	r4, r1
 8006448:	d458      	bmi.n	80064fc <__sflush_r+0xc0>
 800644a:	684b      	ldr	r3, [r1, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dc05      	bgt.n	800645c <__sflush_r+0x20>
 8006450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	dc02      	bgt.n	800645c <__sflush_r+0x20>
 8006456:	2000      	movs	r0, #0
 8006458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800645c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800645e:	2e00      	cmp	r6, #0
 8006460:	d0f9      	beq.n	8006456 <__sflush_r+0x1a>
 8006462:	2300      	movs	r3, #0
 8006464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006468:	682f      	ldr	r7, [r5, #0]
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	d032      	beq.n	80064d4 <__sflush_r+0x98>
 800646e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	075a      	lsls	r2, r3, #29
 8006474:	d505      	bpl.n	8006482 <__sflush_r+0x46>
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	1ac0      	subs	r0, r0, r3
 800647a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800647c:	b10b      	cbz	r3, 8006482 <__sflush_r+0x46>
 800647e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006480:	1ac0      	subs	r0, r0, r3
 8006482:	2300      	movs	r3, #0
 8006484:	4602      	mov	r2, r0
 8006486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006488:	6a21      	ldr	r1, [r4, #32]
 800648a:	4628      	mov	r0, r5
 800648c:	47b0      	blx	r6
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	d106      	bne.n	80064a2 <__sflush_r+0x66>
 8006494:	6829      	ldr	r1, [r5, #0]
 8006496:	291d      	cmp	r1, #29
 8006498:	d82c      	bhi.n	80064f4 <__sflush_r+0xb8>
 800649a:	4a2a      	ldr	r2, [pc, #168]	; (8006544 <__sflush_r+0x108>)
 800649c:	40ca      	lsrs	r2, r1
 800649e:	07d6      	lsls	r6, r2, #31
 80064a0:	d528      	bpl.n	80064f4 <__sflush_r+0xb8>
 80064a2:	2200      	movs	r2, #0
 80064a4:	6062      	str	r2, [r4, #4]
 80064a6:	04d9      	lsls	r1, r3, #19
 80064a8:	6922      	ldr	r2, [r4, #16]
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	d504      	bpl.n	80064b8 <__sflush_r+0x7c>
 80064ae:	1c42      	adds	r2, r0, #1
 80064b0:	d101      	bne.n	80064b6 <__sflush_r+0x7a>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	b903      	cbnz	r3, 80064b8 <__sflush_r+0x7c>
 80064b6:	6560      	str	r0, [r4, #84]	; 0x54
 80064b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ba:	602f      	str	r7, [r5, #0]
 80064bc:	2900      	cmp	r1, #0
 80064be:	d0ca      	beq.n	8006456 <__sflush_r+0x1a>
 80064c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064c4:	4299      	cmp	r1, r3
 80064c6:	d002      	beq.n	80064ce <__sflush_r+0x92>
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 fd8b 	bl	8006fe4 <_free_r>
 80064ce:	2000      	movs	r0, #0
 80064d0:	6360      	str	r0, [r4, #52]	; 0x34
 80064d2:	e7c1      	b.n	8006458 <__sflush_r+0x1c>
 80064d4:	6a21      	ldr	r1, [r4, #32]
 80064d6:	2301      	movs	r3, #1
 80064d8:	4628      	mov	r0, r5
 80064da:	47b0      	blx	r6
 80064dc:	1c41      	adds	r1, r0, #1
 80064de:	d1c7      	bne.n	8006470 <__sflush_r+0x34>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0c4      	beq.n	8006470 <__sflush_r+0x34>
 80064e6:	2b1d      	cmp	r3, #29
 80064e8:	d001      	beq.n	80064ee <__sflush_r+0xb2>
 80064ea:	2b16      	cmp	r3, #22
 80064ec:	d101      	bne.n	80064f2 <__sflush_r+0xb6>
 80064ee:	602f      	str	r7, [r5, #0]
 80064f0:	e7b1      	b.n	8006456 <__sflush_r+0x1a>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	e7ad      	b.n	8006458 <__sflush_r+0x1c>
 80064fc:	690f      	ldr	r7, [r1, #16]
 80064fe:	2f00      	cmp	r7, #0
 8006500:	d0a9      	beq.n	8006456 <__sflush_r+0x1a>
 8006502:	0793      	lsls	r3, r2, #30
 8006504:	680e      	ldr	r6, [r1, #0]
 8006506:	bf08      	it	eq
 8006508:	694b      	ldreq	r3, [r1, #20]
 800650a:	600f      	str	r7, [r1, #0]
 800650c:	bf18      	it	ne
 800650e:	2300      	movne	r3, #0
 8006510:	eba6 0807 	sub.w	r8, r6, r7
 8006514:	608b      	str	r3, [r1, #8]
 8006516:	f1b8 0f00 	cmp.w	r8, #0
 800651a:	dd9c      	ble.n	8006456 <__sflush_r+0x1a>
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006520:	4643      	mov	r3, r8
 8006522:	463a      	mov	r2, r7
 8006524:	4628      	mov	r0, r5
 8006526:	47b0      	blx	r6
 8006528:	2800      	cmp	r0, #0
 800652a:	dc06      	bgt.n	800653a <__sflush_r+0xfe>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006532:	81a3      	strh	r3, [r4, #12]
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	e78e      	b.n	8006458 <__sflush_r+0x1c>
 800653a:	4407      	add	r7, r0
 800653c:	eba8 0800 	sub.w	r8, r8, r0
 8006540:	e7e9      	b.n	8006516 <__sflush_r+0xda>
 8006542:	bf00      	nop
 8006544:	20400001 	.word	0x20400001

08006548 <_fflush_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	690b      	ldr	r3, [r1, #16]
 800654c:	4605      	mov	r5, r0
 800654e:	460c      	mov	r4, r1
 8006550:	b913      	cbnz	r3, 8006558 <_fflush_r+0x10>
 8006552:	2500      	movs	r5, #0
 8006554:	4628      	mov	r0, r5
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	b118      	cbz	r0, 8006562 <_fflush_r+0x1a>
 800655a:	6983      	ldr	r3, [r0, #24]
 800655c:	b90b      	cbnz	r3, 8006562 <_fflush_r+0x1a>
 800655e:	f000 f887 	bl	8006670 <__sinit>
 8006562:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <_fflush_r+0x6c>)
 8006564:	429c      	cmp	r4, r3
 8006566:	d11b      	bne.n	80065a0 <_fflush_r+0x58>
 8006568:	686c      	ldr	r4, [r5, #4]
 800656a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ef      	beq.n	8006552 <_fflush_r+0xa>
 8006572:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006574:	07d0      	lsls	r0, r2, #31
 8006576:	d404      	bmi.n	8006582 <_fflush_r+0x3a>
 8006578:	0599      	lsls	r1, r3, #22
 800657a:	d402      	bmi.n	8006582 <_fflush_r+0x3a>
 800657c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800657e:	f000 f91a 	bl	80067b6 <__retarget_lock_acquire_recursive>
 8006582:	4628      	mov	r0, r5
 8006584:	4621      	mov	r1, r4
 8006586:	f7ff ff59 	bl	800643c <__sflush_r>
 800658a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800658c:	07da      	lsls	r2, r3, #31
 800658e:	4605      	mov	r5, r0
 8006590:	d4e0      	bmi.n	8006554 <_fflush_r+0xc>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	059b      	lsls	r3, r3, #22
 8006596:	d4dd      	bmi.n	8006554 <_fflush_r+0xc>
 8006598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659a:	f000 f90d 	bl	80067b8 <__retarget_lock_release_recursive>
 800659e:	e7d9      	b.n	8006554 <_fflush_r+0xc>
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <_fflush_r+0x70>)
 80065a2:	429c      	cmp	r4, r3
 80065a4:	d101      	bne.n	80065aa <_fflush_r+0x62>
 80065a6:	68ac      	ldr	r4, [r5, #8]
 80065a8:	e7df      	b.n	800656a <_fflush_r+0x22>
 80065aa:	4b04      	ldr	r3, [pc, #16]	; (80065bc <_fflush_r+0x74>)
 80065ac:	429c      	cmp	r4, r3
 80065ae:	bf08      	it	eq
 80065b0:	68ec      	ldreq	r4, [r5, #12]
 80065b2:	e7da      	b.n	800656a <_fflush_r+0x22>
 80065b4:	0800789c 	.word	0x0800789c
 80065b8:	080078bc 	.word	0x080078bc
 80065bc:	0800787c 	.word	0x0800787c

080065c0 <std>:
 80065c0:	2300      	movs	r3, #0
 80065c2:	b510      	push	{r4, lr}
 80065c4:	4604      	mov	r4, r0
 80065c6:	e9c0 3300 	strd	r3, r3, [r0]
 80065ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ce:	6083      	str	r3, [r0, #8]
 80065d0:	8181      	strh	r1, [r0, #12]
 80065d2:	6643      	str	r3, [r0, #100]	; 0x64
 80065d4:	81c2      	strh	r2, [r0, #14]
 80065d6:	6183      	str	r3, [r0, #24]
 80065d8:	4619      	mov	r1, r3
 80065da:	2208      	movs	r2, #8
 80065dc:	305c      	adds	r0, #92	; 0x5c
 80065de:	f7fe faf3 	bl	8004bc8 <memset>
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <std+0x38>)
 80065e4:	6263      	str	r3, [r4, #36]	; 0x24
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <std+0x3c>)
 80065e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ea:	4b05      	ldr	r3, [pc, #20]	; (8006600 <std+0x40>)
 80065ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <std+0x44>)
 80065f0:	6224      	str	r4, [r4, #32]
 80065f2:	6323      	str	r3, [r4, #48]	; 0x30
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	bf00      	nop
 80065f8:	08007479 	.word	0x08007479
 80065fc:	0800749b 	.word	0x0800749b
 8006600:	080074d3 	.word	0x080074d3
 8006604:	080074f7 	.word	0x080074f7

08006608 <_cleanup_r>:
 8006608:	4901      	ldr	r1, [pc, #4]	; (8006610 <_cleanup_r+0x8>)
 800660a:	f000 b8af 	b.w	800676c <_fwalk_reent>
 800660e:	bf00      	nop
 8006610:	08006549 	.word	0x08006549

08006614 <__sfmoreglue>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	2268      	movs	r2, #104	; 0x68
 8006618:	1e4d      	subs	r5, r1, #1
 800661a:	4355      	muls	r5, r2
 800661c:	460e      	mov	r6, r1
 800661e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006622:	f000 fd4b 	bl	80070bc <_malloc_r>
 8006626:	4604      	mov	r4, r0
 8006628:	b140      	cbz	r0, 800663c <__sfmoreglue+0x28>
 800662a:	2100      	movs	r1, #0
 800662c:	e9c0 1600 	strd	r1, r6, [r0]
 8006630:	300c      	adds	r0, #12
 8006632:	60a0      	str	r0, [r4, #8]
 8006634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006638:	f7fe fac6 	bl	8004bc8 <memset>
 800663c:	4620      	mov	r0, r4
 800663e:	bd70      	pop	{r4, r5, r6, pc}

08006640 <__sfp_lock_acquire>:
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__sfp_lock_acquire+0x8>)
 8006642:	f000 b8b8 	b.w	80067b6 <__retarget_lock_acquire_recursive>
 8006646:	bf00      	nop
 8006648:	20000319 	.word	0x20000319

0800664c <__sfp_lock_release>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_release+0x8>)
 800664e:	f000 b8b3 	b.w	80067b8 <__retarget_lock_release_recursive>
 8006652:	bf00      	nop
 8006654:	20000319 	.word	0x20000319

08006658 <__sinit_lock_acquire>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sinit_lock_acquire+0x8>)
 800665a:	f000 b8ac 	b.w	80067b6 <__retarget_lock_acquire_recursive>
 800665e:	bf00      	nop
 8006660:	2000031a 	.word	0x2000031a

08006664 <__sinit_lock_release>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__sinit_lock_release+0x8>)
 8006666:	f000 b8a7 	b.w	80067b8 <__retarget_lock_release_recursive>
 800666a:	bf00      	nop
 800666c:	2000031a 	.word	0x2000031a

08006670 <__sinit>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4604      	mov	r4, r0
 8006674:	f7ff fff0 	bl	8006658 <__sinit_lock_acquire>
 8006678:	69a3      	ldr	r3, [r4, #24]
 800667a:	b11b      	cbz	r3, 8006684 <__sinit+0x14>
 800667c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006680:	f7ff bff0 	b.w	8006664 <__sinit_lock_release>
 8006684:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006688:	6523      	str	r3, [r4, #80]	; 0x50
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <__sinit+0x68>)
 800668c:	4a13      	ldr	r2, [pc, #76]	; (80066dc <__sinit+0x6c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	62a2      	str	r2, [r4, #40]	; 0x28
 8006692:	42a3      	cmp	r3, r4
 8006694:	bf04      	itt	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	61a3      	streq	r3, [r4, #24]
 800669a:	4620      	mov	r0, r4
 800669c:	f000 f820 	bl	80066e0 <__sfp>
 80066a0:	6060      	str	r0, [r4, #4]
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 f81c 	bl	80066e0 <__sfp>
 80066a8:	60a0      	str	r0, [r4, #8]
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 f818 	bl	80066e0 <__sfp>
 80066b0:	2200      	movs	r2, #0
 80066b2:	60e0      	str	r0, [r4, #12]
 80066b4:	2104      	movs	r1, #4
 80066b6:	6860      	ldr	r0, [r4, #4]
 80066b8:	f7ff ff82 	bl	80065c0 <std>
 80066bc:	68a0      	ldr	r0, [r4, #8]
 80066be:	2201      	movs	r2, #1
 80066c0:	2109      	movs	r1, #9
 80066c2:	f7ff ff7d 	bl	80065c0 <std>
 80066c6:	68e0      	ldr	r0, [r4, #12]
 80066c8:	2202      	movs	r2, #2
 80066ca:	2112      	movs	r1, #18
 80066cc:	f7ff ff78 	bl	80065c0 <std>
 80066d0:	2301      	movs	r3, #1
 80066d2:	61a3      	str	r3, [r4, #24]
 80066d4:	e7d2      	b.n	800667c <__sinit+0xc>
 80066d6:	bf00      	nop
 80066d8:	080077b4 	.word	0x080077b4
 80066dc:	08006609 	.word	0x08006609

080066e0 <__sfp>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	4607      	mov	r7, r0
 80066e4:	f7ff ffac 	bl	8006640 <__sfp_lock_acquire>
 80066e8:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <__sfp+0x84>)
 80066ea:	681e      	ldr	r6, [r3, #0]
 80066ec:	69b3      	ldr	r3, [r6, #24]
 80066ee:	b913      	cbnz	r3, 80066f6 <__sfp+0x16>
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff ffbd 	bl	8006670 <__sinit>
 80066f6:	3648      	adds	r6, #72	; 0x48
 80066f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	d503      	bpl.n	8006708 <__sfp+0x28>
 8006700:	6833      	ldr	r3, [r6, #0]
 8006702:	b30b      	cbz	r3, 8006748 <__sfp+0x68>
 8006704:	6836      	ldr	r6, [r6, #0]
 8006706:	e7f7      	b.n	80066f8 <__sfp+0x18>
 8006708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800670c:	b9d5      	cbnz	r5, 8006744 <__sfp+0x64>
 800670e:	4b16      	ldr	r3, [pc, #88]	; (8006768 <__sfp+0x88>)
 8006710:	60e3      	str	r3, [r4, #12]
 8006712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006716:	6665      	str	r5, [r4, #100]	; 0x64
 8006718:	f000 f84c 	bl	80067b4 <__retarget_lock_init_recursive>
 800671c:	f7ff ff96 	bl	800664c <__sfp_lock_release>
 8006720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006728:	6025      	str	r5, [r4, #0]
 800672a:	61a5      	str	r5, [r4, #24]
 800672c:	2208      	movs	r2, #8
 800672e:	4629      	mov	r1, r5
 8006730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006734:	f7fe fa48 	bl	8004bc8 <memset>
 8006738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800673c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006740:	4620      	mov	r0, r4
 8006742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006744:	3468      	adds	r4, #104	; 0x68
 8006746:	e7d9      	b.n	80066fc <__sfp+0x1c>
 8006748:	2104      	movs	r1, #4
 800674a:	4638      	mov	r0, r7
 800674c:	f7ff ff62 	bl	8006614 <__sfmoreglue>
 8006750:	4604      	mov	r4, r0
 8006752:	6030      	str	r0, [r6, #0]
 8006754:	2800      	cmp	r0, #0
 8006756:	d1d5      	bne.n	8006704 <__sfp+0x24>
 8006758:	f7ff ff78 	bl	800664c <__sfp_lock_release>
 800675c:	230c      	movs	r3, #12
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	e7ee      	b.n	8006740 <__sfp+0x60>
 8006762:	bf00      	nop
 8006764:	080077b4 	.word	0x080077b4
 8006768:	ffff0001 	.word	0xffff0001

0800676c <_fwalk_reent>:
 800676c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006770:	4606      	mov	r6, r0
 8006772:	4688      	mov	r8, r1
 8006774:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006778:	2700      	movs	r7, #0
 800677a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800677e:	f1b9 0901 	subs.w	r9, r9, #1
 8006782:	d505      	bpl.n	8006790 <_fwalk_reent+0x24>
 8006784:	6824      	ldr	r4, [r4, #0]
 8006786:	2c00      	cmp	r4, #0
 8006788:	d1f7      	bne.n	800677a <_fwalk_reent+0xe>
 800678a:	4638      	mov	r0, r7
 800678c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006790:	89ab      	ldrh	r3, [r5, #12]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d907      	bls.n	80067a6 <_fwalk_reent+0x3a>
 8006796:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800679a:	3301      	adds	r3, #1
 800679c:	d003      	beq.n	80067a6 <_fwalk_reent+0x3a>
 800679e:	4629      	mov	r1, r5
 80067a0:	4630      	mov	r0, r6
 80067a2:	47c0      	blx	r8
 80067a4:	4307      	orrs	r7, r0
 80067a6:	3568      	adds	r5, #104	; 0x68
 80067a8:	e7e9      	b.n	800677e <_fwalk_reent+0x12>
	...

080067ac <_localeconv_r>:
 80067ac:	4800      	ldr	r0, [pc, #0]	; (80067b0 <_localeconv_r+0x4>)
 80067ae:	4770      	bx	lr
 80067b0:	20000164 	.word	0x20000164

080067b4 <__retarget_lock_init_recursive>:
 80067b4:	4770      	bx	lr

080067b6 <__retarget_lock_acquire_recursive>:
 80067b6:	4770      	bx	lr

080067b8 <__retarget_lock_release_recursive>:
 80067b8:	4770      	bx	lr

080067ba <__swhatbuf_r>:
 80067ba:	b570      	push	{r4, r5, r6, lr}
 80067bc:	460e      	mov	r6, r1
 80067be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c2:	2900      	cmp	r1, #0
 80067c4:	b096      	sub	sp, #88	; 0x58
 80067c6:	4614      	mov	r4, r2
 80067c8:	461d      	mov	r5, r3
 80067ca:	da08      	bge.n	80067de <__swhatbuf_r+0x24>
 80067cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	602a      	str	r2, [r5, #0]
 80067d4:	061a      	lsls	r2, r3, #24
 80067d6:	d410      	bmi.n	80067fa <__swhatbuf_r+0x40>
 80067d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067dc:	e00e      	b.n	80067fc <__swhatbuf_r+0x42>
 80067de:	466a      	mov	r2, sp
 80067e0:	f000 fee0 	bl	80075a4 <_fstat_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	dbf1      	blt.n	80067cc <__swhatbuf_r+0x12>
 80067e8:	9a01      	ldr	r2, [sp, #4]
 80067ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067f2:	425a      	negs	r2, r3
 80067f4:	415a      	adcs	r2, r3
 80067f6:	602a      	str	r2, [r5, #0]
 80067f8:	e7ee      	b.n	80067d8 <__swhatbuf_r+0x1e>
 80067fa:	2340      	movs	r3, #64	; 0x40
 80067fc:	2000      	movs	r0, #0
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	b016      	add	sp, #88	; 0x58
 8006802:	bd70      	pop	{r4, r5, r6, pc}

08006804 <__smakebuf_r>:
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006808:	079d      	lsls	r5, r3, #30
 800680a:	4606      	mov	r6, r0
 800680c:	460c      	mov	r4, r1
 800680e:	d507      	bpl.n	8006820 <__smakebuf_r+0x1c>
 8006810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	6123      	str	r3, [r4, #16]
 8006818:	2301      	movs	r3, #1
 800681a:	6163      	str	r3, [r4, #20]
 800681c:	b002      	add	sp, #8
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	ab01      	add	r3, sp, #4
 8006822:	466a      	mov	r2, sp
 8006824:	f7ff ffc9 	bl	80067ba <__swhatbuf_r>
 8006828:	9900      	ldr	r1, [sp, #0]
 800682a:	4605      	mov	r5, r0
 800682c:	4630      	mov	r0, r6
 800682e:	f000 fc45 	bl	80070bc <_malloc_r>
 8006832:	b948      	cbnz	r0, 8006848 <__smakebuf_r+0x44>
 8006834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006838:	059a      	lsls	r2, r3, #22
 800683a:	d4ef      	bmi.n	800681c <__smakebuf_r+0x18>
 800683c:	f023 0303 	bic.w	r3, r3, #3
 8006840:	f043 0302 	orr.w	r3, r3, #2
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	e7e3      	b.n	8006810 <__smakebuf_r+0xc>
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <__smakebuf_r+0x7c>)
 800684a:	62b3      	str	r3, [r6, #40]	; 0x28
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	6020      	str	r0, [r4, #0]
 8006850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	6163      	str	r3, [r4, #20]
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	6120      	str	r0, [r4, #16]
 800685e:	b15b      	cbz	r3, 8006878 <__smakebuf_r+0x74>
 8006860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006864:	4630      	mov	r0, r6
 8006866:	f000 feaf 	bl	80075c8 <_isatty_r>
 800686a:	b128      	cbz	r0, 8006878 <__smakebuf_r+0x74>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	89a0      	ldrh	r0, [r4, #12]
 800687a:	4305      	orrs	r5, r0
 800687c:	81a5      	strh	r5, [r4, #12]
 800687e:	e7cd      	b.n	800681c <__smakebuf_r+0x18>
 8006880:	08006609 	.word	0x08006609

08006884 <malloc>:
 8006884:	4b02      	ldr	r3, [pc, #8]	; (8006890 <malloc+0xc>)
 8006886:	4601      	mov	r1, r0
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	f000 bc17 	b.w	80070bc <_malloc_r>
 800688e:	bf00      	nop
 8006890:	20000010 	.word	0x20000010

08006894 <memcpy>:
 8006894:	440a      	add	r2, r1
 8006896:	4291      	cmp	r1, r2
 8006898:	f100 33ff 	add.w	r3, r0, #4294967295
 800689c:	d100      	bne.n	80068a0 <memcpy+0xc>
 800689e:	4770      	bx	lr
 80068a0:	b510      	push	{r4, lr}
 80068a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068aa:	4291      	cmp	r1, r2
 80068ac:	d1f9      	bne.n	80068a2 <memcpy+0xe>
 80068ae:	bd10      	pop	{r4, pc}

080068b0 <_Balloc>:
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068b4:	4604      	mov	r4, r0
 80068b6:	460d      	mov	r5, r1
 80068b8:	b976      	cbnz	r6, 80068d8 <_Balloc+0x28>
 80068ba:	2010      	movs	r0, #16
 80068bc:	f7ff ffe2 	bl	8006884 <malloc>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6260      	str	r0, [r4, #36]	; 0x24
 80068c4:	b920      	cbnz	r0, 80068d0 <_Balloc+0x20>
 80068c6:	4b18      	ldr	r3, [pc, #96]	; (8006928 <_Balloc+0x78>)
 80068c8:	4818      	ldr	r0, [pc, #96]	; (800692c <_Balloc+0x7c>)
 80068ca:	2166      	movs	r1, #102	; 0x66
 80068cc:	f000 fe2a 	bl	8007524 <__assert_func>
 80068d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068d4:	6006      	str	r6, [r0, #0]
 80068d6:	60c6      	str	r6, [r0, #12]
 80068d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068da:	68f3      	ldr	r3, [r6, #12]
 80068dc:	b183      	cbz	r3, 8006900 <_Balloc+0x50>
 80068de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068e6:	b9b8      	cbnz	r0, 8006918 <_Balloc+0x68>
 80068e8:	2101      	movs	r1, #1
 80068ea:	fa01 f605 	lsl.w	r6, r1, r5
 80068ee:	1d72      	adds	r2, r6, #5
 80068f0:	0092      	lsls	r2, r2, #2
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fb60 	bl	8006fb8 <_calloc_r>
 80068f8:	b160      	cbz	r0, 8006914 <_Balloc+0x64>
 80068fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068fe:	e00e      	b.n	800691e <_Balloc+0x6e>
 8006900:	2221      	movs	r2, #33	; 0x21
 8006902:	2104      	movs	r1, #4
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fb57 	bl	8006fb8 <_calloc_r>
 800690a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690c:	60f0      	str	r0, [r6, #12]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e4      	bne.n	80068de <_Balloc+0x2e>
 8006914:	2000      	movs	r0, #0
 8006916:	bd70      	pop	{r4, r5, r6, pc}
 8006918:	6802      	ldr	r2, [r0, #0]
 800691a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800691e:	2300      	movs	r3, #0
 8006920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006924:	e7f7      	b.n	8006916 <_Balloc+0x66>
 8006926:	bf00      	nop
 8006928:	080077f9 	.word	0x080077f9
 800692c:	080078dc 	.word	0x080078dc

08006930 <_Bfree>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006934:	4605      	mov	r5, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b976      	cbnz	r6, 8006958 <_Bfree+0x28>
 800693a:	2010      	movs	r0, #16
 800693c:	f7ff ffa2 	bl	8006884 <malloc>
 8006940:	4602      	mov	r2, r0
 8006942:	6268      	str	r0, [r5, #36]	; 0x24
 8006944:	b920      	cbnz	r0, 8006950 <_Bfree+0x20>
 8006946:	4b09      	ldr	r3, [pc, #36]	; (800696c <_Bfree+0x3c>)
 8006948:	4809      	ldr	r0, [pc, #36]	; (8006970 <_Bfree+0x40>)
 800694a:	218a      	movs	r1, #138	; 0x8a
 800694c:	f000 fdea 	bl	8007524 <__assert_func>
 8006950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006954:	6006      	str	r6, [r0, #0]
 8006956:	60c6      	str	r6, [r0, #12]
 8006958:	b13c      	cbz	r4, 800696a <_Bfree+0x3a>
 800695a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800695c:	6862      	ldr	r2, [r4, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006964:	6021      	str	r1, [r4, #0]
 8006966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	080077f9 	.word	0x080077f9
 8006970:	080078dc 	.word	0x080078dc

08006974 <__multadd>:
 8006974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006978:	690d      	ldr	r5, [r1, #16]
 800697a:	4607      	mov	r7, r0
 800697c:	460c      	mov	r4, r1
 800697e:	461e      	mov	r6, r3
 8006980:	f101 0c14 	add.w	ip, r1, #20
 8006984:	2000      	movs	r0, #0
 8006986:	f8dc 3000 	ldr.w	r3, [ip]
 800698a:	b299      	uxth	r1, r3
 800698c:	fb02 6101 	mla	r1, r2, r1, r6
 8006990:	0c1e      	lsrs	r6, r3, #16
 8006992:	0c0b      	lsrs	r3, r1, #16
 8006994:	fb02 3306 	mla	r3, r2, r6, r3
 8006998:	b289      	uxth	r1, r1
 800699a:	3001      	adds	r0, #1
 800699c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069a0:	4285      	cmp	r5, r0
 80069a2:	f84c 1b04 	str.w	r1, [ip], #4
 80069a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069aa:	dcec      	bgt.n	8006986 <__multadd+0x12>
 80069ac:	b30e      	cbz	r6, 80069f2 <__multadd+0x7e>
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	42ab      	cmp	r3, r5
 80069b2:	dc19      	bgt.n	80069e8 <__multadd+0x74>
 80069b4:	6861      	ldr	r1, [r4, #4]
 80069b6:	4638      	mov	r0, r7
 80069b8:	3101      	adds	r1, #1
 80069ba:	f7ff ff79 	bl	80068b0 <_Balloc>
 80069be:	4680      	mov	r8, r0
 80069c0:	b928      	cbnz	r0, 80069ce <__multadd+0x5a>
 80069c2:	4602      	mov	r2, r0
 80069c4:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <__multadd+0x84>)
 80069c6:	480d      	ldr	r0, [pc, #52]	; (80069fc <__multadd+0x88>)
 80069c8:	21b5      	movs	r1, #181	; 0xb5
 80069ca:	f000 fdab 	bl	8007524 <__assert_func>
 80069ce:	6922      	ldr	r2, [r4, #16]
 80069d0:	3202      	adds	r2, #2
 80069d2:	f104 010c 	add.w	r1, r4, #12
 80069d6:	0092      	lsls	r2, r2, #2
 80069d8:	300c      	adds	r0, #12
 80069da:	f7ff ff5b 	bl	8006894 <memcpy>
 80069de:	4621      	mov	r1, r4
 80069e0:	4638      	mov	r0, r7
 80069e2:	f7ff ffa5 	bl	8006930 <_Bfree>
 80069e6:	4644      	mov	r4, r8
 80069e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069ec:	3501      	adds	r5, #1
 80069ee:	615e      	str	r6, [r3, #20]
 80069f0:	6125      	str	r5, [r4, #16]
 80069f2:	4620      	mov	r0, r4
 80069f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f8:	0800786b 	.word	0x0800786b
 80069fc:	080078dc 	.word	0x080078dc

08006a00 <__hi0bits>:
 8006a00:	0c03      	lsrs	r3, r0, #16
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	b9d3      	cbnz	r3, 8006a3c <__hi0bits+0x3c>
 8006a06:	0400      	lsls	r0, r0, #16
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a0e:	bf04      	itt	eq
 8006a10:	0200      	lsleq	r0, r0, #8
 8006a12:	3308      	addeq	r3, #8
 8006a14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a18:	bf04      	itt	eq
 8006a1a:	0100      	lsleq	r0, r0, #4
 8006a1c:	3304      	addeq	r3, #4
 8006a1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a22:	bf04      	itt	eq
 8006a24:	0080      	lsleq	r0, r0, #2
 8006a26:	3302      	addeq	r3, #2
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	db05      	blt.n	8006a38 <__hi0bits+0x38>
 8006a2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a30:	f103 0301 	add.w	r3, r3, #1
 8006a34:	bf08      	it	eq
 8006a36:	2320      	moveq	r3, #32
 8006a38:	4618      	mov	r0, r3
 8006a3a:	4770      	bx	lr
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e7e4      	b.n	8006a0a <__hi0bits+0xa>

08006a40 <__lo0bits>:
 8006a40:	6803      	ldr	r3, [r0, #0]
 8006a42:	f013 0207 	ands.w	r2, r3, #7
 8006a46:	4601      	mov	r1, r0
 8006a48:	d00b      	beq.n	8006a62 <__lo0bits+0x22>
 8006a4a:	07da      	lsls	r2, r3, #31
 8006a4c:	d423      	bmi.n	8006a96 <__lo0bits+0x56>
 8006a4e:	0798      	lsls	r0, r3, #30
 8006a50:	bf49      	itett	mi
 8006a52:	085b      	lsrmi	r3, r3, #1
 8006a54:	089b      	lsrpl	r3, r3, #2
 8006a56:	2001      	movmi	r0, #1
 8006a58:	600b      	strmi	r3, [r1, #0]
 8006a5a:	bf5c      	itt	pl
 8006a5c:	600b      	strpl	r3, [r1, #0]
 8006a5e:	2002      	movpl	r0, #2
 8006a60:	4770      	bx	lr
 8006a62:	b298      	uxth	r0, r3
 8006a64:	b9a8      	cbnz	r0, 8006a92 <__lo0bits+0x52>
 8006a66:	0c1b      	lsrs	r3, r3, #16
 8006a68:	2010      	movs	r0, #16
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	b90a      	cbnz	r2, 8006a72 <__lo0bits+0x32>
 8006a6e:	3008      	adds	r0, #8
 8006a70:	0a1b      	lsrs	r3, r3, #8
 8006a72:	071a      	lsls	r2, r3, #28
 8006a74:	bf04      	itt	eq
 8006a76:	091b      	lsreq	r3, r3, #4
 8006a78:	3004      	addeq	r0, #4
 8006a7a:	079a      	lsls	r2, r3, #30
 8006a7c:	bf04      	itt	eq
 8006a7e:	089b      	lsreq	r3, r3, #2
 8006a80:	3002      	addeq	r0, #2
 8006a82:	07da      	lsls	r2, r3, #31
 8006a84:	d403      	bmi.n	8006a8e <__lo0bits+0x4e>
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	f100 0001 	add.w	r0, r0, #1
 8006a8c:	d005      	beq.n	8006a9a <__lo0bits+0x5a>
 8006a8e:	600b      	str	r3, [r1, #0]
 8006a90:	4770      	bx	lr
 8006a92:	4610      	mov	r0, r2
 8006a94:	e7e9      	b.n	8006a6a <__lo0bits+0x2a>
 8006a96:	2000      	movs	r0, #0
 8006a98:	4770      	bx	lr
 8006a9a:	2020      	movs	r0, #32
 8006a9c:	4770      	bx	lr
	...

08006aa0 <__i2b>:
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	f7ff ff03 	bl	80068b0 <_Balloc>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	b928      	cbnz	r0, 8006aba <__i2b+0x1a>
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <__i2b+0x24>)
 8006ab0:	4805      	ldr	r0, [pc, #20]	; (8006ac8 <__i2b+0x28>)
 8006ab2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ab6:	f000 fd35 	bl	8007524 <__assert_func>
 8006aba:	2301      	movs	r3, #1
 8006abc:	6144      	str	r4, [r0, #20]
 8006abe:	6103      	str	r3, [r0, #16]
 8006ac0:	bd10      	pop	{r4, pc}
 8006ac2:	bf00      	nop
 8006ac4:	0800786b 	.word	0x0800786b
 8006ac8:	080078dc 	.word	0x080078dc

08006acc <__multiply>:
 8006acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad0:	4691      	mov	r9, r2
 8006ad2:	690a      	ldr	r2, [r1, #16]
 8006ad4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	bfb8      	it	lt
 8006adc:	460b      	movlt	r3, r1
 8006ade:	460c      	mov	r4, r1
 8006ae0:	bfbc      	itt	lt
 8006ae2:	464c      	movlt	r4, r9
 8006ae4:	4699      	movlt	r9, r3
 8006ae6:	6927      	ldr	r7, [r4, #16]
 8006ae8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006aec:	68a3      	ldr	r3, [r4, #8]
 8006aee:	6861      	ldr	r1, [r4, #4]
 8006af0:	eb07 060a 	add.w	r6, r7, sl
 8006af4:	42b3      	cmp	r3, r6
 8006af6:	b085      	sub	sp, #20
 8006af8:	bfb8      	it	lt
 8006afa:	3101      	addlt	r1, #1
 8006afc:	f7ff fed8 	bl	80068b0 <_Balloc>
 8006b00:	b930      	cbnz	r0, 8006b10 <__multiply+0x44>
 8006b02:	4602      	mov	r2, r0
 8006b04:	4b44      	ldr	r3, [pc, #272]	; (8006c18 <__multiply+0x14c>)
 8006b06:	4845      	ldr	r0, [pc, #276]	; (8006c1c <__multiply+0x150>)
 8006b08:	f240 115d 	movw	r1, #349	; 0x15d
 8006b0c:	f000 fd0a 	bl	8007524 <__assert_func>
 8006b10:	f100 0514 	add.w	r5, r0, #20
 8006b14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b18:	462b      	mov	r3, r5
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4543      	cmp	r3, r8
 8006b1e:	d321      	bcc.n	8006b64 <__multiply+0x98>
 8006b20:	f104 0314 	add.w	r3, r4, #20
 8006b24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b28:	f109 0314 	add.w	r3, r9, #20
 8006b2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b30:	9202      	str	r2, [sp, #8]
 8006b32:	1b3a      	subs	r2, r7, r4
 8006b34:	3a15      	subs	r2, #21
 8006b36:	f022 0203 	bic.w	r2, r2, #3
 8006b3a:	3204      	adds	r2, #4
 8006b3c:	f104 0115 	add.w	r1, r4, #21
 8006b40:	428f      	cmp	r7, r1
 8006b42:	bf38      	it	cc
 8006b44:	2204      	movcc	r2, #4
 8006b46:	9201      	str	r2, [sp, #4]
 8006b48:	9a02      	ldr	r2, [sp, #8]
 8006b4a:	9303      	str	r3, [sp, #12]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d80c      	bhi.n	8006b6a <__multiply+0x9e>
 8006b50:	2e00      	cmp	r6, #0
 8006b52:	dd03      	ble.n	8006b5c <__multiply+0x90>
 8006b54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d05a      	beq.n	8006c12 <__multiply+0x146>
 8006b5c:	6106      	str	r6, [r0, #16]
 8006b5e:	b005      	add	sp, #20
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	f843 2b04 	str.w	r2, [r3], #4
 8006b68:	e7d8      	b.n	8006b1c <__multiply+0x50>
 8006b6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b6e:	f1ba 0f00 	cmp.w	sl, #0
 8006b72:	d024      	beq.n	8006bbe <__multiply+0xf2>
 8006b74:	f104 0e14 	add.w	lr, r4, #20
 8006b78:	46a9      	mov	r9, r5
 8006b7a:	f04f 0c00 	mov.w	ip, #0
 8006b7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b82:	f8d9 1000 	ldr.w	r1, [r9]
 8006b86:	fa1f fb82 	uxth.w	fp, r2
 8006b8a:	b289      	uxth	r1, r1
 8006b8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b94:	f8d9 2000 	ldr.w	r2, [r9]
 8006b98:	4461      	add	r1, ip
 8006b9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ba2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ba6:	b289      	uxth	r1, r1
 8006ba8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bac:	4577      	cmp	r7, lr
 8006bae:	f849 1b04 	str.w	r1, [r9], #4
 8006bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bb6:	d8e2      	bhi.n	8006b7e <__multiply+0xb2>
 8006bb8:	9a01      	ldr	r2, [sp, #4]
 8006bba:	f845 c002 	str.w	ip, [r5, r2]
 8006bbe:	9a03      	ldr	r2, [sp, #12]
 8006bc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	f1b9 0f00 	cmp.w	r9, #0
 8006bca:	d020      	beq.n	8006c0e <__multiply+0x142>
 8006bcc:	6829      	ldr	r1, [r5, #0]
 8006bce:	f104 0c14 	add.w	ip, r4, #20
 8006bd2:	46ae      	mov	lr, r5
 8006bd4:	f04f 0a00 	mov.w	sl, #0
 8006bd8:	f8bc b000 	ldrh.w	fp, [ip]
 8006bdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006be0:	fb09 220b 	mla	r2, r9, fp, r2
 8006be4:	4492      	add	sl, r2
 8006be6:	b289      	uxth	r1, r1
 8006be8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006bec:	f84e 1b04 	str.w	r1, [lr], #4
 8006bf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006bf4:	f8be 1000 	ldrh.w	r1, [lr]
 8006bf8:	0c12      	lsrs	r2, r2, #16
 8006bfa:	fb09 1102 	mla	r1, r9, r2, r1
 8006bfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006c02:	4567      	cmp	r7, ip
 8006c04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c08:	d8e6      	bhi.n	8006bd8 <__multiply+0x10c>
 8006c0a:	9a01      	ldr	r2, [sp, #4]
 8006c0c:	50a9      	str	r1, [r5, r2]
 8006c0e:	3504      	adds	r5, #4
 8006c10:	e79a      	b.n	8006b48 <__multiply+0x7c>
 8006c12:	3e01      	subs	r6, #1
 8006c14:	e79c      	b.n	8006b50 <__multiply+0x84>
 8006c16:	bf00      	nop
 8006c18:	0800786b 	.word	0x0800786b
 8006c1c:	080078dc 	.word	0x080078dc

08006c20 <__pow5mult>:
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	4615      	mov	r5, r2
 8006c26:	f012 0203 	ands.w	r2, r2, #3
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460f      	mov	r7, r1
 8006c2e:	d007      	beq.n	8006c40 <__pow5mult+0x20>
 8006c30:	4c25      	ldr	r4, [pc, #148]	; (8006cc8 <__pow5mult+0xa8>)
 8006c32:	3a01      	subs	r2, #1
 8006c34:	2300      	movs	r3, #0
 8006c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c3a:	f7ff fe9b 	bl	8006974 <__multadd>
 8006c3e:	4607      	mov	r7, r0
 8006c40:	10ad      	asrs	r5, r5, #2
 8006c42:	d03d      	beq.n	8006cc0 <__pow5mult+0xa0>
 8006c44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c46:	b97c      	cbnz	r4, 8006c68 <__pow5mult+0x48>
 8006c48:	2010      	movs	r0, #16
 8006c4a:	f7ff fe1b 	bl	8006884 <malloc>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	6270      	str	r0, [r6, #36]	; 0x24
 8006c52:	b928      	cbnz	r0, 8006c60 <__pow5mult+0x40>
 8006c54:	4b1d      	ldr	r3, [pc, #116]	; (8006ccc <__pow5mult+0xac>)
 8006c56:	481e      	ldr	r0, [pc, #120]	; (8006cd0 <__pow5mult+0xb0>)
 8006c58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c5c:	f000 fc62 	bl	8007524 <__assert_func>
 8006c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c64:	6004      	str	r4, [r0, #0]
 8006c66:	60c4      	str	r4, [r0, #12]
 8006c68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c70:	b94c      	cbnz	r4, 8006c86 <__pow5mult+0x66>
 8006c72:	f240 2171 	movw	r1, #625	; 0x271
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ff12 	bl	8006aa0 <__i2b>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c82:	4604      	mov	r4, r0
 8006c84:	6003      	str	r3, [r0, #0]
 8006c86:	f04f 0900 	mov.w	r9, #0
 8006c8a:	07eb      	lsls	r3, r5, #31
 8006c8c:	d50a      	bpl.n	8006ca4 <__pow5mult+0x84>
 8006c8e:	4639      	mov	r1, r7
 8006c90:	4622      	mov	r2, r4
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7ff ff1a 	bl	8006acc <__multiply>
 8006c98:	4639      	mov	r1, r7
 8006c9a:	4680      	mov	r8, r0
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f7ff fe47 	bl	8006930 <_Bfree>
 8006ca2:	4647      	mov	r7, r8
 8006ca4:	106d      	asrs	r5, r5, #1
 8006ca6:	d00b      	beq.n	8006cc0 <__pow5mult+0xa0>
 8006ca8:	6820      	ldr	r0, [r4, #0]
 8006caa:	b938      	cbnz	r0, 8006cbc <__pow5mult+0x9c>
 8006cac:	4622      	mov	r2, r4
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7ff ff0b 	bl	8006acc <__multiply>
 8006cb6:	6020      	str	r0, [r4, #0]
 8006cb8:	f8c0 9000 	str.w	r9, [r0]
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	e7e4      	b.n	8006c8a <__pow5mult+0x6a>
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc6:	bf00      	nop
 8006cc8:	08007a28 	.word	0x08007a28
 8006ccc:	080077f9 	.word	0x080077f9
 8006cd0:	080078dc 	.word	0x080078dc

08006cd4 <__lshift>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	460c      	mov	r4, r1
 8006cda:	6849      	ldr	r1, [r1, #4]
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ce2:	68a3      	ldr	r3, [r4, #8]
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	4691      	mov	r9, r2
 8006ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cec:	f108 0601 	add.w	r6, r8, #1
 8006cf0:	42b3      	cmp	r3, r6
 8006cf2:	db0b      	blt.n	8006d0c <__lshift+0x38>
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	f7ff fddb 	bl	80068b0 <_Balloc>
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	b948      	cbnz	r0, 8006d12 <__lshift+0x3e>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	4b2a      	ldr	r3, [pc, #168]	; (8006dac <__lshift+0xd8>)
 8006d02:	482b      	ldr	r0, [pc, #172]	; (8006db0 <__lshift+0xdc>)
 8006d04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d08:	f000 fc0c 	bl	8007524 <__assert_func>
 8006d0c:	3101      	adds	r1, #1
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	e7ee      	b.n	8006cf0 <__lshift+0x1c>
 8006d12:	2300      	movs	r3, #0
 8006d14:	f100 0114 	add.w	r1, r0, #20
 8006d18:	f100 0210 	add.w	r2, r0, #16
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	4553      	cmp	r3, sl
 8006d20:	db37      	blt.n	8006d92 <__lshift+0xbe>
 8006d22:	6920      	ldr	r0, [r4, #16]
 8006d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d28:	f104 0314 	add.w	r3, r4, #20
 8006d2c:	f019 091f 	ands.w	r9, r9, #31
 8006d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d38:	d02f      	beq.n	8006d9a <__lshift+0xc6>
 8006d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8006d3e:	468a      	mov	sl, r1
 8006d40:	f04f 0c00 	mov.w	ip, #0
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	fa02 f209 	lsl.w	r2, r2, r9
 8006d4a:	ea42 020c 	orr.w	r2, r2, ip
 8006d4e:	f84a 2b04 	str.w	r2, [sl], #4
 8006d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d56:	4298      	cmp	r0, r3
 8006d58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d5c:	d8f2      	bhi.n	8006d44 <__lshift+0x70>
 8006d5e:	1b03      	subs	r3, r0, r4
 8006d60:	3b15      	subs	r3, #21
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	3304      	adds	r3, #4
 8006d68:	f104 0215 	add.w	r2, r4, #21
 8006d6c:	4290      	cmp	r0, r2
 8006d6e:	bf38      	it	cc
 8006d70:	2304      	movcc	r3, #4
 8006d72:	f841 c003 	str.w	ip, [r1, r3]
 8006d76:	f1bc 0f00 	cmp.w	ip, #0
 8006d7a:	d001      	beq.n	8006d80 <__lshift+0xac>
 8006d7c:	f108 0602 	add.w	r6, r8, #2
 8006d80:	3e01      	subs	r6, #1
 8006d82:	4638      	mov	r0, r7
 8006d84:	612e      	str	r6, [r5, #16]
 8006d86:	4621      	mov	r1, r4
 8006d88:	f7ff fdd2 	bl	8006930 <_Bfree>
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d92:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d96:	3301      	adds	r3, #1
 8006d98:	e7c1      	b.n	8006d1e <__lshift+0x4a>
 8006d9a:	3904      	subs	r1, #4
 8006d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006da4:	4298      	cmp	r0, r3
 8006da6:	d8f9      	bhi.n	8006d9c <__lshift+0xc8>
 8006da8:	e7ea      	b.n	8006d80 <__lshift+0xac>
 8006daa:	bf00      	nop
 8006dac:	0800786b 	.word	0x0800786b
 8006db0:	080078dc 	.word	0x080078dc

08006db4 <__mcmp>:
 8006db4:	b530      	push	{r4, r5, lr}
 8006db6:	6902      	ldr	r2, [r0, #16]
 8006db8:	690c      	ldr	r4, [r1, #16]
 8006dba:	1b12      	subs	r2, r2, r4
 8006dbc:	d10e      	bne.n	8006ddc <__mcmp+0x28>
 8006dbe:	f100 0314 	add.w	r3, r0, #20
 8006dc2:	3114      	adds	r1, #20
 8006dc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006dc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006dcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006dd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006dd4:	42a5      	cmp	r5, r4
 8006dd6:	d003      	beq.n	8006de0 <__mcmp+0x2c>
 8006dd8:	d305      	bcc.n	8006de6 <__mcmp+0x32>
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4610      	mov	r0, r2
 8006dde:	bd30      	pop	{r4, r5, pc}
 8006de0:	4283      	cmp	r3, r0
 8006de2:	d3f3      	bcc.n	8006dcc <__mcmp+0x18>
 8006de4:	e7fa      	b.n	8006ddc <__mcmp+0x28>
 8006de6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dea:	e7f7      	b.n	8006ddc <__mcmp+0x28>

08006dec <__mdiff>:
 8006dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	4606      	mov	r6, r0
 8006df4:	4611      	mov	r1, r2
 8006df6:	4620      	mov	r0, r4
 8006df8:	4690      	mov	r8, r2
 8006dfa:	f7ff ffdb 	bl	8006db4 <__mcmp>
 8006dfe:	1e05      	subs	r5, r0, #0
 8006e00:	d110      	bne.n	8006e24 <__mdiff+0x38>
 8006e02:	4629      	mov	r1, r5
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff fd53 	bl	80068b0 <_Balloc>
 8006e0a:	b930      	cbnz	r0, 8006e1a <__mdiff+0x2e>
 8006e0c:	4b3a      	ldr	r3, [pc, #232]	; (8006ef8 <__mdiff+0x10c>)
 8006e0e:	4602      	mov	r2, r0
 8006e10:	f240 2132 	movw	r1, #562	; 0x232
 8006e14:	4839      	ldr	r0, [pc, #228]	; (8006efc <__mdiff+0x110>)
 8006e16:	f000 fb85 	bl	8007524 <__assert_func>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e24:	bfa4      	itt	ge
 8006e26:	4643      	movge	r3, r8
 8006e28:	46a0      	movge	r8, r4
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e30:	bfa6      	itte	ge
 8006e32:	461c      	movge	r4, r3
 8006e34:	2500      	movge	r5, #0
 8006e36:	2501      	movlt	r5, #1
 8006e38:	f7ff fd3a 	bl	80068b0 <_Balloc>
 8006e3c:	b920      	cbnz	r0, 8006e48 <__mdiff+0x5c>
 8006e3e:	4b2e      	ldr	r3, [pc, #184]	; (8006ef8 <__mdiff+0x10c>)
 8006e40:	4602      	mov	r2, r0
 8006e42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e46:	e7e5      	b.n	8006e14 <__mdiff+0x28>
 8006e48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e4c:	6926      	ldr	r6, [r4, #16]
 8006e4e:	60c5      	str	r5, [r0, #12]
 8006e50:	f104 0914 	add.w	r9, r4, #20
 8006e54:	f108 0514 	add.w	r5, r8, #20
 8006e58:	f100 0e14 	add.w	lr, r0, #20
 8006e5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e64:	f108 0210 	add.w	r2, r8, #16
 8006e68:	46f2      	mov	sl, lr
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e74:	fa1f f883 	uxth.w	r8, r3
 8006e78:	fa11 f18b 	uxtah	r1, r1, fp
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	eba1 0808 	sub.w	r8, r1, r8
 8006e82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e8a:	fa1f f888 	uxth.w	r8, r8
 8006e8e:	1419      	asrs	r1, r3, #16
 8006e90:	454e      	cmp	r6, r9
 8006e92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e96:	f84a 3b04 	str.w	r3, [sl], #4
 8006e9a:	d8e7      	bhi.n	8006e6c <__mdiff+0x80>
 8006e9c:	1b33      	subs	r3, r6, r4
 8006e9e:	3b15      	subs	r3, #21
 8006ea0:	f023 0303 	bic.w	r3, r3, #3
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	3415      	adds	r4, #21
 8006ea8:	42a6      	cmp	r6, r4
 8006eaa:	bf38      	it	cc
 8006eac:	2304      	movcc	r3, #4
 8006eae:	441d      	add	r5, r3
 8006eb0:	4473      	add	r3, lr
 8006eb2:	469e      	mov	lr, r3
 8006eb4:	462e      	mov	r6, r5
 8006eb6:	4566      	cmp	r6, ip
 8006eb8:	d30e      	bcc.n	8006ed8 <__mdiff+0xec>
 8006eba:	f10c 0203 	add.w	r2, ip, #3
 8006ebe:	1b52      	subs	r2, r2, r5
 8006ec0:	f022 0203 	bic.w	r2, r2, #3
 8006ec4:	3d03      	subs	r5, #3
 8006ec6:	45ac      	cmp	ip, r5
 8006ec8:	bf38      	it	cc
 8006eca:	2200      	movcc	r2, #0
 8006ecc:	441a      	add	r2, r3
 8006ece:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006ed2:	b17b      	cbz	r3, 8006ef4 <__mdiff+0x108>
 8006ed4:	6107      	str	r7, [r0, #16]
 8006ed6:	e7a3      	b.n	8006e20 <__mdiff+0x34>
 8006ed8:	f856 8b04 	ldr.w	r8, [r6], #4
 8006edc:	fa11 f288 	uxtah	r2, r1, r8
 8006ee0:	1414      	asrs	r4, r2, #16
 8006ee2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006eec:	f84e 2b04 	str.w	r2, [lr], #4
 8006ef0:	1421      	asrs	r1, r4, #16
 8006ef2:	e7e0      	b.n	8006eb6 <__mdiff+0xca>
 8006ef4:	3f01      	subs	r7, #1
 8006ef6:	e7ea      	b.n	8006ece <__mdiff+0xe2>
 8006ef8:	0800786b 	.word	0x0800786b
 8006efc:	080078dc 	.word	0x080078dc

08006f00 <__d2b>:
 8006f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f04:	4689      	mov	r9, r1
 8006f06:	2101      	movs	r1, #1
 8006f08:	ec57 6b10 	vmov	r6, r7, d0
 8006f0c:	4690      	mov	r8, r2
 8006f0e:	f7ff fccf 	bl	80068b0 <_Balloc>
 8006f12:	4604      	mov	r4, r0
 8006f14:	b930      	cbnz	r0, 8006f24 <__d2b+0x24>
 8006f16:	4602      	mov	r2, r0
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <__d2b+0xb0>)
 8006f1a:	4826      	ldr	r0, [pc, #152]	; (8006fb4 <__d2b+0xb4>)
 8006f1c:	f240 310a 	movw	r1, #778	; 0x30a
 8006f20:	f000 fb00 	bl	8007524 <__assert_func>
 8006f24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f2c:	bb35      	cbnz	r5, 8006f7c <__d2b+0x7c>
 8006f2e:	2e00      	cmp	r6, #0
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	d028      	beq.n	8006f86 <__d2b+0x86>
 8006f34:	4668      	mov	r0, sp
 8006f36:	9600      	str	r6, [sp, #0]
 8006f38:	f7ff fd82 	bl	8006a40 <__lo0bits>
 8006f3c:	9900      	ldr	r1, [sp, #0]
 8006f3e:	b300      	cbz	r0, 8006f82 <__d2b+0x82>
 8006f40:	9a01      	ldr	r2, [sp, #4]
 8006f42:	f1c0 0320 	rsb	r3, r0, #32
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	40c2      	lsrs	r2, r0
 8006f4e:	6163      	str	r3, [r4, #20]
 8006f50:	9201      	str	r2, [sp, #4]
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	61a3      	str	r3, [r4, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bf14      	ite	ne
 8006f5a:	2202      	movne	r2, #2
 8006f5c:	2201      	moveq	r2, #1
 8006f5e:	6122      	str	r2, [r4, #16]
 8006f60:	b1d5      	cbz	r5, 8006f98 <__d2b+0x98>
 8006f62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f66:	4405      	add	r5, r0
 8006f68:	f8c9 5000 	str.w	r5, [r9]
 8006f6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f70:	f8c8 0000 	str.w	r0, [r8]
 8006f74:	4620      	mov	r0, r4
 8006f76:	b003      	add	sp, #12
 8006f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f80:	e7d5      	b.n	8006f2e <__d2b+0x2e>
 8006f82:	6161      	str	r1, [r4, #20]
 8006f84:	e7e5      	b.n	8006f52 <__d2b+0x52>
 8006f86:	a801      	add	r0, sp, #4
 8006f88:	f7ff fd5a 	bl	8006a40 <__lo0bits>
 8006f8c:	9b01      	ldr	r3, [sp, #4]
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	2201      	movs	r2, #1
 8006f92:	6122      	str	r2, [r4, #16]
 8006f94:	3020      	adds	r0, #32
 8006f96:	e7e3      	b.n	8006f60 <__d2b+0x60>
 8006f98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fa0:	f8c9 0000 	str.w	r0, [r9]
 8006fa4:	6918      	ldr	r0, [r3, #16]
 8006fa6:	f7ff fd2b 	bl	8006a00 <__hi0bits>
 8006faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fae:	e7df      	b.n	8006f70 <__d2b+0x70>
 8006fb0:	0800786b 	.word	0x0800786b
 8006fb4:	080078dc 	.word	0x080078dc

08006fb8 <_calloc_r>:
 8006fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fba:	fba1 2402 	umull	r2, r4, r1, r2
 8006fbe:	b94c      	cbnz	r4, 8006fd4 <_calloc_r+0x1c>
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	9201      	str	r2, [sp, #4]
 8006fc4:	f000 f87a 	bl	80070bc <_malloc_r>
 8006fc8:	9a01      	ldr	r2, [sp, #4]
 8006fca:	4605      	mov	r5, r0
 8006fcc:	b930      	cbnz	r0, 8006fdc <_calloc_r+0x24>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	b003      	add	sp, #12
 8006fd2:	bd30      	pop	{r4, r5, pc}
 8006fd4:	220c      	movs	r2, #12
 8006fd6:	6002      	str	r2, [r0, #0]
 8006fd8:	2500      	movs	r5, #0
 8006fda:	e7f8      	b.n	8006fce <_calloc_r+0x16>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f7fd fdf3 	bl	8004bc8 <memset>
 8006fe2:	e7f4      	b.n	8006fce <_calloc_r+0x16>

08006fe4 <_free_r>:
 8006fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	d044      	beq.n	8007074 <_free_r+0x90>
 8006fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fee:	9001      	str	r0, [sp, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ff6:	bfb8      	it	lt
 8006ff8:	18e4      	addlt	r4, r4, r3
 8006ffa:	f000 fb19 	bl	8007630 <__malloc_lock>
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <_free_r+0x94>)
 8007000:	9801      	ldr	r0, [sp, #4]
 8007002:	6813      	ldr	r3, [r2, #0]
 8007004:	b933      	cbnz	r3, 8007014 <_free_r+0x30>
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	6014      	str	r4, [r2, #0]
 800700a:	b003      	add	sp, #12
 800700c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007010:	f000 bb14 	b.w	800763c <__malloc_unlock>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d908      	bls.n	800702a <_free_r+0x46>
 8007018:	6825      	ldr	r5, [r4, #0]
 800701a:	1961      	adds	r1, r4, r5
 800701c:	428b      	cmp	r3, r1
 800701e:	bf01      	itttt	eq
 8007020:	6819      	ldreq	r1, [r3, #0]
 8007022:	685b      	ldreq	r3, [r3, #4]
 8007024:	1949      	addeq	r1, r1, r5
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	e7ed      	b.n	8007006 <_free_r+0x22>
 800702a:	461a      	mov	r2, r3
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b10b      	cbz	r3, 8007034 <_free_r+0x50>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d9fa      	bls.n	800702a <_free_r+0x46>
 8007034:	6811      	ldr	r1, [r2, #0]
 8007036:	1855      	adds	r5, r2, r1
 8007038:	42a5      	cmp	r5, r4
 800703a:	d10b      	bne.n	8007054 <_free_r+0x70>
 800703c:	6824      	ldr	r4, [r4, #0]
 800703e:	4421      	add	r1, r4
 8007040:	1854      	adds	r4, r2, r1
 8007042:	42a3      	cmp	r3, r4
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	d1e0      	bne.n	800700a <_free_r+0x26>
 8007048:	681c      	ldr	r4, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	6053      	str	r3, [r2, #4]
 800704e:	4421      	add	r1, r4
 8007050:	6011      	str	r1, [r2, #0]
 8007052:	e7da      	b.n	800700a <_free_r+0x26>
 8007054:	d902      	bls.n	800705c <_free_r+0x78>
 8007056:	230c      	movs	r3, #12
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	e7d6      	b.n	800700a <_free_r+0x26>
 800705c:	6825      	ldr	r5, [r4, #0]
 800705e:	1961      	adds	r1, r4, r5
 8007060:	428b      	cmp	r3, r1
 8007062:	bf04      	itt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	bf04      	itt	eq
 800706c:	1949      	addeq	r1, r1, r5
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	6054      	str	r4, [r2, #4]
 8007072:	e7ca      	b.n	800700a <_free_r+0x26>
 8007074:	b003      	add	sp, #12
 8007076:	bd30      	pop	{r4, r5, pc}
 8007078:	2000031c 	.word	0x2000031c

0800707c <sbrk_aligned>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0e      	ldr	r6, [pc, #56]	; (80070b8 <sbrk_aligned+0x3c>)
 8007080:	460c      	mov	r4, r1
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	4605      	mov	r5, r0
 8007086:	b911      	cbnz	r1, 800708e <sbrk_aligned+0x12>
 8007088:	f000 f9e6 	bl	8007458 <_sbrk_r>
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f000 f9e1 	bl	8007458 <_sbrk_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d00a      	beq.n	80070b0 <sbrk_aligned+0x34>
 800709a:	1cc4      	adds	r4, r0, #3
 800709c:	f024 0403 	bic.w	r4, r4, #3
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d007      	beq.n	80070b4 <sbrk_aligned+0x38>
 80070a4:	1a21      	subs	r1, r4, r0
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 f9d6 	bl	8007458 <_sbrk_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d101      	bne.n	80070b4 <sbrk_aligned+0x38>
 80070b0:	f04f 34ff 	mov.w	r4, #4294967295
 80070b4:	4620      	mov	r0, r4
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	20000320 	.word	0x20000320

080070bc <_malloc_r>:
 80070bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c0:	1ccd      	adds	r5, r1, #3
 80070c2:	f025 0503 	bic.w	r5, r5, #3
 80070c6:	3508      	adds	r5, #8
 80070c8:	2d0c      	cmp	r5, #12
 80070ca:	bf38      	it	cc
 80070cc:	250c      	movcc	r5, #12
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	4607      	mov	r7, r0
 80070d2:	db01      	blt.n	80070d8 <_malloc_r+0x1c>
 80070d4:	42a9      	cmp	r1, r5
 80070d6:	d905      	bls.n	80070e4 <_malloc_r+0x28>
 80070d8:	230c      	movs	r3, #12
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	2600      	movs	r6, #0
 80070de:	4630      	mov	r0, r6
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	4e2e      	ldr	r6, [pc, #184]	; (80071a0 <_malloc_r+0xe4>)
 80070e6:	f000 faa3 	bl	8007630 <__malloc_lock>
 80070ea:	6833      	ldr	r3, [r6, #0]
 80070ec:	461c      	mov	r4, r3
 80070ee:	bb34      	cbnz	r4, 800713e <_malloc_r+0x82>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4638      	mov	r0, r7
 80070f4:	f7ff ffc2 	bl	800707c <sbrk_aligned>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	4604      	mov	r4, r0
 80070fc:	d14d      	bne.n	800719a <_malloc_r+0xde>
 80070fe:	6834      	ldr	r4, [r6, #0]
 8007100:	4626      	mov	r6, r4
 8007102:	2e00      	cmp	r6, #0
 8007104:	d140      	bne.n	8007188 <_malloc_r+0xcc>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	4631      	mov	r1, r6
 800710a:	4638      	mov	r0, r7
 800710c:	eb04 0803 	add.w	r8, r4, r3
 8007110:	f000 f9a2 	bl	8007458 <_sbrk_r>
 8007114:	4580      	cmp	r8, r0
 8007116:	d13a      	bne.n	800718e <_malloc_r+0xd2>
 8007118:	6821      	ldr	r1, [r4, #0]
 800711a:	3503      	adds	r5, #3
 800711c:	1a6d      	subs	r5, r5, r1
 800711e:	f025 0503 	bic.w	r5, r5, #3
 8007122:	3508      	adds	r5, #8
 8007124:	2d0c      	cmp	r5, #12
 8007126:	bf38      	it	cc
 8007128:	250c      	movcc	r5, #12
 800712a:	4629      	mov	r1, r5
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff ffa5 	bl	800707c <sbrk_aligned>
 8007132:	3001      	adds	r0, #1
 8007134:	d02b      	beq.n	800718e <_malloc_r+0xd2>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	442b      	add	r3, r5
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	e00e      	b.n	800715c <_malloc_r+0xa0>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	1b52      	subs	r2, r2, r5
 8007142:	d41e      	bmi.n	8007182 <_malloc_r+0xc6>
 8007144:	2a0b      	cmp	r2, #11
 8007146:	d916      	bls.n	8007176 <_malloc_r+0xba>
 8007148:	1961      	adds	r1, r4, r5
 800714a:	42a3      	cmp	r3, r4
 800714c:	6025      	str	r5, [r4, #0]
 800714e:	bf18      	it	ne
 8007150:	6059      	strne	r1, [r3, #4]
 8007152:	6863      	ldr	r3, [r4, #4]
 8007154:	bf08      	it	eq
 8007156:	6031      	streq	r1, [r6, #0]
 8007158:	5162      	str	r2, [r4, r5]
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	4638      	mov	r0, r7
 800715e:	f104 060b 	add.w	r6, r4, #11
 8007162:	f000 fa6b 	bl	800763c <__malloc_unlock>
 8007166:	f026 0607 	bic.w	r6, r6, #7
 800716a:	1d23      	adds	r3, r4, #4
 800716c:	1af2      	subs	r2, r6, r3
 800716e:	d0b6      	beq.n	80070de <_malloc_r+0x22>
 8007170:	1b9b      	subs	r3, r3, r6
 8007172:	50a3      	str	r3, [r4, r2]
 8007174:	e7b3      	b.n	80070de <_malloc_r+0x22>
 8007176:	6862      	ldr	r2, [r4, #4]
 8007178:	42a3      	cmp	r3, r4
 800717a:	bf0c      	ite	eq
 800717c:	6032      	streq	r2, [r6, #0]
 800717e:	605a      	strne	r2, [r3, #4]
 8007180:	e7ec      	b.n	800715c <_malloc_r+0xa0>
 8007182:	4623      	mov	r3, r4
 8007184:	6864      	ldr	r4, [r4, #4]
 8007186:	e7b2      	b.n	80070ee <_malloc_r+0x32>
 8007188:	4634      	mov	r4, r6
 800718a:	6876      	ldr	r6, [r6, #4]
 800718c:	e7b9      	b.n	8007102 <_malloc_r+0x46>
 800718e:	230c      	movs	r3, #12
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4638      	mov	r0, r7
 8007194:	f000 fa52 	bl	800763c <__malloc_unlock>
 8007198:	e7a1      	b.n	80070de <_malloc_r+0x22>
 800719a:	6025      	str	r5, [r4, #0]
 800719c:	e7de      	b.n	800715c <_malloc_r+0xa0>
 800719e:	bf00      	nop
 80071a0:	2000031c 	.word	0x2000031c

080071a4 <__sfputc_r>:
 80071a4:	6893      	ldr	r3, [r2, #8]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	b410      	push	{r4}
 80071ac:	6093      	str	r3, [r2, #8]
 80071ae:	da08      	bge.n	80071c2 <__sfputc_r+0x1e>
 80071b0:	6994      	ldr	r4, [r2, #24]
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	db01      	blt.n	80071ba <__sfputc_r+0x16>
 80071b6:	290a      	cmp	r1, #10
 80071b8:	d103      	bne.n	80071c2 <__sfputc_r+0x1e>
 80071ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071be:	f7fe ba03 	b.w	80055c8 <__swbuf_r>
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	1c58      	adds	r0, r3, #1
 80071c6:	6010      	str	r0, [r2, #0]
 80071c8:	7019      	strb	r1, [r3, #0]
 80071ca:	4608      	mov	r0, r1
 80071cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <__sfputs_r>:
 80071d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	18d5      	adds	r5, r2, r3
 80071dc:	42ac      	cmp	r4, r5
 80071de:	d101      	bne.n	80071e4 <__sfputs_r+0x12>
 80071e0:	2000      	movs	r0, #0
 80071e2:	e007      	b.n	80071f4 <__sfputs_r+0x22>
 80071e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e8:	463a      	mov	r2, r7
 80071ea:	4630      	mov	r0, r6
 80071ec:	f7ff ffda 	bl	80071a4 <__sfputc_r>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d1f3      	bne.n	80071dc <__sfputs_r+0xa>
 80071f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071f8 <_vfiprintf_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	460d      	mov	r5, r1
 80071fe:	b09d      	sub	sp, #116	; 0x74
 8007200:	4614      	mov	r4, r2
 8007202:	4698      	mov	r8, r3
 8007204:	4606      	mov	r6, r0
 8007206:	b118      	cbz	r0, 8007210 <_vfiprintf_r+0x18>
 8007208:	6983      	ldr	r3, [r0, #24]
 800720a:	b90b      	cbnz	r3, 8007210 <_vfiprintf_r+0x18>
 800720c:	f7ff fa30 	bl	8006670 <__sinit>
 8007210:	4b89      	ldr	r3, [pc, #548]	; (8007438 <_vfiprintf_r+0x240>)
 8007212:	429d      	cmp	r5, r3
 8007214:	d11b      	bne.n	800724e <_vfiprintf_r+0x56>
 8007216:	6875      	ldr	r5, [r6, #4]
 8007218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800721a:	07d9      	lsls	r1, r3, #31
 800721c:	d405      	bmi.n	800722a <_vfiprintf_r+0x32>
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	059a      	lsls	r2, r3, #22
 8007222:	d402      	bmi.n	800722a <_vfiprintf_r+0x32>
 8007224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007226:	f7ff fac6 	bl	80067b6 <__retarget_lock_acquire_recursive>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	071b      	lsls	r3, r3, #28
 800722e:	d501      	bpl.n	8007234 <_vfiprintf_r+0x3c>
 8007230:	692b      	ldr	r3, [r5, #16]
 8007232:	b9eb      	cbnz	r3, 8007270 <_vfiprintf_r+0x78>
 8007234:	4629      	mov	r1, r5
 8007236:	4630      	mov	r0, r6
 8007238:	f7fe fa18 	bl	800566c <__swsetup_r>
 800723c:	b1c0      	cbz	r0, 8007270 <_vfiprintf_r+0x78>
 800723e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007240:	07dc      	lsls	r4, r3, #31
 8007242:	d50e      	bpl.n	8007262 <_vfiprintf_r+0x6a>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	b01d      	add	sp, #116	; 0x74
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	4b7b      	ldr	r3, [pc, #492]	; (800743c <_vfiprintf_r+0x244>)
 8007250:	429d      	cmp	r5, r3
 8007252:	d101      	bne.n	8007258 <_vfiprintf_r+0x60>
 8007254:	68b5      	ldr	r5, [r6, #8]
 8007256:	e7df      	b.n	8007218 <_vfiprintf_r+0x20>
 8007258:	4b79      	ldr	r3, [pc, #484]	; (8007440 <_vfiprintf_r+0x248>)
 800725a:	429d      	cmp	r5, r3
 800725c:	bf08      	it	eq
 800725e:	68f5      	ldreq	r5, [r6, #12]
 8007260:	e7da      	b.n	8007218 <_vfiprintf_r+0x20>
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	0598      	lsls	r0, r3, #22
 8007266:	d4ed      	bmi.n	8007244 <_vfiprintf_r+0x4c>
 8007268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800726a:	f7ff faa5 	bl	80067b8 <__retarget_lock_release_recursive>
 800726e:	e7e9      	b.n	8007244 <_vfiprintf_r+0x4c>
 8007270:	2300      	movs	r3, #0
 8007272:	9309      	str	r3, [sp, #36]	; 0x24
 8007274:	2320      	movs	r3, #32
 8007276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800727a:	f8cd 800c 	str.w	r8, [sp, #12]
 800727e:	2330      	movs	r3, #48	; 0x30
 8007280:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007444 <_vfiprintf_r+0x24c>
 8007284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007288:	f04f 0901 	mov.w	r9, #1
 800728c:	4623      	mov	r3, r4
 800728e:	469a      	mov	sl, r3
 8007290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007294:	b10a      	cbz	r2, 800729a <_vfiprintf_r+0xa2>
 8007296:	2a25      	cmp	r2, #37	; 0x25
 8007298:	d1f9      	bne.n	800728e <_vfiprintf_r+0x96>
 800729a:	ebba 0b04 	subs.w	fp, sl, r4
 800729e:	d00b      	beq.n	80072b8 <_vfiprintf_r+0xc0>
 80072a0:	465b      	mov	r3, fp
 80072a2:	4622      	mov	r2, r4
 80072a4:	4629      	mov	r1, r5
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff ff93 	bl	80071d2 <__sfputs_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	f000 80aa 	beq.w	8007406 <_vfiprintf_r+0x20e>
 80072b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b4:	445a      	add	r2, fp
 80072b6:	9209      	str	r2, [sp, #36]	; 0x24
 80072b8:	f89a 3000 	ldrb.w	r3, [sl]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80a2 	beq.w	8007406 <_vfiprintf_r+0x20e>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295
 80072c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072cc:	f10a 0a01 	add.w	sl, sl, #1
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	9307      	str	r3, [sp, #28]
 80072d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072d8:	931a      	str	r3, [sp, #104]	; 0x68
 80072da:	4654      	mov	r4, sl
 80072dc:	2205      	movs	r2, #5
 80072de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e2:	4858      	ldr	r0, [pc, #352]	; (8007444 <_vfiprintf_r+0x24c>)
 80072e4:	f7f8 ff84 	bl	80001f0 <memchr>
 80072e8:	9a04      	ldr	r2, [sp, #16]
 80072ea:	b9d8      	cbnz	r0, 8007324 <_vfiprintf_r+0x12c>
 80072ec:	06d1      	lsls	r1, r2, #27
 80072ee:	bf44      	itt	mi
 80072f0:	2320      	movmi	r3, #32
 80072f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f6:	0713      	lsls	r3, r2, #28
 80072f8:	bf44      	itt	mi
 80072fa:	232b      	movmi	r3, #43	; 0x2b
 80072fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007300:	f89a 3000 	ldrb.w	r3, [sl]
 8007304:	2b2a      	cmp	r3, #42	; 0x2a
 8007306:	d015      	beq.n	8007334 <_vfiprintf_r+0x13c>
 8007308:	9a07      	ldr	r2, [sp, #28]
 800730a:	4654      	mov	r4, sl
 800730c:	2000      	movs	r0, #0
 800730e:	f04f 0c0a 	mov.w	ip, #10
 8007312:	4621      	mov	r1, r4
 8007314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007318:	3b30      	subs	r3, #48	; 0x30
 800731a:	2b09      	cmp	r3, #9
 800731c:	d94e      	bls.n	80073bc <_vfiprintf_r+0x1c4>
 800731e:	b1b0      	cbz	r0, 800734e <_vfiprintf_r+0x156>
 8007320:	9207      	str	r2, [sp, #28]
 8007322:	e014      	b.n	800734e <_vfiprintf_r+0x156>
 8007324:	eba0 0308 	sub.w	r3, r0, r8
 8007328:	fa09 f303 	lsl.w	r3, r9, r3
 800732c:	4313      	orrs	r3, r2
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	46a2      	mov	sl, r4
 8007332:	e7d2      	b.n	80072da <_vfiprintf_r+0xe2>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	1d19      	adds	r1, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	9103      	str	r1, [sp, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	bfbb      	ittet	lt
 8007340:	425b      	neglt	r3, r3
 8007342:	f042 0202 	orrlt.w	r2, r2, #2
 8007346:	9307      	strge	r3, [sp, #28]
 8007348:	9307      	strlt	r3, [sp, #28]
 800734a:	bfb8      	it	lt
 800734c:	9204      	strlt	r2, [sp, #16]
 800734e:	7823      	ldrb	r3, [r4, #0]
 8007350:	2b2e      	cmp	r3, #46	; 0x2e
 8007352:	d10c      	bne.n	800736e <_vfiprintf_r+0x176>
 8007354:	7863      	ldrb	r3, [r4, #1]
 8007356:	2b2a      	cmp	r3, #42	; 0x2a
 8007358:	d135      	bne.n	80073c6 <_vfiprintf_r+0x1ce>
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	1d1a      	adds	r2, r3, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	9203      	str	r2, [sp, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	bfb8      	it	lt
 8007366:	f04f 33ff 	movlt.w	r3, #4294967295
 800736a:	3402      	adds	r4, #2
 800736c:	9305      	str	r3, [sp, #20]
 800736e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007454 <_vfiprintf_r+0x25c>
 8007372:	7821      	ldrb	r1, [r4, #0]
 8007374:	2203      	movs	r2, #3
 8007376:	4650      	mov	r0, sl
 8007378:	f7f8 ff3a 	bl	80001f0 <memchr>
 800737c:	b140      	cbz	r0, 8007390 <_vfiprintf_r+0x198>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	eba0 000a 	sub.w	r0, r0, sl
 8007384:	fa03 f000 	lsl.w	r0, r3, r0
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	4303      	orrs	r3, r0
 800738c:	3401      	adds	r4, #1
 800738e:	9304      	str	r3, [sp, #16]
 8007390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007394:	482c      	ldr	r0, [pc, #176]	; (8007448 <_vfiprintf_r+0x250>)
 8007396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800739a:	2206      	movs	r2, #6
 800739c:	f7f8 ff28 	bl	80001f0 <memchr>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d03f      	beq.n	8007424 <_vfiprintf_r+0x22c>
 80073a4:	4b29      	ldr	r3, [pc, #164]	; (800744c <_vfiprintf_r+0x254>)
 80073a6:	bb1b      	cbnz	r3, 80073f0 <_vfiprintf_r+0x1f8>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	3307      	adds	r3, #7
 80073ac:	f023 0307 	bic.w	r3, r3, #7
 80073b0:	3308      	adds	r3, #8
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	443b      	add	r3, r7
 80073b8:	9309      	str	r3, [sp, #36]	; 0x24
 80073ba:	e767      	b.n	800728c <_vfiprintf_r+0x94>
 80073bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c0:	460c      	mov	r4, r1
 80073c2:	2001      	movs	r0, #1
 80073c4:	e7a5      	b.n	8007312 <_vfiprintf_r+0x11a>
 80073c6:	2300      	movs	r3, #0
 80073c8:	3401      	adds	r4, #1
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	4619      	mov	r1, r3
 80073ce:	f04f 0c0a 	mov.w	ip, #10
 80073d2:	4620      	mov	r0, r4
 80073d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d8:	3a30      	subs	r2, #48	; 0x30
 80073da:	2a09      	cmp	r2, #9
 80073dc:	d903      	bls.n	80073e6 <_vfiprintf_r+0x1ee>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0c5      	beq.n	800736e <_vfiprintf_r+0x176>
 80073e2:	9105      	str	r1, [sp, #20]
 80073e4:	e7c3      	b.n	800736e <_vfiprintf_r+0x176>
 80073e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ea:	4604      	mov	r4, r0
 80073ec:	2301      	movs	r3, #1
 80073ee:	e7f0      	b.n	80073d2 <_vfiprintf_r+0x1da>
 80073f0:	ab03      	add	r3, sp, #12
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	462a      	mov	r2, r5
 80073f6:	4b16      	ldr	r3, [pc, #88]	; (8007450 <_vfiprintf_r+0x258>)
 80073f8:	a904      	add	r1, sp, #16
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7fd fc8c 	bl	8004d18 <_printf_float>
 8007400:	4607      	mov	r7, r0
 8007402:	1c78      	adds	r0, r7, #1
 8007404:	d1d6      	bne.n	80073b4 <_vfiprintf_r+0x1bc>
 8007406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007408:	07d9      	lsls	r1, r3, #31
 800740a:	d405      	bmi.n	8007418 <_vfiprintf_r+0x220>
 800740c:	89ab      	ldrh	r3, [r5, #12]
 800740e:	059a      	lsls	r2, r3, #22
 8007410:	d402      	bmi.n	8007418 <_vfiprintf_r+0x220>
 8007412:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007414:	f7ff f9d0 	bl	80067b8 <__retarget_lock_release_recursive>
 8007418:	89ab      	ldrh	r3, [r5, #12]
 800741a:	065b      	lsls	r3, r3, #25
 800741c:	f53f af12 	bmi.w	8007244 <_vfiprintf_r+0x4c>
 8007420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007422:	e711      	b.n	8007248 <_vfiprintf_r+0x50>
 8007424:	ab03      	add	r3, sp, #12
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	462a      	mov	r2, r5
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <_vfiprintf_r+0x258>)
 800742c:	a904      	add	r1, sp, #16
 800742e:	4630      	mov	r0, r6
 8007430:	f7fd ff16 	bl	8005260 <_printf_i>
 8007434:	e7e4      	b.n	8007400 <_vfiprintf_r+0x208>
 8007436:	bf00      	nop
 8007438:	0800789c 	.word	0x0800789c
 800743c:	080078bc 	.word	0x080078bc
 8007440:	0800787c 	.word	0x0800787c
 8007444:	08007a34 	.word	0x08007a34
 8007448:	08007a3e 	.word	0x08007a3e
 800744c:	08004d19 	.word	0x08004d19
 8007450:	080071d3 	.word	0x080071d3
 8007454:	08007a3a 	.word	0x08007a3a

08007458 <_sbrk_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_sbrk_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fa f8ae 	bl	80015c4 <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_sbrk_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_sbrk_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20000324 	.word	0x20000324

08007478 <__sread>:
 8007478:	b510      	push	{r4, lr}
 800747a:	460c      	mov	r4, r1
 800747c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007480:	f000 f8e2 	bl	8007648 <_read_r>
 8007484:	2800      	cmp	r0, #0
 8007486:	bfab      	itete	ge
 8007488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800748a:	89a3      	ldrhlt	r3, [r4, #12]
 800748c:	181b      	addge	r3, r3, r0
 800748e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007492:	bfac      	ite	ge
 8007494:	6563      	strge	r3, [r4, #84]	; 0x54
 8007496:	81a3      	strhlt	r3, [r4, #12]
 8007498:	bd10      	pop	{r4, pc}

0800749a <__swrite>:
 800749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	461f      	mov	r7, r3
 80074a0:	898b      	ldrh	r3, [r1, #12]
 80074a2:	05db      	lsls	r3, r3, #23
 80074a4:	4605      	mov	r5, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	4616      	mov	r6, r2
 80074aa:	d505      	bpl.n	80074b8 <__swrite+0x1e>
 80074ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b0:	2302      	movs	r3, #2
 80074b2:	2200      	movs	r2, #0
 80074b4:	f000 f898 	bl	80075e8 <_lseek_r>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	4632      	mov	r2, r6
 80074c6:	463b      	mov	r3, r7
 80074c8:	4628      	mov	r0, r5
 80074ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ce:	f000 b817 	b.w	8007500 <_write_r>

080074d2 <__sseek>:
 80074d2:	b510      	push	{r4, lr}
 80074d4:	460c      	mov	r4, r1
 80074d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074da:	f000 f885 	bl	80075e8 <_lseek_r>
 80074de:	1c43      	adds	r3, r0, #1
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	bf15      	itete	ne
 80074e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074ee:	81a3      	strheq	r3, [r4, #12]
 80074f0:	bf18      	it	ne
 80074f2:	81a3      	strhne	r3, [r4, #12]
 80074f4:	bd10      	pop	{r4, pc}

080074f6 <__sclose>:
 80074f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fa:	f000 b831 	b.w	8007560 <_close_r>
	...

08007500 <_write_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d07      	ldr	r5, [pc, #28]	; (8007520 <_write_r+0x20>)
 8007504:	4604      	mov	r4, r0
 8007506:	4608      	mov	r0, r1
 8007508:	4611      	mov	r1, r2
 800750a:	2200      	movs	r2, #0
 800750c:	602a      	str	r2, [r5, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	f7fa f807 	bl	8001522 <_write>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_write_r+0x1e>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_write_r+0x1e>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	20000324 	.word	0x20000324

08007524 <__assert_func>:
 8007524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007526:	4614      	mov	r4, r2
 8007528:	461a      	mov	r2, r3
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <__assert_func+0x2c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4605      	mov	r5, r0
 8007530:	68d8      	ldr	r0, [r3, #12]
 8007532:	b14c      	cbz	r4, 8007548 <__assert_func+0x24>
 8007534:	4b07      	ldr	r3, [pc, #28]	; (8007554 <__assert_func+0x30>)
 8007536:	9100      	str	r1, [sp, #0]
 8007538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800753c:	4906      	ldr	r1, [pc, #24]	; (8007558 <__assert_func+0x34>)
 800753e:	462b      	mov	r3, r5
 8007540:	f000 f81e 	bl	8007580 <fiprintf>
 8007544:	f000 f89f 	bl	8007686 <abort>
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <__assert_func+0x38>)
 800754a:	461c      	mov	r4, r3
 800754c:	e7f3      	b.n	8007536 <__assert_func+0x12>
 800754e:	bf00      	nop
 8007550:	20000010 	.word	0x20000010
 8007554:	08007a45 	.word	0x08007a45
 8007558:	08007a52 	.word	0x08007a52
 800755c:	08007a80 	.word	0x08007a80

08007560 <_close_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d06      	ldr	r5, [pc, #24]	; (800757c <_close_r+0x1c>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7f9 fff5 	bl	800155a <_close>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_close_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_close_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	20000324 	.word	0x20000324

08007580 <fiprintf>:
 8007580:	b40e      	push	{r1, r2, r3}
 8007582:	b503      	push	{r0, r1, lr}
 8007584:	4601      	mov	r1, r0
 8007586:	ab03      	add	r3, sp, #12
 8007588:	4805      	ldr	r0, [pc, #20]	; (80075a0 <fiprintf+0x20>)
 800758a:	f853 2b04 	ldr.w	r2, [r3], #4
 800758e:	6800      	ldr	r0, [r0, #0]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	f7ff fe31 	bl	80071f8 <_vfiprintf_r>
 8007596:	b002      	add	sp, #8
 8007598:	f85d eb04 	ldr.w	lr, [sp], #4
 800759c:	b003      	add	sp, #12
 800759e:	4770      	bx	lr
 80075a0:	20000010 	.word	0x20000010

080075a4 <_fstat_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	; (80075c4 <_fstat_r+0x20>)
 80075a8:	2300      	movs	r3, #0
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	f7f9 ffde 	bl	8001572 <_fstat>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	d102      	bne.n	80075c0 <_fstat_r+0x1c>
 80075ba:	682b      	ldr	r3, [r5, #0]
 80075bc:	b103      	cbz	r3, 80075c0 <_fstat_r+0x1c>
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	bf00      	nop
 80075c4:	20000324 	.word	0x20000324

080075c8 <_isatty_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	; (80075e4 <_isatty_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7f9 ffdd 	bl	8001592 <_isatty>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_isatty_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_isatty_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20000324 	.word	0x20000324

080075e8 <_lseek_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	; (8007608 <_lseek_r+0x20>)
 80075ec:	4604      	mov	r4, r0
 80075ee:	4608      	mov	r0, r1
 80075f0:	4611      	mov	r1, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7f9 ffd6 	bl	80015a8 <_lseek>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_lseek_r+0x1e>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_lseek_r+0x1e>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	20000324 	.word	0x20000324

0800760c <__ascii_mbtowc>:
 800760c:	b082      	sub	sp, #8
 800760e:	b901      	cbnz	r1, 8007612 <__ascii_mbtowc+0x6>
 8007610:	a901      	add	r1, sp, #4
 8007612:	b142      	cbz	r2, 8007626 <__ascii_mbtowc+0x1a>
 8007614:	b14b      	cbz	r3, 800762a <__ascii_mbtowc+0x1e>
 8007616:	7813      	ldrb	r3, [r2, #0]
 8007618:	600b      	str	r3, [r1, #0]
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	1e10      	subs	r0, r2, #0
 800761e:	bf18      	it	ne
 8007620:	2001      	movne	r0, #1
 8007622:	b002      	add	sp, #8
 8007624:	4770      	bx	lr
 8007626:	4610      	mov	r0, r2
 8007628:	e7fb      	b.n	8007622 <__ascii_mbtowc+0x16>
 800762a:	f06f 0001 	mvn.w	r0, #1
 800762e:	e7f8      	b.n	8007622 <__ascii_mbtowc+0x16>

08007630 <__malloc_lock>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__malloc_lock+0x8>)
 8007632:	f7ff b8c0 	b.w	80067b6 <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	20000318 	.word	0x20000318

0800763c <__malloc_unlock>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__malloc_unlock+0x8>)
 800763e:	f7ff b8bb 	b.w	80067b8 <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	20000318 	.word	0x20000318

08007648 <_read_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_read_r+0x20>)
 800764c:	4604      	mov	r4, r0
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	2200      	movs	r2, #0
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f7f9 ff46 	bl	80014e8 <_read>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_read_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_read_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20000324 	.word	0x20000324

0800766c <__ascii_wctomb>:
 800766c:	b149      	cbz	r1, 8007682 <__ascii_wctomb+0x16>
 800766e:	2aff      	cmp	r2, #255	; 0xff
 8007670:	bf85      	ittet	hi
 8007672:	238a      	movhi	r3, #138	; 0x8a
 8007674:	6003      	strhi	r3, [r0, #0]
 8007676:	700a      	strbls	r2, [r1, #0]
 8007678:	f04f 30ff 	movhi.w	r0, #4294967295
 800767c:	bf98      	it	ls
 800767e:	2001      	movls	r0, #1
 8007680:	4770      	bx	lr
 8007682:	4608      	mov	r0, r1
 8007684:	4770      	bx	lr

08007686 <abort>:
 8007686:	b508      	push	{r3, lr}
 8007688:	2006      	movs	r0, #6
 800768a:	f000 f82b 	bl	80076e4 <raise>
 800768e:	2001      	movs	r0, #1
 8007690:	f7f9 ff20 	bl	80014d4 <_exit>

08007694 <_raise_r>:
 8007694:	291f      	cmp	r1, #31
 8007696:	b538      	push	{r3, r4, r5, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	460d      	mov	r5, r1
 800769c:	d904      	bls.n	80076a8 <_raise_r+0x14>
 800769e:	2316      	movs	r3, #22
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076aa:	b112      	cbz	r2, 80076b2 <_raise_r+0x1e>
 80076ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076b0:	b94b      	cbnz	r3, 80076c6 <_raise_r+0x32>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f830 	bl	8007718 <_getpid_r>
 80076b8:	462a      	mov	r2, r5
 80076ba:	4601      	mov	r1, r0
 80076bc:	4620      	mov	r0, r4
 80076be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c2:	f000 b817 	b.w	80076f4 <_kill_r>
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00a      	beq.n	80076e0 <_raise_r+0x4c>
 80076ca:	1c59      	adds	r1, r3, #1
 80076cc:	d103      	bne.n	80076d6 <_raise_r+0x42>
 80076ce:	2316      	movs	r3, #22
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	2001      	movs	r0, #1
 80076d4:	e7e7      	b.n	80076a6 <_raise_r+0x12>
 80076d6:	2400      	movs	r4, #0
 80076d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076dc:	4628      	mov	r0, r5
 80076de:	4798      	blx	r3
 80076e0:	2000      	movs	r0, #0
 80076e2:	e7e0      	b.n	80076a6 <_raise_r+0x12>

080076e4 <raise>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <raise+0xc>)
 80076e6:	4601      	mov	r1, r0
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f7ff bfd3 	b.w	8007694 <_raise_r>
 80076ee:	bf00      	nop
 80076f0:	20000010 	.word	0x20000010

080076f4 <_kill_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d07      	ldr	r5, [pc, #28]	; (8007714 <_kill_r+0x20>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	f7f9 fed7 	bl	80014b4 <_kill>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d102      	bne.n	8007710 <_kill_r+0x1c>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	b103      	cbz	r3, 8007710 <_kill_r+0x1c>
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	bd38      	pop	{r3, r4, r5, pc}
 8007712:	bf00      	nop
 8007714:	20000324 	.word	0x20000324

08007718 <_getpid_r>:
 8007718:	f7f9 bec4 	b.w	80014a4 <_getpid>

0800771c <_init>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr

08007728 <_fini>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr
